<?xml version="1.0" encoding="utf-8"?>
<Techniques>
 <Technique id="T1548" name="Abuse Elevation Control Mechanism">
  Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.
  <Tactics>
   Privilege Escalation, Defense Evasion
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Check for common UAC bypass weaknesses on Windows systems to be aware of the risk posture and address issues where appropriate.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    System settings can prevent applications from running that haven't been downloaded from legitimate repositories which may help mitigate some of these issues. Not allowing unsigned applications from being run may also mitigate some risk.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Applications with known vulnerabilities or known shell escapes should not have the setuid or setgid bits set to reduce potential damage if an application is compromised. Additionally, the number of programs with setuid or setgid bits set should be minimized across a system. Ensuring that the sudo tty_tickets setting is enabled will prevent this leakage across tty sessions.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Remove users from the local administrator group on systems.By requiring a password, even if an adversary can get terminal access, they must know the password to run anything in the sudoers file. Setting the timestamp_timeout to 0 will require the user to input their password every time sudo is executed.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    The sudoers file should be strictly edited such that passwords are always required and that users can't spawn risky processes as users with higher privilege.
   </Mitigation>
   <Mitigation id="M1052" name="User Account Control">
    Although UAC bypass techniques exist, it is still prudent to use the highest enforcement level for UAC when possible and mitigate bypass opportunities that exist with techniques such as DLL Search Order Hijacking.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Metadata | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation | Process Metadata
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1548.001" name="Abuse Elevation Control Mechanism: Setuid and Setgid">
  An adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) user’s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively. Normally an application is run in the current user’s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges.
  <Tactics>
   Privilege Escalation, Defense Evasion
  </Tactics>
  <Platforms>
   Linux, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0401" name="Exaramel for Linux">
    Exaramel for Linux can execute commands with high privileges via a specific binary with setuid functionality.
   </Example>
   <Example id="S0276" name="Keydnap">
    Keydnap adds the setuid flag to a binary so it can easily elevate in the future.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1028" name="Operating System Configuration">
    Applications with known vulnerabilities or known shell escapes should not have the setuid or setgid bits set to reduce potential damage if an application is compromised. Additionally, the number of programs with setuid or setgid bits set should be minimized across a system.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Metadata | File Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1548.002" name="Abuse Elevation Control Mechanism: Bypass User Account Control">
  Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.
  <Tactics>
   Privilege Escalation, Defense Evasion
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Effective_Permissions>
   Administrator
  </Effective_Permissions>
  <Defense_Bypassed>
   Windows User Account Control
  </Defense_Bypassed>
  <Examples>
   <Example id="S0584" name="AppleJeus">
    AppleJeus has presented the user with a UAC prompt to elevate privileges while installing.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has bypassed UAC.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 has a function in the initial dropper to bypass Windows UAC in order to execute the next payload with higher privileges.
   </Example>
   <Example id="S0129" name="AutoIt backdoor">
    AutoIt backdoor attempts to escalate privileges by bypassing User Access Control.
   </Example>
   <Example id="S0640" name="Avaddon">
    Avaddon bypasses UAC using the CMSTPLUA COM interface.
   </Example>
   <Example id="S0606" name="Bad Rabbit">
    Bad Rabbit has attempted to bypass UAC and gain elevated administrative privileges.
   </Example>
   <Example id="S0570" name="BitPaymer">
    BitPaymer can suppress UAC prompts by setting the HKCU\Software\Classes\ms-settings\shell\open\command registry key on Windows 10 or HKCU\Software\Classes\mscfile\shell\open\command on Windows 7 and launching the eventvwr.msc process, which launches BitPaymer with elevated privileges.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    BlackEnergy attempts to bypass default User Access Control (UAC) settings by exploiting a backward-compatibility setting found in Windows 7 and later.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has used a Windows 10 specific tool and xxmm to bypass UAC for privilege escalation.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee has the ability to bypass UAC to deploy post exploitation tools with elevated privileges.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling has the ability to bypass UAC using a passuac.dll file.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has bypassed UAC.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can use a number of known techniques to bypass Windows UAC.
   </Example>
   <Example id="S0527" name="CSPY Downloader">
    CSPY Downloader can bypass UAC using the SilentCleanup task to execute the binary with elevated privileges.
   </Example>
   <Example id="S0134" name="Downdelph">
    Downdelph bypasses UAC to escalate privileges by using a custom "RedirectEXE" shim database.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has used the Fodhelper UAC bypass technique to gain elevated privileges.
   </Example>
   <Example id="S0363" name="Empire">
    Empire includes various modules to attempt to bypass UAC for escalation of privileges.
   </Example>
   <Example id="G0120" name="Evilnum">
    Evilnum has used PowerShell to bypass UAC.
   </Example>
   <Example id="S0182" name="FinFisher">
    FinFisher performs UAC bypass.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can bypass UAC to elevate process privileges on a compromised host.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can bypass UAC by registering as the default handler for .MSC files.
   </Example>
   <Example id="S0132" name="H1N1">
    H1N1 bypasses user access control by using a DLL hijacking vulnerability in the Windows Update Standalone Installer (wusa.exe).
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can use fileless UAC bypass and create an elevated COM object to escalate privileges.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic has 2 methods for elevating integrity. It can bypass UAC through eventvwr.exe and sdclt.exe.
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS will perform UAC bypass either through fodhelper.exe or eventvwr.exe.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has bypassed UAC by performing token impersonation as well as an RPC-based method, this included bypassing UAC set to "AlwaysNotify".
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has utilized multiple techniques to bypass UAC.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater uses various techniques to bypass UAC.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, the threat actors used the malicious NTWDBLIB.DLL and cliconfig.exe to bypass UAC protections.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork bypassed User Access Control (UAC).
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon installer can use UAC bypass techniques to install the payload.
   </Example>
   <Example id="S0254" name="PLAINTEE">
    An older variant of PLAINTEE performs UAC bypass.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 can utilize multiple methods to bypass UAC.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can bypass Windows UAC through either DLL hijacking, eventvwr, or appPaths.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT can generate a UAC pop-up Window to prompt the target user to run a command as the administrator.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can use UACMe for privilege escalation.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession can bypass UAC to escalate privileges.
   </Example>
   <Example id="S0332" name="Remcos">
    Remcos has a command for UAC bypassing.
   </Example>
   <Example id="S0148" name="RTM">
    RTM can attempt to run the program as admin, then show a fake error message and a legitimate UAC bypass prompt to the user in an attempt to socially engineer the user into escalating privileges.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has attempted to bypass UAC using fodhelper.exe to escalate privileges.
   </Example>
   <Example id="S0074" name="Sakula">
    Sakula contains UAC bypass code for both 32- and 64-bit systems.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon attempts to disable UAC remote restrictions by modifying the Registry.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat has hijacked the cryptbase.dll within migwiz.exe to escalate privileges. This prevented the User Access Control window from appearing.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY contains a number of modules that can bypass UAC, including through Window's Device Manager, Manage Optional Features, and an image hijack on the .msc file extension.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    A Threat Group-3390 tool can use a public UAC bypass method to elevate privileges.
   </Example>
   <Example id="S0116" name="UACMe">
    UACMe contains many methods for bypassing Windows User Account Control on multiple versions of the operating system.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT can use sdclt.exe to bypass UAC in Windows 10 to escalate privileges; for older Windows versions WarzoneRAT can use the IFileOperation exploit to bypass the UAC module.
   </Example>
   <Example id="S0612" name="WastedLocker">
    WastedLocker can perform a UAC bypass if it is not executed with administrator rights or if the infected host runs Windows Vista or later.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    Winnti for Windows can use a variant of the sysprep UAC bypass.
   </Example>
   <Example id="S0230" name="ZeroT">
    Many ZeroT samples can perform UAC bypass by using eventvwr.exe to execute a malicious file.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Check for common UAC bypass weaknesses on Windows systems to be aware of the risk posture and address issues where appropriate.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Remove users from the local administrator group on systems.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Consider updating Windows to the latest version and patch level to utilize the latest protective measures against UAC bypass.
   </Mitigation>
   <Mitigation id="M1052" name="User Account Control">
    Although UAC bypass techniques exist, it is still prudent to use the highest enforcement level for UAC when possible and mitigate bypass opportunities that exist with techniques such as DLL Search Order Hijacking.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation | Process Metadata
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1548.003" name="Abuse Elevation Control Mechanism: Sudo and Sudo Caching">
  Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.
  <Tactics>
   Privilege Escalation, Defense Evasion
  </Tactics>
  <Platforms>
   Linux, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Effective_Permissions>
   root
  </Effective_Permissions>
  <Examples>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can use sudo to run a command.
   </Example>
   <Example id="S0281" name="Dok">
    Dok adds admin  ALL=(ALL) NOPASSWD: ALL to the /etc/sudoers file.
   </Example>
   <Example id="S0279" name="Proton">
    Proton modifies the tty_tickets line in the sudoers file.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1028" name="Operating System Configuration">
    Ensuring that the tty_tickets setting is enabled will prevent this leakage across tty sessions.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    By requiring a password, even if an adversary can get terminal access, they must know the password to run anything in the sudoers file. Setting the timestamp_timeout to 0 will require the user to input their password every time sudo is executed.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    The sudoers file should be strictly edited such that passwords are always required and that users can't spawn risky processes as users with higher privilege.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation | Process Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1548.004" name="Abuse Elevation Control Mechanism: Elevated Execution with Prompt">
  Adversaries may leverage the AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials. The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified.
  <Tactics>
   Privilege Escalation, Defense Evasion
  </Tactics>
  <Platforms>
   macOS
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Effective_Permissions>
   root
  </Effective_Permissions>
  <Examples>
   <Example id="S0402" name="OSX/Shlayer">
    OSX/Shlayer can escalate privileges to root by asking the user for credentials.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    System settings can prevent applications from running that haven't been downloaded through the Apple Store which may help mitigate some of these issues. Not allowing unsigned applications from being run may also mitigate some risk.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1134" name="Access Token Manipulation">
  Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Effective_Permissions>
   SYSTEM
  </Effective_Permissions>
  <Defense_Bypassed>
   Heuristic Detection, Host Forensic Analysis, System Access Controls, Windows User Account Control
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-633
  </CAPEC_ID>
  <Examples>
   <Example id="S0622" name="AppleSeed">
    AppleSeed can gain system level privilege by passing SeDebugPrivilege to the AdjustTokenPrivilege API.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has used JuicyPotato to abuse the SeImpersonate token privilege to escalate from web application pool accounts to NT Authority\SYSTEM.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba has used SeDebugPrivilege and AdjustTokenPrivileges to elevate privileges.
   </Example>
   <Example id="S0038" name="Duqu">
    Duqu examines running system processes for tokens that have specific system privileges. If it finds one, it will copy the token and store it for later use. Eventually it will start new processes with the stored token attached. It can also steal tokens to acquire administrative privileges.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can use PowerSploit's Invoke-TokenManipulation to manipulate access tokens.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used has used Metasploit’s named-pipe impersonation technique to escalate privileges.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can use token manipulation to bypass UAC on Windows7 systems.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper can use AdjustTokenPrivileges to grant itself privileges for debugging with SeDebugPrivilege, creating backups with SeBackupPrivilege, loading drivers with SeLoadDriverPrivilege, and shutting down a local system with SeShutdownPrivilege.
   </Example>
   <Example id="S0203" name="Hydraq">
    Hydraq creates a backdoor through which remote attackers can adjust token privileges.
   </Example>
   <Example id="S0607" name="KillDisk">
    KillDisk has attempted to get the access token of a process by calling OpenProcessToken. If KillDisk gets the access token, then it attempt to modify the token privileges with AdjustTokenPrivileges.
   </Example>
   <Example id="S0576" name="MegaCortex">
    MegaCortex can enable SeDebugPrivilege and adjust token privileges.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 can use Invoke-TokenManipulation for manipulating tokens.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit's Invoke-TokenManipulation Exfiltration module can be used to manipulate tokens.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk has attempted to adjust its token privileges to have the SeDebugPrivilege.
   </Example>
   <Example id="S0633" name="Sliver">
    Sliver has the ability to manipulate user tokens on targeted Windows systems.
   </Example>
   <Example id="S0058" name="SslMM">
    SslMM contains a feature to manipulate process privileges and tokens.
   </Example>
   <Example id="S0562" name="SUNSPOT">
    SUNSPOT modified its security token to grants itself debugging privileges by adding SeDebugPrivilege.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1026" name="Privileged Account Management">
    Limit permissions so that users and user groups cannot create tokens. This setting should be defined for the local system account only. GPO: Computer Configuration &gt;
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    An adversary must already have administrator level access on the local system to make full use of this technique; be sure to restrict users and accounts to the least privileges they require.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Modification
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation | Process Metadata
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1134.001" name="Access Token Manipulation: Token Impersonation/Theft">
  Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using DuplicateToken(Ex). The token can then be used with ImpersonateLoggedOnUser to allow the calling thread to impersonate a logged on user's security context, or with SetThreadToken to assign the impersonated token to a thread.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Defense_Bypassed>
   File system access controls, System access controls, Windows User Account Control
  </Defense_Bypassed>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has used CVE-2015-1701 to access the SYSTEM token and copy it into the current process as part of privilege escalation.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has the ability to duplicate a token from ntprint.exe.
   </Example>
   <Example id="S0570" name="BitPaymer">
    BitPaymer can use the tokens of users to create processes on infected systems.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can steal access tokens from exiting processes.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has used a malicious framework designed to impersonate the lsass.exe/vmtoolsd.exe token.
   </Example>
   <Example id="S0182" name="FinFisher">
    FinFisher uses token manipulation with NtFilterToken as part of UAC bypass.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum can impersonate a logged-on user's security context using a call to the ImpersonateLoggedOnUser API.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can obtain a list of SIDs and provide the option for selecting process tokens to impersonate.
   </Example>
   <Example id="S0496" name="REvil">
    REvil can obtain the token from the user that launched the explorer.exe process to avoid affecting the desktop of the SYSTEM user.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon can impersonate tokens using LogonUser, ImpersonateLoggedOnUser, and ImpersonateNamedPipeClient.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can find a process owned by a specific user and impersonate the associated token.
   </Example>
   <Example id="S0623" name="Siloscape">
    Siloscape impersonates the main thread of CExecSvc.exe by calling NtImpersonateThread.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet attempts to impersonate an anonymous token to enumerate bindings in the service control manager.
   </Example>
   <Example id="S1011" name="Tarrask">
    Tarrask leverages token theft to obtain lsass.exe security permissions.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1026" name="Privileged Account Management">
    Limit permissions so that users and user groups cannot create tokens. This setting should be defined for the local system account only. GPO: Computer Configuration &gt;
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    An adversary must already have administrator level access on the local system to make full use of this technique; be sure to restrict users and accounts to the least privileges they require.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1134.002" name="Access Token Manipulation: Create Process with Token">
  Adversaries may create a new process with a different token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as CreateProcessWithTokenW and runas.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Defense_Bypassed>
   File system access controls, System access controls, Windows User Account Control
  </Defense_Bypassed>
  <Examples>
   <Example id="S0456" name="Aria-body">
    Aria-body has the ability to execute a process using runas.
   </Example>
   <Example id="S0344" name="Azorult">
    Azorult can call WTSQueryUserToken and CreateProcessAsUser to start a new process with local system privileges.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot grabs a user token using WTSQueryUserToken and then creates a process by impersonating a logged-on user.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can use Invoke-RunAs to make tokens.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has duplicated the token of a high integrity process to spawn an instance of cmd.exe under an impersonated user.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group keylogger KiloAlfa obtains user tokens from interactive sessions to execute itself with API call CreateProcessAsUserA under that user's context.
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon can attempt to gain administrative privileges using token impersonation.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 can use Invoke-RunAs to make tokens.
   </Example>
   <Example id="S0496" name="REvil">
    REvil can launch an instance of itself with administrative rights using runas.
   </Example>
   <Example id="G0010" name="Turla">
    Turla RPC backdoors can impersonate or steal process tokens before executing commands.
   </Example>
   <Example id="S0689" name="WhisperGate">
    The WhisperGate third stage can use the AdvancedRun.exe tool to execute commands in the context of the Windows TrustedInstaller group via %TEMP%\AdvancedRun.exe" /EXEFilename "C:\Windows\System32\sc.exe" /WindowState 0 /CommandLine "stop WinDefend" /StartDirectory "" /RunAs 8 /Run.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell has a command called RunAs, which creates a new process as another user or process context.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1026" name="Privileged Account Management">
    Limit permissions so that users and user groups cannot create tokens. This setting should be defined for the local system account only. GPO: Computer Configuration &gt;
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    An adversary must already have administrator level access on the local system to make full use of this technique; be sure to restrict users and accounts to the least privileges they require.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1134.003" name="Access Token Manipulation: Make and Impersonate Token">
  Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the LogonUser function. The function will return a copy of the new session's access token and the adversary can use SetThreadToken to assign the token to a thread.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Effective_Permissions>
   SYSTEM
  </Effective_Permissions>
  <Defense_Bypassed>
   File system access controls, System access controls, Windows User Account Control
  </Defense_Bypassed>
  <Examples>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can make tokens from known credentials.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1026" name="Privileged Account Management">
    Limit permissions so that users and user groups cannot create tokens. This setting should be defined for the local system account only. GPO: Computer Configuration &gt;
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    An adversary must already have administrator level access on the local system to make full use of this technique; be sure to restrict users and accounts to the least privileges they require.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1134.004" name="Access Token Manipulation: Parent PID Spoofing">
  Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the CreateProcess API call, which supports a parameter that defines the PPID to use.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Defense_Bypassed>
   Heuristic Detection, Host Forensic Analysis
  </Defense_Bypassed>
  <Examples>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can spawn processes with alternate PPIDs.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has used parent PID spoofing to spawn a new cmd process using CreateProcessW and a handle to Taskmgr.exe.
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon can use parent PID spoofing to elevate privileges.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation | Process Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1134.005" name="Access Token Manipulation: SID-History Injection">
  Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM
  </Permissions_Required>
  <Examples>
   <Example id="S0363" name="Empire">
    Empire can add a SID-History to a user if on a domain controller.
   </Example>
   <Example id="S0002" name="Mimikatz">
    Mimikatz's MISC::AddSid module can appended any SID or user/group account to a user's SID-History. Mimikatz also utilizes SID-History Injection to expand the scope of other components such as generated Kerberos Golden Tickets and DCSync beyond a single domain.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1015" name="Active Directory Configuration">
    Clean up SID-History attributes after legitimate account migration is complete.Consider applying SID Filtering to interforest trusts, such as forest trusts and external trusts, to exclude SID-History from requests to access domain resources. SID Filtering ensures that any authentication requests over a trust only contain SIDs of security principals from the trusted domain (i.e preventing the trusted domain from claiming a user has membership in groups outside of the domain).SID Filtering of forest trusts is enabled by default, but may have been disabled in some cases to allow a child domain to transitively access forest trusts. SID Filtering of external trusts is automatically enabled on all created external trusts using Server 2003 or later domain controllers.  If a domain within a forest is untrustworthy then it should not be a member of the forest. In this situation it is necessary to first split the trusted and untrusted domains into separate forests where SID Filtering can be applied to an interforest trust
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1531" name="Account Access Removal">
  Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform a System Shutdown/Reboot to set malicious changes into place.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Impact_Type>
   Availability
  </Impact_Type>
  <Examples>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has removed a targeted organization's global admin accounts to lock the organization out of all access.
   </Example>
   <Example id="S0372" name="LockerGoga">
    LockerGoga has been observed changing account passwords and logging off current users.
   </Example>
   <Example id="S0576" name="MegaCortex">
    MegaCortex has changed user account passwords and logged users off the system.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor has the ability to change the password of local users on compromised hosts and can log off users.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Modification
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Deletion | User Account Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1087" name="Account Discovery">
  Adversaries may attempt to get a listing of accounts on a system or within an environment. This information can help adversaries determine which accounts exist to aid in follow-on behavior.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-575
  </CAPEC_ID>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 obtained a list of users and their roles from an Exchange server using Get-ManagementRoleAssignment.
   </Example>
   <Example id="S0445" name="ShimRatReporter">
    ShimRatReporter listed all non-privileged and privileged accounts available on the machine.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET attempts to discover accounts from various locations such as a user's Evernote, AppleID, Telegram, Skype, and WeChat data.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1028" name="Operating System Configuration">
    Prevent administrator accounts from being enumerated when an application is elevating through UAC since it can lead to the disclosure of account names. The Registry key is located HKLM\ SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\CredUI\EnumerateAdministrators. It can be disabled through GPO: Computer Configuration &gt;
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1087.001" name="Account Discovery: Local Account">
  Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0018" name="admin@338">
    admin@338 actors used the following commands following exploitation of a machine with LOWBALL malware to enumerate user accounts: net user &gt;&gt; %temp%\download net user /domain &gt;&gt; %temp%\download
   </Example>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla can collect account information from the victim’s machine.
   </Example>
   <Example id="G0006" name="APT1">
    APT1 used the commands net localgroup,net user, and net group to find accounts on the system.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has used a tool that can obtain info about local and global group users, power users, and administrators.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 enumerated administrative users using the commands net localgroup administrators.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot gathers domain and account names/information through process monitoring.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can identify administrator accounts on an infected host.
   </Example>
   <Example id="S0570" name="BitPaymer">
    BitPaymer can enumerate the sessions for each user logged onto the infected host.
   </Example>
   <Example id="S0521" name="BloodHound">
    BloodHound can identify users with local administrator rights.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used net user for account discovery.
   </Example>
   <Example id="S0244" name="Comnie">
    Comnie uses the net user command.
   </Example>
   <Example id="S0038" name="Duqu">
    The discovery modules used with Duqu can collect information on accounts and permissions.
   </Example>
   <Example id="S0081" name="Elise">
    Elise executes net user after initial communication is made to the remote server.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can acquire local and domain user account information.
   </Example>
   <Example id="S0091" name="Epic">
    Epic gathers a list of all user accounts, privilege classes, and time of last logon.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has accessed ntuser.dat and UserClass.dat on compromised hosts.
   </Example>
   <Example id="S0049" name="GeminiDuke">
    GeminiDuke collects information on local user accounts from the victim.
   </Example>
   <Example id="S0537" name="HyperStack">
    HyperStack can enumerate all account names on a remote share.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole has a command to list account information on the victim’s machine.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar gathers information on local groups and members on the victim’s machine.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang performs account discovery using commands such as net localgroup administrators and net group "REDACTED" /domain on specific permissions groups.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs collects a list of accounts with the command net users.
   </Example>
   <Example id="S1015" name="Milan">
    Milan has run C:\Windows\system32\cmd.exe /c cmd /c dir c:\users\ /s 2&gt;&amp;1 to discover local accounts.
   </Example>
   <Example id="S0084" name="Mis-Type">
    Mis-Type may create a file containing the results of the command cmd.exe /c net user {Username}.
   </Example>
   <Example id="G1009" name="Moses Staff">
    Moses Staff has collected the administrator username from a compromised host.
   </Example>
   <Example id="S0233" name="MURKYTOP">
    MURKYTOP has the capability to retrieve information about users on remote hosts.
   </Example>
   <Example id="S0039" name="Net">
    Commands under net user can be used in Net to gather information about and manipulate user accounts.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has run net user, net user /domain, net group "domain admins" /domain, and net group "Exchange Trusted Subsystem" /domain to get account listings on a victim.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used the net user command to gather account information.
   </Example>
   <Example id="S0165" name="OSInfo">
    OSInfo enumerates local and domain users
   </Example>
   <Example id="S0598" name="P.A.S. Webshell">
    P.A.S. Webshell can display the /etc/passwd file on a compromised host.
   </Example>
   <Example id="S0453" name="Pony">
    Pony has used the NetUserEnum function to enumerate local accounts.
   </Example>
   <Example id="G0033" name="Poseidon Group">
    Poseidon Group searches for administrator accounts on both the local victim machine and the network.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 can enumerate local and domain user account information.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit's Get-ProcessTokenGroup Privesc-PowerUp module can enumerate all SIDs associated with its current token.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS can retrieve usernames from compromised hosts.
   </Example>
   <Example id="S0196" name="PUNCHBUGGY">
    PUNCHBUGGY can gather user names.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy uses PowerView and Pywerview to perform discovery commands such as net user, net group, net local group, etc.
   </Example>
   <Example id="S0241" name="RATANKBA">
    RATANKBA uses the net user command.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec can obtain a list of users.
   </Example>
   <Example id="S0085" name="S-Type">
    S-Type has run the command net user on a victim.
   </Example>
   <Example id="S0063" name="SHOTPUT">
    SHOTPUT has a command to retrieve information about connected users.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM has used net.exe user and net.exe users to enumerate local accounts on a compromised host.
   </Example>
   <Example id="S0516" name="SoreFang">
    SoreFang can collect usernames from the local system via net.exe user.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet enumerates user accounts of the local host.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has used net user to conduct internal discovery of systems.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot collects the users of the system.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used net user to enumerate local accounts on the system.
   </Example>
   <Example id="S0452" name="USBferry">
    USBferry can use net user to gather information about local accounts.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has the ability to enumerate local admin accounts.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1028" name="Operating System Configuration">
    Prevent administrator accounts from being enumerated when an application is elevating through UAC since it can lead to the disclosure of account names. The Registry key is located at HKLM\ SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\CredUI\EnumerateAdministrators. It can be disabled through GPO: Computer Configuration &gt;
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0036" name="Group">
    Group Enumeration
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1087.002" name="Account Discovery: Domain Account">
  Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-575
  </CAPEC_ID>
  <Examples>
   <Example id="S0552" name="AdFind">
    AdFind can enumerate domain users.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used PowerShell to discover domain accounts by executing Get-ADUser and Get-ADGroupMember.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot gathers domain and account names/information through process monitoring.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar has the ability to identify domain administrator accounts.
   </Example>
   <Example id="S0521" name="BloodHound">
    BloodHound can collect information about domain users, including identification of domain admin accounts.
   </Example>
   <Example id="S0635" name="BoomBox">
    BoomBox has the ability to execute an LDAP query to enumerate the distinguished name, SAM account name, and display name for all domain users.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has used net user /domain to identify account information.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has has used net user /dom and net user Administrator to enumerate domain accounts including administrator accounts.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can determine if the user on an infected machine is in the admin or domain admin group.
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can enumerate the domain user accounts on a targeted system.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has used batch scripts to enumerate users on a victim domain controller.
   </Example>
   <Example id="S0105" name="dsquery">
    dsquery can be used to gather information on user accounts within a domain.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can acquire local and domain user account information.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used Metasploit’s PsExec NTDSGRAB module to obtain a copy of the victim's Active Directory database.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used the Softerra LDAP browser to browse documentation on service accounts.
   </Example>
   <Example id="S1022" name="IceApple">
    The IceApple Active Directory Querier module  can perform authenticated requests against an Active Directory server.
   </Example>
   <Example id="S0483" name="IcedID">
    IcedID can query LDAP to identify additional users on the network to infect.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang performs account discovery using commands such as net localgroup administrators and net group "REDACTED" /domain on specific permissions groups.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has used the AD Explorer tool to enumerate users on a victim's network.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has queried an active directory server to obtain the list of accounts, including administrator accounts.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used the Microsoft administration tool csvde.exe to export Active Directory data.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used cmd.exe net user /domain to enumerate domain users.
   </Example>
   <Example id="S0039" name="Net">
    Net commands used with the /domain flag can be used to gather information about and manipulate user accounts on the current domain.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has run net user, net user /domain, net group "domain admins" /domain, and net group "Exchange Trusted Subsystem" /domain to get account listings on a victim.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used the dsquery and dsget commands to get domain environment information and to query users in administrative groups.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used the net command to retrieve information about domain accounts.
   </Example>
   <Example id="S0165" name="OSInfo">
    OSInfo enumerates local and domain users
   </Example>
   <Example id="G0033" name="Poseidon Group">
    Poseidon Group searches for administrator accounts on both the local victim machine and the network.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 can enumerate local and domain user account information.
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER may collect user account information by running net user /domain or a series of other commands on a victim.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used a tool to query Active Directory using LDAP, discovering information about usernames listed in AD.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can use System.Security.AccessControl namespaces to retrieve domain user information.
   </Example>
   <Example id="S0516" name="SoreFang">
    SoreFang can enumerate domain accounts via net.exe user /domain.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet enumerates user accounts of the domain.
   </Example>
   <Example id="S0018" name="Sykipot">
    Sykipot may use net group "domain admins" /domain to display accounts in the "domain admins" permissions group and net localgroup "administrators" to list local system administrator group membership.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used net user /domain to enumerate domain accounts.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has the ability to enumerate domain admin accounts.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has identified domain admins through the use of "net group ‘Domain admins’" commands.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1028" name="Operating System Configuration">
    Prevent administrator accounts from being enumerated when an application is elevating through UAC since it can lead to the disclosure of account names. The Registry key is located at HKLM\ SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\CredUI\EnumerateAdministrators. It can be disabled through GPO: Computer Configuration &gt;
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0036" name="Group">
    Group Enumeration
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1087.003" name="Account Discovery: Email Account">
  Adversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Google Workspace, Office 365, Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0093" name="Backdoor.Oldrea">
    Backdoor.Oldrea collects address book information from Outlook.
   </Example>
   <Example id="S0635" name="BoomBox">
    BoomBox can execute an LDAP query to discover e-mail accounts for domain users.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has been observed leveraging a module that can scrape email addresses from Outlook.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can parse Outlook .pst files to extract e-mail addresses.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar can collect email accounts from Microsoft Outlook and Mozilla Thunderbird.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has used Powershell to discover email accounts.
   </Example>
   <Example id="S0413" name="MailSniper">
    MailSniper can be used to obtain account names from Exchange and Office 365 using the Get-GlobalAddressList cmdlet.
   </Example>
   <Example id="S0358" name="Ruler">
    Ruler can be used to enumerate Exchange users and dump the GAL.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team used malware to enumerate email settings, including usernames and passwords, from the M.E.Doc application.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used the tool EmailStealer to steal and send lists of e-mail addresses to a remote server.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot collects email addresses from Outlook.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1087.004" name="Account Discovery: Cloud Account">
  Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Office 365, SaaS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals can enumerate Azure AD users.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has conducted enumeration of Azure AD accounts.
   </Example>
   <Example id="S0684" name="ROADTools">
    ROADTools can enumerate Azure AD users.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Routinely check user permissions to ensure only the expected users have the ability to list IAM identities or otherwise discover cloud accounts.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit permissions to discover cloud accounts in accordance with least privilege. Organizations should limit the number of users within the organization with an IAM role that has administrative privileges, strive to reduce all permanent privileged role assignments, and conduct periodic entitlement reviews on IAM users, roles and policies.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1098" name="Account Manipulation">
  Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0022" name="APT3">
    APT3 has been known to add created accounts to local admin groups to maintain elevated access.
   </Example>
   <Example id="S0274" name="Calisto">
    Calisto adds permissions and remote logins to all users.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has added newly created accounts to the administrators group to maintain elevated access.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has added accounts to specific groups with net localgroup.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group malware WhiskeyDelta-Two contains a function that attempts to rename the administrator’s account.
   </Example>
   <Example id="S0002" name="Mimikatz">
    The Mimikatz credential dumper has been extended to include Skeleton Key domain controller authentication bypass functionality. The LSADUMP::ChangeNTLM and LSADUMP::SetNTLM modules can also manipulate the password hash of an account without knowing the clear text value.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team used the sp_addlinkedsrvlogin command in MS-SQL to create a link between a created account and other servers in the network.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM has added created user accounts to local Admin groups.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication for user and privileged accounts.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Configure access controls and firewalls to limit access to critical systems and domain controllers. Most cloud environments support separate virtual private cloud (VPC) instances that enable further segmentation of cloud systems.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Protect domain controllers by ensuring proper security configuration for critical servers to limit access by potentially unnecessary protocols and services, such as SMB file sharing.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Do not allow domain administrator accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Ensure that low-privileged user accounts do not have permissions to modify accounts or account-related policies.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Modification
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0036" name="Group">
    Group Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1098.001" name="Account Manipulation: Additional Cloud Credentials">
  Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Azure AD, IaaS, SaaS
  </Platforms>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 has added credentials to OAuth Applications and Service Principals.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication for user and privileged accounts. Consider enforcing multi-factor authentication for the CreateKeyPair and ImportKeyPair API calls through IAM policies.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Configure access controls and firewalls to limit access to critical systems and domain controllers. Most cloud environments support separate virtual private cloud (VPC) instances that enable further segmentation of cloud systems.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Do not allow domain administrator or root accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Ensure that low-privileged user accounts do not have permission to add access keys to accounts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Modification
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1098.002" name="Account Manipulation: Additional Email Delegate Permissions">
  Adversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Google Workspace, Office 365, Windows
  </Platforms>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has used a Powershell cmdlet to grant the ApplicationImpersonation role to a compromised account.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 added their own devices as allowed IDs for active sync using Set-CASMailbox, allowing it to obtain copies of victim mailboxes. It also added additional permissions (such as Mail.Read and Mail.ReadWrite) to compromised Application or Service Principals.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound granted compromised email accounts read access to the email boxes of additional targeted accounts. The group then was able to authenticate to the intended victim's OWA (Outlook Web Access) portal and read hundreds of email communications for information on Middle East organizations.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    If email delegation is not required, disable it. In Google Workspace this can be accomplished through the Google Admin console.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication for user and privileged accounts.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Do not allow domain administrator accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0036" name="Group">
    Group Modification
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1098.003" name="Account Manipulation: Additional Cloud Roles">
  An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Office 365, SaaS
  </Platforms>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 has granted company administrator privileges to a newly created service principal.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has added the global admin role to accounts they have created in the targeted organization's cloud instances.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication for user and privileged accounts.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Ensure that all accounts use the least privileges they require.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Ensure that low-privileged user accounts do not have permissions to add permissions to accounts or update IAM policies.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0002" name="User Account">
    User Account Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1098.004" name="Account Manipulation: SSH Authorized Keys">
  Adversaries may modify the SSH authorized_keys file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The authorized_keys file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under &lt;user-home&gt;/.ssh/authorized_keys. Users may edit the system’s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value "yes" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under /etc/ssh/sshd_config.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   IaaS, Linux, macOS
  </Platforms>
  <Examples>
   <Example id="S0482" name="Bundlore">
    Bundlore creates a new key pair with ssh-keygen and drops the newly created user key in authorized_keys to enable remote login.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has dropped an SSH-authorized key in the /root/.ssh folder in order to access a compromised server with SSH.
   </Example>
   <Example id="S0468" name="Skidmap">
    Skidmap has the ability to add the public key of its handlers to the authorized_keys file to maintain persistence on an infected host.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has added RSA keys in authorized_keys.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET will create an ssh key if necessary with the ssh-keygen -t rsa -f $HOME/.ssh/id_rsa -P command. XCSSET will upload a private key file to the server to remotely access the host without a password.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Disable SSH if it is not necessary on a host or restrict SSH access for specific users/groups using /etc/ssh/sshd_config.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Restrict access to the authorized_keys file.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    In cloud environments, ensure that only users who explicitly require the permissions to update instance metadata or configurations can do so.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1098.005" name="Account Manipulation: Device Registration">
  Adversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Azure AD, SaaS, Windows
  </Platforms>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals can register a device to Azure AD.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 registered devices in order to enable mailbox syncing via the Set-CASMailbox command.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Require multi-factor authentication to register devices in Azure AD.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Creation
   </Detection>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1583" name="Acquire Infrastructure">
  Adversaries may buy, lease, or rent infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services. Additionally, botnets are available for rent or purchase.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0038" name="Domain Name">
    Active DNS | Domain Registration | Passive DNS
   </Detection>
   <Detection id="DS0035" name="Internet Scan">
    Response Content | Response Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1583.001" name="Acquire Infrastructure: Domains">
  Adversaries may acquire domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <CAPEC_ID>
   CAPEC-630
  </CAPEC_ID>
  <Examples>
   <Example id="G0006" name="APT1">
    APT1 has registered hundreds of domains for use in operations.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 registered domains imitating NATO, OSCE security websites, Caucasus information resources, and other organizations.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has acquired C2 domains, sometimes through resellers.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has set up and operated websites to gather information and deliver malware.
   </Example>
   <Example id="G1002" name="BITTER">
    BITTER has registered a variety of domains to host malicious payloads and for C2.
   </Example>
   <Example id="C0010" name="C0010">
    For C0010, UNC3890 actors established domains that appeared to be legitimate services and entities, such as LinkedIn, Facebook, Office 365, and Pfizer.
   </Example>
   <Example id="C0011" name="C0011">
    For C0011, Transparent Tribe registered domains likely designed to appear relevant to student targets in India.
   </Example>
   <Example id="C0004" name="CostaRicto">
    For CostaRicto, the threat actors established domains, some of which appeared to spoof legitimate domains.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has registered domains for targeting intended victims.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has registered domains, intended to look like legitimate target domains, that have been used in watering hole attacks.
   </Example>
   <Example id="G1011" name="EXOTIC LILY">
    EXOTIC LILY has registered domains to spoof targeted organizations by changing the top-level domain (TLD) to ".us", ".co" or ".biz".
   </Example>
   <Example id="G0137" name="Ferocious Kitten">
    Ferocious Kitten has acquired domains imitating legitimate sites.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has registered look-alike domains for use in phishing campaigns.
   </Example>
   <Example id="C0007" name="FunnyDream">
    For FunnyDream, the threat actors registered a variety of domains.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has registered multiple domains to facilitate payload staging and C2.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has registered and operated domains for campaigns, often using a security or web technology theme or impersonating the targeted organization.
   </Example>
   <Example id="G0136" name="IndigoZebra">
    IndigoZebra has established domains, some of which were designed to look like official government domains, for their operations.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has registered domains to spoof targeted organizations and trusted third parties.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has acquired domains related to their campaigns to act as distribution points and C2 channels.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter has used dynamic DNS providers to create legitimate-looking subdomains for C2.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has established domains that impersonate legitimate entities to use for targeting efforts.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has registered fraudulent domains such as "mail-newyorker.com" and "news12.com.recover-session-service.site" to target specific victims with phishing attacks.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has registered malicious domains for use in intrusion campaigns.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda have acquired C2 domains prior to operations.
   </Example>
   <Example id="C0016" name="Operation Dust Storm">
    For Operation Dust Storm, the threat actors established domains as part of their operational infrastructure.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, threat actors registered domains for C2.
   </Example>
   <Example id="C0005" name="Operation Spalax">
    For Operation Spalax, the threat actors registered hundreds of domains using Duck DNS and DNS Exit.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has registered domain names and created URLs that are often designed to mimic or spoof legitimate websites, such as email login pages, online file sharing and storage websites, and password reset pages.
   </Example>
   <Example id="G0122" name="Silent Librarian">
    Silent Librarian has acquired domains to establish credential harvesting pages, often spoofing the target organization and using free top level domains .TK, .ML, .GA, .CF, and .GQ.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has registered domains to impersonate services such as Dropbox to distribute malware.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has obtained domains to host their payloads.
   </Example>
   <Example id="G0134" name="Transparent Tribe">
    Transparent Tribe has registered domains to mimic file sharing, government, defense, and research websites for use in targeted campaigns.
   </Example>
   <Example id="G0044" name="Winnti Group">
    Winnti Group has registered domains for C2 that mimicked sites of their intended targets.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has purchased domains for use in targeted campaigns.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    Organizations may intentionally register similar domains to their own to deter adversaries from creating typosquatting domains. Other facets of this technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0038" name="Domain Name">
    Active DNS | Domain Registration | Passive DNS
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1583.002" name="Acquire Infrastructure: DNS Server">
  Adversaries may set up their own Domain Name System (DNS) servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of hijacking existing DNS servers, adversaries may opt to configure and run their own DNS servers in support of operations.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0001" name="Axiom">
    Axiom has acquired dynamic DNS services for use in the targeting of intended victims.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has set up custom DNS servers to send commands to compromised hosts via TXT records.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.
  </Detections>
 </Technique>
 <Technique id="T1583.003" name="Acquire Infrastructure: Virtual Private Server">
  Adversaries may rent Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. By utilizing a VPS, adversaries can make it difficult to physically tie back operations to them. The use of cloud infrastructure can also make it easier for adversaries to rapidly provision, modify, and shut down their infrastructure.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0001" name="Axiom">
    Axiom has used VPS hosting providers in targeting of intended victims.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has acquired VPS infrastructure for use in malicious campaigns.
   </Example>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has operated from leased virtual private servers (VPS) in the United States.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has used VPS hosting providers for infrastructure.
   </Example>
   <Example id="G0088" name="TEMP.Veles">
    TEMP.Veles has used Virtual Private Server (VPS) infrastructure.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content | Response Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1583.004" name="Acquire Infrastructure: Server">
  Adversaries may buy, lease, or rent physical servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of compromising a third-party Server or renting a Virtual Private Server, adversaries may opt to configure and run their own servers in support of operations.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has acquired multiple servers for some of their operations, using each server for a different role.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM has used Taiwan-based servers that appear to be exclusive to GALLIUM.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has purchased hosting servers with virtual currency and prepaid cards.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has acquired servers to host their malicious tools.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors purchased hosted services to use for C2.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    For Operation Honeybee, at least one identified persona was used to register for a free account for a control server.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    For Operation Wocao, the threat actors purchased servers with Bitcoin to use during the operation.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has leased servers from resellers instead of leasing infrastructure directly from hosting companies to enable its operations.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content | Response Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1583.005" name="Acquire Infrastructure: Botnet">
  Adversaries may buy, lease, or rent a network of compromised systems that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Phishing, Endpoint Denial of Service, or Network Denial of Service.
  </Detections>
 </Technique>
 <Technique id="T1583.006" name="Acquire Infrastructure: Web Services">
  Adversaries may register for web services that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, adversaries can make it difficult to physically tie back operations to them.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0025" name="APT17">
    APT17 has created profile pages in Microsoft TechNet that were used as C2 infrastructure.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has used newly-created Blogspot pages for credential harvesting operations.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has registered algorithmically generated Twitter handles that are used for C2 by malware, such as HAMMERTOSS. APT29 has also used legitimate web services such as Dropbox and Constant Contact in their operations.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has set up Dropbox, Amazon S3, and Google Drive to host malicious downloads.
   </Example>
   <Example id="G0142" name="Confucius">
    Confucius has obtained cloud storage service accounts to host stolen data.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has established GitHub accounts to host their malware.
   </Example>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has acquired web services for use in C2 and exfiltration.
   </Example>
   <Example id="G0136" name="IndigoZebra">
    IndigoZebra created Dropbox accounts for their operations.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has hosted content used for targeting efforts via web services such as Blogspot.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has hosted malicious downloads on Github and Dropbox.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter has established GitHub accounts to host its toolsets.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has acquired Amazon S3 buckets to use in C2.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used file sharing services including OneHub to distribute tools.
   </Example>
   <Example id="C0013" name="Operation Sharpshooter">
    For Operation Sharpshooter, the threat actors used Dropbox to host lure documents and their first-stage downloader.
   </Example>
   <Example id="G1005" name="POLONIUM">
    POLONIUM has created and used legitimate Microsoft OneDrive accounts for their operations.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has created web accounts including Dropbox and GitHub for C2 and document exfiltration.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has used GitHub to host malware linked in spearphishing e-mails.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1583.007" name="Acquire Infrastructure: Serverless">
  Adversaries may purchase and configure serverless cloud infrastructure, such as Cloudflare Workers or AWS Lambda functions, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1595" name="Active Scanning">
  Adversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1595.001" name="Active Scanning: Scanning IP Blocks">
  Adversaries may scan victim IP blocks to gather information that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has scanned specific lists of target IP addresses.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1595.002" name="Active Scanning: Vulnerability Scanning">
  Adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has performed large-scale scans in an attempt to find vulnerable servers.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has conducted widespread scanning of target environments to identify vulnerabilities for exploit.
   </Example>
   <Example id="G0143" name="Aquatic Panda">
    Aquatic Panda has used publicly accessible DNS logging services to identify servers vulnerable to Log4j (CVE 2021-44228).
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has scanned targeted systems for vulnerable Citrix and Microsoft Exchange services.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has scanned for vulnerabilities in the public-facing servers of their targets.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has conducted widespread scanning to identify public-facing systems vulnerable to Log4j (CVE-2021-44228).
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has scanned network infrastructure for vulnerabilities as part of its operational planning.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has scanned for vulnerabilities in IoT devices and other related resources such as the Docker API.
   </Example>
   <Example id="G0123" name="Volatile Cedar">
    Volatile Cedar has performed vulnerability scans of the target server.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1595.003" name="Active Scanning: Wordlist Scanning">
  Adversaries may iteratively probe infrastructure using brute-forcing and crawling techniques. While this technique employs similar methods to Brute Force, its goal is the identification of content and infrastructure rather than the discovery of valid credentials. Wordlists used in these scans may contain generic, commonly used names and file extensions or terms specific to a particular software. Adversaries may also create custom, target-specific wordlists using data gathered from other Reconnaissance techniques (ex: Gather Victim Org Information, or Search Victim-Owned Websites).
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0123" name="Volatile Cedar">
    Volatile Cedar has used DirBuster and GoBuster to brute force web directories and DNS subdomains.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Remove or disable access to any systems, resources, and infrastructure that are not explicitly required to be available externally.
   </Mitigation>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1557" name="Adversary-in-the-Middle">
  Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.
  <Tactics>
   Credential Access, Collection
  </Tactics>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-94
  </CAPEC_ID>
  <Examples>
   <Example id="S0281" name="Dok">
    Dok proxies web traffic to potentially monitor and alter victim HTTP(S) traffic.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used modified versions of PHProxy to examine web traffic between the victim and the accessed website.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Disable legacy network protocols that may be used   to intercept network traffic if applicable, especially those that are not needed within an environment.
   </Mitigation>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Ensure that all wired and/or wireless traffic is encrypted appropriately. Use best practices for authentication protocols, such as Kerberos, and ensure web traffic that may contain credentials is protected by SSL/TLS.
   </Mitigation>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Use network appliances and host-based security software to block network traffic that is not necessary within the environment, such as legacy protocols that may be leveraged for AiTM conditions.
   </Mitigation>
   <Mitigation id="M1035" name="Limit Access to Resource Over Network">
    Limit access to network infrastructure and resources that can be used to reshape traffic or otherwise produce AiTM conditions.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that can identify traffic patterns indicative of AiTM activity can be used to mitigate activity at the network level.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Network segmentation can be used to isolate infrastructure components that do not require broad network access. This may mitigate, or at least alleviate, the scope of AiTM activity.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Train users to be suspicious about certificate errors. Adversaries may use their own certificates in an attempt to intercept HTTPS traffic. Certificate errors may arise when the application’s certificate does not match the one expected by the host.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1557.001" name="Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay">
  By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.
  <Tactics>
   Credential Access, Collection
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Examples>
   <Example id="S0363" name="Empire">
    Empire can use Inveigh to conduct name service poisoning for credential theft and associated relay attacks.
   </Example>
   <Example id="S0357" name="Impacket">
    Impacket modules like ntlmrelayx and smbrelayx can be used in conjunction with Network Sniffing and LLMNR/NBT-NS Poisoning and SMB Relay to gather NetNTLM credentials for Brute Force or relay attacks that can gain code execution.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group executed Responder using the command
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 can use Inveigh to conduct name service poisoning for credential theft and associated relay attacks.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can sniff plaintext network credentials and use NBNS Spoofing to poison name services.
   </Example>
   <Example id="S0174" name="Responder">
    Responder is used to poison name services to gather hashes and credentials from systems within a local network.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used the Invoke-Inveigh PowerShell cmdlets, likely for name service poisoning.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Disable LLMNR and NetBIOS in local computer security settings or by group policy if they are not needed within an environment.
   </Mitigation>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Use host-based security software to block LLMNR/NetBIOS traffic. Enabling SMB Signing can stop NTLMv2 relay attacks.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that can identify traffic patterns indicative of AiTM activity can be used to mitigate activity at the network level.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Network segmentation can be used to isolate infrastructure components that do not require broad network access. This may mitigate, or at least alleviate, the scope of AiTM activity.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1557.002" name="Adversary-in-the-Middle: ARP Cache Poisoning">
  Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.
  <Tactics>
   Credential Access, Collection
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0003" name="Cleaver">
    Cleaver has used custom tools to facilitate ARP cache poisoning.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Consider disabling updating the ARP cache on gratuitous ARP replies.
   </Mitigation>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Ensure that all wired and/or wireless traffic is encrypted appropriately. Use best practices for authentication protocols, such as Kerberos, and ensure web traffic that may contain credentials is protected by SSL/TLS.
   </Mitigation>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Consider enabling DHCP Snooping and Dynamic ARP Inspection on switches to create mappings between IP addresses requested via DHCP and ARP tables and tie the values to a port on the switch that may block bogus traffic.
   </Mitigation>
   <Mitigation id="M1035" name="Limit Access to Resource Over Network">
    Create static ARP entries for networked devices. Implementing static ARP entries may be infeasible for large networks.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that can identify traffic patterns indicative of AiTM activity can be used to mitigate activity at the network level.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Train users to be suspicious about certificate errors. Adversaries may use their own certificates in an attempt to intercept HTTPS traffic. Certificate errors may arise when the application’s certificate does not match the one expected by the host.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1557.003" name="Adversary-in-the-Middle: DHCP Spoofing">
  Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.
  <Tactics>
   Credential Access, Collection
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Consider filtering DHCP traffic on ports 67 and 68 to/from unknown or untrusted DHCP servers. Additionally, port security may also be enabled on layer switches. Furthermore, consider enabling DHCP snooping on layer 2 switches as it will prevent DHCP spoofing attacks and starvation attacks. Consider tracking available IP addresses through a script or a tool. Additionally, block DHCPv6 traffic and incoming router advertisements, especially if IPv6 is not commonly used in the network.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that can identify traffic patterns indicative of AiTM activity can be used to mitigate activity at the network level.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1071" name="Application Layer Protocol">
  Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0660" name="Clambling">
    Clambling has the ability to use Telnet for communication.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can conduct peer-to-peer communication over Windows named pipes encapsulated in the SMB protocol. All protocols use their standard assigned ports.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has used SMB for C2.
   </Example>
   <Example id="S0038" name="Duqu">
    Duqu uses a custom command and control protocol that communicates over commonly used ports, and is frequently encapsulated by application layer protocols.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has used an IRC channel for C2 communications.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can use the Stratum protocol on port 10001 for communication between the cryptojacking bot and the mining server.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound malware has used IRC for C2.
   </Example>
   <Example id="S0034" name="NETEAGLE">
    Adversaries can also use NETEAGLE to establish an RDP connection with a controller over TCP/7519.
   </Example>
   <Example id="S0019" name="Regin">
    The Regin malware platform supports many standard protocols, including SMB.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke issued wget requests from infected systems to the C2.
   </Example>
   <Example id="S0623" name="Siloscape">
    Siloscape connects to an IRC server for C2.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has used an IRC bot for C2 communications.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1071.001" name="Application Layer Protocol: Web Protocols">
  Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0066" name="3PARA RAT">
    3PARA RAT uses HTTP for command and control.
   </Example>
   <Example id="S0065" name="4H RAT">
    4H RAT uses HTTP for command and control.
   </Example>
   <Example id="S0469" name="ABK">
    ABK has the ability to use HTTP in communications with C2.
   </Example>
   <Example id="S1028" name="Action RAT">
    Action RAT can use HTTP to communicate with C2 servers.
   </Example>
   <Example id="S0045" name="ADVSTORESHELL">
    ADVSTORESHELL connects to port 80 of a C2 server using Wininet API. Data is exchanged via HTTP POSTs.
   </Example>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla has used HTTP for C2 communications.
   </Example>
   <Example id="S1025" name="Amadey">
    Amadey has used HTTP for C2 communications.
   </Example>
   <Example id="S0504" name="Anchor">
    Anchor has used HTTP and HTTPS in C2 communications.
   </Example>
   <Example id="S0584" name="AppleJeus">
    AppleJeus has sent data to its C2 server via POST requests.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed has the ability to communicate with C2 over HTTP.
   </Example>
   <Example id="G0026" name="APT18">
    APT18 uses HTTP for C2 communications.
   </Example>
   <Example id="G0073" name="APT19">
    APT19 used HTTP for C2 communications. APT19 also used an HTTP malware variant to communicate over HTTP for C2.
   </Example>
   <Example id="G0007" name="APT28">
    Later implants used by APT28, such as CHOPSTICK, use a blend of HTTP, HTTPS, and other legitimate channels for C2, depending on module configuration.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used HTTP for C2 and data exfiltration.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has used JavaScript that communicates over HTTP or HTTPS to attacker controlled domains to download additional frameworks. The group has also used downloaded encrypted payloads over HTTP.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has used HTTP for command and control.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 uses HTTPS to conceal C2 communications.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 used a backdoor, QUICKRIDE, to communicate to the C2 server over HTTP and HTTPS.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used HTTP in communications with C2.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used HTTP to download payloads for CVE-2019-19781 and CVE-2020-10189 exploits.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has used HTTP in C2 communications.
   </Example>
   <Example id="S1029" name="AuTo Stealer">
    AuTo Stealer can use HTTP to communicate with its C2 servers.
   </Example>
   <Example id="S0473" name="Avenger">
    Avenger has the ability to use HTTP in communication with C2.
   </Example>
   <Example id="S0475" name="BackConfig">
    BackConfig has the ability to use HTTPS for C2 communiations.
   </Example>
   <Example id="S0031" name="BACKSPACE">
    BACKSPACE uses HTTP as a transport to communicate with its command server.
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS establishes a backdoor over HTTP.
   </Example>
   <Example id="S0337" name="BadPatch">
    BadPatch uses HTTP for C2.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot uses HTTP for command and control communication.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can use HTTP and HTTPS over ports 80 and 443 in C2 communications.
   </Example>
   <Example id="S0470" name="BBK">
    BBK has the ability to use HTTP in communications with C2.
   </Example>
   <Example id="S0127" name="BBSRAT">
    BBSRAT uses GET and POST requests over HTTP or HTTPS for command and control to obtain commands and send ZLIB compressed data back to the C2 server.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has used HTTP for C2 communications.
   </Example>
   <Example id="G1002" name="BITTER">
    BITTER has used HTTP POST requests for C2.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    BlackEnergy communicates with its C2 server over HTTP.
   </Example>
   <Example id="S0564" name="BlackMould">
    BlackMould can send commands to C2 in the body of HTTP POST requests.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has used HTTPS over port 443 for command and control.
   </Example>
   <Example id="S0657" name="BLUELIGHT">
    BLUELIGHT can use HTTP/S for C2 using the Microsoft Graph API.
   </Example>
   <Example id="S0635" name="BoomBox">
    BoomBox has used HTTP POST requests for C2.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER malware has used HTTP for C2.
   </Example>
   <Example id="S0043" name="BUBBLEWRAP">
    BUBBLEWRAP can communicate using HTTP or HTTPS.
   </Example>
   <Example id="S0482" name="Bundlore">
    Bundlore uses HTTP requests for C2.
   </Example>
   <Example id="S0030" name="Carbanak">
    The Carbanak malware communicates to its command server using HTTP with an encrypted payload.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp has connected to C2 servers via HTTP.
   </Example>
   <Example id="S0335" name="Carbon">
    Carbon can use HTTP in C2 communications.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT is downloaded using HTTP over port 443.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes has used HTTP for C2 communications.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower can use HTTP to communicate with C2.
   </Example>
   <Example id="S0144" name="ChChes">
    ChChes communicates to its C2 server over HTTP and embeds data within the Cookie HTTP header.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used HTTPS for C2 communications.
   </Example>
   <Example id="S0020" name="China Chopper">
    China Chopper's server component executes code sent via HTTP POST commands.
   </Example>
   <Example id="S0023" name="CHOPSTICK">
    Various implementations of CHOPSTICK communicate with C2 over HTTP.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling has the ability to communicate over HTTP.
   </Example>
   <Example id="S0054" name="CloudDuke">
    One variant of CloudDuke uses HTTP and HTTPS for C2.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has used HTTPS for C2.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can use a custom command and control protocol that can be encapsulated in HTTP or HTTPS. All protocols use their standard assigned ports.
   </Example>
   <Example id="S0244" name="Comnie">
    Comnie uses HTTP for C2 communication.
   </Example>
   <Example id="S0126" name="ComRAT">
    ComRAT has used HTTP requests for command and control.
   </Example>
   <Example id="G0142" name="Confucius">
    Confucius has used HTTP for C2 communications.
   </Example>
   <Example id="S0137" name="CORESHELL">
    CORESHELL can communicate over HTTP for C2.
   </Example>
   <Example id="S0050" name="CosmicDuke">
    CosmicDuke can use HTTP or HTTPS for command and control to hard-coded C2 servers.
   </Example>
   <Example id="S0046" name="CozyCar">
    CozyCar's main method of communicating with its C2 servers is using HTTP or HTTPS.
   </Example>
   <Example id="S1023" name="CreepyDrive">
    CreepyDrive can use HTTPS for C2 using the Microsoft Graph API.
   </Example>
   <Example id="S1024" name="CreepySnail">
    CreepySnail can use HTTP for C2.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson can use a HTTP GET request to download its final payload.
   </Example>
   <Example id="S0538" name="Crutch">
    Crutch has conducted C2 communications with a Dropbox account using the HTTP API.
   </Example>
   <Example id="S0527" name="CSPY Downloader">
    CSPY Downloader can use GET requests to download additional payloads from C2.
   </Example>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink can download files via HTTP and HTTPS.
   </Example>
   <Example id="S0497" name="Dacls">
    Dacls can use HTTPS in C2 communications.
   </Example>
   <Example id="S1014" name="DanBot">
    DanBot can use HTTP in C2 communication.
   </Example>
   <Example id="G0070" name="Dark Caracal">
    Dark Caracal's version of Bandook communicates with their server over a TCP port using HTTP payloads Base64 encoded and suffixed with the string "&amp;&amp;&amp;".
   </Example>
   <Example id="S0334" name="DarkComet">
    DarkComet can use HTTP for C2 communications.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman uses HTTPS for command and control.
   </Example>
   <Example id="S0187" name="Daserf">
    Daserf uses HTTP for C2.
   </Example>
   <Example id="S0243" name="DealersChoice">
    DealersChoice uses HTTP for communication with the C2 server.
   </Example>
   <Example id="S0616" name="DEATHRANSOM">
    DEATHRANSOM can use HTTPS to download files.
   </Example>
   <Example id="S0659" name="Diavol">
    Diavol has used HTTP GET and POST requests for C2.
   </Example>
   <Example id="S0200" name="Dipsind">
    Dipsind uses HTTP for C2.
   </Example>
   <Example id="S0600" name="Doki">
    Doki has communicated with C2 over HTTPS.
   </Example>
   <Example id="S0695" name="Donut">
    Donut can use HTTP to download previously staged shellcode payloads.
   </Example>
   <Example id="S0472" name="down_new">
    down_new has the ability to use HTTP in C2 communications.
   </Example>
   <Example id="S0186" name="DownPaper">
    DownPaper communicates to its C2 server over HTTP.
   </Example>
   <Example id="S0694" name="DRATzarus">
    DRATzarus can use HTTP or HTTPS for C2 communications.
   </Example>
   <Example id="S0384" name="Dridex">
    Dridex has used POST requests and HTTPS for C2 communications.
   </Example>
   <Example id="S0502" name="Drovorub">
    Drovorub can use the WebSocket protocol and has initiated communication with C2 servers with an HTTP Upgrade request.
   </Example>
   <Example id="S0062" name="DustySky">
    DustySky has used both HTTP and HTTPS for C2.
   </Example>
   <Example id="S0024" name="Dyre">
    Dyre uses HTTPS for C2 communications.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor has communicated with its C2 servers via HTTPS protocol.
   </Example>
   <Example id="S0081" name="Elise">
    Elise communicates over HTTP or HTTPS for C2.
   </Example>
   <Example id="S0064" name="ELMER">
    ELMER uses HTTP for command and control.
   </Example>
   <Example id="S0082" name="Emissary">
    Emissary uses HTTP or HTTPS for C2.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can conduct command and control over protocols like HTTP and HTTPS.
   </Example>
   <Example id="S0091" name="Epic">
    Epic uses HTTP and HTTPS for C2 communications.
   </Example>
   <Example id="S0396" name="EvilBunny">
    EvilBunny has executed C2 commands directly via HTTP.
   </Example>
   <Example id="S0401" name="Exaramel for Linux">
    Exaramel for Linux uses HTTPS for C2 communications.
   </Example>
   <Example id="S0569" name="Explosive">
    Explosive has used HTTP for communication.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke can be controlled via a custom C2 protocol over HTTP.
   </Example>
   <Example id="S0171" name="Felismus">
    Felismus uses HTTP for C2.
   </Example>
   <Example id="S0267" name="FELIXROOT">
    FELIXROOT uses HTTP and HTTPS to communicate with the C2 server.
   </Example>
   <Example id="G0085" name="FIN4">
    FIN4 has used HTTP POST requests to transmit data.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has used HTTPS for command and control.
   </Example>
   <Example id="S0355" name="Final1stspy">
    Final1stspy uses HTTP for C2.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro can communicate with its C2 using HTTP.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy has used HTTP for C2.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb has the ability to communicate with C2 servers over HTTP GET/POST requests.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors used HTTP GET requests for C2.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has used HTTP and HTTPS for C2 communications.
   </Example>
   <Example id="S0168" name="Gazer">
    Gazer communicates with its C2 servers over HTTP.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can use HTTP/S in C2 communications.
   </Example>
   <Example id="S0049" name="GeminiDuke">
    GeminiDuke uses HTTP and HTTPS for command and control.
   </Example>
   <Example id="S0460" name="Get2">
    Get2 has the ability to use HTTP to send information collected from an infected host to C2.
   </Example>
   <Example id="S0249" name="Gold Dragon">
    Gold Dragon uses HTTP for communication to the control servers.
   </Example>
   <Example id="S0493" name="GoldenSpy">
    GoldenSpy has used the Ryeol HTTP Client to facilitate HTTP internet communication.
   </Example>
   <Example id="S0597" name="GoldFinder">
    GoldFinder has used HTTP for C2.
   </Example>
   <Example id="S0588" name="GoldMax">
    GoldMax has used HTTPS and HTTP GET requests with custom HTTP cookies for C2.
   </Example>
   <Example id="S0477" name="Goopy">
    Goopy has the ability to communicate with its C2 over HTTP.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro has the ability to use HTTP in C2 communications.
   </Example>
   <Example id="S0237" name="GravityRAT">
    GravityRAT uses HTTP for C2.
   </Example>
   <Example id="S0342" name="GreyEnergy">
    GreyEnergy uses HTTP and HTTPS for C2 communications.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent has the ability to use HTTP for C2 communications.
   </Example>
   <Example id="S0561" name="GuLoader">
    GuLoader can use HTTP to retrieve additional binaries.
   </Example>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has used open-source C2 frameworks, including Covenant.
   </Example>
   <Example id="S0037" name="HAMMERTOSS">
    The "Uploader" variant of HAMMERTOSS visits a hard-coded server over HTTP/S to download the images HAMMERTOSS uses to receive commands.
   </Example>
   <Example id="S0391" name="HAWKBALL">
    HAWKBALL has used HTTP to communicate with a single hard-coded C2 server.
   </Example>
   <Example id="S0170" name="Helminth">
    Helminth can use HTTP for C2.
   </Example>
   <Example id="S0087" name="Hi-Zor">
    Hi-Zor communicates with its C2 server over HTTPS.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa used HTTP and HTTPS to send data back to its C2 server.
   </Example>
   <Example id="S0009" name="Hikit">
    Hikit has used HTTP for C2.
   </Example>
   <Example id="S0070" name="HTTPBrowser">
    HTTPBrowser has used HTTP and HTTPS for command and control.
   </Example>
   <Example id="S0068" name="httpclient">
    httpclient uses HTTP for command and control.
   </Example>
   <Example id="S0398" name="HyperBro">
    HyperBro has used HTTPS for C2 communications.
   </Example>
   <Example id="S1022" name="IceApple">
    IceApple can use HTTP GET to request and pull information from C2.
   </Example>
   <Example id="S0483" name="IcedID">
    IcedID has used HTTPS in communications with C2.
   </Example>
   <Example id="G0100" name="Inception">
    Inception has used HTTP, HTTPS, and WebDav in network communications.
   </Example>
   <Example id="S0604" name="Industroyer">
    Industroyer’s main backdoor connected to a remote C2 server using HTTPS.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole uses HTTP for C2 communications.
   </Example>
   <Example id="S0015" name="Ixeshe">
    Ixeshe uses HTTP for command and control.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    JHUHUGIT variants have communicated with C2 servers over HTTP and HTTPS.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar uses HTTP and HTTPS to communicate with the C2 server. Kazuar can also act as a webserver and listen for inbound HTTP requests through an exposed API.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang malware including RoyalCli and BS2005 have communicated over HTTP with the C2 server through Internet Explorer (IE) by using the COM interface IWebBrowser2.
   </Example>
   <Example id="S1020" name="Kevin">
    Variants of Kevin can communicate with C2 over HTTP.
   </Example>
   <Example id="S0276" name="Keydnap">
    Keydnap uses HTTPS for command and control.
   </Example>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY can send data to C2 with HTTP POST requests.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky  has used HTTP GET and POST requests for C2.
   </Example>
   <Example id="S0599" name="Kinsing">
    Kinsing has communicated with C2 over HTTP.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic has used HTTP for C2 communications.
   </Example>
   <Example id="S0162" name="Komplex">
    The Komplex C2 channel uses HTTP POST requests.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has used HTTP POST for C2.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has conducted C2 over HTTP and HTTPS.
   </Example>
   <Example id="S0513" name="LiteDuke">
    LiteDuke can use HTTP GET requests in C2 communications.
   </Example>
   <Example id="S0680" name="LitePower">
    LitePower can use HTTP and HTTPS for C2 communications.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has used HTTP for C2 communications.
   </Example>
   <Example id="S0582" name="LookBack">
    LookBack’s C2 proxy tool sends data to a C2 server over HTTP.
   </Example>
   <Example id="S0042" name="LOWBALL">
    LOWBALL command and control occurs via HTTPS over port 443.
   </Example>
   <Example id="S0409" name="Machete">
    Machete uses HTTP for Command &amp; Control.
   </Example>
   <Example id="S0282" name="MacSpy">
    MacSpy uses HTTP for command and control.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound malware has used HTTP for C2.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can initiate communication over HTTP/HTTPS for its C2 server.
   </Example>
   <Example id="S0449" name="Maze">
    Maze has communicated to hard-coded IP addresses via HTTP.
   </Example>
   <Example id="S0500" name="MCMD">
    MCMD can use HTTPS in communication with C2 web servers.
   </Example>
   <Example id="S0459" name="MechaFlounder">
    MechaFlounder has the ability to use HTTP in communication with C2.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has used HTTP for C2.
   </Example>
   <Example id="S0339" name="Micropsia">
    Micropsia uses HTTP and HTTPS for C2 network communications.
   </Example>
   <Example id="S1015" name="Milan">
    Milan can use HTTPS for communication with C2.
   </Example>
   <Example id="S0051" name="MiniDuke">
    MiniDuke uses HTTP and HTTPS for command and control.
   </Example>
   <Example id="S0084" name="Mis-Type">
    Mis-Type network traffic can communicate over HTTP.
   </Example>
   <Example id="S1026" name="Mongall">
    Mongall can use HTTP for C2 communication.
   </Example>
   <Example id="S0284" name="More_eggs">
    More_eggs uses HTTPS for C2.
   </Example>
   <Example id="S1047" name="Mori">
    Mori can communicate using HTTP over IPv4 or IPv6 depending on a flag set.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used HTTP for C2 communications.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has communicated with its C2 via HTTP POST requests.
   </Example>
   <Example id="S0699" name="Mythic">
    Mythic supports HTTP-based C2 profiles.
   </Example>
   <Example id="S0691" name="Neoichor">
    Neoichor can use HTTP for C2 communications.
   </Example>
   <Example id="S0034" name="NETEAGLE">
    NETEAGLE will attempt to detect if the infected host is configured to a proxy. If so, NETEAGLE will send beacons via an HTTP POST request. NETEAGLE will also use HTTP to download resources that contain an IP address and Port Number pair to connect to for further C2.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE has the ability to communicate over HTTP.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors used HTTP for C2.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT has used HTTP for C2 communications.
   </Example>
   <Example id="S0353" name="NOKKI">
    NOKKI has used HTTP for C2 communications.
   </Example>
   <Example id="S0340" name="Octopus">
    Octopus has used HTTP GET and POST requests for C2 communications.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used HTTP for C2.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum uses HTTP for communication with its C2.
   </Example>
   <Example id="S0138" name="OLDBAIT">
    OLDBAIT can use HTTP for C2.
   </Example>
   <Example id="S0052" name="OnionDuke">
    OnionDuke uses HTTP and HTTPS for C2.
   </Example>
   <Example id="S0264" name="OopsIE">
    OopsIE uses HTTP for C2 communications.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors enabled HTTP and HTTPS listeners.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors’ XServer tool communicated using HTTP and HTTPS.
   </Example>
   <Example id="G0071" name="Orangeworm">
    Orangeworm has used HTTP for C2.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    OSX_OCEANLOTUS.D can use HTTP POST and GET requests to send and receive C2 information.
   </Example>
   <Example id="S0594" name="Out1">
    Out1 can use HTTP and HTTPS in communications with remote hosts.
   </Example>
   <Example id="S1017" name="OutSteel">
    OutSteel has used HTTP for C2 communications.
   </Example>
   <Example id="S0072" name="OwaAuth">
    OwaAuth uses incoming HTTP requests with a username keyword and commands and handles them as instructions to perform actions.
   </Example>
   <Example id="S0598" name="P.A.S. Webshell">
    P.A.S. Webshell can issue commands via HTTP POST.
   </Example>
   <Example id="S0664" name="Pandora">
    Pandora can communicate over HTTP.
   </Example>
   <Example id="S1050" name="PcShare">
    PcShare has used HTTP for C2 communication.
   </Example>
   <Example id="S0643" name="Peppy">
    Peppy can use HTTP to communicate with C2.
   </Example>
   <Example id="S0048" name="PinchDuke">
    PinchDuke transfers files from the compromised host via HTTP or HTTPS to a C2 server.
   </Example>
   <Example id="S1031" name="PingPull">
    A PingPull variant can communicate with its C2 servers by using HTTPS.
   </Example>
   <Example id="S0435" name="PLEAD">
    PLEAD has used HTTP for communications with command and control (C2) servers.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX can be configured to use HTTP for command and control.
   </Example>
   <Example id="S0067" name="pngdowner">
    pngdowner uses HTTP for command and control.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has used HTTP and HTTPs for C2 communications.
   </Example>
   <Example id="S0518" name="PolyglotDuke">
    PolyglotDuke has has used HTTP GET requests in C2 communications.
   </Example>
   <Example id="S0453" name="Pony">
    Pony has sent collected information to the C2 via HTTP POST request.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 can use protocols like HTTP/HTTPS for command and control traffic.
   </Example>
   <Example id="S0441" name="PowerShower">
    PowerShower has sent HTTP GET and POST requests to C2 servers to send information and receive instructions.
   </Example>
   <Example id="S0371" name="POWERTON">
    POWERTON has used HTTP/HTTPS for C2 traffic.
   </Example>
   <Example id="S1046" name="PowGoop">
    PowGoop can send HTTP GET requests to malicious servers.
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER can use HTTP for C2 communications.
   </Example>
   <Example id="S0238" name="Proxysvc">
    Proxysvc uses HTTP over SSL to communicate commands with the control server.
   </Example>
   <Example id="S0078" name="Psylo">
    Psylo uses HTTPS for C2.
   </Example>
   <Example id="S0147" name="Pteranodon">
    Pteranodon can use HTTP for C2.
   </Example>
   <Example id="S0196" name="PUNCHBUGGY">
    PUNCHBUGGY enables remote interaction and can obtain additional code over HTTPS GET and POST requests.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can communicate over HTTP for C2.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot has the ability to use HTTP and HTTPS in communication with C2 servers.
   </Example>
   <Example id="S0269" name="QUADAGENT">
    QUADAGENT uses HTTPS and HTTP for C2 communications.
   </Example>
   <Example id="S0686" name="QuietSieve">
    QuietSieve can use HTTPS in C2 communications.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay can use HTTP in C2 communications.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay has used HTTP for C2.
   </Example>
   <Example id="G0075" name="Rancor">
    Rancor has used HTTP for C2.
   </Example>
   <Example id="S0241" name="RATANKBA">
    RATANKBA uses HTTP/HTTPS for command and control communication.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession can use HTTP in C2 communications.
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT can use HTTP communications for C2, as well as using the WinHTTP library to make requests to the Exchange Web Services API.
   </Example>
   <Example id="S0172" name="Reaver">
    Some Reaver variants use HTTP for C2.
   </Example>
   <Example id="S0153" name="RedLeaves">
    RedLeaves can communicate to its C2 over HTTP and HTTPS if directed.
   </Example>
   <Example id="S0019" name="Regin">
    The Regin malware platform supports many standard protocols, including HTTP and HTTPS.
   </Example>
   <Example id="S0375" name="Remexi">
    Remexi uses BITSAdmin to communicate with the C2 server over HTTP.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec is capable of using HTTP and HTTPS for C2.
   </Example>
   <Example id="S0496" name="REvil">
    REvil has used HTTP and HTTPS in communication with C2.
   </Example>
   <Example id="S0258" name="RGDoor">
    RGDoor uses HTTP for C2 communications.
   </Example>
   <Example id="S0003" name="RIPTIDE">
    APT12 has used RIPTIDE, a RAT that uses HTTP to communicate.
   </Example>
   <Example id="S0448" name="Rising Sun">
    Rising Sun has used HTTP and HTTPS for command and control.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has executed wget and curl commands to Pastebin over the HTTPS protocol.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can use HTTP and HTTPS for command and control communication.
   </Example>
   <Example id="S0148" name="RTM">
    RTM has initiated connections to external domains using HTTPS.
   </Example>
   <Example id="S0085" name="S-Type">
    S-Type uses HTTP for C2.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has used HTTP for C2 communications.
   </Example>
   <Example id="S0074" name="Sakula">
    Sakula uses HTTP for C2.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team's BCS-server tool connects to the designated C2 server via HTTP.
   </Example>
   <Example id="S0053" name="SeaDuke">
    SeaDuke uses HTTP and HTTPS for C2.
   </Example>
   <Example id="S0345" name="Seasalt">
    Seasalt uses HTTP for C2 communications.
   </Example>
   <Example id="S0382" name="ServHelper">
    ServHelper uses HTTP for C2.
   </Example>
   <Example id="S0596" name="ShadowPad">
    ShadowPad communicates over HTTP to retrieve a string that is decoded into a C2 server URL.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon has used HTTP for C2.
   </Example>
   <Example id="S1019" name="Shark">
    Shark has the ability to use HTTP in C2 communications.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat communicated over HTTP and HTTPS with C2 servers.
   </Example>
   <Example id="S0445" name="ShimRatReporter">
    ShimRatReporter communicated over HTTP with preconfigured C2 servers.
   </Example>
   <Example id="S0589" name="Sibot">
    Sibot communicated with its C2 server via HTTP GET requests.
   </Example>
   <Example id="S0610" name="SideTwist">
    SideTwist has used HTTP GET and POST requests over port 443 for C2.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has used HTTP in C2 communications.
   </Example>
   <Example id="G0083" name="SilverTerrier">
    SilverTerrier uses HTTP for C2 communications.
   </Example>
   <Example id="S0633" name="Sliver">
    Sliver has the ability to support C2 communications over HTTP/S.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA has used HTTP and HTTPS for C2 communications.
   </Example>
   <Example id="S1035" name="Small Sieve">
    Small Sieve can contact actor-controlled C2 servers by using the Telegram API over HTTPS.
   </Example>
   <Example id="S0226" name="Smoke Loader">
    Smoke Loader uses HTTP for C2.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM has communicated with its C2 servers via HTTPS and HTTP POST requests.
   </Example>
   <Example id="S0159" name="SNUGRIDE">
    SNUGRIDE communicates with its C2 server over HTTP.
   </Example>
   <Example id="S0516" name="SoreFang">
    SoreFang can use HTTP in C2 communications.
   </Example>
   <Example id="S0543" name="Spark">
    Spark has used HTTP POST requests to communicate with its C2 server to receive commands.
   </Example>
   <Example id="S0374" name="SpeakUp">
    SpeakUp uses POST and GET requests over HTTP to communicate with its main C&amp;C server.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has used HTTP POST requests for C2 communications.
   </Example>
   <Example id="S1037" name="STARWHALE">
    STARWHALE has the ability to contact actor-controlled C2 servers via HTTP.
   </Example>
   <Example id="G0038" name="Stealth Falcon">
    Stealth Falcon malware communicates with its C2 server via HTTPS.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity can use HTTP and HTTPS in C2 communications.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet uses HTTP to communicate with a command and control server.
   </Example>
   <Example id="S1042" name="SUGARDUMP">
    A SUGARDUMP variant has used HTTP for C2.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST communicated via HTTP GET or HTTP POST requests to third party servers for C2.
   </Example>
   <Example id="S0578" name="SUPERNOVA">
    SUPERNOVA had to receive an HTTP GET request containing a specific set of parameters in order to execute.
   </Example>
   <Example id="S0060" name="Sys10">
    Sys10 uses HTTP for C2.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used HTTP to communicate with C2 nodes.
   </Example>
   <Example id="G0127" name="TA551">
    TA551 has used HTTP for C2 communications.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor has used HTTP GET and POST requests for C2.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has the curl command to send credentials over HTTP and the curl and wget commands to download new software.
   </Example>
   <Example id="S0595" name="ThiefQuest">
    ThiefQuest uploads files via unencrypted HTTP.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 malware has used HTTP for C2.
   </Example>
   <Example id="S0668" name="TinyTurla">
    TinyTurla can use HTTPS in C2 communications.
   </Example>
   <Example id="S0671" name="Tomiris">
    Tomiris can use HTTP to establish C2 communications.
   </Example>
   <Example id="S0678" name="Torisma">
    Torisma can use HTTP and HTTPS for C2 communications.
   </Example>
   <Example id="S0682" name="TrailBlazer">
    TrailBlazer has used HTTP requests for C2.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot uses HTTPS to communicate with its C2 servers, to get malware updates, modules that perform most of the malware logic and various configuration files.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can communicate with C2 via HTTP POST requests.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has used HTTP in communication with the C2.
   </Example>
   <Example id="S0436" name="TSCookie">
    TSCookie can multiple protocols including HTTP and HTTPS in communication with command and control (C2) servers.
   </Example>
   <Example id="S0647" name="Turian">
    Turian has the ability to use HTTP for its C2.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used HTTP and HTTPS for C2 communications.
   </Example>
   <Example id="S0333" name="UBoatRAT">
    UBoatRAT has used HTTP for C2 communications.
   </Example>
   <Example id="S0275" name="UPPERCUT">
    UPPERCUT has used HTTP for C2, including sending error codes in Cookie headers.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has used HTTPS for C2.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has used HTTP in communications with C2.
   </Example>
   <Example id="S0636" name="VaporRage">
    VaporRage can use HTTP to download shellcode from compromised websites.
   </Example>
   <Example id="S0207" name="Vasport">
    Vasport creates a backdoor by making a connection using a HTTP POST.
   </Example>
   <Example id="S0442" name="VBShower">
    VBShower has attempted to obtain a VBS script from command and control (C2) nodes over HTTP.
   </Example>
   <Example id="S0257" name="VERMIN">
    VERMIN uses HTTP for C2 communications.
   </Example>
   <Example id="S0514" name="WellMess">
    WellMess can use HTTP and HTTPS in C2 communications.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can make an HTTPS connection to download additional files.
   </Example>
   <Example id="G0112" name="Windshift">
    Windshift has used tools that communicate with C2 over HTTP.
   </Example>
   <Example id="S0466" name="WindTail">
    WindTail has the ability to use HTTP for C2 communications.
   </Example>
   <Example id="S0059" name="WinMM">
    WinMM uses HTTP for C2.
   </Example>
   <Example id="S0430" name="Winnti for Linux">
    Winnti for Linux has used HTTP in outbound communications.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    Winnti for Windows has the ability to use encapsulated HTTP/S in C2 communications.
   </Example>
   <Example id="G0090" name="WIRTE">
    WIRTE has used HTTP for network communication.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used HTTP for network communications.
   </Example>
   <Example id="S0341" name="Xbash">
    Xbash uses HTTP for C2 communications.
   </Example>
   <Example id="S0653" name="xCaon">
    xCaon has communicated with the C2 server by sending POST requests over HTTP.
   </Example>
   <Example id="S0388" name="YAHOYAH">
    YAHOYAH uses HTTP for C2.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy uses HTTP for C2.
   </Example>
   <Example id="S0230" name="ZeroT">
    ZeroT has used HTTP for C2.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda uses HTTP for C2 communications.
   </Example>
   <Example id="S0086" name="ZLib">
    ZLib communicates over HTTP for C2.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell has used HTTP for C2 connections.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1071.002" name="Application Layer Protocol: File Transfer Protocols">
  Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0096" name="APT41">
    APT41 used exploit payloads that initiate download via ftp.
   </Example>
   <Example id="S0438" name="Attor">
    Attor has used FTP protocol for C2 communication.
   </Example>
   <Example id="S0465" name="CARROTBALL">
    CARROTBALL has the ability to use FTP in C2 communications.
   </Example>
   <Example id="S0201" name="JPIN">
    JPIN can communicate over FTP.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar uses FTP and FTPS to communicate with the C2 server.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used FTP to download additional malware to the target machine.
   </Example>
   <Example id="S0409" name="Machete">
    Machete uses FTP for Command &amp; Control.
   </Example>
   <Example id="S0699" name="Mythic">
    Mythic supports SMB-based peer-to-peer C2 profiles.
   </Example>
   <Example id="S0353" name="NOKKI">
    NOKKI has used FTP for C2 communications.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, the threat actors had the ability to use FTP for C2.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has used FTP for C2 communications.
   </Example>
   <Example id="S0596" name="ShadowPad">
    ShadowPad has used FTP for C2 communications.
   </Example>
   <Example id="G0083" name="SilverTerrier">
    SilverTerrier uses FTP for C2 communications.
   </Example>
   <Example id="S0464" name="SYSCON">
    SYSCON has the ability to use FTP in C2 communications.
   </Example>
   <Example id="S0161" name="XAgentOSX">
    XAgentOSX contains the ftpUpload function to use the FTPManager:uploadFile method to upload files from the target system.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell has used FTP for C2 connections.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1071.003" name="Application Layer Protocol: Mail Protocols">
  Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla has used SMTP for C2 communications.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has used IMAP, POP3, and SMTP for a communication channel in various implants, including using self-registered Google Mail accounts and later compromised email servers of its victims.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has used email for C2 via an Office macro.
   </Example>
   <Example id="S0337" name="BadPatch">
    BadPatch uses SMTP for C2.
   </Example>
   <Example id="S0351" name="Cannon">
    Cannon uses SMTP/S and POP3/S for C2 communications by sending and receiving emails.
   </Example>
   <Example id="S0023" name="CHOPSTICK">
    Various implementations of CHOPSTICK communicate with C2 over SMTP and POP3.
   </Example>
   <Example id="S0126" name="ComRAT">
    ComRAT can use email attachments for command and control.
   </Example>
   <Example id="S0137" name="CORESHELL">
    CORESHELL can communicate over SMTP and POP3 for C2.
   </Example>
   <Example id="S0477" name="Goopy">
    Goopy has the ability to use a Microsoft Outlook backdoor macro to communicate with its C2.
   </Example>
   <Example id="S0201" name="JPIN">
    JPIN can send email over SMTP.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used e-mail to send exfiltrated data to C2 servers.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron uses SMTP for C2.
   </Example>
   <Example id="S0247" name="NavRAT">
    NavRAT uses the email platform, Naver, for C2 communications, leveraging SMTP.
   </Example>
   <Example id="S0138" name="OLDBAIT">
    OLDBAIT can use SMTP for C2.
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT can use email attachments for C2 communications.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec is capable of using SMTP for C2.
   </Example>
   <Example id="G0083" name="SilverTerrier">
    SilverTerrier uses SMTP for C2 communications.
   </Example>
   <Example id="S1042" name="SUGARDUMP">
    A SUGARDUMP variant used SMTP for C2.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used multiple backdoors which communicate with a C2 server via email attachments.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy uses SMTP and POP3 for C2.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1071.004" name="Application Layer Protocol: DNS">
  Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0504" name="Anchor">
    Variants of Anchor can use DNS tunneling to communicate with C2.
   </Example>
   <Example id="G0026" name="APT18">
    APT18 uses DNS for C2 communications.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used remote access tools that leverage DNS in communications with C2.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used DNS for C2 communications.
   </Example>
   <Example id="S0360" name="BONDUPDATER">
    BONDUPDATER can use DNS and TXT records within its DNS tunneling protocol for command and control.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used Cobalt Strike to encapsulate C2 in DNS traffic.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has used DNS tunneling for C2.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can use a custom command and control protocol that can be encapsulated in DNS. All protocols use their standard assigned ports.
   </Example>
   <Example id="S0338" name="Cobian RAT">
    Cobian RAT uses DNS for C2.
   </Example>
   <Example id="S1014" name="DanBot">
    DanBot can use use IPv4 A records and IPv6 AAAA DNS records in C2 communications.
   </Example>
   <Example id="S0354" name="Denis">
    Denis has used DNS tunneling for C2 communications.
   </Example>
   <Example id="S1021" name="DnsSystem">
    DnsSystem  can direct queries to custom DNS servers and return C2 commands using TXT records.
   </Example>
   <Example id="S0377" name="Ebury">
    Ebury has used DNS requests over UDP port 53 for C2.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has performed C2 using DNS via A, OPT, and TXT records.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium has the ability to use DNS in communication with C2.
   </Example>
   <Example id="S0477" name="Goopy">
    Goopy has the ability to communicate with its C2 over DNS.
   </Example>
   <Example id="S0690" name="Green Lambert">
    Green Lambert can use DNS for C2 communications.
   </Example>
   <Example id="S0170" name="Helminth">
    Helminth can use DNS for C2.
   </Example>
   <Example id="S1027" name="Heyoka Backdoor">
    Heyoka Backdoor can use DNS tunneling for C2 communications.
   </Example>
   <Example id="S0070" name="HTTPBrowser">
    HTTPBrowser has used DNS for command and control.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole has used a custom implementation of DNS tunneling to embed C2 communications in DNS requests and replies.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang malware RoyalDNS has used DNS for C2.
   </Example>
   <Example id="S1020" name="Kevin">
    Variants of Kevin can communicate over DNS through queries to the server for constructed domain names with embedded information.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter has leveraged dynamic DNS providers for C2 communications.
   </Example>
   <Example id="S0167" name="Matryoshka">
    Matryoshka uses DNS for C2.
   </Example>
   <Example id="S1015" name="Milan">
    Milan has the ability to use DNS for C2 communications.
   </Example>
   <Example id="S1047" name="Mori">
    Mori can use DNS tunneling to communicate with C2.
   </Example>
   <Example id="S0699" name="Mythic">
    Mythic supports DNS-based C2 profiles.
   </Example>
   <Example id="S0228" name="NanHaiShu">
    NanHaiShu uses DNS for the C2 communications.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used DNS for C2 including the publicly available requestbin.net tunneling service.
   </Example>
   <Example id="S0124" name="Pisloader">
    Pisloader uses DNS as its C2 protocol.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX can be configured to use DNS for command and control.
   </Example>
   <Example id="S0145" name="POWERSOURCE">
    POWERSOURCE uses DNS TXT records for C2.
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER can use DNS for C2 communications.
   </Example>
   <Example id="S0269" name="QUADAGENT">
    QUADAGENT uses DNS for C2 communications.
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT has used DNS to communicate with the C2.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec is capable of using DNS for C2.
   </Example>
   <Example id="S0596" name="ShadowPad">
    ShadowPad has used DNS tunneling for C2 communications.
   </Example>
   <Example id="S1019" name="Shark">
    Shark can use DNS in C2 communications.
   </Example>
   <Example id="S0633" name="Sliver">
    Sliver can support C2 communications over DNS.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT can communicate over DNS with the C2 server.
   </Example>
   <Example id="S0157" name="SOUNDBITE">
    SOUNDBITE communicates via DNS for C2.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST used DNS for C2 traffic designed to mimic normal SolarWinds API communications.
   </Example>
   <Example id="S0146" name="TEXTMATE">
    TEXTMATE uses DNS TXT records for C2.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper's backdoor has communicated to the C2 over the DNS protocol.
   </Example>
   <Example id="S0514" name="WellMess">
    WellMess has the ability to use DNS tunneling for C2 communications.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Consider filtering DNS requests to unknown, untrusted, or known bad domains and resources. Resolving DNS requests with on-premise/proxy servers may also disrupt adversary attempts to conceal data within DNS packets.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1010" name="Application Window Discovery">
  Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0456" name="Aria-body">
    Aria-body has the ability to identify the titles of running windows on a compromised host.
   </Example>
   <Example id="S0438" name="Attor">
    Attor can obtain application window titles and then determines which windows to perform Screen Capture on.
   </Example>
   <Example id="S0454" name="Cadelspy">
    Cadelspy has the ability to identify open windows on the compromised host.
   </Example>
   <Example id="S0261" name="Catchamas">
    Catchamas obtains application windows titles and then determines which windows to perform Screen Capture on.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman reports window names along with keylogger information to provide application context.
   </Example>
   <Example id="S0038" name="Duqu">
    The discovery modules used with Duqu can collect information on open windows.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro can check the name of the window displayed on the system.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream has the ability to discover application windows via execution of EnumWindows.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can identify installed security tools based on window names.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has used a PowerShell-based keylogging tool to capture the window title.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant has the ability to list the names of all open windows on the infected host.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can enumerate windows and child windows on a compromised host.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar gathers information about opened windows.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group malware IndiaIndia obtains and sends to its C2 server the title of the window for each running process. The KilaAlfa keylogger also reports the title of the window in the foreground.
   </Example>
   <Example id="S0409" name="Machete">
    Machete saves the window names.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo can enumerate all windows on the victim’s machine.
   </Example>
   <Example id="S0033" name="NetTraveler">
    NetTraveler reports window names along with keylogger information to provide application context.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can discover and close windows on controlled systems.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT gathers information about opened windows during the initial infection.
   </Example>
   <Example id="S0435" name="PLEAD">
    PLEAD has the ability to list open windows on the compromised host.
   </Example>
   <Example id="S0012" name="PoisonIvy">
    PoisonIvy captures window titles.
   </Example>
   <Example id="S0139" name="PowerDuke">
    PowerDuke has a command to get text of the current foreground window.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot has the ability to enumerate windows on a compromised host.
   </Example>
   <Example id="S0375" name="Remexi">
    Remexi has a command to capture active windows on the machine and retrieve window titles.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can use  the GetForegroundWindow and GetWindowText APIs to discover where the user is typing.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can enumerate the active Window during keylogging through execution of GetActiveWindowTitle.
   </Example>
   <Example id="S0157" name="SOUNDBITE">
    SOUNDBITE is capable of enumerating application windows.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can monitor the titles of open windows to identify specific keywords.
   </Example>
   <Example id="S0219" name="WINERACK">
    WINERACK can enumerate active windows.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1560" name="Archive Collected Data">
  An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0045" name="ADVSTORESHELL">
    ADVSTORESHELL encrypts with the 3DES algorithm and a hardcoded key prior to exfiltration.
   </Example>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla can encrypt data with 3DES before sending it over to a C2 server.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed has compressed collected data before exfiltration.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 used a publicly available tool to gather and compress multiple documents on the DCCC and DNC networks.
   </Example>
   <Example id="G0050" name="APT32">
    APT32's backdoor has used LZMA compression and RC4 encryption before exfiltration.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has used ZIP to compress data gathered on a compromised host.
   </Example>
   <Example id="G0001" name="Axiom">
    Axiom has compressed and encrypted data prior to exfiltration.
   </Example>
   <Example id="S0093" name="Backdoor.Oldrea">
    Backdoor.Oldrea writes collected data to a temporary file in an encrypted form before exfiltration to a C2 server.
   </Example>
   <Example id="S0521" name="BloodHound">
    BloodHound can compress data collected by its SharpHound ingestor into a ZIP file to be written to disk.
   </Example>
   <Example id="S0657" name="BLUELIGHT">
    BLUELIGHT can zip files before exfiltration.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can compress data stolen from the Registry and volume shadow copies prior to exfiltration.
   </Example>
   <Example id="S0454" name="Cadelspy">
    Cadelspy has the ability to compress stolen data into a .cab file.
   </Example>
   <Example id="S0667" name="Chrommme">
    Chrommme can encrypt and store on disk collected data before exfiltration.
   </Example>
   <Example id="S0187" name="Daserf">
    Daserf hides collected data in password-protected .rar archives.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has compressed data into .zip files prior to exfiltration.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack packs collected data into a password protected archive.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has been observed encrypting the data it collects before sending it to the C2 server.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can ZIP directories on the target system.
   </Example>
   <Example id="S0091" name="Epic">
    Epic encrypts collected data using a public key framework before sending it over the C2 channel.
   </Example>
   <Example id="S0343" name="Exaramel for Windows">
    Exaramel for Windows automatically encrypts files before sending them to the C2 server.
   </Example>
   <Example id="S0267" name="FELIXROOT">
    FELIXROOT encrypts collected data with AES and Base64 and then sends it to the C2 server.
   </Example>
   <Example id="G0037" name="FIN6">
    Following data collection, FIN6 has compressed log files into a ZIP archive prior to staging and exfiltration.
   </Example>
   <Example id="S0249" name="Gold Dragon">
    Gold Dragon encrypts data using Base64 before being sent to the command and control server.
   </Example>
   <Example id="G0004" name="Ke3chang">
    The Ke3chang group has been known to compress data before exfiltration.
   </Example>
   <Example id="S0487" name="Kessel">
    Kessel can RC4-encrypt credentials before sending to the C2.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has encrypted data and files prior to exfiltration.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has compressed exfiltrated data with RAR and used RomeoDelta malware to archive specified directories in .zip format, encrypt the .zip file, and upload it to C2.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has archived victim's data prior to exfiltration.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron contains a function to encrypt and store emails that it collects.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar has encrypted data before sending it to the server.
   </Example>
   <Example id="S0010" name="Lurid">
    Lurid can compress data before sending it.
   </Example>
   <Example id="S0409" name="Machete">
    Machete stores zipped files with profile data from installed web browsers.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has encrypted files and information before exfiltration.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE has the ability to compress archived screenshots.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork encrypted the collected files' path with AES and then encoded them with base64.
   </Example>
   <Example id="S0517" name="Pillowmint">
    Pillowmint has encrypted stolen credit card information with AES and further encoded it with Base64.
   </Example>
   <Example id="S1012" name="PowerLess">
    PowerLess can encrypt browser database files prior to exfiltration.
   </Example>
   <Example id="S0113" name="Prikormka">
    After collecting documents from removable media, Prikormka compresses the collected files, and encrypts it with Blowfish.
   </Example>
   <Example id="S0279" name="Proton">
    Proton zips up files before exfiltrating them.
   </Example>
   <Example id="S0375" name="Remexi">
    Remexi encrypts and adds all gathered browser data into files for upload to C2.
   </Example>
   <Example id="S0253" name="RunningRAT">
    RunningRAT contains code to compress files.
   </Example>
   <Example id="S0445" name="ShimRatReporter">
    ShimRatReporter used LZ compression to compress initial reconnaissance reports before sending to the C2.
   </Example>
   <Example id="S0586" name="TAINTEDSCRIBE">
    TAINTEDSCRIBE has used FileReadZipSend to compress a file and send to C2.
   </Example>
   <Example id="S0257" name="VERMIN">
    VERMIN encrypts the collected files using 3-DES.
   </Example>
   <Example id="S0515" name="WellMail">
    WellMail can archive files on the compromised host.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET will compress entire ~/Desktop folders excluding all .git folders, but only if the total data size is under 200MB.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy  has used a method similar to RC4 as well as AES for encryption and hexadecimal for encoding data before exfiltration.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    System scans can be performed to identify unauthorized archival utilities.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1560.001" name="Archive Collected Data: Archive via Utility">
  Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0622" name="AppleSeed">
    AppleSeed can zip and encrypt data collected on a target system.
   </Example>
   <Example id="G0006" name="APT1">
    APT1 has used RAR to compress files before moving them outside of the victim network.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has used a variety of utilities, including WinRAR, to archive collected data with password protection.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 used 7-Zip to compress stolen emails into password-protected archives prior to exfiltration; APT29 has also compressed text files into zipped archives.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has used tools to compress data before exfilling it.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has used WinRAR to compress data prior to exfil.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used WinRAR and 7-Zip to compress an archive stolen data.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 created a RAR archive of targeted files for exfiltration.
   </Example>
   <Example id="G0143" name="Aquatic Panda">
    Aquatic Panda has used WinRAR to compress memory dumps prior to exfiltration.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has compressed data into password-protected RAR archives prior to exfiltration.
   </Example>
   <Example id="S0274" name="Calisto">
    Calisto uses the zip -r command to compress the data collected on the local system.
   </Example>
   <Example id="S1043" name="ccf32">
    ccf32 has used xcopy \\&lt;target_host&gt;\c$\users\public\path.7z c:\users\public\bin\&lt;target_host&gt;.7z /H /Y to archive collected files.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used gzip for Linux OS and a modified RAR software to archive data on Windows hosts.
   </Example>
   <Example id="G0052" name="CopyKittens">
    CopyKittens uses ZPP, a .NET console program, to compress files with ZIP.
   </Example>
   <Example id="S0212" name="CORALDECK">
    CORALDECK has created password-protected RAR, WinImage, and zip archives to be exfiltrated.
   </Example>
   <Example id="S0538" name="Crutch">
    Crutch has used the WinRAR utility to compress and encrypt stolen files.
   </Example>
   <Example id="S0187" name="Daserf">
    Daserf hides collected data in password-protected .rar archives.
   </Example>
   <Example id="S0062" name="DustySky">
    DustySky can compress files via RAR while staging data to be exfiltrated.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has used WinRAR to compress stolen files into an archive prior to exfiltration.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has used RAR to compress collected data before exfiltration.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used 7-Zip to archive data.
   </Example>
   <Example id="C0007" name="FunnyDream">
    During FunnyDream, the threat actors used 7zr.exe to add collected files to an archive.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM used WinRAR to compress and encrypt stolen data prior to exfiltration.
   </Example>
   <Example id="G0084" name="Gallmaker">
    Gallmaker has used WinZip, likely to archive data prior to exfiltration.
   </Example>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has used 7-Zip and WinRAR to compress stolen files for exfiltration.
   </Example>
   <Example id="S1022" name="IceApple">
    IceApple can encrypt and compress files using Gzip prior to exfiltration.
   </Example>
   <Example id="S0278" name="iKitten">
    iKitten will zip up the /Library/Keychains directory before exfiltrating it.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole uses WinRAR to compress data that is intended to be exfiltrated.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang is known to use 7Zip and RAR with passwords to encrypt data prior to exfiltration.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used QuickZip to archive stolen files before exfiltration.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has used gzip to archive dumped LSASS process memory and RAR to stage and compress local folders.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has compressed files before exfiltration using TAR and RAR.
   </Example>
   <Example id="S0339" name="Micropsia">
    Micropsia creates a RAR archive based on collected files on the victim's machine.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used the native Windows cabinet creation tool, makecab.exe, likely to compress stolen data to be uploaded.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has used RAR to create password-protected archives of collected documents prior to exfiltration.
   </Example>
   <Example id="S0340" name="Octopus">
    Octopus has compressed data before exfiltrating it using a tool called Abbrevia.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum was seen using a RAR archiver tool to compress/decompress data.
   </Example>
   <Example id="S0264" name="OopsIE">
    OopsIE compresses collected files with GZipStream before sending them to its C2 server.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used the Makecab utility to compress and a version of WinRAR to create password-protected archives of stolen data prior to exfiltration.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, the threat actors uses zip to pack collected files before exfiltration.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors archived collected files with WinRAR, prior to exfiltration.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has the ability to compress files with zip.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 contains a module for compressing data using ZIP.
   </Example>
   <Example id="S0441" name="PowerShower">
    PowerShower has used 7Zip to compress .txt, .pdf, .xls or .doc files prior to exfiltration.
   </Example>
   <Example id="S0196" name="PUNCHBUGGY">
    PUNCHBUGGY has Gzipped information and saved it to a random temp file before exfil.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can compress data with Zip before sending it over C2.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can compress and archive collected files using WinRAR.
   </Example>
   <Example id="S1040" name="Rclone">
    Rclone can compress files using gzip prior to exfiltration.
   </Example>
   <Example id="G0054" name="Sowbug">
    Sowbug extracted documents and bundled them into a RAR archive.
   </Example>
   <Example id="S0647" name="Turian">
    Turian can use WinRAR to create a password-protected archive for files of interest.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has encrypted files stolen from connected USB drives into a RAR file before exfiltration.
   </Example>
   <Example id="S0466" name="WindTail">
    WindTail has the ability to use the macOS built-in zip utility to archive files.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    System scans can be performed to identify unauthorized archival utilities.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1560.002" name="Archive Collected Data: Archive via Library">
  An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including Python rarfile . Most libraries include functionality to encrypt and/or compress data.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0642" name="BADFLICK">
    BADFLICK has compressed data using the aPLib compression library.
   </Example>
   <Example id="S0127" name="BBSRAT">
    BBSRAT can compress data with ZLIB prior to sending it back to the C2 server.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT applies compression to C2 traffic using the ZLIB library.
   </Example>
   <Example id="S0354" name="Denis">
    Denis compressed collected data using zlib.
   </Example>
   <Example id="S0091" name="Epic">
    Epic compresses the collected data with bzip2 before sending it to the C2 server.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb can invoke the Common.Compress method to compress data with the C# GZipStream compression class.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream has compressed collected files with zLib.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can use zlib to compress and decompress data.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group malware IndiaIndia saves information gathered about the victim to a file that is compressed with Zlib, encrypted, and uploaded to a C2 server.
   </Example>
   <Example id="S0053" name="SeaDuke">
    SeaDuke compressed data with zlib prior to sending it over C2.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to use the open source libraries XZip/Xunzip and zlib to compress files.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has used RAR to compress, encrypt, and password-protect files prior to exfiltration.
   </Example>
   <Example id="S0086" name="ZLib">
    The ZLib backdoor compresses communications using the standard Zlib compression library.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1560.003" name="Archive Collected Data: Archive via Custom Method">
  An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0045" name="ADVSTORESHELL">
    ADVSTORESHELL compresses output data generated by command execution with a custom implementation of the Lempel–Ziv–Welch (LZW) algorithm.
   </Example>
   <Example id="S0092" name="Agent.btz">
    Agent.btz saves system information into an XML file that is then XOR-encoded.
   </Example>
   <Example id="S0438" name="Attor">
    Attor encrypts collected data with a custom implementation of Blowfish and RSA ciphers.
   </Example>
   <Example id="S0657" name="BLUELIGHT">
    BLUELIGHT has encoded data into a binary blob using XOR.
   </Example>
   <Example id="G0052" name="CopyKittens">
    CopyKittens encrypts data with a substitute cipher prior to exfiltration.
   </Example>
   <Example id="S0038" name="Duqu">
    Modules can be pushed to and executed by Duqu that copy data to a staging area, compress it, and XOR encrypt it.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has encoded data gathered from the victim with a simple substitution cipher and single-byte XOR using the 0xAA key, and Base64 with character permutation.
   </Example>
   <Example id="S0036" name="FLASHFLOOD">
    FLASHFLOOD employs the same encoding scheme as SPACESHIP for data it stages. Data is compressed with zlib, and bytes are rotated four times before being XOR'ed with 0x23.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb can use a dynamic XOR key and a custom XOR methodology to encode data before exfiltration. Also, FoggyWeb can encode C2 command output within a legitimate WebP file.
   </Example>
   <Example id="S0503" name="FrameworkPOS">
    FrameworkPOS can XOR credit card information before exfiltration.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream has compressed collected files with zLib and encrypted them using an XOR operation with the string key from the command line or qwerasdf if the command line argument doesn’t contain the key. File names are obfuscated using XOR with the same key as the compressed file content.
   </Example>
   <Example id="S0391" name="HAWKBALL">
    HAWKBALL has encrypted data with XOR before sending it over the C2 channel.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole uses a variation of the XOR cipher to encrypt files before exfiltration.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used RC4 encryption before exfil.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    A Lazarus Group malware sample encrypts data using a simple byte based XOR operation prior to exfiltration.
   </Example>
   <Example id="S0409" name="Machete">
    Machete's collected data is encrypted with AES before exfiltration.
   </Example>
   <Example id="S0443" name="MESSAGETAP">
    MESSAGETAP has XOR-encrypted and stored contents of SMS messages that matched its target list.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has encrypted documents with RC4 prior to exfiltration.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE has used a custom encryption algorithm to encrypt collected data.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum has used a custom implementation of AES encryption to encrypt collected data.
   </Example>
   <Example id="S0264" name="OopsIE">
    OopsIE compresses collected files with a simple character replacement scheme before sending them to its C2 server.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    OSX_OCEANLOTUS.D scrambles and encrypts data using AES256 before sending it to the C2 server.
   </Example>
   <Example id="S0072" name="OwaAuth">
    OwaAuth DES-encrypts captured credentials using the key 12345678 before writing the credentials to a log file.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can store collected documents in a custom container after encrypting and compressing them using RC4 and WinRAR.
   </Example>
   <Example id="S0169" name="RawPOS">
    RawPOS encodes credit card data it collected from the victim with XOR.
   </Example>
   <Example id="S0172" name="Reaver">
    Reaver encrypts collected data with an incremental XOR key prior to exfiltration.
   </Example>
   <Example id="S0258" name="RGDoor">
    RGDoor encrypts files with XOR before sending them back to the C2 server.
   </Example>
   <Example id="S0448" name="Rising Sun">
    Rising Sun can archive data using RC4 encryption and Base64 encoding prior to exfiltration.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT has encrypted collected data with AES-256 using a hardcoded key.
   </Example>
   <Example id="S0035" name="SPACESHIP">
    Data SPACESHIP copies to the staging area is compressed with zlib. Bytes are rotated by four positions and XOR'ed with 0x23.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has encrypted collected data using a XOR-based algorithm.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity can compress and encrypt archived files into multiple .sft files with a repeated xor encryption scheme.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet encrypts exfiltrated data via C2 with static 31-byte long XOR keys.
   </Example>
   <Example id="S1042" name="SUGARDUMP">
    SUGARDUMP has encrypted collected data using AES CBC mode and encoded it using Base64.
   </Example>
   <Example id="S0098" name="T9000">
    T9000 encrypts collected data using a single byte XOR key.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1123" name="Audio Capture">
  An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-634
  </CAPEC_ID>
  <Examples>
   <Example id="G0067" name="APT37">
    APT37 has used an audio capturing utility known as SOUNDWAVE that captures microphone input.
   </Example>
   <Example id="S0438" name="Attor">
    Attor's has a plugin that is capable of recording audio using available input sound devices.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook has modules that are capable of capturing audio.
   </Example>
   <Example id="S0454" name="Cadelspy">
    Cadelspy has the ability to record audio from the compromised host.
   </Example>
   <Example id="S0338" name="Cobian RAT">
    Cobian RAT has a feature to perform voice recording on the victim’s machine.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson can perform audio surveillance using microphones.
   </Example>
   <Example id="S0334" name="DarkComet">
    DarkComet can listen in to victims' conversations through the system’s microphone.
   </Example>
   <Example id="S0021" name="Derusbi">
    Derusbi is capable of performing audio captures.
   </Example>
   <Example id="S0213" name="DOGCALL">
    DOGCALL can capture microphone data from the victim's machine.
   </Example>
   <Example id="S0152" name="EvilGrab">
    EvilGrab has the capability to capture audio from a victim machine.
   </Example>
   <Example id="S0143" name="Flame">
    Flame can record audio using any existing hardware recording devices.
   </Example>
   <Example id="S0434" name="Imminent Monitor">
    Imminent Monitor has a remote microphone monitoring capability.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can record sound using input audio devices.
   </Example>
   <Example id="S0163" name="Janicab">
    Janicab captured audio and sent it out to a C2 server.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT can capture microphone recordings.
   </Example>
   <Example id="S0409" name="Machete">
    Machete captures audio from the computer’s microphone.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa has the ability to record audio.
   </Example>
   <Example id="S0282" name="MacSpy">
    MacSpy can record the sounds from microphones on a computer.
   </Example>
   <Example id="S0339" name="Micropsia">
    Micropsia can perform microphone recording.
   </Example>
   <Example id="S0336" name="NanoCore">
    NanoCore can capture audio feeds from the system.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit's Get-MicrophoneAudio Exfiltration module can record system microphone audio.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can record sound with the microphone.
   </Example>
   <Example id="S0332" name="Remcos">
    Remcos can capture data from the system’s microphone.
   </Example>
   <Example id="S0379" name="Revenge RAT">
    Revenge RAT has a plugin for microphone interception.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT has an audio capture and eavesdropping module.
   </Example>
   <Example id="S0098" name="T9000">
    T9000 uses the Skype API to record audio and video calls. It writes encrypted data to %APPDATA%\Intel\Skype.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to capture VoiceIP application audio on an infected host.
   </Example>
   <Example id="S0257" name="VERMIN">
    VERMIN can perform audio capture.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1119" name="Automated Collection">
  Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. In cloud-based environments, adversaries may also use cloud APIs, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. This functionality could also be built into remote access tools.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   IaaS, Linux, SaaS, Windows, macOS
  </Platforms>
  <System_Requirements>
   Permissions to access directories, files, and API endpoints that store information of interest.
  </System_Requirements>
  <Examples>
   <Example id="S0622" name="AppleSeed">
    AppleSeed has automatically collected data from USB drives, keystrokes, and screen images before exfiltration.
   </Example>
   <Example id="G0006" name="APT1">
    APT1 used a batch script to perform a series of discovery techniques and saves it to a text file.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 used a publicly available tool to gather and compress multiple documents on the DCCC and DNC networks.
   </Example>
   <Example id="S0438" name="Attor">
    Attor has automatically collected data about the compromised system.
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS monitors USB devices and copies files with certain extensions to a predefined directory.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot recursively generates a list of files within a directory and sends them back to the control server.
   </Example>
   <Example id="S1043" name="ccf32">
    ccf32 can be used to automatically collect files from a compromised host.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used custom DLLs for continuous retrieval of data from memory.
   </Example>
   <Example id="S0244" name="Comnie">
    Comnie executes a batch script to store discovery information in %TEMP%\info.dat and then uploads the temporarily file to the remote C2 server.
   </Example>
   <Example id="G0142" name="Confucius">
    Confucius has used a file stealer to steal documents and images with the following extensions: txt, pdf, png, jpg, doc, xls, xlm, odp, ods, odt, rtf, ppt, xlsx, xlsm, docx, pptx, and jpeg.
   </Example>
   <Example id="S0538" name="Crutch">
    Crutch can automatically monitor removable drives in a loop and copy interesting files.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can automatically gather the username, domain name, machine name, and other information from a compromised system.
   </Example>
   <Example id="G0053" name="FIN5">
    FIN5 scans processes on all victim systems in the environment and uses automated scripts to pull back the results.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used a script to iterate through a list of compromised PoS systems, copy and remove data to a log file, and to bind to events from the submit payment button.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors used Empire to automatically gather the username, domain name, machine name, and other system information.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can monitor files for changes and automatically collect them.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has deployed scripts on compromised systems that automatically scan for interesting documents.
   </Example>
   <Example id="S0597" name="GoldFinder">
    GoldFinder logged and stored information related to the route or hops a packet took from a compromised machine to a hardcoded C2 server, including the target C2 URL, HTTP response/status code, HTTP response headers and values, and data received from the C2 node.
   </Example>
   <Example id="S0170" name="Helminth">
    A Helminth VBScript receives a batch script to execute a set of commands in a command prompt.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can sort and collect specific documents as well as generate a list of all files on a newly inserted drive and store them in an encrypted file.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has performed frequent and scheduled data collection from victim networks.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron can be configured to automatically collect files under a specified directory.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used the Csvde tool to collect Active Directory files and data.
   </Example>
   <Example id="S0443" name="MESSAGETAP">
    MESSAGETAP checks two files, keyword_parm.txt and parm.txt, for instructions on how to target and save data parsed and extracted from SMS message data from the network traffic. If an SMS message contained either a phone number, IMSI number, or keyword that matched the predefined list, it is saved to a CSV file for later theft by the threat actor.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has automatically collected mouse clicks, continuous screenshots on the machine, and set timers to collect the contents of the clipboard and website browsing.
   </Example>
   <Example id="S0339" name="Micropsia">
    Micropsia executes an RAR tool to recursively archive files based on a predefined list of file extensions (.xls, .xlsx, .csv, .odt, .doc, .docx, .ppt, .pptx, .pdf, .mdb, .accdb, .accde, *.txt).
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda used custom batch scripts to collect files automatically from a targeted system.
   </Example>
   <Example id="S0699" name="Mythic">
    Mythic supports scripting of file downloads from agents.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can automatically archive collected data.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used automated collection.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used a script to collect information about the infected system.
   </Example>
   <Example id="S1017" name="OutSteel">
    OutSteel can automatically scan for and collect files with specific extensions.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork developed a file stealer to search C:\ and collect files with certain extensions. Patchwork also executed a script to enumerate all drives, store them as a list, and upload generated files to the C2 server.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT used file system monitoring to track modification and enable automatic exfiltration.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 contains a module for recursively parsing through files and directories to gather valid credit card numbers.
   </Example>
   <Example id="S0238" name="Proxysvc">
    Proxysvc automatically collects data about the victim and sends it to the control server.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can conduct an initial scan for Microsoft Word documents on the local system, removable media, and connected network drives, before tagging and collecting them. It can continue tagging documents to collect with follow up scans.
   </Example>
   <Example id="S0684" name="ROADTools">
    ROADTools automatically gathers data from Azure AD environments using the Azure Graph API.
   </Example>
   <Example id="S0090" name="Rover">
    Rover automatically collects files from the local system and removable drives based on a predefined list of file extensions on a regular timeframe.
   </Example>
   <Example id="S0148" name="RTM">
    RTM monitors browsing activity and automatically captures screenshots if a victim browses to a URL matching one of a list of strings.
   </Example>
   <Example id="S0445" name="ShimRatReporter">
    ShimRatReporter gathered information automatically, without instruction from a C2, related to the user and host machine that is compiled into a report and sent to the operators.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has used tools to automatically collect system and network configuration information.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity has a file searcher component that can automatically collect and archive files based on a predefined list of file extensions.
   </Example>
   <Example id="S0098" name="T9000">
    T9000 searches removable storage devices for files with a pre-defined list of file extensions (e.g. * .doc, .ppt, .xls, .docx, .pptx, *.xlsx). Any matching files are encrypted and written to a local user directory.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to index and compress files into a send queue for exfiltration.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 ran a command to compile an archive of file types of interest from the victim user's directories.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has collected information automatically using the adversary's USBferry attack.
   </Example>
   <Example id="S0136" name="USBStealer">
    For all non-removable drives on a victim, USBStealer executes automated collection of certain files for later exfiltration.
   </Example>
   <Example id="S0476" name="Valak">
    Valak can download a module to search for and build a report of harvested credential data.
   </Example>
   <Example id="S0257" name="VERMIN">
    VERMIN saves each collected file with the automatically generated format {0:dd-MM-yyyy}.txt .
   </Example>
   <Example id="S0466" name="WindTail">
    WindTail can identify and add files that possess specific file extensions to an array for archiving.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy scans the system and automatically collects files with the following extensions: .doc, .docx, ,.xls, .xlsx, .pdf, .pptx, .rar, .zip, .jpg, .jpeg, .bmp, .tiff, .kum, .tlg, .sbx, .cr, .hse, .hsf, and .lhz.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Encryption and off-system storage of sensitive information may be one way to mitigate collection of files, but may not stop an adversary from acquiring the information if an intrusion persists over a long period of time and the adversary is able to discover and access the data through other means. Strong passwords should be used on certain encrypted documents that use them to prevent offline cracking through Brute Force techniques.
   </Mitigation>
   <Mitigation id="M1029" name="Remote Data Storage">
    Encryption and off-system storage of sensitive information may be one way to mitigate collection of files, but may not stop an adversary from acquiring the information if an intrusion persists over a long period of time and the adversary is able to discover and access the data through other means.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1020" name="Automated Exfiltration">
  Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection.
  <Tactic>
   Exfiltration
  </Tactic>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0438" name="Attor">
    Attor has a file uploader plugin that automatically exfiltrates the collected data and log files to the C2 server.
   </Example>
   <Example id="S0050" name="CosmicDuke">
    CosmicDuke exfiltrates collected files automatically over FTP to remote servers.
   </Example>
   <Example id="S0538" name="Crutch">
    Crutch has automatically exfiltrated stolen files to Dropbox.
   </Example>
   <Example id="S0600" name="Doki">
    Doki has used a script that gathers information from a hardcoded list of IP addresses and uploads to an Ngrok URL.
   </Example>
   <Example id="S0377" name="Ebury">
    Ebury can automatically exfiltrate gathered SSH credentials.
   </Example>
   <Example id="S0363" name="Empire">
    Empire has the ability to automatically send collected data back to the threat actors' C2.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors collected information via Empire, which was automatically sent back to the adversary's C2.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has used modules that automatically upload gathered documents to the C2 server.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has performed  frequent and scheduled data exfiltration from compromised networks.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron can be configured to automatically exfiltrate files under a specified directory.
   </Example>
   <Example id="S0409" name="Machete">
    Machete’s collected files are exfiltrated automatically to remote servers.
   </Example>
   <Example id="S1017" name="OutSteel">
    OutSteel can automatically upload collected files to its C2 server.
   </Example>
   <Example id="S0643" name="Peppy">
    Peppy has the ability to automatically exfiltrate files and keylogs.
   </Example>
   <Example id="S0090" name="Rover">
    Rover automatically searches for files on local drives based on a predefined list of file extensions and sends them to the command and control server every 60 minutes. Rover also automatically sends keylogger files and screenshots to the C2 server on a regular timeframe.
   </Example>
   <Example id="S0445" name="ShimRatReporter">
    ShimRatReporter sent collected system and network information compiled into a report to an adversary-controlled C2.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has configured tools to automatically send collected files to attacker controlled servers.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity can automatically exfiltrate collected documents to the C2 server.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to manage an automated queue of egress files and commands sent to its C2.
   </Example>
   <Example id="S0131" name="TINYTYPHON">
    When a document is found matching one of the extensions in the configuration, TINYTYPHON uploads it to the C2 server.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has used a copy function to automatically exfiltrate sensitive data from air-gapped systems using USB storage.
   </Example>
   <Example id="S0136" name="USBStealer">
    USBStealer automatically exfiltrates collected files via removable media when an infected device connects to an air-gapped victim machine after initially being connected to an internet-enabled victim machine.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1020.001" name="Automated Exfiltration: Traffic Duplication">
  Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised network infrastructure.  Traffic mirroring is a native feature for some network devices and used for network analysis and may be configured to duplicate traffic and forward to one or more destinations for analysis by a network analyzer or other monitoring device.
  <Tactic>
   Exfiltration
  </Tactic>
  <Platforms>
   Network
  </Platforms>
  <CAPEC_ID>
   CAPEC-117
  </CAPEC_ID>
  <Mitigations>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Ensure that all wired and/or wireless traffic is encrypted appropriately. Use best practices for authentication protocols, such as Kerberos, and ensure web traffic that may contain credentials is protected by SSL/TLS.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1197" name="BITS Jobs">
  Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.
  <Tactics>
   Defense Evasion, Persistence
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Defense_Bypassed>
   Firewall, Host forensic analysis
  </Defense_Bypassed>
  <Examples>
   <Example id="G0087" name="APT39">
    APT39 has used the BITS protocol to exfiltrate stolen data from a compromised host.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used BITSAdmin to download and install payloads.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar has been downloaded via Windows BITS functionality.
   </Example>
   <Example id="S0190" name="BITSAdmin">
    BITSAdmin can be used to create BITS Jobs to launch a malicious process.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can download a hosted "beacon" payload using BITSAdmin.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor has used BITSadmin to download and execute malicious DLLs.
   </Example>
   <Example id="S0201" name="JPIN">
    A JPIN variant downloads the backdoor payload via the BITS service.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has used BITSAdmin to download additional tools.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can use BITS Utility to connect with the C2 server.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork has used BITS jobs to download malicious payloads.
   </Example>
   <Example id="S0654" name="ProLock">
    ProLock can use BITS jobs to download its malicious payload.
   </Example>
   <Example id="S0333" name="UBoatRAT">
    UBoatRAT takes advantage of the /SetNotifyCmdLine option in BITSAdmin to ensure it stays running on a system to maintain persistence.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Modify network and/or host firewall rules, as well as other network controls, to only allow legitimate BITS traffic.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Consider reducing the default BITS job lifetime in Group Policy or by editing the JobInactivityTimeout and MaxDownloadTime Registry values in  HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\BITS.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Consider limiting access to the BITS interface to specific users or groups.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1547" name="Boot or Logon Autostart Execution">
  Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, User, root
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-564
  </CAPEC_ID>
  <Examples>
   <Example id="S0651" name="BoxCaon">
    BoxCaon established persistence by setting the HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows\load registry key to point to its executable.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack’s RAT makes a persistent target file with auto execution on the host start.
   </Example>
   <Example id="S0084" name="Mis-Type">
    Mis-Type has created registry keys for persistence, including HKCU\Software\bkfouerioyou, HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\{6afa8072-b2b1-31a8-b5c1-{Unique Identifier}, and HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\{3BF41072-B2B1-31A8-B5C1-{Unique Identifier}.
   </Example>
   <Example id="S0083" name="Misdat">
    Misdat has created registry keys for persistence, including HKCU\Software\dnimtsoleht\StubPath, HKCU\Software\snimtsOleht\StubPath, HKCU\Software\Backtsaleht\StubPath, HKLM\SOFTWARE\Microsoft\Active Setup\Installed. Components\{3bf41072-b2b1-21c8-b5c1-bd56d32fbda7}, and HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\{3ef41072-a2f1-21c8-c5c1-70c2c3bc7905}.
   </Example>
   <Example id="S0653" name="xCaon">
    xCaon has added persistence via the Registry key HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows\load which causes the malware to run each time any user logs in.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0027" name="Driver">
    Driver Load
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0008" name="Kernel">
    Kernel Module Load
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Creation | Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1547.001" name="Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder">
  Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the "run keys" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-270
  </CAPEC_ID>
  <Examples>
   <Example id="S0045" name="ADVSTORESHELL">
    ADVSTORESHELL achieves persistence by adding itself to the HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run Registry key.
   </Example>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla can add itself to the Registry as a startup program to establish persistence.
   </Example>
   <Example id="S1025" name="Amadey">
    Amadey has changed the Startup folder to the one containing its executable by overwriting the registry keys.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed has the ability to create the Registry key name EstsoftAutoUpdate at HKCU\Software\Microsoft/Windows\CurrentVersion\RunOnce to establish persistence.
   </Example>
   <Example id="G0026" name="APT18">
    APT18 establishes persistence via the HKCU\Software\Microsoft\Windows\CurrentVersion\Run key.
   </Example>
   <Example id="G0073" name="APT19">
    An APT19 HTTP malware variant establishes persistence by setting the Registry key HKCU\Software\Microsoft\Windows\CurrentVersion\Run\Windows Debug Tools-%LOCALAPPDATA%\.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has deployed malware that has copied itself to the startup directory for persistence.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 added Registry Run keys to establish persistence.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 places scripts in the startup folder for persistence.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 established persistence using Registry Run keys, both to execute PowerShell and VBS scripts as well as to execute their backdoor directly.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has deployed a tool known as DarkComet to the Startup folder of a victim, and used Registry run keys to gain persistence.
   </Example>
   <Example id="G0067" name="APT37">
    APT37's has added persistence via the Registry key HKCU\Software\Microsoft\CurrentVersion\Run\.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has maintained persistence using the startup folder.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 created and modified startup files for persistence.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has established persistence via the Startup folder or Run Registry key.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth creates a startup item for persistence.
   </Example>
   <Example id="S1029" name="AuTo Stealer">
    AuTo Stealer can place malicious executables in a victim's AutoRun registry key or StartUp directory, depending on the AV product installed, to maintain persistence.
   </Example>
   <Example id="S0640" name="Avaddon">
    Avaddon uses registry run keys for persistence.
   </Example>
   <Example id="S0414" name="BabyShark">
    BabyShark has added a Registry key to ensure all future macros are enabled for Microsoft Word and Excel as well as for additional persistence.
   </Example>
   <Example id="S0093" name="Backdoor.Oldrea">
    Backdoor.Oldrea adds Registry Run keys to achieve persistence.
   </Example>
   <Example id="S0031" name="BACKSPACE">
    BACKSPACE achieves persistence by creating a shortcut to itself in the CSIDL_STARTUP directory.
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS installs a registry Run key to establish persistence.
   </Example>
   <Example id="S0337" name="BadPatch">
    BadPatch establishes a foothold by adding a link to the malware executable in the startup folder.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can create or add files to Registry Run Keys to establish persistence.
   </Example>
   <Example id="S0127" name="BBSRAT">
    BBSRAT has been loaded through DLL side-loading of a legitimate Citrix executable that is set to persist through the Registry Run key location HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\ssonsvr.exe.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has added itself to the Registry key HKEY_CURRENT_USER\Software\Microsoft\CurrentVersion\Run\ for persistence.
   </Example>
   <Example id="S0570" name="BitPaymer">
    BitPaymer has set the run key HKCU\Software\Microsoft\Windows\CurrentVersion\Run for persistence.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    The BlackEnergy 3 variant drops its main DLL component and then creates a .lnk shortcut to that file in the startup folder.
   </Example>
   <Example id="S0635" name="BoomBox">
    BoomBox can establish persistence by writing the Registry value MicroNativeCacheSvc to HKCU\Software\Microsoft\Windows\CurrentVersion\Run.
   </Example>
   <Example id="S0204" name="Briba">
    Briba creates run key Registry entries pointing to malicious DLLs dropped to disk.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has used a batch script that adds a Registry Run key to establish malware persistence.
   </Example>
   <Example id="S0471" name="build_downer">
    build_downer has the ability to add itself to the Registry Run key for persistence.
   </Example>
   <Example id="S0030" name="Carbanak">
    Carbanak stores a configuration files in the startup directory to automatically execute commands in order to persist across reboots.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp has maintained persistence by placing itself inside the current user's startup folder.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT establishes Persistence by setting the  HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows\Load Registry key to point to its executable.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes has added persistence via the Registry key software\microsoft\windows\currentversion\run\microsoft windows html help.
   </Example>
   <Example id="S0144" name="ChChes">
    ChChes establishes persistence by adding a Registry Run key.
   </Example>
   <Example id="S1041" name="Chinoxy">
    Chinoxy has established persistence via the HKCU\Software\Microsoft\Windows\CurrentVersion\Run registry key and by loading a dropper to (%COMMON_ STARTUP%\\eoffice.exe).
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can establish persistence by adding a Registry run key.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has used Registry Run keys for persistence. The group has also set a Startup path to launch the PowerShell shell command and download Cobalt Strike.
   </Example>
   <Example id="S0338" name="Cobian RAT">
    Cobian RAT creates an autostart Registry key to ensure persistence.
   </Example>
   <Example id="S0244" name="Comnie">
    Comnie achieves persistence by adding a shortcut of itself to the startup path in the Registry.
   </Example>
   <Example id="S0608" name="Conficker">
    Conficker adds Registry Run keys to establish persistence.
   </Example>
   <Example id="G0142" name="Confucius">
    Confucius has dropped malicious files into the startup folder %AppData%\Microsoft\Windows\Start Menu\Programs\Startup on a compromised host in order to maintain persistence.
   </Example>
   <Example id="S0137" name="CORESHELL">
    CORESHELL has established persistence by creating autostart extensibility point (ASEP) Registry entries in the Run key and other Registry keys, as well as by creating shortcuts in the Internet Explorer Quick Start folder.
   </Example>
   <Example id="S0046" name="CozyCar">
    One persistence mechanism used by CozyCar is to set itself to be executed at system startup by adding a Registry value under one of the following Registry keys: HKLM\Software\Microsoft\Windows\CurrentVersion\Run\ HKCU\Software\Microsoft\Windows\CurrentVersion\Run\ HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson can add Registry run keys for persistence.
   </Example>
   <Example id="S0235" name="CrossRAT">
    CrossRAT uses run keys for persistence on Windows
   </Example>
   <Example id="G0070" name="Dark Caracal">
    Dark Caracal's version of Bandook adds a registry key to HKEY_USERS\Software\Microsoft\Windows\CurrentVersion\Run for persistence.
   </Example>
   <Example id="S0334" name="DarkComet">
    DarkComet adds several Registry entries to enable automatic execution at every system startup.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel has been known to establish persistence by adding programs to the Run Registry key.
   </Example>
   <Example id="S1021" name="DnsSystem">
    DnsSystem can write itself to the Startup folder to gain persistence.
   </Example>
   <Example id="S0186" name="DownPaper">
    DownPaper uses PowerShell to add a Registry Run key in order to establish persistence.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has added the registry value ntdll to the Registry Run key to establish persistence.
   </Example>
   <Example id="S0062" name="DustySky">
    DustySky achieves persistence by creating a Registry entry in HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run.
   </Example>
   <Example id="S0081" name="Elise">
    If establishing persistence by installation as a new service fails, one variant of Elise establishes persistence for the created .exe file by setting the following Registry key: HKCU\Software\Microsoft\Windows\CurrentVersion\Run\svchost : %APPDATA%\Microsoft\Network\svchost.exe. Other variants have set the following Registry keys for persistence: HKCU\Software\Microsoft\Windows\CurrentVersion\Run\imejp :
   </Example>
   <Example id="S0082" name="Emissary">
    Variants of Emissary have added Run Registry keys to establish persistence.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has been observed adding the downloaded payload to the HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run key to maintain persistence.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can modify the registry run keys HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run and HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run for persistence.
   </Example>
   <Example id="S0396" name="EvilBunny">
    EvilBunny has created Registry keys for persistence in
   </Example>
   <Example id="S0152" name="EvilGrab">
    EvilGrab adds a Registry Run key for ctfmon.exe to establish persistence.
   </Example>
   <Example id="S0568" name="EVILNUM">
    EVILNUM can achieve persistence through the Registry Run key.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke has used HKLM\SOFTWARE\Microsoft\CurrentVersion\Run to establish persistence.
   </Example>
   <Example id="S0267" name="FELIXROOT">
    FELIXROOT adds a shortcut file to the startup folder for persistence.
   </Example>
   <Example id="G0051" name="FIN10">
    FIN10 has established persistence by using the Registry option in PowerShell Empire to add a Run key.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used Registry Run keys to establish persistence for its downloader tools known as HARDTACK and SHIPBREAD.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 malware has created Registry Run and RunOnce keys to establish persistence, and has also added items to the Startup folder.
   </Example>
   <Example id="S0355" name="Final1stspy">
    Final1stspy creates a Registry Run key to establish persistence.
   </Example>
   <Example id="S0182" name="FinFisher">
    FinFisher establishes persistence by creating the Registry key HKCU\Software\Microsoft\Windows\Run.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro has dropped an executable file to the startup directory.
   </Example>
   <Example id="S0036" name="FLASHFLOOD">
    FLASHFLOOD achieves persistence by making an entry in the Registry's Run key.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy has established persistence via the HKCU\SOFTWARE\microsoft\windows\currentversion\run registry key.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can use a Registry Run Key and the Startup folder to establish persistence.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group tools have registered Run keys in the registry to give malicious VBS files persistence.
   </Example>
   <Example id="S0168" name="Gazer">
    Gazer can establish persistence by creating a .lnk file in the Start menu.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can set persistence with a Registry run key.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT has added a Registry Run key to establish persistence.
   </Example>
   <Example id="S0249" name="Gold Dragon">
    Gold Dragon establishes persistence in the Startup folder.
   </Example>
   <Example id="G0078" name="Gorgon Group">
    Gorgon Group malware can create a .lnk file and add a Registry Run key to establish persistence.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can use run keys and create link files in the startup folder for persistence.
   </Example>
   <Example id="S0417" name="GRIFFON">
    GRIFFON has used a persistence module that stores the implant inside the Registry, which executes at logon.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent can set persistence with a Registry run key.
   </Example>
   <Example id="S0561" name="GuLoader">
    GuLoader can establish persistence via the Registry under HKCU\Software\Microsoft\Windows\CurrentVersion\RunOnce.
   </Example>
   <Example id="S0499" name="Hancitor">
    Hancitor  has added Registry Run keys to establish persistence.
   </Example>
   <Example id="S0170" name="Helminth">
    Helminth establishes persistence by creating a shortcut in the Start Menu folder.
   </Example>
   <Example id="S1027" name="Heyoka Backdoor">
    Heyoka Backdoor can establish persistence with the auto start function including using the value EverNoteTrayUService.
   </Example>
   <Example id="S0087" name="Hi-Zor">
    Hi-Zor creates a Registry Run key to establish persistence.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa added a spoofed binary to the start-up folder for persistence.
   </Example>
   <Example id="S0070" name="HTTPBrowser">
    HTTPBrowser has established persistence by setting the HKCU\Software\Microsoft\Windows\CurrentVersion\Run key value for wdm to the path of the executable. It has also used the Registry entry HKEY_USERS\Software\Microsoft\Windows\CurrentVersion\Run vpdn "%ALLUSERPROFILE%\%APPDATA%\vpdn\VPDN_LU.exe" to establish persistence.
   </Example>
   <Example id="S0483" name="IcedID">
    IcedID has established persistence by creating a Registry run key.
   </Example>
   <Example id="G0100" name="Inception">
    Inception has maintained persistence by modifying Registry run key value  HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\.
   </Example>
   <Example id="S0259" name="InnaputRAT">
    Some InnaputRAT variants establish persistence by modifying the Registry key HKU\\Software\Microsoft\Windows\CurrentVersion\Run:%appdata%\NeutralApp\NeutralApp.exe.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can place a lnk file in the Startup Folder to achieve persistence.
   </Example>
   <Example id="S0015" name="Ixeshe">
    Ixeshe can achieve persistence by adding itself to the HKCU\Software\Microsoft\Windows\CurrentVersion\Run Registry key.
   </Example>
   <Example id="S0389" name="JCry">
    JCry has created payloads in the Startup directory to maintain persistence.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    JHUHUGIT has used a Registry Run key to establish persistence by executing JavaScript code within the rundll32.exe process.
   </Example>
   <Example id="S0088" name="Kasidet">
    Kasidet creates a Registry Run key to establish persistence.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar adds a sub-key under several Registry run keys.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Several Ke3chang backdoors achieved persistence by adding a Run key.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has placed scripts in the startup folder for persistence and modified the HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce Registry key.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic has added persistence to the HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run Registry key.
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS can set the AutoRun Registry key with a PowerShell command.
   </Example>
   <Example id="S0356" name="KONNI">
    A version of KONNI has dropped a Windows shortcut into the Startup folder to establish persistence.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has maintained persistence by loading malicious code into a startup folder or by adding a Registry Run key.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter has achieved persistence via writing a PowerShell script to the autorun registry key.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has used JavaScript to create a shortcut file in the Startup folder that points to its main backdoor.
   </Example>
   <Example id="S0513" name="LiteDuke">
    LiteDuke can create persistence by adding a shortcut in the CurrentVersion\Run Registry key.
   </Example>
   <Example id="S0397" name="LoJax">
    LoJax has modified the Registry key ‘HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\BootExecute’ from ‘autocheck autochk ’ to ‘autocheck autoche ’ in order to execute its payload during Windows startup.
   </Example>
   <Example id="S0582" name="LookBack">
    LookBack sets up a Registry Run key to establish a persistence mechanism.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can persist by setting Registry key values HKLM\Software\Microsoft\Windows\CurrentVersion\Run\QQMusic and HKCU\Software\Microsoft\Windows\CurrentVersion\Run\QQMusic.
   </Example>
   <Example id="S0409" name="Machete">
    Machete used the startup folder for persistence.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound malware has used Registry Run keys to establish persistence.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can drop its payload into the Startup directory to ensure it automatically runs when the compromised system is started.
   </Example>
   <Example id="S0167" name="Matryoshka">
    Matryoshka can establish persistence by adding Registry Run keys.
   </Example>
   <Example id="S0449" name="Maze">
    Maze has created a file named "startup_vrun.bat" in the Startup folder of a virtual machine to establish persistence.
   </Example>
   <Example id="S0500" name="MCMD">
    MCMD can use Registry Run Keys for persistence.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has configured persistence to the Registry ket HKCU\Software\Microsoft\Windows\CurrentVersion\Run, Spotify =% APPDATA%\Spotify\Spotify.exe and used .LNK files in the startup folder to achieve persistence.
   </Example>
   <Example id="S0080" name="Mivast">
    Mivast creates the following Registry entry: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\Micromedia.
   </Example>
   <Example id="S0553" name="MoleNet">
    MoleNet can achieve persitence on the infected machine by setting the Registry run key.
   </Example>
   <Example id="G0021" name="Molerats">
    Molerats saved malicious files within the AppData and Startup folders to maintain persistence.
   </Example>
   <Example id="S1026" name="Mongall">
    Mongall can establish persistence with the auto start function including using the value EverNoteTrayUService.
   </Example>
   <Example id="S0256" name="Mosquito">
    Mosquito establishes persistence under the Registry key HKCU\Software\Run auto_update.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has added Registry Run key KCU\Software\Microsoft\Windows\CurrentVersion\Run\SystemTextEncoding to establish persistence.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has created the registry key HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Run\AdobelmdyU to maintain persistence.
   </Example>
   <Example id="G0019" name="Naikon">
    Naikon has modified a victim's Windows Run registry to establish persistence.
   </Example>
   <Example id="S0228" name="NanHaiShu">
    NanHaiShu modifies the %regrun% Registry to point itself to an autostart mechanism.
   </Example>
   <Example id="S0336" name="NanoCore">
    NanoCore creates a RunOnce key in the Registry to execute its VBS scripts each time the user logs on to the machine.
   </Example>
   <Example id="S0247" name="NavRAT">
    NavRAT creates a Registry key to ensure a file gets executed upon reboot in order to establish persistence.
   </Example>
   <Example id="S0630" name="Nebulae">
    Nebulae can achieve persistence through a Registry Run key.
   </Example>
   <Example id="S0034" name="NETEAGLE">
    The "SCOUT" variant of NETEAGLE achieves persistence by adding itself to the HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run Registry key.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE creates a Registry start-up entry to establish persistence.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT has added persistence via the Registry key HKCU\Software\Microsoft\CurrentVersion\Run\ and dropped a shortcut in %STARTUP%.
   </Example>
   <Example id="S0353" name="NOKKI">
    NOKKI has established persistence by writing the payload to the Registry key HKCU\Software\Microsoft\Windows\CurrentVersion\Run.
   </Example>
   <Example id="S0644" name="ObliqueRAT">
    ObliqueRAT can gain persistence by a creating a shortcut in the infected user's Startup directory.
   </Example>
   <Example id="S0340" name="Octopus">
    Octopus achieved persistence by placing a malicious executable in the startup directory and has added the HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run key to the Registry.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum establishes persistence by creating a .lnk shortcut to itself in the Startup folder.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, the threat actors used batch files that allowed them to establish persistence by adding the following Registry key: "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SvcHost" /v COMSysApp /t REG_MULTI_SZ /d "COMSysApp" /f.
   </Example>
   <Example id="C0013" name="Operation Sharpshooter">
    During Operation Sharpshooter, a first-stage downloader installed Rising Sun to %Startup%\mssync.exe on a compromised host.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork has added the path of its second-stage malware to the startup folder to achieve persistence. One of its file stealers has also persisted by adding a Registry Run key.
   </Example>
   <Example id="S0124" name="Pisloader">
    Pisloader establishes persistence via a Registry Run key.
   </Example>
   <Example id="S0254" name="PLAINTEE">
    PLAINTEE gains persistence by adding the Registry key HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX adds Run key entries in the Registry to establish persistence.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has added a registry key in the  hive for persistence.
   </Example>
   <Example id="S0012" name="PoisonIvy">
    PoisonIvy creates run key Registry entries pointing to a malicious executable dropped to disk.
   </Example>
   <Example id="S0139" name="PowerDuke">
    PowerDuke achieves persistence by using various Registry Run keys.
   </Example>
   <Example id="S0441" name="PowerShower">
    PowerShower sets up persistence with a Registry run key.
   </Example>
   <Example id="S0145" name="POWERSOURCE">
    POWERSOURCE achieves persistence by setting a Registry Run key, with the path depending on whether the victim account has user or administrator access.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit's New-UserPersistenceOption Persistence argument can be used to establish via the HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run Registry key.
   </Example>
   <Example id="S0371" name="POWERTON">
    POWERTON can install a Registry Run key for persistence.
   </Example>
   <Example id="S0113" name="Prikormka">
    Prikormka adds itself to a Registry Run key with the name guidVGA or guidVSA.
   </Example>
   <Example id="G0056" name="PROMETHIUM">
    PROMETHIUM has used Registry run keys to establish persistence.
   </Example>
   <Example id="S0147" name="Pteranodon">
    Pteranodon copies itself to the Startup folder to establish persistence.
   </Example>
   <Example id="S0196" name="PUNCHBUGGY">
    PUNCHBUGGY has been observed using a Registry Run key.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy adds itself to the startup folder or adds itself to the Registry key SOFTWARE\Microsoft\Windows\CurrentVersion\Run for persistence.
   </Example>
   <Example id="G0024" name="Putter Panda">
    A dropper used by Putter Panda installs itself into the ASEP Registry key HKCU\Software\Microsoft\Windows\CurrentVersion\Run with a value named McUpdate.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can maintain persistence by creating an auto-run Registry key.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    If the QuasarRAT client process does not have administrator privileges it will add a registry key to HKCU\Software\Microsoft\Windows\CurrentVersion\Run for persistence.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay has created Registry Run keys to establish persistence.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession has the ability to modify a Registry Run key to establish persistence.
   </Example>
   <Example id="S0172" name="Reaver">
    Reaver creates a shortcut file and saves it in a Startup folder to establish persistence.
   </Example>
   <Example id="S0153" name="RedLeaves">
    RedLeaves attempts to add a shortcut file in the Startup folder to achieve persistence. If this fails, it attempts to add Registry Run keys.
   </Example>
   <Example id="S0332" name="Remcos">
    Remcos can add itself to the Registry key HKCU\Software\Microsoft\Windows\CurrentVersion\Run for persistence.
   </Example>
   <Example id="S0375" name="Remexi">
    Remexi utilizes Run Registry keys in the HKLM hive as a persistence mechanism.
   </Example>
   <Example id="S0379" name="Revenge RAT">
    Revenge RAT creates a Registry key at HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell to survive a system reboot.
   </Example>
   <Example id="S0433" name="Rifdoor">
    Rifdoor has created a new registry entry at HKEY_CURRENT_USERS\Software\Microsoft\Windows\CurrentVersion\Run\Graphics with a value of C:\ProgramData\Initech\Initech.exe /run.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke's miner has created UPX-packed files in the Windows Start Menu Folder.
   </Example>
   <Example id="S0270" name="RogueRobin">
    RogueRobin created a shortcut in the Windows startup folder to launch a PowerShell script each time the user logs in to establish persistence.
   </Example>
   <Example id="S0090" name="Rover">
    Rover persists by creating a Registry entry in HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\.
   </Example>
   <Example id="S0148" name="RTM">
    RTM tries to add a Registry Run key under the name "Windows Update" to establish persistence.
   </Example>
   <Example id="G0048" name="RTM">
    RTM has used Registry run keys to establish persistence for the RTM Trojan and other tools, such as a modified version of TeamViewer remote desktop software.
   </Example>
   <Example id="S0253" name="RunningRAT">
    RunningRAT adds itself to the Registry key Software\Microsoft\Windows\CurrentVersion\Run to establish persistence upon reboot.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk has used the Windows command line to create a Registry entry under HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run to establish persistence.
   </Example>
   <Example id="S0085" name="S-Type">
    S-Type may create a .lnk file to itself that is saved in the Start menu folder. It may also create the Registry key HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\ IMJPMIJ8.1{3 characters of Unique Identifier}.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has established persistence by being copied to the Startup directory or through the \Software\Microsoft\Windows\CurrentVersion\Run registry key.
   </Example>
   <Example id="S0074" name="Sakula">
    Most Sakula samples maintain persistence by setting the Registry Run key SOFTWARE\Microsoft\Windows\CurrentVersion\Run\ in the HKLM or HKCU hive, with the Registry value and file name varying by sample.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has the ability to add a value to the Registry Run key to establish persistence if it detects it is running with regular user privilege.
   </Example>
   <Example id="S0053" name="SeaDuke">
    SeaDuke is capable of persisting via the Registry Run key or a .lnk file stored in the Startup directory.
   </Example>
   <Example id="S0345" name="Seasalt">
    Seasalt creates a Registry entry to ensure infection after reboot under HKLM\Software\Microsoft\Windows\currentVersion\Run.
   </Example>
   <Example id="S0382" name="ServHelper">
    ServHelper may attempt to establish persistence via the HKCU\Software\Microsoft\Windows\CurrentVersion\Run\ run key.
   </Example>
   <Example id="S0546" name="SharpStage">
    SharpStage has the ability to create persistence for the malware using the Registry autorun key and startup folder.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat has installed a registry based start-up key HKCU\Software\microsoft\windows\CurrentVersion\Run to maintain persistence should other methods fail.
   </Example>
   <Example id="S0028" name="SHIPSHAPE">
    SHIPSHAPE achieves persistence by creating a shortcut in the Startup folder.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has added paths to executables in the Registry to establish persistence.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has used HKCU\Software\Microsoft\Windows\CurrentVersion\Run, HKLM\Software\Microsoft\Windows\CurrentVersion\Run, and the Startup folder to establish persistence.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can establish a LNK file in the startup folder for persistence.
   </Example>
   <Example id="S1035" name="Small Sieve">
    Small Sieve has the ability to add itself to HKCU\Software\Microsoft\Windows\CurrentVersion\Run\OutlookMicrosift for persistence.
   </Example>
   <Example id="S0226" name="Smoke Loader">
    Smoke Loader adds a Registry Run key for persistence and adds a script in the Startup folder to deploy the payload.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM has used reg.exe to create a Registry Run key.
   </Example>
   <Example id="S0159" name="SNUGRIDE">
    SNUGRIDE establishes persistence through a Registry Run key.
   </Example>
   <Example id="S0035" name="SPACESHIP">
    SPACESHIP achieves persistence by creating a shortcut in the current user's Startup folder.
   </Example>
   <Example id="S0058" name="SslMM">
    To establish persistence, SslMM identifies the Start Menu Startup directory and drops a link to its own executable disguised as an "Office Start," "Yahoo Talk," "MSN Gaming Z0ne," or "MSN Talk" shortcut.
   </Example>
   <Example id="S1037" name="STARWHALE">
    STARWHALE can establish persistence by installing itself in the startup folder, whereas the GO variant has created a HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\OutlookM registry key.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity can use the HKCU\Software\Microsoft\Windows\CurrentVersion\Run Registry key for persistence.
   </Example>
   <Example id="S0018" name="Sykipot">
    Sykipot has been known to establish persistence by adding programs to the Run Registry key.
   </Example>
   <Example id="S0663" name="SysUpdate">
    SysUpdate can use a Registry Run key to establish persistence.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor has modified the HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run key for persistence.
   </Example>
   <Example id="S0586" name="TAINTEDSCRIBE">
    TAINTEDSCRIBE can copy itself into the current user’s Startup folder as "Narrator.exe" for persistence.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has added batch scripts to the startup folder.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    A Threat Group-3390 tool can add the binary’s path to the Registry key Software\Microsoft\Windows\CurrentVersion\Run to add persistence.
   </Example>
   <Example id="S0665" name="ThreatNeedle">
    ThreatNeedle can be loaded into the Startup folder (%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\OneDrives.lnk) as a Shortcut file for persistence.
   </Example>
   <Example id="S0131" name="TINYTYPHON">
    TINYTYPHON installs itself under Registry Run key to establish persistence.
   </Example>
   <Example id="S0004" name="TinyZBot">
    TinyZBot can create a shortcut in the Windows startup folder for persistence.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot establishes persistence in the Startup folder.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can create a link to itself in the Startup folder to automatically start itself upon system restart.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has created shortcuts in the Startup folder to establish persistence.
   </Example>
   <Example id="S0178" name="Truvasys">
    Truvasys adds a Registry Run key to establish persistence.
   </Example>
   <Example id="S0647" name="Turian">
    Turian can establish persistence by adding Registry Run keys.
   </Example>
   <Example id="G0010" name="Turla">
    A Turla Javascript backdoor added a local_update_check value under the Registry key HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run to establish persistence. Additionally, a Turla custom executable containing Metasploit shellcode is saved to the Startup folder to gain persistence.
   </Example>
   <Example id="S0199" name="TURNEDUP">
    TURNEDUP is capable of writing to a Registry Run key to establish.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has used Registry Run keys to establish automatic execution at system startup.
   </Example>
   <Example id="S0136" name="USBStealer">
    USBStealer registers itself under a Registry Run key with the name "USB Disk Security."
   </Example>
   <Example id="S0207" name="Vasport">
    Vasport copies itself to disk and creates an associated run key Registry entry to establish.
   </Example>
   <Example id="S0442" name="VBShower">
    VBShower used HKCU\Software\Microsoft\Windows\CurrentVersion\Run\
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT can add itself to the HKCU\Software\Microsoft\Windows\CurrentVersion\Run and HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\UIF2IS20VK Registry keys.
   </Example>
   <Example id="G0112" name="Windshift">
    Windshift has created LNK files in the Startup folder to establish persistence.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    Winnti for Windows can add a service named wind0ws to the Registry to achieve persistence after reboot.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has established persistence via the Registry key HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run and a shortcut within the startup folder.
   </Example>
   <Example id="S0341" name="Xbash">
    Xbash can create a Startup item for persistence if it determines it is on a Windows system.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy creates an entry in a Registry Run key for the malware to execute on startup.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda adds persistence by creating Registry Run keys.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has created a Registry Run key named Dropbox Update Setup to establish persistence for a malicious Python binary.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Creation | Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1547.002" name="Boot or Logon Autostart Execution: Authentication Package">
  Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Examples>
   <Example id="S0143" name="Flame">
    Flame can use Windows Authentication Packages for persistence.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1025" name="Privileged Process Integrity">
    Windows 8.1, Windows Server 2012 R2, and later versions, may make LSA run as a Protected Process Light (PPL) by setting the Registry key HKLM\SYSTEM\CurrentControlSet\Control\Lsa\RunAsPPL, which requires all DLLs loaded by LSA to be signed by Microsoft.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1547.003" name="Boot or Logon Autostart Execution: Time Providers">
  Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Consider using Group Policy to configure and block additions/modifications to W32Time DLLs.
   </Mitigation>
   <Mitigation id="M1024" name="Restrict Registry Permissions">
    Consider using Group Policy to configure and block modifications to W32Time parameters in the Registry.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1547.004" name="Boot or Logon Autostart Execution: Winlogon Helper DLL">
  Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLM\Software
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-579
  </CAPEC_ID>
  <Examples>
   <Example id="S0534" name="Bazar">
    Bazar can use Winlogon Helper DLL to establish persistence.
   </Example>
   <Example id="S0351" name="Cannon">
    Cannon adds the Registry key HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon to establish persistence.
   </Example>
   <Example id="S0200" name="Dipsind">
    A Dipsind variant registers as a Winlogon Event Notify DLL to establish persistence.
   </Example>
   <Example id="S0168" name="Gazer">
    Gazer can establish persistence by setting the value "Shell" with "explorer.exe, %malware_pathfile%" under the Registry key HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon.
   </Example>
   <Example id="S0387" name="KeyBoy">
    KeyBoy issues the command reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" to achieve persistence.
   </Example>
   <Example id="S0375" name="Remexi">
    Remexi achieves persistence using Userinit by adding the Registry key HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has created the Registry key HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell and sets the value to establish persistence.
   </Example>
   <Example id="G0010" name="Turla">
    Turla established persistence by adding a Shell value under the Registry key HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has established persistence using Userinit by adding the Registry key HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    Identify and block potentially malicious software that may be executed through the Winlogon helper process by using application control  that are capable of auditing and/or blocking unknown DLLs.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit the privileges of user accounts so that only authorized administrators can perform Winlogon helper changes.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1547.005" name="Boot or Logon Autostart Execution: Security Support Provider">
  Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Examples>
   <Example id="S0363" name="Empire">
    Empire can enumerate Security Support Providers (SSPs) as well as utilize PowerSploit's Install-SSP and Invoke-Mimikatz to install malicious SSPs and log authentication events.
   </Example>
   <Example id="S0002" name="Mimikatz">
    The Mimikatz credential dumper contains an implementation of an SSP.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit's Install-SSP Persistence module can be used to establish by installing a SSP DLL.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1025" name="Privileged Process Integrity">
    Windows 8.1, Windows Server 2012 R2, and later versions may make LSA run as a Protected Process Light (PPL) by setting the Registry key HKLM\SYSTEM\CurrentControlSet\Control\Lsa\RunAsPPL, which requires all SSP DLLs to be signed by Microsoft.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1547.006" name="Boot or Logon Autostart Execution: Kernel Modules and Extensions">
  Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Linux, macOS
  </Platforms>
  <Permissions_Required>
   root
  </Permissions_Required>
  <Examples>
   <Example id="S0502" name="Drovorub">
    Drovorub can use kernel modules to establish persistence.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, attackers used a signed kernel rootkit to establish additional persistence.
   </Example>
   <Example id="S0468" name="Skidmap">
    Skidmap has the ability to install several loadable kernel modules (LKMs) on infected machines.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1049" name="Antivirus/Antimalware">
    Common tools for detecting Linux rootkits include: rkhunter , although rootkits may be designed to evade certain detection tools.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Application control and software restriction tools, such as SELinux, KSPP, grsecurity MODHARDEN, and Linux kernel tuning can aid in restricting kernel module loading.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Limit access to the root account and prevent users from loading kernel modules and extensions through proper privilege separation and limiting Privilege Escalation opportunities.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Use MDM to disable user's ability to install or approve kernel extensions, and ensure all approved kernel extensions are in alignment with policies specified in com.apple.syspolicy.kernel-extension-policy.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0008" name="Kernel">
    Kernel Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1547.007" name="Boot or Logon Autostart Execution: Re-opened Applications">
  Adversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to "Reopen windows when logging back in". Applications listed in this file are automatically reopened upon the user’s next logon.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    This feature can be disabled entirely with the following terminal command: defaults write -g ApplePersistence -bool no.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Holding the Shift key while logging in prevents apps from opening automatically.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1547.008" name="Boot or Logon Autostart Execution: LSASS Driver">
  Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM
  </Permissions_Required>
  <Examples>
   <Example id="S0208" name="Pasam">
    Pasam establishes by infecting the Security Accounts Manager (SAM) DLL to load a malicious DLL dropped to disk.
   </Example>
   <Example id="S0176" name="Wingbird">
    Wingbird drops a malicious file (sspisrv.dll) alongside a copy of lsass.exe, which is used to register a service that loads sspisrv.dll as a driver. The payload of the malicious driver (located in its entry-point function) is executed when loaded by lsass.exe before the spoofed service becomes unstable and crashes.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1043" name="Credential Access Protection">
    On Windows 10 and Server 2016, enable Windows Defender Credential Guard
   </Mitigation>
   <Mitigation id="M1025" name="Privileged Process Integrity">
    On Windows 8.1 and Server 2012 R2, enable LSA Protection by setting the Registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\RunAsPPL to dword:00000001.  LSA Protection ensures that LSA plug-ins and drivers are only loaded if they are digitally signed with a Microsoft signature and adhere to the Microsoft Security Development Lifecycle (SDL) process guidance.
   </Mitigation>
   <Mitigation id="M1044" name="Restrict Library Loading">
    Ensure safe DLL search mode is enabled HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode to mitigate risk that lsass.exe loads a malicious code library.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0027" name="Driver">
    Driver Load
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1547.009" name="Boot or Logon Autostart Execution: Shortcut Modification">
  Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-132
  </CAPEC_ID>
  <Examples>
   <Example id="G0087" name="APT39">
    APT39 has modified LNK shortcuts.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth's initial payload is a malicious .LNK file.
   </Example>
   <Example id="S0031" name="BACKSPACE">
    BACKSPACE achieves persistence by creating a shortcut to itself in the CSIDL_STARTUP directory.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can establish persistence by writing shortcuts to the Windows Startup folder.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    The BlackEnergy 3 variant drops its main DLL component and then creates a .lnk shortcut to that file in the startup folder.
   </Example>
   <Example id="S0244" name="Comnie">
    Comnie establishes persistence via a .lnk file in the victim’s startup path.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can persist by modifying a .LNK file to include a backdoor.
   </Example>
   <Example id="S0267" name="FELIXROOT">
    FELIXROOT creates a .LNK file for persistence.
   </Example>
   <Example id="S0168" name="Gazer">
    Gazer can establish persistence by creating a .lnk file in the Start menu or by modifying existing .lnk files to execute the malware through cmd.exe.
   </Example>
   <Example id="G0078" name="Gorgon Group">
    Gorgon Group malware can create a .lnk file and add a Registry Run key to establish persistence.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can write or modify browser shortcuts to enable launching of malicious browser extensions.
   </Example>
   <Example id="S0170" name="Helminth">
    Helminth establishes persistence by creating a shortcut.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can use a .lnk shortcut for the Control Panel to establish persistence.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar adds a .lnk file to the Windows startup folder.
   </Example>
   <Example id="S0356" name="KONNI">
    A version of KONNI drops a Windows shortcut on the victim’s machine to establish persistence.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group malware has maintained persistence on a system by creating a LNK shortcut in the user’s Startup folder.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has used JavaScript to create a shortcut file in the Startup folder that points to its main backdoor.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can modify the shortcut that launches Telegram by replacing its path with the malicious payload to launch with the legitimate executable.
   </Example>
   <Example id="S0339" name="Micropsia">
    Micropsia creates a shortcut to maintain persistence.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum can establish persistence by creating a .lnk shortcut to itself in the Startup folder.
   </Example>
   <Example id="S0172" name="Reaver">
    Reaver creates a shortcut file and saves it in a Startup folder to establish persistence.
   </Example>
   <Example id="S0153" name="RedLeaves">
    RedLeaves attempts to add a shortcut file in the Startup folder to achieve persistence.
   </Example>
   <Example id="S0270" name="RogueRobin">
    RogueRobin establishes persistence by creating a shortcut (.LNK file) in the Windows startup folder to run a script each time the user logs in.
   </Example>
   <Example id="S0085" name="S-Type">
    S-Type may create the file %HOMEPATH%\Start Menu\Programs\Startup\Realtek {Unique Identifier}.lnk, which points to the malicious msdtc.exe file already created in the %CommonFiles% directory.
   </Example>
   <Example id="S0053" name="SeaDuke">
    SeaDuke is capable of persisting via a .lnk file stored in the Startup directory.
   </Example>
   <Example id="S0028" name="SHIPSHAPE">
    SHIPSHAPE achieves persistence by creating a shortcut in the Startup folder.
   </Example>
   <Example id="S0035" name="SPACESHIP">
    SPACESHIP achieves persistence by creating a shortcut in the current user's Startup folder.
   </Example>
   <Example id="S0058" name="SslMM">
    To establish persistence, SslMM identifies the Start Menu Startup directory and drops a link to its own executable disguised as an "Office Start," "Yahoo Talk," "MSN Gaming Z0ne," or "MSN Talk" shortcut.
   </Example>
   <Example id="S0004" name="TinyZBot">
    TinyZBot can create a shortcut in the Windows startup folder for persistence.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1018" name="User Account Management">
    Limit permissions for who can create symbolic links in Windows to appropriate groups such as Administrators and necessary groups for virtualization. This can be done through GPO: Computer Configuration &gt;
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1547.010" name="Boot or Logon Autostart Execution: Port Monitors">
  Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup. Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to HKLM\SYSTEM\CurrentControlSet\Control\Print\Monitors.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM
  </Permissions_Required>
  <Effective_Permissions>
   SYSTEM
  </Effective_Permissions>
  <Mitigations/>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1547.012" name="Boot or Logon Autostart Execution: Print Processors">
  Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM
  </Permissions_Required>
  <Examples>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has added the Registry key HKLM\SYSTEM\ControlSet001\Control\Print\Environments\Windows x64\Print Processors\UDPrint" /v Driver /d "spool.dll /f to load malware as a Print Processor.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can drop itself in C:\Windows\System32\spool\prtprocs\x64\winprint.dll to be loaded automatically by the spoolsv Windows service.
   </Example>
   <Example id="S0501" name="PipeMon">
    The PipeMon installer has modified the Registry key HKLM\SYSTEM\CurrentControlSet\Control\Print\Environments\Windows x64\Print Processors to install PipeMon as a Print Processor.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1018" name="User Account Management">
    Limit user accounts that can load or unload device drivers by disabling SeLoadDriverPrivilege.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0027" name="Driver">
    Driver Load
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1547.013" name="Boot or Logon Autostart Execution: XDG Autostart Entries">
  Adversaries may modify XDG autostart entries to execute programs or commands during system boot. Linux desktop environments that are XDG compliant implement functionality for XDG autostart entries. These entries will allow an application to automatically start during the startup of a desktop environment after user logon. By default, XDG autostart entries are stored within the /etc/xdg/autostart or ~/.config/autostart directories and have a .desktop file extension.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Linux
  </Platforms>
  <Permissions_Required>
   User, root
  </Permissions_Required>
  <Examples>
   <Example id="S0410" name="Fysbis">
    Fysbis has installed itself as an autostart entry under ~/.config/autostart/dbus-inotifier.desktop to establish persistence.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can use XDG Autostart Entries to establish persistence.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1033" name="Limit Software Installation">
    Restrict software installation to trusted repositories only and be cautious of orphaned software packages.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Restrict write access to XDG autostart entries to only select privileged users.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit privileges of user accounts so only authorized privileged users can create and modify XDG autostart entries.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1547.014" name="Boot or Logon Autostart Execution: Active Setup">
  Adversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer. These programs will be executed under the context of the user and will have the account's associated permissions level.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Examples>
   <Example id="S0012" name="PoisonIvy">
    PoisonIvy creates a Registry key in the Active Setup pointing to a malicious executable.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Creation | Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1547.015" name="Boot or Logon Autostart Execution: Login Items">
  Adversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in. Shared file list login items can be set using scripting languages such as AppleScript, whereas the Service Management Framework uses the API call SMLoginItemSetEnabled.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0281" name="Dok">
    Dok uses AppleScript to install a login Item by sending Apple events to the System Events process.
   </Example>
   <Example id="S0690" name="Green Lambert">
    Green Lambert can add Login Items to establish persistence.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can persist via startup options for Login items.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1037" name="Boot or Logon Initialization Scripts">
  Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-564
  </CAPEC_ID>
  <Examples>
   <Example id="G0106" name="Rocke">
    Rocke has installed an "init.d" startup script to maintain persistence.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Restrict write access to logon scripts to specific administrators.
   </Mitigation>
   <Mitigation id="M1024" name="Restrict Registry Permissions">
    Ensure proper permissions are set for Registry hives to prevent users from modifying keys for logon scripts that may lead to persistence.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Modification
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1037.001" name="Boot or Logon Initialization Scripts: Logon Script (Windows)">
  Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Examples>
   <Example id="G0007" name="APT28">
    An APT28 loader Trojan adds the Registry key HKCU\Environment\UserInitMprLogonScript to establish persistence.
   </Example>
   <Example id="S0438" name="Attor">
    Attor's dispatcher can establish persistence via adding a Registry key with a logon script HKEY_CURRENT_USER\Environment "UserInitMprLogonScript" .
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has added persistence by registering the file name for the next stage malware under HKCU\Environment\UserInitMprLogonScript.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    JHUHUGIT has registered a Windows shell script under the Registry key HKCU\Environment\UserInitMprLogonScript to establish persistence.
   </Example>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY has the ability to set the HKCU\Environment\UserInitMprLogonScript Registry key to execute logon scripts.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy performs persistence with a logon script via adding to the Registry key HKCU\Environment\UserInitMprLogonScript.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1024" name="Restrict Registry Permissions">
    Ensure proper permissions are set for Registry hives to prevent users from modifying keys for logon scripts that may lead to persistence.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1037.002" name="Boot or Logon Initialization Scripts: Login Hook">
  Adversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the /Library/Preferences/com.apple.loginwindow.plist file and can be modified using the defaults command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   macOS
  </Platforms>
  <Mitigations>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Restrict write access to logon scripts to specific administrators.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1037.003" name="Boot or Logon Initialization Scripts: Network Logon Script">
  Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Mitigations>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Restrict write access to logon scripts to specific administrators.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Modification
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1037.004" name="Boot or Logon Initialization Scripts: RC Scripts">
  Adversaries may establish persistence by modifying RC scripts which are executed during a Unix-like system’s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Linux, macOS
  </Platforms>
  <Permissions_Required>
   root
  </Permissions_Required>
  <Examples>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink has the ability to execute on device startup, using a modified RC script named S51armled.
   </Example>
   <Example id="S0690" name="Green Lambert">
    Green Lambert can add init.d and rc.d files in the /etc folder to establish persistence.
   </Example>
   <Example id="S0394" name="HiddenWasp">
    HiddenWasp installs reboot persistence by adding itself to /etc/rc.local.
   </Example>
   <Example id="S0278" name="iKitten">
    iKitten adds an entry to the rc.common file for persistence.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Limit privileges of user accounts so only authorized users can edit the rc.common file.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1037.005" name="Boot or Logon Initialization Scripts: Startup Items">
  Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   macOS
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Examples>
   <Example id="S0283" name="jRAT">
    jRAT can list and manage startup entries.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Since StartupItems are deprecated, preventing all users from writing to the /Library/StartupItems directory would prevent any startup items from getting registered.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1217" name="Browser Bookmark Discovery">
  Adversaries may enumerate browser bookmarks to learn more about compromised hosts. Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0082" name="APT38">
    APT38 has collected browser bookmark information to learn more about compromised hosts, obtain personal information about users, and acquire details about internal network resources.
   </Example>
   <Example id="S0274" name="Calisto">
    Calisto collects information on bookmarks from Google Chrome.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used type \\c$\Users\\Favorites\Links\Bookmarks bar\Imported From IE*citrix* for bookmark discovery.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman can retrieve browser history.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack can retrieve browser history.
   </Example>
   <Example id="S0363" name="Empire">
    Empire has the ability to gather browser data such as bookmarks and visited sites.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used Google Chrome bookmarks to identify internal resources and assets.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar can retrieve browser history and database files.
   </Example>
   <Example id="S0409" name="Machete">
    Machete retrieves the user profile data (e.g., browsers) from Chrome and Firefox browsers.
   </Example>
   <Example id="S0079" name="MobileOrder">
    MobileOrder has a command to upload to its C2 server victim browser bookmarks.
   </Example>
   <Example id="S1012" name="PowerLess">
    PowerLess can use a .NET browser information stealer module.
   </Example>
   <Example id="S1042" name="SUGARDUMP">
    SUGARDUMP has collected browser bookmark and history information.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1176" name="Browser Extensions">
  Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0482" name="Bundlore">
    Bundlore can install malicious browser extensions that are used to hijack user searches.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can use malicious browser extensions to steal cookies and other user information.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used Google Chrome browser extensions to infect victims and to steal passwords and cookies.
   </Example>
   <Example id="S0402" name="OSX/Shlayer">
    OSX/Shlayer can install malicious Safari browser extensions to serve ads.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Ensure extensions that are installed are the intended ones as many malicious extensions will masquerade as legitimate ones.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Set a browser extension allow or deny list as appropriate for your security policy.
   </Mitigation>
   <Mitigation id="M1033" name="Limit Software Installation">
    Only install browser extensions from trusted sources that can be verified. Browser extensions for some browsers can be controlled through Group Policy. Change settings to prevent the browser from installing extensions without sufficient permissions.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Ensure operating systems and browsers are using the most current version.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Close out all browser sessions when finished using them to prevent any potentially malicious extensions from continuing to run.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1185" name="Browser Session Hijacking">
  Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM
  </Permissions_Required>
  <Examples>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla has the ability to use form-grabbing to extract data from web data forms.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp has captured credentials when a user performs login through a SSL session.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes has used the Puppeteer module to hook and monitor the Chrome web browser to collect user information from infected hosts.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can perform browser pivoting and inject into a user's browser to inherit cookies, authenticated HTTP sessions, and client SSL certificates.
   </Example>
   <Example id="S0384" name="Dridex">
    Dridex can perform browser attacks via web injects to steal information such as credentials, certificates, and cookies.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can monitor browser activity for online banking actions and display full-screen overlay images to block user access to the intended site or present additional data fields.
   </Example>
   <Example id="S0483" name="IcedID">
    IcedID has used web injection attacks to redirect victims to spoofed sites designed to harvest banking and other credentials.  IcedID can use a self signed TLS certificate in connection with the spoofed site and simultaneously maintains a live connection with the legitimate site to display the correct URL and certificates in the browser.
   </Example>
   <Example id="S0530" name="Melcoz">
    Melcoz can monitor the victim's browser for online banking sessions and display an overlay window to manipulate the session in the background.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can use advanced web injects to steal web banking credentials.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot uses web injects and browser redirection to trick the user into providing their login credentials on a fake or modified web page.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has injected HTML codes into banking sites to steal sensitive online banking information (ex: usernames and passwords).
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1018" name="User Account Management">
    Since browser pivoting requires a high integrity process to launch from, restricting user permissions and addressing Privilege Escalation and Bypass User Account Control opportunities can limit the exposure to this technique.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Close all browser sessions regularly and when they are no longer needed.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Access | Process Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1110" name="Brute Force">
  Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Azure AD, Containers, Google Workspace, IaaS, Linux, Network, Office 365, SaaS, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-49
  </CAPEC_ID>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 can perform brute force attacks to obtain credentials.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has used brute force techniques to attempt account access when passwords are unknown or when password hashes are unavailable.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used Ncrack to reveal credentials.
   </Example>
   <Example id="S0572" name="Caterpillar WebShell">
    Caterpillar WebShell has a module to perform brute force attacks on a system.
   </Example>
   <Example id="S0220" name="Chaos">
    Chaos conducts brute force attacks against SSH services to gain initial access.
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can brute force supplied user credentials across a network range.
   </Example>
   <Example id="G0105" name="DarkVishnya">
    DarkVishnya used brute-force attack to obtain login data.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has attempted to brute force credentials to gain access.
   </Example>
   <Example id="G0053" name="FIN5">
    FIN5 has has used the tool GET2 Penetrator to look for remote login and hard-coded credentials.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has brute forced RDP credentials.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has used brute force attacks to compromise valid credentials.
   </Example>
   <Example id="S0599" name="Kinsing">
    Kinsing has attempted to brute force hosts over SSH.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has performed brute force attacks against administrator accounts.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used brute force techniques to obtain credentials.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 has modules for brute forcing local administrator and AD user accounts.
   </Example>
   <Example id="S0583" name="Pysa">
    Pysa has used brute force attempts against a central management console, as well as some Active Directory accounts.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can conduct brute force attacks to capture credentials.
   </Example>
   <Example id="G0010" name="Turla">
    Turla may attempt to connect to systems within a victim's network using net use commands and a predefined list or collection of passwords.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1036" name="Account Use Policies">
    Set account lockout policies after a certain number of failed login attempts to prevent passwords from being guessed. Too strict a policy may create a denial of service condition and render environments un-usable, with all accounts used in the brute force being locked-out.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication. Where possible, also enable multi-factor authentication on externally facing services.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Refer to NIST guidelines when creating password policies.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1110.001" name="Brute Force: Password Guessing">
  Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Azure AD, Containers, Google Workspace, IaaS, Linux, Network, Office 365, SaaS, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-49
  </CAPEC_ID>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has used a brute-force/password-spray tooling that operated in two modes: in brute-force mode it typically sent over 300 authentication attempts per hour per targeted account over the course of several hours or days.
   </Example>
   <Example id="S0020" name="China Chopper">
    China Chopper's server component can perform brute force password guessing against authentication portals.
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can brute force passwords for a specified user on a single target system or across an entire network.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has been observed using a hard coded list of passwords to brute force user accounts.
   </Example>
   <Example id="S0698" name="HermeticWizard">
    HermeticWizard can use a list of hardcoded credentials in attempt to authenticate to SMB shares.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer has attempted to brute force TCP ports 135 (RPC) and 1433 (MSSQL) with the default username or list of usernames and    passwords.
   </Example>
   <Example id="S0598" name="P.A.S. Webshell">
    P.A.S. Webshell can use predefined users and passwords to execute brute force attacks against SSH, FTP, POP3, MySQL, MSSQL, and PostgreSQL services.
   </Example>
   <Example id="S0453" name="Pony">
    Pony has used a small dictionary of common passwords against a collected list of local accounts.
   </Example>
   <Example id="S0374" name="SpeakUp">
    SpeakUp can perform brute forcing using a pre-defined list of usernames and passwords in an attempt to log in to administrative panels.
   </Example>
   <Example id="S0341" name="Xbash">
    Xbash can obtain a list of weak passwords from the C2 server to use for brute forcing as well as attempt to brute force services with open ports.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1036" name="Account Use Policies">
    Set account lockout policies after a certain number of failed login attempts to prevent passwords from being guessed. Too strict a policy may create a denial of service condition and render environments un-usable, with all accounts used in the brute force being locked-out.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication. Where possible, also enable multi-factor authentication on externally facing services.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Refer to NIST guidelines when creating password policies.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Upgrade management services to the latest supported and compatible version.  Specifically, any version providing increased password complexity or policy enforcement preventing default or weak passwords.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1110.002" name="Brute Force: Password Cracking">
  Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. OS Credential Dumping can be used to obtain password hashes, this may only get an adversary so far when Pass the Hash is not an option. Further,  adversaries may leverage Data from Configuration Repository in order to obtain hashed credentials for network devices.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Azure AD, Linux, Network, Office 365, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-55
  </CAPEC_ID>
  <Examples>
   <Example id="G0022" name="APT3">
    APT3 has been known to brute force password hashes to be able to leverage plain text credentials.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 performed password brute-force attacks on the local admin account.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has dropped and executed tools used for password cracking, including Hydra and CrackMapExec.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has extracted password hashes from ntds.dit to crack offline.
   </Example>
   <Example id="S0056" name="Net Crawler">
    Net Crawler uses a list of known credentials gathered through credential dumping to guess passwords to accounts as it spreads throughout a network.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors used Cain &amp; Abel to crack password hashes.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication. Where possible, also enable multi-factor authentication on externally facing services.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Refer to NIST guidelines when creating password policies.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1110.003" name="Brute Force: Password Spraying">
  Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Azure AD, Containers, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-565
  </CAPEC_ID>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has used a brute-force/password-spray tooling that operated in two modes: in password-spraying mode it conducted approximately four authentication attempts per hour per targeted account over the course of several days or weeks.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has conducted brute force password spray attacks.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has used password spraying to gain access to target systems.
   </Example>
   <Example id="S0606" name="Bad Rabbit">
    Bad Rabbit’s infpub.dat file uses NTLM login credentials to brute force Windows machines.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used multiple password spraying attacks against victim's remote services to obtain valid user and administrator accounts.
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can brute force credential authentication by using a supplied list of usernames and a single password.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has used password spraying attacks to obtain valid credentials.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group malware attempts to connect to Windows shares for lateral movement by using a generated list of usernames, which center around permutations of the username Administrator, and weak passwords.
   </Example>
   <Example id="G0077" name="Leafminer">
    Leafminer used a tool called Total SMB BruteForcer to perform internal password spraying.
   </Example>
   <Example id="S0362" name="Linux Rabbit">
    Linux Rabbit brute forces SSH passwords in order to attempt to gain access and install its malware onto the server.
   </Example>
   <Example id="S0413" name="MailSniper">
    MailSniper can be used for password spraying against Exchange and Office 365.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used a script to attempt RPC authentication against a number of hosts.
   </Example>
   <Example id="G0122" name="Silent Librarian">
    Silent Librarian has used collected lists of names and e-mail accounts to use in password spraying attacks against private sector targets.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1036" name="Account Use Policies">
    Set account lockout policies after a certain number of failed login attempts to prevent passwords from being guessed. Too strict a policy may create a denial of service condition and render environments un-usable, with all accounts used in the brute force being locked-out.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication. Where possible, also enable multi-factor authentication on externally facing services.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Refer to NIST guidelines when creating password policies.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1110.004" name="Brute Force: Credential Stuffing">
  Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Azure AD, Containers, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-600
  </CAPEC_ID>
  <Examples>
   <Example id="G0114" name="Chimera">
    Chimera has used credential stuffing against victim's remote services to obtain valid accounts.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot uses brute-force attack against RDP with rdpscanDll module.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1036" name="Account Use Policies">
    Set account lockout policies after a certain number of failed login attempts to prevent passwords from being guessed. Too strict a policy may create a denial of service condition and render environments un-usable, with all accounts used in the brute force being locked-out.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication. Where possible, also enable multi-factor authentication on externally facing services.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Refer to NIST guidelines when creating password policies.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1612" name="Build Image on Host">
  Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote build request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Containers
  </Platforms>
  <Permissions_Required>
   User, root
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Audit images deployed within the environment to ensure they do not contain any malicious components.
   </Mitigation>
   <Mitigation id="M1035" name="Limit Access to Resource Over Network">
    Limit communications with the container service to local Unix sockets or remote access via SSH. Require secure port access to communicate with the APIs over TLS by disabling unauthenticated access to the Docker API on port 2375. Instead, communicate with the Docker API over TLS on port 2376.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Ensure containers are not running as root by default. In Kubernetes environments, consider defining a Pod Security Policy that prevents pods from running privileged containers.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0007" name="Image">
    Image Creation
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1115" name="Clipboard Data">
  Adversaries may collect data stored in the clipboard from users copying information within or between applications.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-637
  </CAPEC_ID>
  <Examples>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla can steal data from the victim’s clipboard.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 used a Trojan called KEYLIME to collect data from the clipboard.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used tools capable of stealing contents of the clipboard.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth collects information from the clipboard by using the OpenClipboard() and GetClipboardData() libraries.
   </Example>
   <Example id="S0438" name="Attor">
    Attor has a plugin that collects data stored in the Windows clipboard by using the OpenClipboard and GetClipboardData APIs.
   </Example>
   <Example id="S0454" name="Cadelspy">
    Cadelspy has the ability to steal data from the clipboard.
   </Example>
   <Example id="S0261" name="Catchamas">
    Catchamas steals data stored in the clipboard.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling has the ability to capture and store clipboard data.
   </Example>
   <Example id="S0050" name="CosmicDuke">
    CosmicDuke copies and exfiltrates the clipboard contents every 30 seconds.
   </Example>
   <Example id="S0334" name="DarkComet">
    DarkComet can steal data from the clipboard.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can harvest clipboard data on both Windows and macOS systems.
   </Example>
   <Example id="S0569" name="Explosive">
    Explosive has a function to use the OpenClipboard wrapper.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy can collect clipboard data.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can capture clipboard data from a compromised host.
   </Example>
   <Example id="S0170" name="Helminth">
    The executable version of Helminth has a module to log clipboard contents.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    A JHUHUGIT variant accesses a screenshot saved in the clipboard and converts it to a JPG image.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT can capture clipboard data.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can retrieve the current content of the user clipboard.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI had a feature to steal data from the clipboard.
   </Example>
   <Example id="S0409" name="Machete">
    Machete hijacks the clipboard data by creating an overlapped window that listens to keyboard events.
   </Example>
   <Example id="S0282" name="MacSpy">
    MacSpy can steal clipboard contents.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can capture clipboard content.
   </Example>
   <Example id="S0530" name="Melcoz">
    Melcoz can monitor content saved to the clipboard.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has a function to hijack data from the clipboard by monitoring the contents of the clipboard and replacing the cryptocurrency wallet with the attacker's.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors collected clipboard data in plaintext.
   </Example>
   <Example id="S0332" name="Remcos">
    Remcos steals and modifies data from the clipboard.
   </Example>
   <Example id="S0375" name="Remexi">
    Remexi collects text from the clipboard.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can extract clipboard data from a compromised host.
   </Example>
   <Example id="S0148" name="RTM">
    RTM collects data from the clipboard.
   </Example>
   <Example id="S0253" name="RunningRAT">
    RunningRAT contains code to open and copy data from the clipboard.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to steal data from the clipboard of an infected host.
   </Example>
   <Example id="S0004" name="TinyZBot">
    TinyZBot contains functionality to collect information from the clipboard.
   </Example>
   <Example id="S0257" name="VERMIN">
    VERMIN collects data stored in the clipboard.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda can hook GetClipboardData function to watch for clipboard pastes to collect.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1580" name="Cloud Infrastructure Discovery">
  An adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   IaaS
  </Platforms>
  <Mitigations>
   <Mitigation id="M1018" name="User Account Management">
    Limit permissions to discover cloud infrastructure in accordance with least privilege. Organizations should limit the number of users within the organization with an IAM role that has administrative privileges, strive to reduce all permanent privileged role assignments, and conduct periodic entitlement reviews on IAM users, roles and policies.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0010" name="Cloud Storage">
    Cloud Storage Enumeration
   </Detection>
   <Detection id="DS0030" name="Instance">
    Instance Enumeration
   </Detection>
   <Detection id="DS0020" name="Snapshot">
    Snapshot Enumeration
   </Detection>
   <Detection id="DS0034" name="Volume">
    Volume Enumeration
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1538" name="Cloud Service Dashboard">
  An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Office 365
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1018" name="User Account Management">
    Enforce the principle of least-privilege by limiting dashboard visibility to only the resources required. This may limit the discovery value of the dashboard in the event of a compromised account.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1526" name="Cloud Service Discovery">
  An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Office 365, SaaS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals can enumerate information about a variety of cloud services, such as Office 365 and Sharepoint instances or OpenID Configurations.
   </Example>
   <Example id="S0684" name="ROADTools">
    ROADTools can enumerate Azure AD applications and service principals.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0025" name="Cloud Service">
    Cloud Service Enumeration
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1619" name="Cloud Storage Object Discovery">
  Adversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage.  Similar to File and Directory Discovery on a local host, after identifying available storage services (i.e. Cloud Infrastructure Discovery) adversaries may access the contents/objects stored in cloud infrastructure.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   IaaS
  </Platforms>
  <Examples>
   <Example id="S0683" name="Peirates">
    Peirates can list AWS S3 buckets.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1018" name="User Account Management">
    Restrict granting of permissions related to listing objects in cloud storage to necessary accounts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0010" name="Cloud Storage">
    Cloud Storage Access | Cloud Storage Enumeration
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1059" name="Command and Scripting Interpreter">
  Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <Supports_Remote>
   Yes
  </Supports_Remote>
  <Examples>
   <Example id="G0073" name="APT19">
    APT19 downloaded and launched code within a SCT file.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has used COM scriptlets to download Cobalt Strike beacons.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 has used Ruby scripts to execute payloads.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has utilized AutoIt and custom scripts to perform internal reconnaissance.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook can support commands to execute Java-based payloads.
   </Example>
   <Example id="S0486" name="Bonadan">
    Bonadan can create bind and reverse shells on the infected system.
   </Example>
   <Example id="S0023" name="CHOPSTICK">
    CHOPSTICK is capable of performing remote command execution.
   </Example>
   <Example id="S0334" name="DarkComet">
    DarkComet can execute various types of scripts on the victim’s machine.
   </Example>
   <Example id="S0695" name="Donut">
    Donut can generate shellcode outputs that execute via Ruby.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has used the command line for execution.
   </Example>
   <Example id="S0363" name="Empire">
    Empire uses a command-line interface to interact with systems.
   </Example>
   <Example id="G0053" name="FIN5">
    FIN5 scans processes on all victim systems in the environment and uses automated scripts to pull back the results.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used scripting to iterate through a list of compromised PoS systems, copy data to a log file, and remove the original data files.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 used SQL scripts to help perform tasks on the victim's machine.
   </Example>
   <Example id="S0618" name="FIVEHANDS">
    FIVEHANDS can receive a command line argument to limit file encryption to specified directories.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used a Perl reverse shell to communicate with C2.
   </Example>
   <Example id="S0460" name="Get2">
    Get2 has the ability to run executables with command-line arguments.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT is able to open a remote shell to execute commands.
   </Example>
   <Example id="S0434" name="Imminent Monitor">
    Imminent Monitor has a CommandPromptPacket and ScriptPacket module(s) for creating a remote shell and executing scripts.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Malware used by Ke3chang can run commands on the command-line interface.
   </Example>
   <Example id="S0487" name="Kessel">
    Kessel can create a reverse shell between the infected host and a specified system.
   </Example>
   <Example id="S0167" name="Matryoshka">
    Matryoshka is capable of providing Meterpreter shell access.
   </Example>
   <Example id="S0530" name="Melcoz">
    Melcoz has been distributed through an AutoIt loader script.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used various types of scripting for execution.
   </Example>
   <Example id="C0005" name="Operation Spalax">
    For Operation Spalax, the threat actors used Nullsoft Scriptable Install System (NSIS) scripts to install malware.
   </Example>
   <Example id="S0598" name="P.A.S. Webshell">
    P.A.S. Webshell has the ability to create reverse shells with Perl scripts.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has executed a Lua script through a Lua interpreter for Windows.
   </Example>
   <Example id="S0374" name="SpeakUp">
    SpeakUp uses Perl scripts.
   </Example>
   <Example id="G0038" name="Stealth Falcon">
    Stealth Falcon malware uses WMI to script data collection and command execution on the victim.
   </Example>
   <Example id="G0107" name="Whitefly">
    Whitefly has used a simple remote shell tool that will call back to the C2 server and wait for commands.
   </Example>
   <Example id="G0124" name="Windigo">
    Windigo has used a Perl script for information gathering.
   </Example>
   <Example id="S0219" name="WINERACK">
    WINERACK can create a reverse shell that utilizes statically-linked Wine cmd.exe code to emulate Windows command prompt commands.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda can launch remote scripts on the victim’s machine.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1049" name="Antivirus/Antimalware">
    Anti-virus can be used to automatically quarantine suspicious files.
   </Mitigation>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Visual Basic and JavaScript scripts from executing potentially malicious downloaded content .
   </Mitigation>
   <Mitigation id="M1045" name="Code Signing">
    Where possible, only permit execution of signed scripts.
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Disable or remove any unnecessary or unused shells or interpreters.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Use application control where appropriate.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    When PowerShell is necessary, restrict PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    Script blocking extensions can help prevent the execution of scripts and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation | Process Metadata
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1059.001" name="Command and Scripting Interpreter: PowerShell">
  Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Supports_Remote>
   Yes
  </Supports_Remote>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals is written and executed via PowerShell.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed has the ability to execute its payload via PowerShell.
   </Example>
   <Example id="G0073" name="APT19">
    APT19 used PowerShell commands to execute payloads.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 downloads and executes PowerShell scripts and performs PowerShell commands.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used encoded PowerShell scripts uploaded to CozyCar installations to download and install SeaDuke. APT29 also used PowerShell to create new tasks on remote machines, identify configuration settings, evade defenses, exfiltrate data, and to execute other commands.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has used PowerShell on victim systems to download and run payloads after exploitation.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has used PowerShell-based tools, PowerShell one-liners, and shellcode loaders for execution.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has utilized PowerShell to download files from the C2 server and run various scripts.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has used PowerShell to execute commands and other operational tasks.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used PowerShell to execute malicious code.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 leveraged PowerShell to deploy malware families in victims’ environments.
   </Example>
   <Example id="G0143" name="Aquatic Panda">
    Aquatic Panda has downloaded additional scripts and executed Base64 encoded commands in PowerShell.
   </Example>
   <Example id="S0129" name="AutoIt backdoor">
    AutoIt backdoor downloads a PowerShell script that decodes to a typical shellcode loader.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook has used PowerShell loaders as part of execution.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can execute a PowerShell script received from C2.
   </Example>
   <Example id="S0521" name="BloodHound">
    BloodHound can use PowerShell to pull Active Directory information from the target environment.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has used PowerShell reverse TCP shells to issue interactive commands over a network connection.
   </Example>
   <Example id="S0360" name="BONDUPDATER">
    BONDUPDATER is written in PowerShell.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has used PowerShell for execution.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can use PowerShell for execution.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower can use PowerShell for payload execution and C2 communication.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used PowerShell scripts to execute malicious payloads and the DSInternals PowerShell module to make use of Active Directory features.
   </Example>
   <Example id="S0660" name="Clambling">
    The Clambling dropper can use PowerShell to download the malware.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has used powershell.exe to download and execute scripts.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can execute a payload on a remote host with PowerShell. This technique does not write any data to disk.
   </Example>
   <Example id="S0126" name="ComRAT">
    ComRAT has used PowerShell to load itself every time a user logs in to the system. ComRAT can execute PowerShell scripts loaded into memory or from the file system.
   </Example>
   <Example id="G0142" name="Confucius">
    Confucius has used PowerShell to execute malicious files and payloads.
   </Example>
   <Example id="S0591" name="ConnectWise">
    ConnectWise can be used to execute PowerShell commands on target machines.
   </Example>
   <Example id="G0052" name="CopyKittens">
    CopyKittens has used PowerShell Empire.
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can execute PowerShell commands via WMI.
   </Example>
   <Example id="S1023" name="CreepyDrive">
    CreepyDrive can use Powershell for execution, including the cmdlets Invoke-WebRequest and Invoke-Expression.
   </Example>
   <Example id="S1024" name="CreepySnail">
    CreepySnail can use PowerShell for execution, including the cmdlets Invoke-WebRequst and Invoke-Expression.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba has been dropped onto systems and used for lateral movement via obfuscated PowerShell scripts.
   </Example>
   <Example id="G0079" name="DarkHydrus">
    DarkHydrus leveraged PowerShell to download and execute additional scripts for execution.
   </Example>
   <Example id="G0105" name="DarkVishnya">
    DarkVishnya used PowerShell to create shellcode loaders.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman can execute PowerShell commands and has used PowerShell to execute a keylogger.
   </Example>
   <Example id="G0009" name="Deep Panda">
    Deep Panda has used PowerShell scripts to download and execute programs in memory, without writing to disk.
   </Example>
   <Example id="S0354" name="Denis">
    Denis has a version written in PowerShell.
   </Example>
   <Example id="S0695" name="Donut">
    Donut can generate shellcode outputs that execute via PowerShell.
   </Example>
   <Example id="S0186" name="DownPaper">
    DownPaper uses PowerShell for execution.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has used PowerShell scripts for execution.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has used PowerShell to execute commands.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor has used an encoded PowerShell command by a service created by Cobalt Strike for lateral movement.
   </Example>
   <Example id="G1003" name="Ember Bear">
    Ember Bear has used PowerShell to download and execute malicious code.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has used Powershell to retrieve the malicious payload and download additional resources like Mimikatz.
   </Example>
   <Example id="S0363" name="Empire">
    Empire leverages PowerShell for the majority of its client-side agent tasks. Empire also contains the ability to conduct PowerShell remoting with the Invoke-PSRemoting module.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke has the ability to execute PowerShell scripts.
   </Example>
   <Example id="S0679" name="Ferocious">
    Ferocious can use PowerShell scripts for execution.
   </Example>
   <Example id="G0051" name="FIN10">
    FIN10 uses PowerShell for execution as well as PowerShell Empire to establish persistence.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used PowerShell to gain access to merchant's networks, and a Metasploit PowerShell module to download and execute shellcode and to set up a local listener.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 used a PowerShell script to launch shellcode that retrieved an additional payload.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8's malicious spearphishing payloads are executed as PowerShell. FIN8 has also used PowerShell for lateral movement and credential access.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy has used PowerShell to execute commands.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used PowerShell scripts to access credential data.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors used PowerShell to run a series of Base64-encoded commands that acted as a stager and enumerated hosts.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM used PowerShell for execution to assist in lateral movement as well as for dumping credentials stored on compromised machines.
   </Example>
   <Example id="G0084" name="Gallmaker">
    Gallmaker used PowerShell to download additional payloads and for execution.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has used obfuscated PowerShell scripts for staging.
   </Example>
   <Example id="G0115" name="GOLD SOUTHFIELD">
    GOLD SOUTHFIELD has staged and executed PowerShell scripts on compromised hosts.
   </Example>
   <Example id="G0078" name="Gorgon Group">
    Gorgon Group malware can use PowerShell commands to download and execute a payload and open a decoy document on the victim’s machine.
   </Example>
   <Example id="S0417" name="GRIFFON">
    GRIFFON has used PowerShell to execute the Meterpreter downloader TinyMet.
   </Example>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has used the Exchange Power Shell module Set-OabVirtualDirectoryPowerShell to export mailbox data.
   </Example>
   <Example id="S0151" name="HALFBAKED">
    HALFBAKED can execute PowerShell scripts.
   </Example>
   <Example id="S0037" name="HAMMERTOSS">
    HAMMERTOSS is known to use PowerShell.
   </Example>
   <Example id="S0499" name="Hancitor">
    Hancitor has used PowerShell to execute commands.
   </Example>
   <Example id="S0170" name="Helminth">
    One version of Helminth uses a PowerShell script.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has used PowerShell-based tools and scripts for discovery and collection on compromised hosts.
   </Example>
   <Example id="G0100" name="Inception">
    Inception has used PowerShell to execute malicious commands and payloads.
   </Example>
   <Example id="G0119" name="Indrik Spider">
    Indrik Spider has used PowerShell Empire for execution of malware.
   </Example>
   <Example id="S0389" name="JCry">
    JCry has used PowerShell to execute payloads.
   </Example>
   <Example id="S0648" name="JSS Loader">
    JSS Loader has the ability to download and execute PowerShell scripts.
   </Example>
   <Example id="S0387" name="KeyBoy">
    KeyBoy uses PowerShell commands to download and execute payloads.
   </Example>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY can execute PowerShell commands on the victim's machine.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has executed a variety of PowerShell scripts.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic has used PowerShell to establish persistence.
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS has used PowerShell commands to download additional files.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI used PowerShell to download and execute a specific 64-bit version of the malware.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used PowerShell to execute commands and malicious code.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter has used PowerShell scripts to execute malicious code.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has used PowerShell for execution.
   </Example>
   <Example id="S0680" name="LitePower">
    LitePower can use a PowerShell script to execute commands.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar has used PowerShell scripts.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has used PowerShell commands embedded inside batch scripts.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has used PowerShell for execution and privilege escalation.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass uses PowerSploit to inject shellcode into PowerShell.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor can use PowerShell commands to disable the network adapters on a victim machines.
   </Example>
   <Example id="S0553" name="MoleNet">
    MoleNet can use PowerShell to set persistence.
   </Example>
   <Example id="G0021" name="Molerats">
    Molerats used PowerShell implants on target machines.
   </Example>
   <Example id="S0256" name="Mosquito">
    Mosquito can launch PowerShell Scripts.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used PowerShell for execution.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has used malicious PowerShell scripts to enable execution.
   </Example>
   <Example id="S0457" name="Netwalker">
    Netwalker has been written in PowerShell and executed directly in memory, avoiding detection.
   </Example>
   <Example id="S0198" name="NETWIRE">
    The NETWIRE binary has been executed via PowerShell script.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT has executed PowerShell commands via auto-run registry key persistence.
   </Example>
   <Example id="G0133" name="Nomadic Octopus">
    Nomadic Octopus has used PowerShell for execution.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used PowerShell scripts for execution, including use of a macro to run a PowerShell command to decode file contents.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used PowerShell on compromised systems.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    OSX_OCEANLOTUS.D uses PowerShell scripts.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork used PowerSploit to download payloads, run a reverse shell, and execute malware on the victim's machine.
   </Example>
   <Example id="S0517" name="Pillowmint">
    Pillowmint has used a PowerShell script to install a shim database.
   </Example>
   <Example id="G0033" name="Poseidon Group">
    The Poseidon Group's Information Gathering Tool (IGT) includes PowerShell components.
   </Example>
   <Example id="S0150" name="POSHSPY">
    POSHSPY uses PowerShell to execute various commands, one to execute its payload.
   </Example>
   <Example id="S1012" name="PowerLess">
    PowerLess is written in and executed via PowerShell without using powershell.exe.
   </Example>
   <Example id="S0685" name="PowerPunch">
    PowerPunch has the ability to execute through PowerShell.
   </Example>
   <Example id="S0441" name="PowerShower">
    PowerShower is a backdoor written in PowerShell.
   </Example>
   <Example id="S0145" name="POWERSOURCE">
    POWERSOURCE is a PowerShell backdoor.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit modules are written in and executed via PowerShell.
   </Example>
   <Example id="S0393" name="PowerStallion">
    PowerStallion uses PowerShell loops to iteratively check for available commands in its OneDrive C2 server.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS uses PowerShell for obfuscation and execution.
   </Example>
   <Example id="S0371" name="POWERTON">
    POWERTON is written in PowerShell.
   </Example>
   <Example id="S1046" name="PowGoop">
    PowGoop has the ability to use PowerShell scripts to execute commands.
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER is written in PowerShell.
   </Example>
   <Example id="S0613" name="PS1">
    PS1 can utilize a PowerShell loader.
   </Example>
   <Example id="S0196" name="PUNCHBUGGY">
    PUNCHBUGGY has used PowerShell scripts.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy has a module for loading and executing PowerShell scripts.
   </Example>
   <Example id="S1032" name="PyDCrypt">
    PyDCrypt has attempted to execute with PowerShell.
   </Example>
   <Example id="S0583" name="Pysa">
    Pysa has used Powershell scripts to deploy its ransomware.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can use PowerShell to download and execute payloads.
   </Example>
   <Example id="S0269" name="QUADAGENT">
    QUADAGENT uses PowerShell scripts for execution.
   </Example>
   <Example id="S0241" name="RATANKBA">
    There is a variant of RATANKBA that uses a PowerShell script instead of the traditional PE form.
   </Example>
   <Example id="S0511" name="RegDuke">
    RegDuke can extract and execute PowerShell scripts from C2 communications.
   </Example>
   <Example id="S0379" name="Revenge RAT">
    Revenge RAT uses the PowerShell command Reflection.Assembly to load itself into memory to aid in execution.
   </Example>
   <Example id="S0496" name="REvil">
    REvil has used PowerShell to delete volume shadow copies and download files.
   </Example>
   <Example id="S0270" name="RogueRobin">
    RogueRobin uses a command prompt to run a PowerShell script from Excel.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has used PowerShell for execution.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used PowerShell scripts to run a credential harvesting tool in memory to evade defenses.
   </Example>
   <Example id="S0053" name="SeaDuke">
    SeaDuke uses a module to execute Mimikatz with PowerShell to perform Pass the Ticket.
   </Example>
   <Example id="S0382" name="ServHelper">
    ServHelper has the ability to execute a PowerShell script to get information from the infected host.
   </Example>
   <Example id="S0546" name="SharpStage">
    SharpStage can execute arbitrary commands with PowerShell.
   </Example>
   <Example id="S0450" name="SHARPSTATS">
    SHARPSTATS has the ability to employ a custom PowerShell script.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has used PowerShell to drop and execute malware loaders.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has used PowerShell to download and execute payloads.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can use PowerShell to execute commands.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM can execute Powershell commands sent from its C2 server.
   </Example>
   <Example id="S0273" name="Socksbot">
    Socksbot can write and execute PowerShell scripts.
   </Example>
   <Example id="S0390" name="SQLRat">
    SQLRat has used PowerShell to create a Meterpreter session.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has used PowerShell to execute its payload.
   </Example>
   <Example id="G0038" name="Stealth Falcon">
    Stealth Falcon malware uses PowerShell commands to perform various functions, including gathering system information via WMI and executing commands from its C2 server.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity can use PowerShell to add files to the Windows Defender exclusions list.
   </Example>
   <Example id="G0062" name="TA459">
    TA459 has used PowerShell for execution of a payload.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used PowerShell to download and execute malware and reconnaissance scripts.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has executed PowerShell commands in batch scripts.
   </Example>
   <Example id="G0088" name="TEMP.Veles">
    TEMP.Veles has used a publicly-available PowerShell-based tool, WMImplant.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has used PowerShell for execution.
   </Example>
   <Example id="G0076" name="Thrip">
    Thrip leveraged PowerShell to run commands to download payloads, traverse the compromised networks, and carry out reconnaissance.
   </Example>
   <Example id="G0131" name="Tonto Team">
    Tonto Team has used PowerShell to download additional payloads.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot has been known to use PowerShell to download new payloads, open documents, and upload data to command and control servers.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used PowerShell to execute commands/scripts, in some cases via a custom executable or code from Empire's PSInject. Turla has also used PowerShell scripts to load and execute malware in memory.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif droppers have used PowerShell in download cradles to download and execute the malware's full executable payload.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has used PowerShell to download additional modules.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT can use PowerShell to download files and execute commands.
   </Example>
   <Example id="S0514" name="WellMess">
    WellMess can execute PowerShell scripts received from C2.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can use PowerShell to support multiple actions including execution and defense evasion.
   </Example>
   <Example id="G0090" name="WIRTE">
    WIRTE has used PowerShell for script execution.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used macros to execute PowerShell scripts to download malware on victim's machines.
   </Example>
   <Example id="S0341" name="Xbash">
    Xbash can use scripts to invoke PowerShell to download a malicious PE executable or PE DLL for execution.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda uses PowerShell to download and execute the payload.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1049" name="Antivirus/Antimalware">
    Anti-virus can be used to automatically quarantine suspicious files.
   </Mitigation>
   <Mitigation id="M1045" name="Code Signing">
    Set PowerShell execution policy to execute only signed scripts.
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    It may be possible to remove PowerShell from systems when not needed, but a review should be performed to assess the impact to an environment, since it could be in use for many legitimate purposes and administrative functions.Disable/restrict the WinRM Service to help prevent uses of PowerShell for remote execution.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Use application control where appropriate.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    When PowerShell is necessary, restrict PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation | Process Metadata
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1059.002" name="Command and Scripting Interpreter: AppleScript">
  Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   macOS
  </Platforms>
  <Examples>
   <Example id="S0482" name="Bundlore">
    Bundlore can use AppleScript to inject malicious JavaScript into a browser.
   </Example>
   <Example id="S0281" name="Dok">
    Dok uses AppleScript to create a login item for persistence.
   </Example>
   <Example id="S1048" name="macOS.OSAMiner">
    macOS.OSAMiner has used osascript to call itself via the do shell script command in the Launch Agent .plist file.
   </Example>
   <Example id="S0595" name="ThiefQuest">
    ThiefQuest uses AppleScript's osascript -e command to launch ThiefQuest's persistence via Launch Agent and Launch Daemon.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1045" name="Code Signing">
    Require that all AppleScript be signed by a trusted developer ID before being executed - this will prevent random AppleScript code from executing. This subjects AppleScript code to the same scrutiny as other .app files passing through Gatekeeper.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Use application control where appropriate.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1059.003" name="Command and Scripting Interpreter: Windows Command Shell">
  Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Supports_Remote>
   Yes
  </Supports_Remote>
  <Examples>
   <Example id="S0065" name="4H RAT">
    4H RAT has the capability to create a remote shell.
   </Example>
   <Example id="S0469" name="ABK">
    ABK has the ability to use cmd to run a Portable Executable (PE) on the compromised host.
   </Example>
   <Example id="S1028" name="Action RAT">
    Action RAT can use cmd.exe to execute commands on an infected host.
   </Example>
   <Example id="S0202" name="adbupd">
    adbupd can run a copy of cmd.exe.
   </Example>
   <Example id="G0018" name="admin@338">
    Following exploitation with LOWBALL malware, admin@338 actors created a file containing a list of commands to be executed on the compromised computer.
   </Example>
   <Example id="S0045" name="ADVSTORESHELL">
    ADVSTORESHELL can create a remote shell and run a given command.
   </Example>
   <Example id="S0504" name="Anchor">
    Anchor has used cmd.exe to run its self deletion routine.
   </Example>
   <Example id="G0006" name="APT1">
    APT1 has used the Windows command shell to execute commands, and batch scripting to automate execution.
   </Example>
   <Example id="G0026" name="APT18">
    APT18 uses cmd.exe to execute commands on the victim’s machine.
   </Example>
   <Example id="G0007" name="APT28">
    An APT28 loader Trojan uses a cmd.exe and batch script to run its payload.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 used cmd.exe to execute commands on remote machines.
   </Example>
   <Example id="G0022" name="APT3">
    An APT3 downloader uses the Windows command "cmd.exe" /C whoami. The group also uses a tool to execute commands on remote computers.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has used cmd.exe for execution.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 has used the command-line interface.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has used a command-line tunneler, NACHOCHEESE, to give them shell access to a victim’s machine.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used cmd.exe /c to execute commands on remote machines.
   </Example>
   <Example id="G0143" name="Aquatic Panda">
    Aquatic Panda has attempted and failed to run Bash commands on a Windows host by passing them to cmd /C.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth spawns a CMD process to execute commands.
   </Example>
   <Example id="S0347" name="AuditCred">
    AuditCred can open a reverse shell on the system to execute commands.
   </Example>
   <Example id="S1029" name="AuTo Stealer">
    AuTo Stealer can use cmd.exe to execute a created batch file.
   </Example>
   <Example id="S0638" name="Babuk">
    Babuk has the ability to use the command line to control execution on compromised hosts.
   </Example>
   <Example id="S0414" name="BabyShark">
    BabyShark has used cmd.exe to execute commands.
   </Example>
   <Example id="S0475" name="BackConfig">
    BackConfig can download and run batch files to execute commands on a compromised host.
   </Example>
   <Example id="S0031" name="BACKSPACE">
    Adversaries can direct BACKSPACE to execute from the command line on infected hosts, or have BACKSPACE create a reverse shell.
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS is capable of executing commands via cmd.exe.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook is capable of spawning a Windows command shell.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot uses the command-line interface to execute arbitrary commands.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can launch cmd.exe to perform reconnaissance commands.
   </Example>
   <Example id="S0470" name="BBK">
    BBK has the ability to use cmd to run a Portable Executable (PE) on the compromised host.
   </Example>
   <Example id="S0017" name="BISCUIT">
    BISCUIT has a command to launch a command shell on the system.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has launched cmd.exe and used the ShellExecuteW() API function to execute commands on the system.
   </Example>
   <Example id="S0069" name="BLACKCOFFEE">
    BLACKCOFFEE has the capability to create a reverse shell.
   </Example>
   <Example id="S0564" name="BlackMould">
    BlackMould can run cmd.exe with parameters.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has executed commands via cmd.exe.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has used batch script files to automate execution and deployment of payloads.
   </Example>
   <Example id="S0360" name="BONDUPDATER">
    BONDUPDATER can read batch commands in a file sent from its C2 server and execute them with cmd.exe.
   </Example>
   <Example id="S0651" name="BoxCaon">
    BoxCaon can execute arbitrary commands and utilize the "ComSpec" environment variable.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has used batch scripts and the command-line interface for execution.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can use cmd.exe to drop and run files.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors used cmd.exe to execute commands and run malicious binaries.
   </Example>
   <Example id="S0025" name="CALENDAR">
    CALENDAR has a command to run cmd.exe to execute commands.
   </Example>
   <Example id="S0030" name="Carbanak">
    Carbanak has a command to create a reverse shell.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT can execute commands.
   </Example>
   <Example id="S0462" name="CARROTBAT">
    CARROTBAT has the ability to execute command line arguments on a compromised host.
   </Example>
   <Example id="S0572" name="Caterpillar WebShell">
    Caterpillar WebShell can run commands on the compromised asset with CMD functions.
   </Example>
   <Example id="S1043" name="ccf32">
    ccf32 has used cmd.exe for archiving data and deleting files.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes has used cmd to execute tasks on the system.
   </Example>
   <Example id="S0674" name="CharmPower">
    The C# implementation of  the CharmPower command execution module can use cmd.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used the Windows Command Shell and batch scripts for execution on compromised hosts.
   </Example>
   <Example id="S0020" name="China Chopper">
    China Chopper's server component is capable of opening a command terminal.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can use cmd.exe for command execution.
   </Example>
   <Example id="S0611" name="Clop">
    Clop can use cmd.exe to help execute commands on the system.
   </Example>
   <Example id="S0106" name="cmd">
    cmd is used to execute programs and other actions at the command-line interface.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has used a JavaScript backdoor that is capable of launching cmd.exe to execute shell commands.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike uses a command-line interface to interact with systems.
   </Example>
   <Example id="S0338" name="Cobian RAT">
    Cobian RAT can launch a remote command shell interface for executing commands.
   </Example>
   <Example id="S0369" name="CoinTicker">
    CoinTicker executes a bash script to establish a reverse shell.
   </Example>
   <Example id="S0244" name="Comnie">
    Comnie executes BAT scripts.
   </Example>
   <Example id="S0126" name="ComRAT">
    ComRAT has used cmd.exe to execute commands.
   </Example>
   <Example id="S0575" name="Conti">
    Conti can utilize command line options to allow an attacker control over how it scans and encrypts files.
   </Example>
   <Example id="S0046" name="CozyCar">
    A module in CozyCar allows arbitrary commands to be executed by invoking C:\Windows\System32\cmd.exe.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson has the ability to execute commands with the COMSPEC environment variable.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba has used cmd.exe /c and batch files for execution.
   </Example>
   <Example id="S1014" name="DanBot">
    DanBot has the ability to execute arbitrary commands via cmd.exe.
   </Example>
   <Example id="G0070" name="Dark Caracal">
    Dark Caracal has used macros in Word documents that would download a second stage if executed.
   </Example>
   <Example id="S0334" name="DarkComet">
    DarkComet can launch a remote shell to execute commands on the victim’s machine.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel has dropped an mspaint.lnk shortcut to disk which launches a shell script that downloads and executes a file.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman can use cmd.exe to execute commands.
   </Example>
   <Example id="S0187" name="Daserf">
    Daserf can execute shell commands.
   </Example>
   <Example id="S0243" name="DealersChoice">
    DealersChoice makes modifications to open-source scripts from GitHub and executes them on the victim’s machine.
   </Example>
   <Example id="S0354" name="Denis">
    Denis can launch a remote shell to execute arbitrary commands on the victim’s machine.
   </Example>
   <Example id="S0200" name="Dipsind">
    Dipsind can spawn remote shells.
   </Example>
   <Example id="S1021" name="DnsSystem">
    DnsSystem can use cmd.exe for execution.
   </Example>
   <Example id="S0186" name="DownPaper">
    DownPaper uses the command line.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has used various types of scripting to perform operations, including batch scripts.
   </Example>
   <Example id="S0547" name="DropBook">
    DropBook can execute arbitrary shell commands on the victims' machines.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack has used cmd.exe to add a persistent service.
   </Example>
   <Example id="S0593" name="ECCENTRICBANDWAGON">
    ECCENTRICBANDWAGON can use cmd to execute commands on a victim’s machine.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor has used batch files for execution and can launch Internet Explorer from cmd.exe.
   </Example>
   <Example id="G1003" name="Ember Bear">
    Ember Bear had used cmd.exe and Windows Script Host (wscript) to execute malicious code.
   </Example>
   <Example id="S0082" name="Emissary">
    Emissary has the capability to create a remote shell and execute specified commands.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has used cmd.exe to run a PowerShell script.
   </Example>
   <Example id="S0363" name="Empire">
    Empire has modules for executing scripts.
   </Example>
   <Example id="S0634" name="EnvyScout">
    EnvyScout can use cmd.exe to execute malicious files on compromised hosts.
   </Example>
   <Example id="S0396" name="EvilBunny">
    EvilBunny has an integrated scripting engine to download and execute Lua scripts.
   </Example>
   <Example id="S0343" name="Exaramel for Windows">
    Exaramel for Windows has a command to launch a remote shell and executes commands on the victim’s machine.
   </Example>
   <Example id="S0171" name="Felismus">
    Felismus uses command line for execution.
   </Example>
   <Example id="S0267" name="FELIXROOT">
    FELIXROOT executes batch scripts on the victim’s machine, and can launch a reverse shell for command execution.
   </Example>
   <Example id="G0051" name="FIN10">
    FIN10 has executed malicious .bat files containing PowerShell commands.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used kill.bat script to disable security tools.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 used the command prompt to launch commands on the victim’s machine.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has used a Batch file to automate frequently executed post compromise cleanup activities.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro can use cmd.exe to execute commands received from C2.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy has used cmd to execute commands on a compromised host.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used cmd.exe likely as a password changing mechanism.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors ran a command script to set up persistence as a scheduled task named "WinUpdate", as well as other encoded commands from the command-line
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can use cmd.exe for execution on remote hosts.
   </Example>
   <Example id="C0007" name="FunnyDream">
    During FunnyDream, the threat actors used cmd.exe to execute the wmiexec.vbs script.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM used the Windows command shell to execute commands.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has used various batch scripts to establish C2 and download additional files. Gamaredon Group's backdoor malware has also been written to a batch file.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can use a batch script to delete itself.
   </Example>
   <Example id="S0249" name="Gold Dragon">
    Gold Dragon uses cmd.exe to execute commands for discovery.
   </Example>
   <Example id="S0493" name="GoldenSpy">
    GoldenSpy can execute remote commands via the command-line interface.
   </Example>
   <Example id="S0588" name="GoldMax">
    GoldMax can spawn a command shell, and execute native commands.
   </Example>
   <Example id="S0477" name="Goopy">
    Goopy has the ability to use cmd.exe to execute commands passed from an Outlook C2 channel.
   </Example>
   <Example id="G0078" name="Gorgon Group">
    Gorgon Group malware can use cmd.exe to download and execute payloads and to execute commands on the system.
   </Example>
   <Example id="S0237" name="GravityRAT">
    GravityRAT executes commands remotely on the infected host.
   </Example>
   <Example id="S0342" name="GreyEnergy">
    GreyEnergy uses cmd.exe to execute itself in-memory.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent can use the Windows Command Shell to execute commands, including its own removal.
   </Example>
   <Example id="S0132" name="H1N1">
    H1N1 kills and disables services by using cmd.exe.
   </Example>
   <Example id="S0246" name="HARDRAIN">
    HARDRAIN uses cmd.exe to execute netshcommands.
   </Example>
   <Example id="S0391" name="HAWKBALL">
    HAWKBALL has created a cmd.exe reverse shell, executed commands, and uploaded output via the command line.
   </Example>
   <Example id="S0071" name="hcdLoader">
    hcdLoader provides command-line access to the compromised system.
   </Example>
   <Example id="S0170" name="Helminth">
    Helminth can provide a remote shell. One version of Helminth uses batch scripting.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper can use cmd.exe /Q/c move CSIDL_SYSTEM_DRIVE\temp\sys.tmp1 CSIDL_WINDOWS\policydefinitions\postgresql.exe 1&gt; \\127.0.0.1\ADMIN$\_1636727589.6007507 2&gt;&amp;1 to deploy on an infected system.
   </Example>
   <Example id="S0698" name="HermeticWizard">
    HermeticWizard can use cmd.exe for execution on compromised hosts.
   </Example>
   <Example id="S0087" name="Hi-Zor">
    Hi-Zor has the ability to create a reverse shell.
   </Example>
   <Example id="S0394" name="HiddenWasp">
    HiddenWasp uses a script to automate tasks on the victim's machine and to assist in execution.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa used cmd.exe for execution.
   </Example>
   <Example id="S0009" name="Hikit">
    Hikit has the ability to create a remote shell and run given commands.
   </Example>
   <Example id="S0232" name="HOMEFRY">
    HOMEFRY uses a command-line interface.
   </Example>
   <Example id="S0376" name="HOPLIGHT">
    HOPLIGHT can launch cmd.exe to execute commands on the system.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant can remotely open applications on the infected host with the ShellExecuteA command.
   </Example>
   <Example id="S0070" name="HTTPBrowser">
    HTTPBrowser is capable of spawning a reverse shell on a victim.
   </Example>
   <Example id="S0068" name="httpclient">
    httpclient opens cmd.exe on the victim.
   </Example>
   <Example id="G0119" name="Indrik Spider">
    Indrik Spider has used batch scripts on victim's machines.
   </Example>
   <Example id="S0259" name="InnaputRAT">
    InnaputRAT launches a shell to execute commands on the victim’s machine.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can launch a remote shell to execute commands.
   </Example>
   <Example id="S0015" name="Ixeshe">
    Ixeshe is capable of executing commands via cmd.
   </Example>
   <Example id="S0389" name="JCry">
    JCry has used cmd.exe to launch PowerShell.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    JHUHUGIT uses a .bat file to execute a .dll.
   </Example>
   <Example id="S0201" name="JPIN">
    JPIN can use the command-line utility cacls.exe to change file permissions.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT has command line access.
   </Example>
   <Example id="S0088" name="Kasidet">
    Kasidet can execute commands using cmd.exe.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar uses cmd.exe to execute commands on the victim’s machine.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has used batch scripts in its malware to install persistence mechanisms.
   </Example>
   <Example id="S1020" name="Kevin">
    Kevin can use a renamed image of cmd.exe for execution.
   </Example>
   <Example id="S0387" name="KeyBoy">
    KeyBoy can launch interactive shells for communicating with the victim machine.
   </Example>
   <Example id="S0271" name="KEYMARBLE">
    KEYMARBLE can execute shell commands using cmd.exe.
   </Example>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY has the ability to set a Registry key to run a cmd.exe command.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has executed Windows commands by using cmd and running batch scripts.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can open an interactive command-shell to perform command line functions on victim machines. Koadic performs most of its operations using Windows Script Host (Jscript) and to run arbitrary shellcode.
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS has used cmd.exe and batch files for execution.
   </Example>
   <Example id="S0156" name="KOMPROGO">
    KOMPROGO is capable of creating a reverse shell.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has used cmd.exe to execute arbitrary commands on the infected host across different stages of the infection chain.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group malware uses cmd.exe to execute commands on a compromised host.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter has used batch files to deploy open-source and multi-stage RATs.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron is capable of executing commands via cmd.exe.
   </Example>
   <Example id="S0211" name="Linfo">
    Linfo creates a backdoor through which remote attackers can start a remote shell.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar has a command to open the command-line on the infected system.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has used cmd /c commands embedded within batch scripts.
   </Example>
   <Example id="S0582" name="LookBack">
    LookBack executes the cmd.exe command.
   </Example>
   <Example id="S0451" name="LoudMiner">
    LoudMiner used a batch script to run the Linux virtual machine as a service.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can issue shell commands to download and execute additional payloads.
   </Example>
   <Example id="G0095" name="Machete">
    Machete has used batch files to initiate additional downloads of malicious files.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has used the command-line interface.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can utilize cmd.exe to execute commands in a victim's environment.
   </Example>
   <Example id="S0449" name="Maze">
    The Maze encryption process has used batch scripts with various commands.
   </Example>
   <Example id="S0500" name="MCMD">
    MCMD can launch a console process (cmd.exe) with redirected standard input and output.
   </Example>
   <Example id="S0459" name="MechaFlounder">
    MechaFlounder has the ability to run commands on a compromised host.
   </Example>
   <Example id="S0576" name="MegaCortex">
    MegaCortex has used .cmd scripts on the victim's system.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass executes commands using a command-line interface and reverse shell. The group has used a modified version of pentesting script wmiexec.vbs to execute commands.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has used cmd.exe /c to execute files.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor can run set.bat, update.bat, cache.bat, bcd.bat, msrun.bat, and similar scripts.
   </Example>
   <Example id="S0339" name="Micropsia">
    Micropsia creates a command-line shell using cmd.exe.
   </Example>
   <Example id="S1015" name="Milan">
    Milan can use cmd.exe for discovery actions on a targeted system.
   </Example>
   <Example id="S0280" name="MirageFox">
    MirageFox has the capability to execute commands using cmd.exe.
   </Example>
   <Example id="S0084" name="Mis-Type">
    Mis-Type has used cmd.exe to run commands on a compromised host.
   </Example>
   <Example id="S0083" name="Misdat">
    Misdat is capable of providing shell functionality to the attacker to execute commands.
   </Example>
   <Example id="S0080" name="Mivast">
    Mivast has the capability to open a remote shell and run basic commands.
   </Example>
   <Example id="S0553" name="MoleNet">
    MoleNet can execute commands via the command line utility.
   </Example>
   <Example id="S0149" name="MoonWind">
    MoonWind can execute commands via an interactive command shell.
   </Example>
   <Example id="S0284" name="More_eggs">
    More_eggs has used cmd.exe for execution.
   </Example>
   <Example id="S0256" name="Mosquito">
    Mosquito executes cmd.exe and uses a pipe to read the results and send back the output to the C2 server.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used a custom tool for creating reverse shells.
   </Example>
   <Example id="S0233" name="MURKYTOP">
    MURKYTOP uses the command-line interface.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has executed HTA files via cmd.exe, and used batch scripts for collection.
   </Example>
   <Example id="S0336" name="NanoCore">
    NanoCore can open a remote command-line interface and execute commands.
   </Example>
   <Example id="S0247" name="NavRAT">
    NavRAT leverages cmd.exe to perform discovery techniques.
   </Example>
   <Example id="S0630" name="Nebulae">
    Nebulae can use CMD to execute a process.
   </Example>
   <Example id="S0034" name="NETEAGLE">
    NETEAGLE allows adversaries to execute shell commands on the infected host.
   </Example>
   <Example id="S0457" name="Netwalker">
    Operators deploying Netwalker have used batch scripts to retrieve the Netwalker payload.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can issue commands using cmd.exe.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors used zwShell to establish full remote control of the connected machine and run command-line shells.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT can launch a command shell interface for executing commands.
   </Example>
   <Example id="G0133" name="Nomadic Octopus">
    Nomadic Octopus used cmd.exe /c within a malicious macro.
   </Example>
   <Example id="S0346" name="OceanSalt">
    OceanSalt can create a reverse shell on the infected endpoint using cmd.exe.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used macros to deliver malware such as QUADAGENT and OopsIE.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum's backdoor has used cmd.exe to execute arbitrary commands as well as batch scripts to update itself to a newer version.
   </Example>
   <Example id="S0264" name="OopsIE">
    OopsIE uses the command prompt to execute commands on the victim's machine.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used batch scripts to perform reconnaissance.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, various implants used batch scripting and cmd.exe for execution.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors spawned a new cmd.exe process to execute commands.
   </Example>
   <Example id="S0229" name="Orz">
    Orz can execute shell commands.
   </Example>
   <Example id="S0594" name="Out1">
    Out1 can use native command line for execution.
   </Example>
   <Example id="S1017" name="OutSteel">
    OutSteel has used cmd.exe to scan a compromised host for specific file extensions.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork ran a reverse shell with Meterpreter.
   </Example>
   <Example id="S1050" name="PcShare">
    PcShare can execute cmd commands on a compromised host.
   </Example>
   <Example id="S0643" name="Peppy">
    Peppy has the ability to execute shell commands.
   </Example>
   <Example id="S0158" name="PHOREAL">
    PHOREAL is capable of creating reverse shell.
   </Example>
   <Example id="S1031" name="PingPull">
    PingPull can use cmd.exe to run various commands as a reverse shell.
   </Example>
   <Example id="S0124" name="Pisloader">
    Pisloader uses cmd.exe to set the Registry Run key value. It also has a command to spawn a command shell.
   </Example>
   <Example id="S0254" name="PLAINTEE">
    PLAINTEE uses cmd.exe to execute commands on the victim’s machine.
   </Example>
   <Example id="S0435" name="PLEAD">
    PLEAD has the ability to execute shell commands on the compromised host.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX allows actors to spawn a reverse shell on a victim.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has called cmd through a Word document macro.
   </Example>
   <Example id="S0012" name="PoisonIvy">
    PoisonIvy creates a backdoor through which remote attackers can open a command-line interface.
   </Example>
   <Example id="S0453" name="Pony">
    Pony has used batch scripts to delete itself after execution.
   </Example>
   <Example id="S0139" name="PowerDuke">
    PowerDuke runs cmd.exe /c and sends the output to its C2.
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER can execute commands from its C2 server.
   </Example>
   <Example id="S0238" name="Proxysvc">
    Proxysvc executes a binary on the system and logs the results into a temp file by using: cmd.exe /c " &gt; %temp%\PM* .tmp 2&gt;&amp;1".
   </Example>
   <Example id="S0147" name="Pteranodon">
    Pteranodon can use cmd.exe for execution on victim systems.
   </Example>
   <Example id="S1032" name="PyDCrypt">
    PyDCrypt has used cmd.exe for execution.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can use cmd.exe to launch itself and to execute multiple C2 commands.
   </Example>
   <Example id="S0269" name="QUADAGENT">
    QUADAGENT uses cmd.exe to execute scripts and commands on the victim’s machine.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT can launch a remote shell to execute commands on the victim’s machine.
   </Example>
   <Example id="S0481" name="Ragnar Locker">
    Ragnar Locker has used cmd.exe and batch scripts to execute commands.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay can use the Windows Command Shell for execution.
   </Example>
   <Example id="G0075" name="Rancor">
    Rancor has used cmd.exe to execute commmands.
   </Example>
   <Example id="S0241" name="RATANKBA">
    RATANKBA uses cmd.exe to execute commands.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession can use cmd.exe for execution on compromised hosts.
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT has executed commands using cmd.exe /c.
   </Example>
   <Example id="S0153" name="RedLeaves">
    RedLeaves can receive and execute commands with cmd.exe. It can also provide a reverse shell.
   </Example>
   <Example id="S0332" name="Remcos">
    Remcos can launch a remote command line to execute commands on the victim’s machine.
   </Example>
   <Example id="S0375" name="Remexi">
    Remexi silently executes received commands with cmd.exe.
   </Example>
   <Example id="S0379" name="Revenge RAT">
    Revenge RAT uses cmd.exe to execute commands and run scripts on the victim's machine.
   </Example>
   <Example id="S0496" name="REvil">
    REvil can use the Windows command line to delete volume shadow copies and disable recovery.
   </Example>
   <Example id="S0258" name="RGDoor">
    RGDoor uses cmd.exe to execute commands on the victim’s machine.
   </Example>
   <Example id="S0448" name="Rising Sun">
    Rising Sun has executed commands using cmd.exe /c "&lt;command&gt; &gt; &lt;%temp%&gt;\AM&lt;random&gt;. tmp" 2&gt;&amp;1.
   </Example>
   <Example id="S0400" name="RobbinHood">
    RobbinHood uses cmd.exe on the victim's computer.
   </Example>
   <Example id="S0270" name="RogueRobin">
    RogueRobin uses Windows Script Components.
   </Example>
   <Example id="S0148" name="RTM">
    RTM uses the command line and rundll32.exe to execute.
   </Example>
   <Example id="S0253" name="RunningRAT">
    RunningRAT uses a batch file to kill a security program task and then attempts to remove itself.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk has used cmd.exe to create a Registry entry to establish persistence.
   </Example>
   <Example id="S0085" name="S-Type">
    S-Type has provided the ability to execute shell commands on a compromised host.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has used cmd.exe and .bat scripts for execution.
   </Example>
   <Example id="S0074" name="Sakula">
    Sakula calls cmd.exe to run various DLL files via rundll32 and also to perform file cleanup. Sakula also has the capability to invoke a reverse shell.
   </Example>
   <Example id="S0370" name="SamSam">
    SamSam uses custom batch scripts to execute some of its components.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has run the  xp_cmdshell command in MS-SQL.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has the ability to use the command shell to execute commands on a compromised host.
   </Example>
   <Example id="S0053" name="SeaDuke">
    SeaDuke is capable of executing commands.
   </Example>
   <Example id="S0345" name="Seasalt">
    Seasalt uses cmd.exe to create a reverse shell on the infected endpoint.
   </Example>
   <Example id="S0185" name="SEASHARPEE">
    SEASHARPEE can execute commands on victims.
   </Example>
   <Example id="S0382" name="ServHelper">
    ServHelper can execute shell commands against cmd.
   </Example>
   <Example id="S0639" name="Seth-Locker">
    Seth-Locker can execute commands via the command line shell.
   </Example>
   <Example id="S1019" name="Shark">
    Shark has the ability to use CMD to execute commands.
   </Example>
   <Example id="S0546" name="SharpStage">
    SharpStage can execute arbitrary commands with the command line.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat can be issued a command shell function from the C2.
   </Example>
   <Example id="S0610" name="SideTwist">
    SideTwist can execute shell commands on a compromised host.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has used Windows command-line to run commands.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can use cmd.exe to enable lateral movement using DCOM.
   </Example>
   <Example id="S0623" name="Siloscape">
    Siloscape can run cmd through an IRC channel.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA can open a command line to execute commands.
   </Example>
   <Example id="S1035" name="Small Sieve">
    Small Sieve can use cmd.exe to execute commands on a victim's system.
   </Example>
   <Example id="S0159" name="SNUGRIDE">
    SNUGRIDE is capable of executing commands and spawning a reverse shell.
   </Example>
   <Example id="G0054" name="Sowbug">
    Sowbug has used command line during its intrusions.
   </Example>
   <Example id="S0543" name="Spark">
    Spark can use cmd.exe to run commands.
   </Example>
   <Example id="S0390" name="SQLRat">
    SQLRat has used SQL to execute JavaScript and VB scripts on the host system.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has used cmd.exe for execution.
   </Example>
   <Example id="S1037" name="STARWHALE">
    STARWHALE has the ability to execute commands via cmd.exe.
   </Example>
   <Example id="S0142" name="StreamEx">
    StreamEx has the ability to remotely execute commands.
   </Example>
   <Example id="S1034" name="StrifeWater">
    StrifeWater can execute shell commands using cmd.exe.
   </Example>
   <Example id="G0039" name="Suckfly">
    Several tools used by Suckfly have been command-line driven.
   </Example>
   <Example id="S1049" name="SUGARUSH">
    SUGARUSH has used cmd for execution on an infected host.
   </Example>
   <Example id="S0464" name="SYSCON">
    SYSCON has the ability to execute commands through cmd on a compromised host.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has executed commands using cmd.exe.
   </Example>
   <Example id="G0127" name="TA551">
    TA551 has used cmd.exe to execute commands.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor can copy cmd.exe into the system temp folder.
   </Example>
   <Example id="S0586" name="TAINTEDSCRIBE">
    TAINTEDSCRIBE can enable Windows CLI access and execute files.
   </Example>
   <Example id="S1011" name="Tarrask">
    Tarrask may abuse the Windows schtasks command-line tool to create "hidden" scheduled tasks.
   </Example>
   <Example id="S0164" name="TDTESS">
    TDTESS provides a reverse shell on the victim.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has used batch scripts to download tools and executing cryptocurrency miners.
   </Example>
   <Example id="S0146" name="TEXTMATE">
    TEXTMATE executes cmd.exe to provide a reverse shell to adversaries.
   </Example>
   <Example id="G0028" name="Threat Group-1314">
    Threat Group-1314 actors spawned shells on remote systems on a victim network to execute commands.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has used command-line interfaces for execution.
   </Example>
   <Example id="S0668" name="TinyTurla">
    TinyTurla has been installed using a .bat file.
   </Example>
   <Example id="S0004" name="TinyZBot">
    TinyZBot supports execution from the command-line.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot has used macros in Excel documents to download and deploy the malware on the user’s machine.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can perform reconnaissance commands on a victim machine via a cmd.exe process.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has used Windows command scripts.
   </Example>
   <Example id="S0436" name="TSCookie">
    TSCookie has the ability to execute shell commands on the infected host.
   </Example>
   <Example id="S0647" name="Turian">
    Turian can create a remote shell and execute commands using cmd.
   </Example>
   <Example id="G0010" name="Turla">
    Turla RPC backdoors have used cmd.exe to execute commands.
   </Example>
   <Example id="S0199" name="TURNEDUP">
    TURNEDUP is capable of creating a reverse shell.
   </Example>
   <Example id="S0263" name="TYPEFRAME">
    TYPEFRAME can uninstall malware components using a batch script.
   </Example>
   <Example id="S0333" name="UBoatRAT">
    UBoatRAT can start a command shell.
   </Example>
   <Example id="S0221" name="Umbreon">
    Umbreon provides access using both standard facilities like SSH and additional access using its backdoor Espeon, providing a reverse shell upon receipt of a special packet
   </Example>
   <Example id="S0275" name="UPPERCUT">
    UPPERCUT uses cmd.exe to execute commands on the victim’s machine.
   </Example>
   <Example id="S0452" name="USBferry">
    USBferry can execute various Windows commands.
   </Example>
   <Example id="S0180" name="Volgmer">
    Volgmer can execute commands on the victim's machine.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT can use cmd.exe to execute malicious code.
   </Example>
   <Example id="S0612" name="WastedLocker">
    WastedLocker has used cmd to execute commands on the system.
   </Example>
   <Example id="S0109" name="WEBC2">
    WEBC2 can open an interactive command shell.
   </Example>
   <Example id="S0514" name="WellMess">
    WellMess can execute command line scripts received from C2.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can use cmd.exe to execute commands.
   </Example>
   <Example id="S0206" name="Wiarp">
    Wiarp creates a backdoor through which remote attackers can open a command line interface.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used cmd.exe to execute commands on a victim's machine.
   </Example>
   <Example id="S0653" name="xCaon">
    xCaon has a command to start an interactive shell.
   </Example>
   <Example id="S0117" name="XTunnel">
    XTunnel has been used to execute remote commands.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy uses cmd.exe to execute commands on the system.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda can launch an interface where it can execute several commands on the victim’s PC.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has used a tool to open a Windows Command Shell on a remote host.
   </Example>
   <Example id="S0086" name="ZLib">
    ZLib has the ability to execute shell commands.
   </Example>
   <Example id="S0350" name="zwShell">
    zwShell can launch command-line shells.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell can launch a reverse command shell.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    Use application control where appropriate.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1059.004" name="Command and Scripting Interpreter: Unix Shell">
  Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Linux, macOS
  </Platforms>
  <Permissions_Required>
   User, root
  </Permissions_Required>
  <Supports_Remote>
   Yes
  </Supports_Remote>
  <Examples>
   <Example id="S0504" name="Anchor">
    Anchor can execute payloads via shell scripting.
   </Example>
   <Example id="S0584" name="AppleJeus">
    AppleJeus has used shell scripts to execute commands after installation and set persistence mechanisms.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 executed file /bin/pwd in activity exploiting CVE-2019-19781 against Citrix devices.
   </Example>
   <Example id="S0482" name="Bundlore">
    Bundlore has leveraged /bin/sh and /bin/bash to execute commands on the victim machine.
   </Example>
   <Example id="S0077" name="CallMe">
    CallMe has the capability to create a reverse shell on victims.
   </Example>
   <Example id="S0220" name="Chaos">
    Chaos provides a reverse shell connection on 8338/TCP, encrypted via AES.
   </Example>
   <Example id="S0369" name="CoinTicker">
    CoinTicker executes a bash script to establish a reverse shell.
   </Example>
   <Example id="S0492" name="CookieMiner">
    CookieMiner has used a Unix shell script to run a series of commands targeting macOS.
   </Example>
   <Example id="S0021" name="Derusbi">
    Derusbi is capable of creating a remote Bash shell and executing commands.
   </Example>
   <Example id="S0600" name="Doki">
    Doki has executed shell scripts with /bin/sh.
   </Example>
   <Example id="S0502" name="Drovorub">
    Drovorub can execute arbitrary commands as root on a compromised system.
   </Example>
   <Example id="S0401" name="Exaramel for Linux">
    Exaramel for Linux has a command to execute a shell command on the system.
   </Example>
   <Example id="S0410" name="Fysbis">
    Fysbis has the ability to create and execute commands in a remote shell for CLI.
   </Example>
   <Example id="S0690" name="Green Lambert">
    Green Lambert can use shell scripts for execution, such as /bin/sh -c.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has used shell scripts for execution.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar uses /bin/bash to execute commands on the victim’s machine.
   </Example>
   <Example id="S0599" name="Kinsing">
    Kinsing has used Unix shell scripts to execute commands in the victim environment.
   </Example>
   <Example id="S0641" name="Kobalos">
    Kobalos can spawn a new pseudo-terminal and execute arbitrary commands at the command prompt.
   </Example>
   <Example id="S0451" name="LoudMiner">
    LoudMiner used shell scripts to launch various services and to start/stop the QEMU virtualization.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa can execute supplied shell commands and uses bash scripts to perform additional actions.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE has the ability to use /bin/bash and /bin/sh to execute commands.
   </Example>
   <Example id="S0402" name="OSX/Shlayer">
    OSX/Shlayer can use bash scripts to check the macOS version, download payloads, and extract bytes from files. OSX/Shlayer uses the command sh -c tail -c +1381... to extract bytes at an offset from a specified file. OSX/Shlayer uses the curl -fsL "$url" &gt;$tmp_path command to download malicious payloads into a temporary directory.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    OSX_OCEANLOTUS.D uses a shell script as the main executable inside an app bundle and drops an embedded base64-encoded payload to the /tmp folder.
   </Example>
   <Example id="S0587" name="Penquin">
    Penquin can execute remote commands using bash scripts.
   </Example>
   <Example id="S0279" name="Proton">
    Proton uses macOS' .command file type to script actions.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke used shell scripts to run commands which would obtain persistence and execute the cryptocurrency mining malware.
   </Example>
   <Example id="S0468" name="Skidmap">
    Skidmap has used pm.sh to download and install its main payload.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has used shell scripts for execution.
   </Example>
   <Example id="S0647" name="Turian">
    Turian has the ability to use /bin/sh to execute commands.
   </Example>
   <Example id="S0466" name="WindTail">
    WindTail can use the open command to execute an application.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET uses a shell script to execute Mach-o files and osacompile commands such as, osacompile -x -o xcode.app main.applescript.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    Use application control where appropriate.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1059.005" name="Command and Scripting Interpreter: Visual Basic">
  Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User
  </Permissions_Required>
  <Examples>
   <Example id="G0099" name="APT-C-36">
    APT-C-36 has embedded a VBScript within a malicious Word document which is executed upon the document opening.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has written malware variants in Visual Basic.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has used macros, COM scriptlets, and VBS scripts.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has used VBScript to initiate the delivery of payloads.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 executes shellcode and a VBA script to decode Base64 strings.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has used VBScript to execute commands and other operational tasks.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has utilized malicious VBS scripts in malware.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth has used malicious VBS e-mail attachments for execution.
   </Example>
   <Example id="S0475" name="BackConfig">
    BackConfig has used VBS to install its downloader component and malicious documents with VBA macro code.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook has used malicious VBA code against the target system.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal's dropper creates VBS scripts on the victim’s machine.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has used VBS and VBE scripts for execution.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can create a Visual Basic script to enable persistence.
   </Example>
   <Example id="C0011" name="C0011">
    For C0011, Transparent Tribe used malicious VBA macros within a lure document as part of the Crimson malware installation process onto a compromised host.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors used a malicious HTA file that contained a mix of HTML and JavaScript/VBScript code.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes has used VBscript to execute malicious code.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has sent Word OLE compound documents with malicious obfuscated VBA macros that will run upon user execution.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can use VBA to perform execution.
   </Example>
   <Example id="S0244" name="Comnie">
    Comnie executes VBS scripts.
   </Example>
   <Example id="G0142" name="Confucius">
    Confucius has used VBScript to execute malicious code.
   </Example>
   <Example id="S1014" name="DanBot">
    DanBot can use a VBA macro embedded in an Excel file to drop the payload.
   </Example>
   <Example id="S0695" name="Donut">
    Donut can generate shellcode outputs that execute via VBScript.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca used VBA scripts.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has sent Microsoft Word documents with embedded macros that will invoke scripts to download additional payloads.
   </Example>
   <Example id="S0343" name="Exaramel for Windows">
    Exaramel for Windows has a command to execute VBS scripts on the victim’s machine.
   </Example>
   <Example id="S0679" name="Ferocious">
    Ferocious has the ability to use Visual Basic scripts for execution.
   </Example>
   <Example id="G0085" name="FIN4">
    FIN4 has used VBA macros to display a dialog box and collect victim credentials.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 used VBS scripts to help perform tasks on the victim's machine.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro can execute malicious VBA macros embedded in .xlsm files.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors used Word documents that prompted the victim to enable macros and run a Visual Basic script.
   </Example>
   <Example id="C0007" name="FunnyDream">
    During FunnyDream, the threat actors used a Visual Basic script to run remote commands.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has embedded malicious macros in document templates, which executed VBScript. Gamaredon Group has also delivered Microsoft Outlook VBA projects with embedded macros.
   </Example>
   <Example id="S0477" name="Goopy">
    Goopy has the ability to use a Microsoft Outlook backdoor macro to communicate with its C2.
   </Example>
   <Example id="G0078" name="Gorgon Group">
    Gorgon Group has used macros in Spearphishing Attachments as well as executed VBScripts on victim machines.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can use VBScript to execute malicious code.
   </Example>
   <Example id="S0170" name="Helminth">
    One version of Helminth consists of VBScript scripts.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has used a VisualBasic script named MicrosoftUpdator.vbs for execution of a PowerShell keylogger.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa has used VBScript code on the victim's machine.
   </Example>
   <Example id="S0483" name="IcedID">
    IcedID has used obfuscated VBA string expressions.
   </Example>
   <Example id="G0100" name="Inception">
    Inception has used VBScript to execute malicious commands and payloads.
   </Example>
   <Example id="S0528" name="Javali">
    Javali has used embedded VBScript to download malicious payloads from C2.
   </Example>
   <Example id="S0389" name="JCry">
    JCry has used VBS scripts.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT has been distributed as HTA files with VBScript.
   </Example>
   <Example id="S0648" name="JSS Loader">
    JSS Loader can download and execute VBScript files.
   </Example>
   <Example id="S0585" name="Kerrdown">
    Kerrdown can use a VBS base64 decoder function published by Motobit.
   </Example>
   <Example id="S0387" name="KeyBoy">
    KeyBoy uses VBS scripts for installing files and performing execution.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used Visual Basic to download malicious payloads.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic performs most of its operations using Windows Script Host (VBScript) and runs arbitrary shellcode .
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS has used VBScript to call wscript to execute a PowerShell command.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used VBA and embedded macros in Word documents to execute malicious code.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter has used VBScript to execute malicious code.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has used VBScript.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has used VBS scripts and XLS macros for execution.
   </Example>
   <Example id="S0582" name="LookBack">
    LookBack has used VBA macros in Microsoft Word attachments to drop additional files to the host.
   </Example>
   <Example id="G0095" name="Machete">
    Machete has embedded malicious macros within spearphishing attachments to download additional files.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound malware has used VBS scripts for execution.
   </Example>
   <Example id="S0530" name="Melcoz">
    Melcoz can use VBS scripts to execute malicious DLLs.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has used VBS code on victims’ systems.
   </Example>
   <Example id="G0021" name="Molerats">
    Molerats used various implants, including those built with VBScript, on target machines.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used VBScript files to execute its POWERSTATS payload, as well as macros.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has embedded VBScript components in LNK files to download additional files and automate collection.
   </Example>
   <Example id="S0228" name="NanHaiShu">
    NanHaiShu executes additional VBScript code on the victim's machine.
   </Example>
   <Example id="S0336" name="NanoCore">
    NanoCore uses VBS files.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE has been executed through use of VBScripts.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used VBSscipt macros for execution on compromised hosts.
   </Example>
   <Example id="S0264" name="OopsIE">
    OopsIE creates and uses a VBScript as part of its persistent execution.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors executed an encoded VBScript file using wscript and wrote the decoded output to a text file.
   </Example>
   <Example id="C0016" name="Operation Dust Storm">
    During Operation Dust Storm, the threat actors used Visual Basic scripts.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    For Operation Honeybee, the threat actors used a Visual Basic script embedded within a Word document to download an implant.
   </Example>
   <Example id="C0013" name="Operation Sharpshooter">
    During Operation Sharpshooter, the threat actors used a VBA macro to execute a simple downloader that installed Rising Sun.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used VBScript to conduct reconnaissance on targeted systems.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    OSX_OCEANLOTUS.D uses Word macros for execution.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork used Visual Basic Scripts (VBS) on victim machines.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has used Word documents with VBScripts to execute malicious activities.
   </Example>
   <Example id="S0441" name="PowerShower">
    PowerShower has the ability to save and execute VBScript.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS can use VBScript (VBE) code for execution.
   </Example>
   <Example id="S0147" name="Pteranodon">
    Pteranodon can use a malicious VBS file for execution.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can use VBS to download and execute malicious files.
   </Example>
   <Example id="S0269" name="QUADAGENT">
    QUADAGENT uses VBScripts.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay has included embedded Visual Basic scripts in malicious documents.
   </Example>
   <Example id="G0075" name="Rancor">
    Rancor has used VBS scripts as well as embedded macros for execution.
   </Example>
   <Example id="S0375" name="Remexi">
    Remexi uses AutoIt and VBS scripts throughout its execution process.
   </Example>
   <Example id="S0496" name="REvil">
    REvil has used obfuscated VBA macros for execution.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT has used Visual Basic for execution.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has used .vbs scripts for execution.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has created VBScripts to run an SSH server.
   </Example>
   <Example id="S0589" name="Sibot">
    Sibot executes commands using VBScript.
   </Example>
   <Example id="G1008" name="SideCopy">
    SideCopy has sent Microsoft Office Publisher documents to victims that have embedded malicious macros that execute an hta file via calling mshta.exe.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has used VBScript to drop and execute malware loaders.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has used VBS scripts.
   </Example>
   <Example id="S0226" name="Smoke Loader">
    Smoke Loader adds a Visual Basic script in the Startup folder to deploy the payload.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has used malicious VBA macros in Microsoft Word documents and Excel spreadsheets that execute an AutoOpen subroutine.
   </Example>
   <Example id="S1037" name="STARWHALE">
    STARWHALE can use the VBScript function GetRef as part of its persistence mechanism.
   </Example>
   <Example id="S0380" name="StoneDrill">
    StoneDrill has several VBS scripts used throughout the malware's lifecycle.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST used VBScripts to initiate the execution of payloads.
   </Example>
   <Example id="G0062" name="TA459">
    TA459 has a VBScript for execution.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used VBS for code execution.
   </Example>
   <Example id="G0134" name="Transparent Tribe">
    Transparent Tribe has crafted VBS-based malicious documents.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used VBS scripts throughout its operations.
   </Example>
   <Example id="S0263" name="TYPEFRAME">
    TYPEFRAME has used a malicious Word document for delivery with VBA macros for execution.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif droppers have used VBA macros to download and execute the malware's full executable payload.
   </Example>
   <Example id="S0442" name="VBShower">
    VBShower has the ability to execute VBScript files.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can use a Visual Basic script to exclude the C:\ drive from Windows Defender.
   </Example>
   <Example id="G0112" name="Windshift">
    Windshift has used Visual Basic 6 (VB6) payloads.
   </Example>
   <Example id="G0090" name="WIRTE">
    WIRTE has used VBScript  in its operations.
   </Example>
   <Example id="S0341" name="Xbash">
    Xbash can execute malicious VBScript payloads on the victim’s machine.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1049" name="Antivirus/Antimalware">
    Anti-virus can be used to automatically quarantine suspicious files.
   </Mitigation>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Visual Basic scripts from executing potentially malicious downloaded content .
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Turn off or restrict access to unneeded VB components.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Use application control where appropriate. VBA macros obtained from the Internet, based on the file's Mark of the Web (MOTW) attribute, may be blocked from executing in Office applications (ex: Access, Excel, PowerPoint, Visio, and Word) by default starting in Windows Version 2203.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    Script blocking extensions can help prevent the execution of scripts and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1059.006" name="Command and Scripting Interpreter: Python">
  Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the python.exe interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <System_Requirements>
   Python is installed.
  </System_Requirements>
  <Permissions_Required>
   Administrator, SYSTEM, root
  </Permissions_Required>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 has developed malware variants written in Python.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 has used Python scripts to execute payloads.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used a command line utility and a network scanner written in python.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook can support commands to execute Python-based payloads.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has made use of Python-based remote access tools.
   </Example>
   <Example id="S0482" name="Bundlore">
    Bundlore has used Python scripts to execute payloads.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes has used Python scripts for execution and the installation of additional files.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can use Python to perform execution.
   </Example>
   <Example id="S0369" name="CoinTicker">
    CoinTicker executes a Python script to download its second stage.
   </Example>
   <Example id="S0492" name="CookieMiner">
    CookieMiner has used python scripts on the user’s system, as well as the Python variant of the Empire agent, EmPyre.
   </Example>
   <Example id="S0695" name="Donut">
    Donut can generate shellcode outputs that execute via Python.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has used various types of scripting to perform operations, including Python scripts. The group was observed installing Python 2.7 on a victim.
   </Example>
   <Example id="S0547" name="DropBook">
    DropBook is a Python-based backdoor compiled with PyInstaller.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca used Python scripts for port scanning or building reverse shells.
   </Example>
   <Example id="S0377" name="Ebury">
    Ebury has used Python to implement its DGA.
   </Example>
   <Example id="S0581" name="IronNetInjector">
    IronNetInjector can use IronPython scripts to load payloads with the help of a .NET injector.
   </Example>
   <Example id="S0387" name="KeyBoy">
    KeyBoy uses Python scripts for installing files and performing execution.
   </Example>
   <Example id="S0276" name="Keydnap">
    Keydnap uses Python for scripting to execute additional commands.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used a macOS Python implant to gather data as well as MailFetcher.py code to automatically collect email data.
   </Example>
   <Example id="S0409" name="Machete">
    Machete is written in Python and is used in conjunction with additional Python scripts.
   </Example>
   <Example id="G0095" name="Machete">
    Machete used multiple compiled Python scripts on the victim’s system. Machete's main backdoor Machete is also written in Python.
   </Example>
   <Example id="S0459" name="MechaFlounder">
    MechaFlounder uses a python-based payload.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used developed tools in Python including Out1.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors' backdoors were written in Python and compiled with py2exe.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT was executed with a Python script and worked in conjunction with additional Python-based post-exploitation tools.
   </Example>
   <Example id="S0196" name="PUNCHBUGGY">
    PUNCHBUGGY has used python scripts.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can use an add on feature when creating payloads that allows you to create custom Python scripts ("scriptlets") to perform tasks offline (without requiring a session) such as sandbox detection, adding persistence, etc.
   </Example>
   <Example id="S1032" name="PyDCrypt">
    PyDCrypt, along with its functions, is written in Python.
   </Example>
   <Example id="S0583" name="Pysa">
    Pysa has used Python scripts to deploy ransomware.
   </Example>
   <Example id="S0332" name="Remcos">
    Remcos uses Python scripts.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has used Python-based malware to install and spread their coinminer.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY is written in Python and can use multiple Python scripts for execution on targeted systems.
   </Example>
   <Example id="S1035" name="Small Sieve">
    Small Sieve can use Python scripts to execute commands.
   </Example>
   <Example id="S0374" name="SpeakUp">
    SpeakUp uses Python scripts.
   </Example>
   <Example id="G0131" name="Tonto Team">
    Tonto Team has used Python-based tools for execution.
   </Example>
   <Example id="S0609" name="TRITON">
    TRITON was run as trilog.exe, a Py2EXE compiled python script that accepts a single IP address as a flag.
   </Example>
   <Example id="S0647" name="Turian">
    Turian has the ability to use Python to spawn a Unix shell.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used IronPython scripts as part of the IronNetInjector toolchain to drop payloads.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has used Python-based implants to interact with compromised hosts.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1049" name="Antivirus/Antimalware">
    Anti-virus can be used to automatically quarantine suspicious files.
   </Mitigation>
   <Mitigation id="M1047" name="Audit">
    Inventory systems for unauthorized Python installations.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Denylist Python where not required.
   </Mitigation>
   <Mitigation id="M1033" name="Limit Software Installation">
    Prevent users from installing Python where not required.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1059.007" name="Command and Scripting Interpreter: JavaScript">
  Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User
  </Permissions_Required>
  <Examples>
   <Example id="S0622" name="AppleSeed">
    AppleSeed has the ability to use JavaScript to execute PowerShell.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has used JavaScript for drive-by downloads and C2 communications.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth uses JavaScript to perform its core functionalities.
   </Example>
   <Example id="S0640" name="Avaddon">
    Avaddon has been executed through a malicious JScript downloader.
   </Example>
   <Example id="S0482" name="Bundlore">
    Bundlore can execute JavaScript by injecting it into the victim's browser.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors used a malicious HTA file that contained a mix of encoded HTML and JavaScript/VBScript code.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes has used JavaScript and Node.Js information stealer script that exfiltrates data using the node process.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has executed JavaScript scriptlets on the victim's machine.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    The Cobalt Strike System Profiler can use JavaScript to perform reconnaissance actions.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman uses JavaScript to perform its core functionalities.
   </Example>
   <Example id="S0695" name="Donut">
    Donut can generate shellcode outputs that execute via JavaScript or JScript.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has manipulated legitimate websites to inject malicious JavaScript code as part of their watering hole operations.
   </Example>
   <Example id="G1003" name="Ember Bear">
    Ember Bear has used JavaScript to execute malicious code on a victim's machine.
   </Example>
   <Example id="S0634" name="EnvyScout">
    EnvyScout can write files to disk with JavaScript using a modified version of the open-source tool FileSaver.
   </Example>
   <Example id="G0120" name="Evilnum">
    Evilnum has used malicious JavaScript files on the victim's machine.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used malicious JavaScript to steal payment card data from e-commerce sites.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 used JavaScript scripts to help perform tasks on the victim's machine.
   </Example>
   <Example id="S0417" name="GRIFFON">
    GRIFFON is written in and executed as JavaScript.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa used JavaScript to execute additional files.
   </Example>
   <Example id="G0119" name="Indrik Spider">
    Indrik Spider has used malicious JavaScript files for several components of their attack.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can use a JavaScript file as part of its execution chain.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT has been distributed as HTA files with JScript.
   </Example>
   <Example id="S0648" name="JSS Loader">
    JSS Loader can download and execute JavaScript files.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used JScript for logging and downloading additional tools.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has executed malicious JavaScript code.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter has used JavaScript in its attacks.
   </Example>
   <Example id="G0077" name="Leafminer">
    Leafminer infected victims using JavaScript code.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo includes payloads written in JavaScript.
   </Example>
   <Example id="G0021" name="Molerats">
    Molerats used various implants, including those built with JS, on target machines.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used JavaScript files to execute its POWERSTATS payload.
   </Example>
   <Example id="S0228" name="NanHaiShu">
    NanHaiShu executes additional Jscript code on the victim's machine.
   </Example>
   <Example id="C0016" name="Operation Dust Storm">
    During Operation Dust Storm, the threat actors used JavaScript code.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS can use JavaScript code for execution.
   </Example>
   <Example id="S0650" name="QakBot">
    The QakBot web inject module can inject Java Script into web banking pages visited by the victim.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has used JavaScript to drop and execute malware loaders.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has used JS scripts.
   </Example>
   <Example id="S0646" name="SpicyOmelette">
    SpicyOmelette has the ability to execute arbitrary JavaScript code on a compromised host.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used JavaScript for code execution.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used various JavaScript-based backdoors.
   </Example>
   <Example id="S0476" name="Valak">
    Valak can execute JavaScript containing configuration data for establishing persistence.
   </Example>
   <Example id="S0341" name="Xbash">
    Xbash can execute malicious JavaScript payloads on the victim’s machine.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent JavaScript scripts from executing potentially malicious downloaded content .
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Turn off or restrict access to unneeded scripting components.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Denylist scripting where appropriate.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    Script blocking extensions can help prevent the execution of JavaScript and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1059.008" name="Command and Scripting Interpreter: Network Device CLI">
  Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Network
  </Platforms>
  <Supports_Remote>
   Yes
  </Supports_Remote>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    TACACS+ can keep control over which commands administrators are permitted to use through the configuration of authentication and command authorization.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Use of Authentication, Authorization, and Accounting (AAA) systems will limit actions administrators can perform and provide a history of user actions to detect unauthorized use and abuse. TACACS+ can keep control over which commands administrators are permitted to use through the configuration of authentication and command authorization
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Use of Authentication, Authorization, and Accounting (AAA) systems will limit actions users can perform and provide a history of user actions to detect unauthorized use and abuse. Ensure least privilege principles are applied to user accounts and groups so that only authorized users can perform configuration changes.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1092" name="Communication Through Removable Media">
  Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 uses a tool that captures information from air-gapped computers via an infected USB and transfers it to network-connected computer when the USB is inserted.
   </Example>
   <Example id="S0023" name="CHOPSTICK">
    Part of APT28's operation involved using CHOPSTICK modules to copy itself to air-gapped machines, using files written to USB sticks to transfer data and command traffic.
   </Example>
   <Example id="S0136" name="USBStealer">
    USBStealer drops commands for a second victim onto a removable media drive inserted into the first victim, and commands are executed when the drive is inserted into the second victim.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Disable Autoruns if it is unnecessary.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Disallow or restrict removable media at an organizational policy level if they are not required for business operations.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0016" name="Drive">
    Drive Access | Drive Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1586" name="Compromise Accounts">
  Adversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. Establish Accounts), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
   <Detection id="DS0021" name="Persona">
    Social Media
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1586.001" name="Compromise Accounts: Social Media Accounts">
  Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. Social Media Accounts), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0065" name="Leviathan">
    Leviathan has compromised social media accounts to conduct social engineering attacks.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
   <Detection id="DS0021" name="Persona">
    Social Media
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1586.002" name="Compromise Accounts: Email Accounts">
  Adversaries may compromise email accounts that can be used during targeting. Adversaries can use compromised email accounts to further their operations, such as leveraging them to conduct Phishing for Information or Phishing. Utilizing an existing persona with a compromised email account may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. Compromised email accounts can also be used in the acquisition of infrastructure (ex: Domains).
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has used compromised email accounts to send credential phishing emails.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has compromised email accounts to further enable phishing campaigns.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has used compromised accounts to send spearphishing emails.
   </Example>
   <Example id="G0136" name="IndigoZebra">
    IndigoZebra has compromised legitimate email accounts to use in their spearphishing operations.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has compromised email accounts to send spearphishing e-mails.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has compromised email accounts to conduct social engineering attacks.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has compromised personal email accounts through the use of legitimate credentials and gathered additional victim information.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).
  </Detections>
 </Technique>
 <Technique id="T1586.003" name="Compromise Accounts: Cloud Accounts">
  Adversaries may compromise cloud accounts that can be used during targeting. Adversaries can use compromised cloud accounts to further their operations, including leveraging cloud storage services such as Dropbox, Microsoft OneDrive, or AWS S3 buckets for Exfiltration to Cloud Storage or to Upload Tools. Cloud accounts can also be used in the acquisition of infrastructure, such as Virtual Private Servers or Serverless infrastructure. Compromising cloud accounts may allow adversaries to develop sophisticated capabilities without managing their own servers.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during exfiltration (ex: Transfer Data to Cloud Account).
  </Detections>
 </Technique>
 <Technique id="T1554" name="Compromise Client Software Binary">
  Adversaries may modify client software binaries to establish persistent access to systems. Client software enables users to access services provided by a server. Common client software types are SSH clients, FTP clients, email clients, and web browsers.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0486" name="Bonadan">
    Bonadan has maliciously altered the OpenSSH binary on targeted systems to create a backdoor.
   </Example>
   <Example id="S0377" name="Ebury">
    Ebury has been embedded into modified OpenSSH binaries to gain persistent access to SSH credential information.
   </Example>
   <Example id="S0604" name="Industroyer">
    Industroyer has used a Trojanized version of the Windows Notepad application for an additional backdoor persistence mechanism.
   </Example>
   <Example id="S0487" name="Kessel">
    Kessel has maliciously altered the OpenSSH binary on targeted systems to create a backdoor.
   </Example>
   <Example id="S0641" name="Kobalos">
    Kobalos replaced the SSH client with a trojanized SSH client to steal credentials on compromised systems.
   </Example>
   <Example id="S0595" name="ThiefQuest">
    ThiefQuest searches through the /Users/ folder looking for executable files. For each executable, ThiefQuest prepends a copy of itself to the beginning of the file. When the file is executed, the ThiefQuest code is executed first. ThiefQuest creates a hidden file, copies the original target executable to the file, then executes the new hidden file to maintain the appearance of normal behavior.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET uses a malicious browser application to replace the legitimate browser in order to continuously capture credentials, monitor web traffic, and download additional modules.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1045" name="Code Signing">
    Ensure all application component binaries are signed by the correct application developers.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation | File Deletion | File Metadata | File Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1584" name="Compromise Infrastructure">
  Adversaries may compromise third-party infrastructure that can be used during targeting. Infrastructure solutions include physical or cloud servers, domains, and third-party web and DNS services. Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it during other phases of the adversary lifecycle. Additionally, adversaries may compromise numerous machines to form a botnet they can leverage.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0038" name="Domain Name">
    Active DNS | Domain Registration | Passive DNS
   </Detection>
   <Detection id="DS0035" name="Internet Scan">
    Response Content | Response Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1584.001" name="Compromise Infrastructure: Domains">
  Adversaries may hijack domains and/or subdomains that can be used during targeting. Domain registration hijacking is the act of changing the registration of a domain name without the permission of the original registrant.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0006" name="APT1">
    APT1 hijacked FQDNs associated with legitimate websites hosted by hop points.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has compromised domains to use for C2.
   </Example>
   <Example id="C0010" name="C0010">
    During C0010, UNC3890 actors likely compromised the domain of a legitimate Israeli shipping company.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has compromised legitimate sites and used them to distribute malware.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has compromised legitimate domains, including those hosted in the US and Italy, for C2.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has used compromised domains to host links targeted to specific phishing victims.
   </Example>
   <Example id="G1008" name="SideCopy">
    SideCopy has compromised domains for some of their infrastructure, including for C2 and staging malware.
   </Example>
   <Example id="G0134" name="Transparent Tribe">
    Transparent Tribe has compromised domains for use in targeted malicious campaigns.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0038" name="Domain Name">
    Active DNS | Domain Registration | Passive DNS
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1584.002" name="Compromise Infrastructure: DNS Server">
  Adversaries may compromise third-party DNS servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of setting up their own DNS servers, adversaries may compromise third-party DNS servers in support of operations.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0038" name="Domain Name">
    Active DNS | Passive DNS
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1584.003" name="Compromise Infrastructure: Virtual Private Server">
  Adversaries may compromise third-party Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. Adversaries may compromise VPSs purchased by third-party entities. By compromising a VPS to use as infrastructure, adversaries can make it difficult to physically tie back operations to themselves.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0010" name="Turla">
    Turla has used the VPS infrastructure of compromised Iranian threat actors.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content | Response Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1584.004" name="Compromise Infrastructure: Server">
  Adversaries may compromise third-party servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of purchasing a Server or Virtual Private Server, adversaries may compromise third-party servers in support of operations.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0023" name="APT16">
    APT16 has compromised otherwise legitimate sites as staging servers for second-stage payloads.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has compromised legitimate websites to host C2 and malware modules.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has used compromised web servers as part of their operational infrastructure.
   </Example>
   <Example id="G0119" name="Indrik Spider">
    Indrik Spider has served fake updates via legitimate websites that have been compromised.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has compromised servers to stage malicious tools.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors compromised web servers to use for C2.
   </Example>
   <Example id="C0013" name="Operation Sharpshooter">
    For Operation Sharpshooter, the threat actors compromised a server they used as part of the campaign's infrastructure.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used compromised servers as infrastructure.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content | Response Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1584.005" name="Compromise Infrastructure: Botnet">
  Adversaries may compromise numerous third-party systems to form a botnet that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale Phishing or Distributed Denial of Service (DDoS).
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0001" name="Axiom">
    Axiom has used large groups of compromised machines for use as proxy nodes.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used a large-scale botnet to target Small Office/Home Office (SOHO) network devices.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Phishing, Endpoint Denial of Service, or Network Denial of Service.
  </Detections>
 </Technique>
 <Technique id="T1584.006" name="Compromise Infrastructure: Web Services">
  Adversaries may compromise access to third-party web services that can be used during targeting. A variety of popular websites exist for legitimate users to register for web-based services, such as GitHub, Twitter, Dropbox, Google, etc. Adversaries may try to take ownership of a legitimate user's access to a web service and use that web service as infrastructure in support of cyber operations. Such web services can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, particularly when access is stolen from legitimate users, adversaries can make it difficult to physically tie back operations to them.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has compromised Google Drive repositories.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has frequently used compromised WordPress sites for C2 infrastructure.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1584.007" name="Compromise Infrastructure: Serverless">
  Adversaries may compromise serverless cloud infrastructure, such as Cloudflare Workers or AWS Lambda functions, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1609" name="Container Administration Command">
  Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Containers
  </Platforms>
  <Supports_Remote>
   Yes
  </Supports_Remote>
  <Examples>
   <Example id="S0601" name="Hildegard">
    Hildegard was executed through the kubelet API run command and by executing commands on running containers.
   </Example>
   <Example id="S0599" name="Kinsing">
    Kinsing was executed with an Ubuntu container entry point that runs shell scripts.
   </Example>
   <Example id="S0683" name="Peirates">
    Peirates can use kubectl or the Kubernetes API to run commands.
   </Example>
   <Example id="S0623" name="Siloscape">
    Siloscape can send kubectl commands to victim clusters through an IRC channel and can run kubectl locally to spread once within a victim cluster.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT executed Hildegard through the kubelet API run command and by executing commands on running containers.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    Use read-only containers, read-only file systems, and minimal images when possible to prevent the execution of commands.
   </Mitigation>
   <Mitigation id="M1035" name="Limit Access to Resource Over Network">
    Limit communications with the container service to local Unix sockets or remote access via SSH. Require secure port access to communicate with the APIs over TLS by disabling unauthenticated access to the Docker API and Kubernetes API Server.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Ensure containers are not running as root by default. In Kubernetes environments, consider defining a Pod Security Policy that prevents pods from running privileged containers.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Enforce authentication and role-based access control on the container service to restrict users to the least privileges required.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1613" name="Container and Resource Discovery">
  Adversaries may attempt to discover containers and other resources that are available within a containers environment. Other resources may include images, deployments, pods, nodes, and other information such as the status of a cluster.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Containers
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0601" name="Hildegard">
    Hildegard has used masscan to search for kubelets and the kubelet API for additional running containers.
   </Example>
   <Example id="S0683" name="Peirates">
    Peirates can enumerate Kubernetes pods in a given namespace.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has checked for running containers with docker ps and for specific container names with docker inspect.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1035" name="Limit Access to Resource Over Network">
    Limit communications with the container service to local Unix sockets or remote access via SSH. Require secure port access to communicate with the APIs over TLS by disabling unauthenticated access to the Docker API and Kubernetes API Server.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Enforce the principle of least privilege by limiting dashboard visibility to only the required users.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0032" name="Container">
    Container Enumeration
   </Detection>
   <Detection id="DS0014" name="Pod">
    Pod Enumeration
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1136" name="Create Account">
  Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Linux, Office 365, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Examples>
   <Example id="G0119" name="Indrik Spider">
    Indrik Spider used wmic.exe to add a new user to the system.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team added a login to a SQL Server with sp_addlinkedsrvlogin.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication for user and privileged accounts.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Configure access controls and firewalls to limit access to domain controllers and systems used to create and manage accounts.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Protect domain controllers by ensuring proper security configuration for critical servers.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Do not allow domain administrator accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1136.001" name="Create Account: Local Account">
  Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. With a sufficient level of access, the net user /add command can be used to create a local account. On macOS systems the dscl -create command can be used to create a local account.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Examples>
   <Example id="G0022" name="APT3">
    APT3 has been known to create or enable accounts, such as support_388945a0.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has created accounts on multiple compromised hosts to perform actions within the network.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 created user accounts and adds them to the User and Admin groups.
   </Example>
   <Example id="S0274" name="Calisto">
    Calisto has the capability to add its own account to the victim's machine.
   </Example>
   <Example id="S0030" name="Carbanak">
    Carbanak can create a Windows account.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has created accounts on victims, including administrator accounts, some of which appeared to be tailored to each individual staging target.
   </Example>
   <Example id="S0363" name="Empire">
    Empire has a module for creating a local user if permissions allow.
   </Example>
   <Example id="S0143" name="Flame">
    Flame can create backdoor accounts with login "HelpAssistant" on domain connected systems if appropriate rights are available.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has created a local user account with administrator privileges.
   </Example>
   <Example id="S0493" name="GoldenSpy">
    GoldenSpy can create new users on an infected system.
   </Example>
   <Example id="S0394" name="HiddenWasp">
    HiddenWasp creates a user account as a means to provide initial persistence to the compromised machine.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has created a user named "monerodaemon".
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has created accounts with net user.
   </Example>
   <Example id="G0077" name="Leafminer">
    Leafminer used a tool called Imecab to set up a persistent remote access account on the victim machine.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has created a user named DefaultAccount on compromised machines and assigned it to the Administrators and Remote Desktop Users groups.
   </Example>
   <Example id="S0084" name="Mis-Type">
    Mis-Type may create a temporary user on the system named Lost_{Unique Identifier}.
   </Example>
   <Example id="S0039" name="Net">
    The net user username \password commands in Net can be used to create a local account.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can user PowerView to execute "net user" commands and create local system accounts.
   </Example>
   <Example id="S0085" name="S-Type">
    S-Type may create a temporary user on the system named Lost_{Unique Identifier} with the password pond~!@6"{Unique Identifier}.
   </Example>
   <Example id="S0382" name="ServHelper">
    ServHelper has created a new user and added it to the "Remote Desktop Users" and "Administrators" groups.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM has created user accounts and added them to local Admin groups.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has created local privileged users on victim machines.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell has a feature to create local user accounts.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication for user and privileged accounts.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Limit the usage of local administrator accounts to be used for day-to-day operations that may expose them to potential adversaries.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1136.002" name="Create Account: Domain Account">
  Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the net user /add /domain command can be used to create a domain account.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Examples>
   <Example id="S0363" name="Empire">
    Empire has a module for creating a new domain user if permissions allow.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM created high-privileged domain user accounts to maintain access to victim networks.
   </Example>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has created and granted privileges to domain accounts.
   </Example>
   <Example id="S0039" name="Net">
    The net user username \password \domain commands in Net can be used to create a domain account.
   </Example>
   <Example id="S0029" name="PsExec">
    PsExec has the ability to remotely create accounts on target systems.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can user PowerView to execute "net user" commands and create domain accounts.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has created new domain accounts on an ICS access server.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication for user and privileged accounts.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Configure access controls and firewalls to limit access to domain controllers and systems used to create and manage accounts.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Protect domain controllers by ensuring proper security configuration for critical servers.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Do not allow domain administrator accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1136.003" name="Create Account: Cloud Account">
  Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Office 365, SaaS
  </Platforms>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals can create new Azure AD users.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 can create new users through Azure AD.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has created global admin accounts in the targeted organization's cloud instances to gain persistence.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication for user and privileged accounts.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Configure access controls and firewalls to limit access to critical systems and domain controllers. Most cloud environments support separate virtual private cloud (VPC) instances that enable further segmentation of cloud systems.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Do not allow privileged accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0002" name="User Account">
    User Account Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1543" name="Create or Modify System Process">
  Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0401" name="Exaramel for Linux">
    Exaramel for Linux has a hardcoded location that it uses to achieve persistence if the startup system is Upstart or System V and it is running as root.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Use auditing tools capable of detecting privilege and service abuse opportunities on systems within an enterprise and correct them.
   </Mitigation>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent an application from writing a signed vulnerable driver to the system.
   </Mitigation>
   <Mitigation id="M1045" name="Code Signing">
    Enforce registration and execution of only legitimately signed service drivers where possible.
   </Mitigation>
   <Mitigation id="M1033" name="Limit Software Installation">
    Restrict software installation to trusted repositories only and be cautious of orphaned software packages.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Ensure that Driver Signature Enforcement is enabled to restrict unsigned drivers from being installed.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Restrict read/write access to system-level process files to only select privileged users who have a legitimate need to manage system services.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit privileges of user accounts and groups so that only authorized administrators can interact with system-level process changes and service configurations.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0027" name="Driver">
    Driver Load
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Creation | Service Modification
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Creation | Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1543.001" name="Create or Modify System Process: Launch Agent">
  Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in /System/Library/LaunchAgents, /Library/LaunchAgents, and ~/Library/LaunchAgents. Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   macOS
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Examples>
   <Example id="S0482" name="Bundlore">
    Bundlore can persist via a LaunchAgent.
   </Example>
   <Example id="S0274" name="Calisto">
    Calisto adds a .plist file to the /Library/LaunchAgents folder to maintain persistence.
   </Example>
   <Example id="S0369" name="CoinTicker">
    CoinTicker creates user launch agents named .espl.plist and com.apple.
   </Example>
   <Example id="S0492" name="CookieMiner">
    CookieMiner has installed multiple new Launch Agents in order to maintain persistence for cryptocurrency mining software.
   </Example>
   <Example id="S0235" name="CrossRAT">
    CrossRAT creates a Launch Agent on macOS.
   </Example>
   <Example id="S0497" name="Dacls">
    Dacls can establish persistence via a LaunchAgent.
   </Example>
   <Example id="S0281" name="Dok">
    Dok installs two LaunchAgents to redirect all network traffic with a randomly generated name for each plist file maintaining the format com.random.name.plist.
   </Example>
   <Example id="S0277" name="FruitFly">
    FruitFly persists via a Launch Agent.
   </Example>
   <Example id="S0690" name="Green Lambert">
    Green Lambert can create a Launch Agent with the RunAtLoad key-value pair set to true, ensuring the com.apple.GrowlHelper.plist file runs every time a user logs in.
   </Example>
   <Example id="S0276" name="Keydnap">
    Keydnap uses a Launch Agent to persist.
   </Example>
   <Example id="S0162" name="Komplex">
    The Komplex trojan creates a persistent launch agent called with $HOME/Library/LaunchAgents/com.apple.updates.plist with launchctl load -w ~/Library/LaunchAgents/com.apple.updates.plist.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa installs a com.apple.softwareupdate.plist file in the /LaunchAgents folder with the RunAtLoad value set to true. Upon user login, MacMa is executed from /var/root/.local/softwareupdate with root privileges. Some variations also include the LimitLoadToSessionType key with the value Aqua, ensuring the MacMa only runs when there is a logged in GUI user.
   </Example>
   <Example id="S1048" name="macOS.OSAMiner">
    macOS.OSAMiner has placed a Stripped Payloads with a plist extension in the Launch Agent's folder.
   </Example>
   <Example id="S0282" name="MacSpy">
    MacSpy persists via a Launch Agent.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can use launch agents for persistence.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    OSX_OCEANLOTUS.D can create a persistence file in the folder /Library/LaunchAgents.
   </Example>
   <Example id="S0279" name="Proton">
    Proton persists via Launch Agent.
   </Example>
   <Example id="S0595" name="ThiefQuest">
    ThiefQuest installs a launch item using an embedded encrypted launch agent property list template. The plist file is installed in the ~/Library/LaunchAgents/ folder and configured with the path to the persistent binary located in the ~/Library/ folder.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Set group policies to restrict file permissions to the ~/launchagents folder.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Creation | Service Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1543.002" name="Create or Modify System Process: Systemd Service">
  Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Linux
  </Platforms>
  <Permissions_Required>
   User, root
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-550, CAPEC-551
  </CAPEC_ID>
  <Examples>
   <Example id="S0401" name="Exaramel for Linux">
    Exaramel for Linux has a hardcoded location under systemd that it uses to achieve persistence if it is running as root.
   </Example>
   <Example id="S0410" name="Fysbis">
    Fysbis has established persistence using a systemd service.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has started a monero service.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can be used to establish persistence using a systemd service.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has installed a systemd service script to maintain persistence.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has established persistence through the creation of a cryptocurrency mining system service using systemctl.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1033" name="Limit Software Installation">
    Restrict software installation to trusted repositories only and be cautious of orphaned software packages.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    The creation and modification of systemd service unit files is generally reserved for administrators such as the Linux root user and other users with superuser privileges.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Restrict read/write access to systemd unit files to only select privileged users who have a legitimate need to manage system services.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit user access to system utilities such as 'systemctl' to only users who have a legitimate need.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Creation | Service Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1543.003" name="Create or Modify System Process: Windows Service">
  Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Effective_Permissions>
   Administrator, SYSTEM
  </Effective_Permissions>
  <CAPEC_ID>
   CAPEC-478, CAPEC-550, CAPEC-551
  </CAPEC_ID>
  <Examples>
   <Example id="S0504" name="Anchor">
    Anchor can establish persistence by creating a service.
   </Example>
   <Example id="S0584" name="AppleJeus">
    AppleJeus can install itself as a service.
   </Example>
   <Example id="G0073" name="APT19">
    An APT19 Port 22 malware variant registers itself as a service.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has a tool that creates a new service for persistence.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 modified Windows Services to ensure PowerShell scripts were loaded on the system. APT32 also creates a Windows service to establish persistence.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has installed a new Windows service to establish persistence.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 modified legitimate Windows services to install malware backdoors.
   </Example>
   <Example id="S0438" name="Attor">
    Attor's dispatcher can establish persistence by registering a new service.
   </Example>
   <Example id="S0347" name="AuditCred">
    AuditCred is installed as a new service on the system.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot can terminate a specific process by its process id.
   </Example>
   <Example id="S0127" name="BBSRAT">
    BBSRAT can modify service configurations.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has been modified to be used as a Windows service.
   </Example>
   <Example id="S0570" name="BitPaymer">
    BitPaymer has attempted to install itself as a service to maintain persistence.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    One variant of BlackEnergy creates a new service using either a hard-coded or randomly generated name.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has made their XMRIG payloads persistent as a Windows Service.
   </Example>
   <Example id="S0204" name="Briba">
    Briba installs a service pointing to a malicious DLL dropped to disk.
   </Example>
   <Example id="G0008" name="Carbanak">
    Carbanak malware installs itself as a service to provide persistence and SYSTEM privileges.
   </Example>
   <Example id="S0335" name="Carbon">
    Carbon establishes persistence by creating a service and naming it based off the operating system version running on the current machine.
   </Example>
   <Example id="S0261" name="Catchamas">
    Catchamas adds a new service named NetAdapter to establish persistence.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can register itself as a system service to gain persistence.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has created new services to establish persistence.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can install a new service.
   </Example>
   <Example id="S0608" name="Conficker">
    Conficker copies itself into the %systemroot%\system32 directory and registers as a service.
   </Example>
   <Example id="S0050" name="CosmicDuke">
    CosmicDuke uses Windows services typically named "javamtsup" for persistence.
   </Example>
   <Example id="S0046" name="CozyCar">
    One persistence mechanism used by CozyCar is to register itself as a Windows service.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba can modify services by using the OpenService and ChangeServiceConfig functions.
   </Example>
   <Example id="G0105" name="DarkVishnya">
    DarkVishnya created new services for shellcode loaders distribution.
   </Example>
   <Example id="S1033" name="DCSrv">
    DCSrv has created new services for persistence by modifying the Registry.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack can add a service called WBService to establish persistence.
   </Example>
   <Example id="S0038" name="Duqu">
    Duqu creates a new service that loads a malicious driver when the system starts. When Duqu is active, the operating system believes that the driver is legitimate, as it has been signed with a valid private key.
   </Example>
   <Example id="S0024" name="Dyre">
    Dyre registers itself as a service by adding several Registry keys.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca created a service using the command sc create "SysUpdate" binpath= "cmd /c start "
   </Example>
   <Example id="S0081" name="Elise">
    Elise configures itself as a service.
   </Example>
   <Example id="S0082" name="Emissary">
    Emissary is capable of configuring itself as a service.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has been observed creating new services to maintain persistence.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can utilize built-in modules to modify service binaries and restore them to their original state.
   </Example>
   <Example id="S0343" name="Exaramel for Windows">
    The Exaramel for Windows dropper creates and starts a Windows service named wsmprovav with the description "Windows Check AV."
   </Example>
   <Example id="S0181" name="FALLCHILL">
    FALLCHILL has been installed as a Windows service.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 created new Windows services and added them to the startup directories for persistence.
   </Example>
   <Example id="S0182" name="FinFisher">
    FinFisher creates a new Windows service with the malicious executable for persistence.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream has established persistence by running sc.exe and by setting the WSearch service to run automatically.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can drop itself in C:\Windows\System32\spool\prtprocs\x64\winprint.dll as an alternative Print Processor to be loaded automatically when the spoolsv Windows service starts.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT can create a new service to establish persistence.
   </Example>
   <Example id="S0493" name="GoldenSpy">
    GoldenSpy has established persistence by running in the background as an autostart service.
   </Example>
   <Example id="S0342" name="GreyEnergy">
    GreyEnergy chooses a service, drops a DLL file, and writes it to that serviceDLL Registry key.
   </Example>
   <Example id="S0071" name="hcdLoader">
    hcdLoader installs itself as a service for persistence.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper can load drivers by creating a new service using the CreateServiceW API.
   </Example>
   <Example id="S0203" name="Hydraq">
    Hydraq creates new services to establish persistence.
   </Example>
   <Example id="S0604" name="Industroyer">
    Industroyer can use an arbitrary system service to load at system boot for persistence and replaces the ImagePath registry value of a Windows service with a new backdoor binary.
   </Example>
   <Example id="S0259" name="InnaputRAT">
    Some InnaputRAT variants create a new Windows service to establish persistence.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can register a Windows service named CsPower as part of its execution chain, and a Windows service named clr_optimization_v2.0.51527_X86 to achieve persistence.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    JHUHUGIT has registered itself as a service to establish persistence.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar can install itself as a new service.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang backdoor RoyalDNS established persistence through adding a service called Nwsapagent.
   </Example>
   <Example id="S0387" name="KeyBoy">
    KeyBoy installs a service pointing to a malicious DLL dropped to disk.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has created new services for persistence.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has registered itself as a service using its export function.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs creates a new service named WmiApSrvEx to establish persistence.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Several Lazarus Group malware families install themselves as new services.
   </Example>
   <Example id="S0451" name="LoudMiner">
    LoudMiner can automatically launch a Linux virtual machine as a service at startup if the AutoStart option is enabled in the VBoxVmService configuration file.
   </Example>
   <Example id="S0149" name="MoonWind">
    MoonWind installs itself as a new service with automatic startup to establish persistence. The service checks every 60 seconds to determine if the malware is running; if not, it will spawn a new instance.
   </Example>
   <Example id="S0205" name="Naid">
    Naid creates a new service to establish.
   </Example>
   <Example id="S0630" name="Nebulae">
    Nebulae can create a service to establish persistence.
   </Example>
   <Example id="S0210" name="Nerex">
    Nerex creates a Registry subkey that registers a new service.
   </Example>
   <Example id="S0118" name="Nidiran">
    Nidiran can create a new service named msamger (Microsoft Security Accounts Manager).
   </Example>
   <Example id="S0439" name="Okrum">
    To establish persistence, Okrum can install itself as a new service named NtmSsvc.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors modified the IKEEXT and PrintNotify Windows services for persistence.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, threat actors installed DLLs and backdoors as Windows services.
   </Example>
   <Example id="S0664" name="Pandora">
    Pandora has the ability to gain system privileges through Windows services.
   </Example>
   <Example id="S1031" name="PingPull">
    PingPull has the ability to install itself as a service.
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon can establish persistence by registering a malicious DLL as an alternative Print Processor which is loaded when the print spooler service starts.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX can be added as a service to establish persistence. PlugX also has a module to change service configurations as well as start, control, and delete services.
   </Example>
   <Example id="S0012" name="PoisonIvy">
    PoisonIvy creates a Registry subkey that registers a new service. PoisonIvy also creates a Registry entry modifying the Logical Disk Manager service to point to a malicious DLL dropped to disk.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit contains a collection of Privesc-PowerUp modules that can discover and replace/modify service binaries, paths, and configs.
   </Example>
   <Example id="G0056" name="PROMETHIUM">
    PROMETHIUM has created new services and modified existing services for persistence.
   </Example>
   <Example id="S0029" name="PsExec">
    PsExec can leverage Windows services to escalate privileges from administrator to SYSTEM with the -s argument.
   </Example>
   <Example id="S0481" name="Ragnar Locker">
    Ragnar Locker has used sc.exe to create a new service for the VirtualBox driver.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay can use services to establish persistence.
   </Example>
   <Example id="S0169" name="RawPOS">
    RawPOS installs itself as a service to maintain persistence.
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT has created a service when it is installed on the victim machine.
   </Example>
   <Example id="S0172" name="Reaver">
    Reaver installs itself as a new service.
   </Example>
   <Example id="S0074" name="Sakula">
    Some Sakula samples install themselves as services for persistence by calling WinExec with the net start argument.
   </Example>
   <Example id="S0345" name="Seasalt">
    Seasalt is capable of installing itself as a service.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon creates a new service named "ntssrv" to execute the payload. Newer versions create the "MaintenaceSrv" and "hdv_725x" services.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat has installed a Windows service to maintain persistence on victim machines.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can establish persistence by creating a new service.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA has created a service on victim machines named "TaskFrame" to establish persistence.
   </Example>
   <Example id="S1037" name="STARWHALE">
    STARWHALE has the ability to create the following Windows service to establish persistence on an infected host: sc create Windowscarpstss binpath= "cmd.exe /c cscript.exe c:\\windows\\system32\\w7_1.wsf humpback_whale" start= "auto" obj= "LocalSystem".
   </Example>
   <Example id="S0142" name="StreamEx">
    StreamEx establishes persistence by installing a new service pointing to its DLL and setting the service to auto-start.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity has created new services and modified existing services for persistence.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet uses a driver registered as a boot start service as the main load-point.
   </Example>
   <Example id="S1049" name="SUGARUSH">
    SUGARUSH has created a service named Service1 for persistence.
   </Example>
   <Example id="S0663" name="SysUpdate">
    SysUpdate can create a service to establish persistence.
   </Example>
   <Example id="S0164" name="TDTESS">
    If running as administrator, TDTESS installs itself as a new service named bmwappushservice to establish persistence.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has used malware that adds cryptocurrency miners as a service.
   </Example>
   <Example id="S0560" name="TEARDROP">
    TEARDROP ran as a Windows service from the c:\windows\syswow64 folder.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    A Threat Group-3390 tool can create a new service, naming it after the config information, to gain persistence.
   </Example>
   <Example id="S0665" name="ThreatNeedle">
    ThreatNeedle can run in memory and register its payload as a Windows service.
   </Example>
   <Example id="S0004" name="TinyZBot">
    TinyZBot can install as a Windows service for persistence.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot establishes persistence by creating an autostart service that allows it to run whenever the machine boots.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has installed a service pointing to a malicious DLL dropped to disk.
   </Example>
   <Example id="S0263" name="TYPEFRAME">
    TYPEFRAME variants can add malicious DLL modules as new services.TYPEFRAME can also delete services from the victim’s machine.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has registered itself as a system service in the Registry for automatic execution at system startup.
   </Example>
   <Example id="S0180" name="Volgmer">
    Volgmer installs a copy of itself in a randomly selected service, then overwrites the ServiceDLL entry in the service's Registry entry. Some Volgmer variants also install .dll files as services with names generated by a list of hard-coded strings.
   </Example>
   <Example id="S0366" name="WannaCry">
    WannaCry creates the service "mssecsvc2.0" with the display name "Microsoft Security Center (2.0) Service."
   </Example>
   <Example id="S0612" name="WastedLocker">
    WastedLocker created and established a service that runs until the encryption process is complete.
   </Example>
   <Example id="S0206" name="Wiarp">
    Wiarp creates a backdoor through which remote attackers can create a service.
   </Example>
   <Example id="S0176" name="Wingbird">
    Wingbird uses services.exe to register a new autostart service named "Audit Service" using a copy of the local lsass.exe file.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    Winnti for Windows sets its DLL file as a new service in the Registry to establish persistence.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has installed TrickBot as a service named ControlServiceA in order to establish persistence.
   </Example>
   <Example id="S0230" name="ZeroT">
    ZeroT can add a new service to ensure PlugX persists on the system when delivered as another payload onto the system.
   </Example>
   <Example id="S0086" name="ZLib">
    ZLib creates Registry keys to allow itself to run as various services.
   </Example>
   <Example id="S0350" name="zwShell">
    zwShell has established persistence by adding itself as a new service.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell can create a new service using the service parser function ProcessScCommand.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Use auditing tools capable of detecting privilege and service abuse opportunities on systems within an enterprise and correct them.
   </Mitigation>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent an application from writing a signed vulnerable driver to the system.
   </Mitigation>
   <Mitigation id="M1045" name="Code Signing">
    Enforce registration and execution of only legitimately signed service drivers where possible.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Ensure that Driver Signature Enforcement is enabled to restrict unsigned drivers from being installed.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0027" name="Driver">
    Driver Load
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Creation | Service Modification
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Creation | Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1543.004" name="Create or Modify System Process: Launch Daemon">
  Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in /System/Library/LaunchDaemons/ and /Library/LaunchDaemons/. Required Launch Daemons parameters include a Label to identify the task, Program to provide a path to the executable, and RunAtLoad to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.
  <Tactics>
   Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   macOS
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Effective_Permissions>
   Administrator, root
  </Effective_Permissions>
  <CAPEC_ID>
   CAPEC-550, CAPEC-551
  </CAPEC_ID>
  <Examples>
   <Example id="S0584" name="AppleJeus">
    AppleJeus has placed a plist file within the LaunchDaemons folder and launched it manually.
   </Example>
   <Example id="S0482" name="Bundlore">
    Bundlore can persist via a LaunchDaemon.
   </Example>
   <Example id="S0497" name="Dacls">
    Dacls can establish persistence via a Launch Daemon.
   </Example>
   <Example id="S0690" name="Green Lambert">
    Green Lambert can add a plist file in the Library/LaunchDaemons to establish persistence.
   </Example>
   <Example id="S0451" name="LoudMiner">
    LoudMiner adds plist files with the naming format com.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    If running with root permissions, OSX_OCEANLOTUS.D can create a persistence file in the folder /Library/LaunchDaemons.
   </Example>
   <Example id="S0595" name="ThiefQuest">
    When running with root privileges after a Launch Agent is installed, ThiefQuest installs a plist file to the /Library/LaunchDaemons/ folder with the RunAtLoad key set to true establishing persistence as a Launch Daemon.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET uses the ssh launchdaemon to elevate privileges, bypass system controls, and enable remote access to the victim.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Use auditing tools capable of detecting folder permissions abuse opportunities on systems, especially reviewing changes made to folders by third-party software.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized administrators can create new Launch Daemons.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Creation | Service Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1555" name="Credentials from Password Stores">
  Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications that store passwords to make it easier for users manage and maintain. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Examples>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla has the ability to steal credentials from FTP clients and wireless profiles.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 used account credentials they obtained to attempt access to Group Managed Service Account (gMSA) passwords.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has used a variety of publicly available tools like LaZagne to gather credentials.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used the Smartftp Password Decryptor tool to decrypt FTP passwords.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth uses an external software known as NetPass to recover passwords.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp's passw.plug plugin can gather account information from multiple instant messaging, email, and social media services, as well as FTP, VNC, and VPN clients.
   </Example>
   <Example id="S0050" name="CosmicDuke">
    CosmicDuke collects user credentials, including passwords, for various programs including popular instant messaging applications and email clients as well as WLAN keys.
   </Example>
   <Example id="G0120" name="Evilnum">
    Evilnum can collect email credentials from victims.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used the Stealer One credential stealer to target e-mail and file transfer utilities including FTP.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has run cmdkey on victim machines to identify stored credentials.
   </Example>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY can collect credentials from WINSCP.
   </Example>
   <Example id="S0349" name="LaZagne">
    LaZagne can obtain credentials from databases, mail, and WiFi across multiple platforms.
   </Example>
   <Example id="G0077" name="Leafminer">
    Leafminer used several tools for retrieving login and password information, including LaZagne.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has stolen credentials from multiple applications and data sources including Windows OS credentials, email clients, FTP, and SFTP clients.
   </Example>
   <Example id="S0167" name="Matryoshka">
    Matryoshka is capable of stealing Outlook passwords.
   </Example>
   <Example id="S0002" name="Mimikatz">
    Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the credential vault and DPAPI.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has performed credential dumping with LaZagne and other tools, including by dumping passwords saved in victim email.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can retrieve passwords from messaging and mail client applications.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.
   </Example>
   <Example id="S0138" name="OLDBAIT">
    OLDBAIT collects credentials from several email clients.
   </Example>
   <Example id="S0048" name="PinchDuke">
    PinchDuke steals credentials from compromised hosts. PinchDuke's credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by PinchDuke include ones associated with many sources such as The Bat!, Yahoo!, Mail.ru, Passport.Net, Google Talk, and Microsoft Outlook.
   </Example>
   <Example id="S0435" name="PLEAD">
    PLEAD has the ability to steal saved passwords from Microsoft Outlook.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 can decrypt passwords stored in the RDCMan configuration file.
   </Example>
   <Example id="S0113" name="Prikormka">
    A module in Prikormka collects passwords stored in applications installed on the victim.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can use Lazagne for harvesting credentials.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT can obtain passwords from common FTP clients.
   </Example>
   <Example id="G0038" name="Stealth Falcon">
    Stealth Falcon malware gathers passwords from multiple sources, including Windows Credential Vault and Outlook.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1027" name="Password Policies">
    The password for the user's login keychain can be changed from the user's login password. This increases the complexity for an adversary because they need to know an additional password.Organizations may consider weighing the risk of storing credentials in password stores and web browsers. If system, software, or web browser credential disclosure is a significant concern, technical controls, policy, and user training may be used to prevent storage of credentials in improper locations.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Access | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1555.001" name="Credentials from Password Stores: Keychain">
  Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple’s iCloud service.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   macOS
  </Platforms>
  <Examples>
   <Example id="S0274" name="Calisto">
    Calisto collects Keychain storage data and copies those passwords/tokens to a file.
   </Example>
   <Example id="S0690" name="Green Lambert">
    Green Lambert can use Keychain Services API functions to find and collect passwords, such as SecKeychainFindInternetPassword and SecKeychainItemCopyAttributesAndData.
   </Example>
   <Example id="S0278" name="iKitten">
    iKitten collects the keychains on the system.
   </Example>
   <Example id="S0349" name="LaZagne">
    LaZagne can obtain credentials from macOS Keychains.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa can dump credentials from the macOS keychain.
   </Example>
   <Example id="S0279" name="Proton">
    Proton gathers credentials in files for keychains.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1027" name="Password Policies">
    The password for the user's login keychain can be changed from the user's login password. This increases the complexity for an adversary because they need to know an additional password.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1555.002" name="Credentials from Password Stores: Securityd Memory">
  An adversary may obtain root access (allowing them to read securityd’s memory), then they can scan through memory to find the correct sequence of keys in relatively few tries to decrypt the user’s logon keychain. This provides the adversary with all the plaintext passwords for users, WiFi, mail, browsers, certificates, secure notes, etc.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Linux, macOS
  </Platforms>
  <Permissions_Required>
   root
  </Permissions_Required>
  <Examples>
   <Example id="S0276" name="Keydnap">
    Keydnap uses the keychaindump project to read securityd memory.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1555.003" name="Credentials from Password Stores: Credentials from Web Browsers">
  Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla can gather credentials from a number of browsers.
   </Example>
   <Example id="G0130" name="Ajax Security Team">
    Ajax Security Team has used FireMalv custom-developed malware, which collected passwords from the Firefox browser storage.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has stolen user's saved passwords from Chrome.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has used tools to dump passwords from browsers.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has used a variety of publicly available tools like LaZagne to gather credentials.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 has used a credential stealer known as ZUMKONG that can harvest usernames and passwords stored in browsers.
   </Example>
   <Example id="S0344" name="Azorult">
    Azorult can steal credentials from the victim's browser.
   </Example>
   <Example id="S0093" name="Backdoor.Oldrea">
    Some Backdoor.Oldrea samples contain a publicly available Web browser password recovery tool.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    BlackEnergy has used a plug-in to gather credentials from web browsers including FireFox, Google Chrome, and Internet Explorer.
   </Example>
   <Example id="S0657" name="BLUELIGHT">
    BLUELIGHT can collect passwords stored in web browers, including Internet Explorer, Edge, Chrome, and Naver Whale.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp's passw.plug plugin can gather passwords saved in Opera, Internet Explorer, Safari, Firefox, and Chrome.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes can steal login credentials and stored financial information from the browser.
   </Example>
   <Example id="S0144" name="ChChes">
    ChChes steals credentials stored inside Internet Explorer.
   </Example>
   <Example id="S0492" name="CookieMiner">
    CookieMiner can steal saved usernames and passwords in Chrome as well as credit card credentials.
   </Example>
   <Example id="S0050" name="CosmicDuke">
    CosmicDuke collects user credentials, including passwords, for various programs including Web browsers.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson contains a module to steal credentials from Web browsers on the victim machine.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has been observed dropping browser password grabber modules.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can use modules that extract passwords from common web browsers such as Firefox and Chrome.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used the Stealer One credential stealer to target web browsers.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can steal cookie data and credentials from Google Chrome.
   </Example>
   <Example id="S0132" name="H1N1">
    H1N1 dumps usernames and passwords from Firefox, Internet Explorer, and Outlook.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has used a Mimikatz-based tool and a PowerShell script to steal passwords from Google Chrome.
   </Example>
   <Example id="S0434" name="Imminent Monitor">
    Imminent Monitor has a PasswordRecoveryPacket module for recovering browser passwords.
   </Example>
   <Example id="G0100" name="Inception">
    Inception used a browser plugin to steal passwords and sessions from Internet Explorer, Chrome, Opera, Firefox, Torch, and Yandex.
   </Example>
   <Example id="S0528" name="Javali">
    Javali can capture login credentials from open browsers including Firefox, Chrome, Internet Explorer, and Edge.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT can capture passwords from common web browsers such as Internet Explorer, Google Chrome, and Firefox.
   </Example>
   <Example id="S0387" name="KeyBoy">
    KeyBoy attempts to collect passwords from browsers.
   </Example>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY has the ability to steal data from the Chrome, Edge, Firefox, Thunderbird, and Opera browsers.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used browser extensions including Google Chrome to steal passwords and cookies from browsers. Kimsuky has also used Nirsoft's WebBrowserPassView tool to dump the passwords obtained from victims.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI can steal profiles (containing credential information) from Firefox, Chrome, and Opera.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has obtained passwords and session tokens with the use of the Redline password stealer.
   </Example>
   <Example id="S0349" name="LaZagne">
    LaZagne can obtain credentials from web browsers such as Google Chrome, Internet Explorer, and Firefox.
   </Example>
   <Example id="G0077" name="Leafminer">
    Leafminer used several tools for retrieving login and password information, including LaZagne.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar has a module to collect usernames and passwords stored in browsers.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has demonstrated the ability to steal credentials from multiple applications and data sources including Safari and the Chromium and Mozilla Firefox-based web browsers.
   </Example>
   <Example id="S0409" name="Machete">
    Machete collects stored credentials from several web browsers.
   </Example>
   <Example id="S0530" name="Melcoz">
    Melcoz has the ability to steal credentials from web browsers.
   </Example>
   <Example id="S0002" name="Mimikatz">
    Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from DPAPI.
   </Example>
   <Example id="G0021" name="Molerats">
    Molerats used the public tool BrowserPasswordDump10 to dump passwords saved in browsers on victims.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has run tools including Browser64 to steal passwords saved in victim web browsers.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE has the ability to steal credentials from web browsers including Internet Explorer, Opera, Yandex, and Chrome.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT has a module that steals passwords saved in victim web browsers.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.
   </Example>
   <Example id="S0138" name="OLDBAIT">
    OLDBAIT collects credentials from Internet Explorer, Mozilla Firefox, and Eudora.
   </Example>
   <Example id="S0365" name="Olympic Destroyer">
    Olympic Destroyer contains a module that tries to obtain stored credentials from web browsers.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork dumped the login data database from \AppData\Local\Google\Chrome\User Data\Default\Login Data.
   </Example>
   <Example id="S0048" name="PinchDuke">
    PinchDuke steals credentials from compromised hosts. PinchDuke's credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by PinchDuke include ones associated with many sources such as Netscape Navigator, Mozilla Firefox, Mozilla Thunderbird, and Internet Explorer.
   </Example>
   <Example id="S0435" name="PLEAD">
    PLEAD can harvest saved credentials from browsers such as Google Chrome, Microsoft Internet Explorer, and Mozilla Firefox.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has used a Python tool named Browdec.exe to steal browser credentials.
   </Example>
   <Example id="S0113" name="Prikormka">
    A module in Prikormka gathers logins and passwords stored in applications on the victims, including Google Chrome, Mozilla Firefox, and several other browsers.
   </Example>
   <Example id="S0279" name="Proton">
    Proton gathers credentials for Google Chrome.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can use Lazagne for harvesting credentials.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot has collected usernames and passwords from Firefox and Chrome.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT can obtain passwords from common web browsers.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay can use tools to collect credentials from web browsers.
   </Example>
   <Example id="S0153" name="RedLeaves">
    RedLeaves can gather browser usernames and passwords.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can steal credentials stored in Web browsers by querying the sqlite database.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team's CredRaptor tool can collect saved passwords from various internet browsers.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can collect clear text web credentials for Internet Explorer/Edge.
   </Example>
   <Example id="S0226" name="Smoke Loader">
    Smoke Loader searches for credentials stored from web browsers.
   </Example>
   <Example id="G0038" name="Stealth Falcon">
    Stealth Falcon malware gathers passwords from multiple sources, including Internet Explorer, Firefox, and Chrome.
   </Example>
   <Example id="S1042" name="SUGARDUMP">
    SUGARDUMP variants have harvested credentials from browsers such as Firefox, Chrome, Opera, and Edge.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used malware to gather credentials from Internet Explorer.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot can obtain passwords stored in files from web browsers such as Chrome, Firefox, Internet Explorer, and Microsoft Edge, sometimes using esentutl.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can steal data and credentials from browsers.
   </Example>
   <Example id="S0436" name="TSCookie">
    TSCookie has the ability to steal saved passwords from the Internet Explorer, Edge, Firefox, and Chrome browsers.
   </Example>
   <Example id="S0130" name="Unknown Logger">
    Unknown Logger is capable of stealing usernames and passwords from browsers on the victim machine.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT has the capability to grab passwords from numerous web browsers as well as from Outlook and Thunderbird email clients.
   </Example>
   <Example id="S0161" name="XAgentOSX">
    XAgentOSX contains the getFirefoxPassword function to attempt to locate Firefox passwords.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy has the capability to upload dumper tools that extract credentials from web browsers and store them in database files.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has used a tool to steal credentials from installed web browsers including Microsoft Internet Explorer and Google Chrome.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1027" name="Password Policies">
    Organizations may consider weighing the risk of storing credentials in web browsers. If web browser credential disclosure is a significant concern, technical controls, policy, and user training may be used to prevent storage of credentials in web browsers.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1555.004" name="Credentials from Password Stores: Windows Credential Manager">
  Adversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults).
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Examples>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY can collect credentials from the Windows Credential Manager.
   </Example>
   <Example id="S0349" name="LaZagne">
    LaZagne can obtain credentials from Vault files.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar has a plugin that can retrieve credentials from Internet Explorer and Microsoft Edge using vaultcmd.exe and another that can collect RDP access credentials using the CredEnumerateW function.
   </Example>
   <Example id="S0002" name="Mimikatz">
    Mimikatz contains functionality to acquire credentials from the Windows Credential Manager.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used credential dumping tool named VALUEVAULT to steal credentials from the Windows Credential Manager.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit contains a collection of Exfiltration modules that can harvest credentials from Windows vault credential objects.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay can use the QuarksPwDump tool to obtain local passwords and domain cached credentials.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can steal credentials by leveraging the Windows Vault mechanism.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can gather Windows Vault credentials.
   </Example>
   <Example id="G0038" name="Stealth Falcon">
    Stealth Falcon malware gathers passwords from the Windows Credential Vault.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has gathered credentials from the Windows Credential Manager tool.
   </Example>
   <Example id="S0476" name="Valak">
    Valak can use a .NET compiled module named exchgrabber to enumerate credentials from the Credential Manager.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Consider enabling the "Network access: Do not allow storage of passwords and credentials for network authentication" setting that will prevent network credentials from being stored by the Credential Manager.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1555.005" name="Credentials from Password Stores: Password Managers">
  Adversaries may acquire user credentials from third-party password managers.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used scripts to access credential information from the KeePass database.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can gather information from the Keepass password manager.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors accessed and collected credentials from password managers.
   </Example>
   <Example id="S0279" name="Proton">
    Proton gathers credentials in files for 1password.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 obtained a KeePass database from a compromised host.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot can steal passwords from the KeePass open source password manager.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1027" name="Password Policies">
    Refer to NIST guidelines when creating password policies for master passwords.
   </Mitigation>
   <Mitigation id="M1054" name="Software Configuration">
    Consider re-locking password managers after a short timeout to limit the time plaintext credentials live in memory from decrypted databases.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Update password managers regularly by employing patch management for internal enterprise endpoints and servers.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1485" name="Data Destruction">
  Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as del and rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   IaaS, Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User, root
  </Permissions_Required>
  <Impact_Type>
   Availability
  </Impact_Type>
  <Examples>
   <Example id="G0082" name="APT38">
    APT38 has used a custom secure delete function to make deleted files unrecoverable.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    BlackEnergy 2 contains a "Destroy" plug-in that destroys data stored on victim hard drives by overwriting file contents.
   </Example>
   <Example id="S0693" name="CaddyWiper">
    CaddyWiper can work alphabetically through drives on a compromised system to take ownership of and overwrite all files.
   </Example>
   <Example id="S0659" name="Diavol">
    Diavol can delete specified files from a targeted system.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has used tools to delete files and folders from victims' desktops and profiles.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper can recursively wipe folders and files in Windows, Program Files, Program Files(x86), PerfLogs, Boot, System, Volume Information, and AppData folders using FSCTL_MOVE_FILE. HermeticWiper can also overwrite symbolic links and big files in My Documents and on the Desktop with random bytes.
   </Example>
   <Example id="S0604" name="Industroyer">
    Industroyer’s data wiper module clears registry keys and overwrites both ICS configuration and Windows files.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar can overwrite files with random data before deleting them.
   </Example>
   <Example id="S0607" name="KillDisk">
    KillDisk deletes system files to make the OS unbootable. KillDisk also targets and deletes files with 35 different file extensions.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has deleted the target's systems and resources both on-premises and in the cloud.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used a custom secure delete function to overwrite file contents with data from heap memory.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor can fill a victim's files and directories with zero-bytes in replacement of real content before deleting them.
   </Example>
   <Example id="S0365" name="Olympic Destroyer">
    Olympic Destroyer overwrites files locally and on remote shares.
   </Example>
   <Example id="S0139" name="PowerDuke">
    PowerDuke has a command to write random data across a file and delete it.
   </Example>
   <Example id="S0238" name="Proxysvc">
    Proxysvc can overwrite files indicated by the attacker before deleting them.
   </Example>
   <Example id="S0364" name="RawDisk">
    RawDisk was used in Shamoon to write to protected system locations such as the MBR and disk partitions in an effort to destroy data.
   </Example>
   <Example id="S0496" name="REvil">
    REvil has the capability to destroy files and folders.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used the BlackEnergy KillDisk component to overwrite files on Windows-based Human-Machine Interfaces.
   </Example>
   <Example id="S0195" name="SDelete">
    SDelete deletes data in a way that makes it unrecoverable.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon attempts to overwrite operating system files and disk structures with image files.
   </Example>
   <Example id="S0380" name="StoneDrill">
    StoneDrill has a disk wiper module that targets files other than those in the Windows directory.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can corrupt files by overwriting the first 1 MB with 0xcc and appending random extensions.
   </Example>
   <Example id="S0341" name="Xbash">
    Xbash has destroyed Linux-based databases as part of its ransomware capabilities.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1053" name="Data Backup">
    Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0010" name="Cloud Storage">
    Cloud Storage Deletion
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Deletion | File Modification
   </Detection>
   <Detection id="DS0007" name="Image">
    Image Deletion
   </Detection>
   <Detection id="DS0030" name="Instance">
    Instance Deletion
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0020" name="Snapshot">
    Snapshot Deletion
   </Detection>
   <Detection id="DS0034" name="Volume">
    Volume Deletion
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1132" name="Data Encoding">
  Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system. Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems. Some data encoding systems may also result in data compression, such as gzip.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0128" name="BADNEWS">
    After encrypting C2 data, BADNEWS converts it into a hexadecimal representation and then encodes it into base64.
   </Example>
   <Example id="S0132" name="H1N1">
    H1N1 obfuscates C2 traffic with an altered version of base64.
   </Example>
   <Example id="S0362" name="Linux Rabbit">
    Linux Rabbit sends the payload from the C2 server as an encoded URL parameter.
   </Example>
   <Example id="S0699" name="Mythic">
    Mythic provides various transform functions to encode and/or randomize C2 data.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has used encoded data in HTTP URLs for C2.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1132.001" name="Data Encoding: Standard Encoding">
  Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0045" name="ADVSTORESHELL">
    C2 traffic from ADVSTORESHELL is encrypted, then encoded with Base64 encoding.
   </Example>
   <Example id="G0073" name="APT19">
    An APT19 HTTP malware variant used Base64 to encode communications to the C2 server.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has used base64 to encode command and control traffic.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth encodes data using Base64 before sending it to the C2 server.
   </Example>
   <Example id="S0129" name="AutoIt backdoor">
    AutoIt backdoor has sent a C2 response that was base64-encoded.
   </Example>
   <Example id="S0414" name="BabyShark">
    BabyShark has encoded data using certutil before exfiltration.
   </Example>
   <Example id="S0093" name="Backdoor.Oldrea">
    Some Backdoor.Oldrea samples use standard Base64 + bzip2, and some use standard Base64 + reverse XOR + RSA-2048 to decrypt data received from C2 servers.
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS encodes C2 traffic with base64.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has encoded binary data with Base64 and ASCII.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has encoded its C2 traffic with Base64.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    Several BRONZE BUTLER tools encode data with base64 when posting it to a C2 server.
   </Example>
   <Example id="S0014" name="BS2005">
    BS2005 uses Base64 encoding for communication in the message body of an HTTP request.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee has the ability to base64 encode C2 server responses.
   </Example>
   <Example id="S0030" name="Carbanak">
    Carbanak encodes the message body of HTTP traffic with Base64.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes has used Base64 to encode C2 communications.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower can send additional modules over C2 encoded with base64.
   </Example>
   <Example id="S0144" name="ChChes">
    ChChes can encode C2 data with a custom technique that utilizes Base64.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can use Base64, URL-safe Base64, or NetBIOS encoding in its C2 traffic.
   </Example>
   <Example id="S0338" name="Cobian RAT">
    Cobian RAT obfuscates communications with the C2 server using Base64 encoding.
   </Example>
   <Example id="S0137" name="CORESHELL">
    CORESHELL C2 messages are Base64-encoded.
   </Example>
   <Example id="S1024" name="CreepySnail">
    CreepySnail can use Base64 to encode its C2 traffic.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman encodes data using hexadecimal representation before sending it to the C2 server.
   </Example>
   <Example id="S0187" name="Daserf">
    Daserf uses custom base64 encoding to obfuscate HTTP traffic.
   </Example>
   <Example id="S0354" name="Denis">
    Denis encodes the data sent to the server in Base64.
   </Example>
   <Example id="S0200" name="Dipsind">
    Dipsind encodes C2 traffic with base64.
   </Example>
   <Example id="S1021" name="DnsSystem">
    DnsSystem can Base64 encode data sent to C2.
   </Example>
   <Example id="S0472" name="down_new">
    down_new has the ability to base64 encode C2 communications.
   </Example>
   <Example id="S0377" name="Ebury">
    Ebury has encoded C2 traffic in hexadecimal format.
   </Example>
   <Example id="S0081" name="Elise">
    Elise exfiltrates data using cookie values that are Base64-encoded.
   </Example>
   <Example id="S0171" name="Felismus">
    Some Felismus samples use a custom method for C2 traffic that utilizes Base64.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro has encoded bidirectional data communications between a target system and C2 server using Base64.
   </Example>
   <Example id="S0410" name="Fysbis">
    Fysbis can use Base64 to encode its C2 traffic.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT has used Zlib to compress C2 communications data before encrypting it.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent can base64 encode C2 replies.
   </Example>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has used ASCII encoding for C2 traffic.
   </Example>
   <Example id="S0170" name="Helminth">
    For C2 over HTTP, Helminth encodes data with base64 and sends it via the "Cookie" field of HTTP requests. For C2 over DNS, Helminth converts ASCII characters into their hexadecimal values and sends the data in cleartext.
   </Example>
   <Example id="S0376" name="HOPLIGHT">
    HOPLIGHT has utilized Zlib compression to obfuscate the communications payload.
   </Example>
   <Example id="S0015" name="Ixeshe">
    Ixeshe uses custom Base64 encoding schemes to obfuscate command and control traffic in the message body of HTTP requests.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    A JHUHUGIT variant encodes C2 POST data base64.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar encodes communications to the C2 server in Base64.
   </Example>
   <Example id="S0487" name="Kessel">
    Kessel has exfiltrated data via hexadecimal-encoded subdomain fields of DNS queries.
   </Example>
   <Example id="S1020" name="Kevin">
    Kevin can Base32 encode chunks of output files during exfiltration.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has used a custom base64 key to encode stolen data before exfiltration.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    A Lazarus Group malware sample encodes data with base64.
   </Example>
   <Example id="S0409" name="Machete">
    Machete has used base64 encoding.
   </Example>
   <Example id="S0459" name="MechaFlounder">
    MechaFlounder has the ability to use base16 encoded strings in C2.
   </Example>
   <Example id="S0084" name="Mis-Type">
    Mis-Type uses Base64 encoding for C2 traffic.
   </Example>
   <Example id="S0083" name="Misdat">
    Misdat network traffic is Base64-encoded plaintext.
   </Example>
   <Example id="S1026" name="Mongall">
    Mongall can use Base64 to encode information sent to its C2.
   </Example>
   <Example id="S0284" name="More_eggs">
    More_eggs has used basE91 encoding, along with encryption, for C2 communication.
   </Example>
   <Example id="S1047" name="Mori">
    Mori can use Base64 encoded JSON libraries used in C2.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used tools to encode C2 communications including Base64 encoding.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT uses Base64 encoding for C2 traffic.
   </Example>
   <Example id="S0340" name="Octopus">
    Octopus has encoded C2 communications in Base64.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum has used base64 to encode C2 communication.
   </Example>
   <Example id="S0264" name="OopsIE">
    OopsIE encodes data in hexadecimal format over the C2 channel.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork used Base64 to encode C2 traffic.
   </Example>
   <Example id="S1031" name="PingPull">
    PingPull can encode C2 traffic with Base64.
   </Example>
   <Example id="S0124" name="Pisloader">
    Responses from the Pisloader C2 server are base32-encoded.
   </Example>
   <Example id="S0441" name="PowerShower">
    PowerShower has the ability to encode C2 communications with base64 encoding.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS encoded C2 traffic with base64.
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER can use base64 encoded C2 communications.
   </Example>
   <Example id="S0113" name="Prikormka">
    Prikormka encodes C2 traffic with Base64.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can Base64 encode system information sent to C2.
   </Example>
   <Example id="S0269" name="QUADAGENT">
    QUADAGENT encodes C2 communications with base64.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay has used base64 to encode its C2 traffic.
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT can communicate with the C2 via base32-encoded subdomains.
   </Example>
   <Example id="S0379" name="Revenge RAT">
    Revenge RAT uses Base64 to encode information sent to the C2 server.
   </Example>
   <Example id="S0270" name="RogueRobin">
    RogueRobin base64 encodes strings that are sent to the C2 over its DNS tunnel.
   </Example>
   <Example id="S0085" name="S-Type">
    S-Type uses Base64 encoding for C2 traffic.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has used Base64 to encode its C2 communications.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team's BCS-server tool uses base64 encoding and HTML tags for the communication traffic between the C2 server.
   </Example>
   <Example id="S0053" name="SeaDuke">
    SeaDuke C2 traffic is base64-encoded.
   </Example>
   <Example id="S0610" name="SideTwist">
    SideTwist has used Base64 for encoded C2 traffic.
   </Example>
   <Example id="S0633" name="Sliver">
    Sliver can use standard encoding techniques like gzip and hex to ASCII to encode the C2 communication payload.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM has encoded its C2 traffic with Base64.
   </Example>
   <Example id="S0543" name="Spark">
    Spark has encoded communications with the C2 server with base64.
   </Example>
   <Example id="S0374" name="SpeakUp">
    SpeakUp encodes C&amp;C communication using Base64.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has encoded its communications to C2 servers using Base64.
   </Example>
   <Example id="S1037" name="STARWHALE">
    STARWHALE has the ability to hex-encode collected data from an infected host.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet transforms encrypted binary data into an ASCII string in order to use it as a URL parameter value.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST used Base64 encoding in its C2 traffic.
   </Example>
   <Example id="G0127" name="TA551">
    TA551 has used encoded ASCII text for initial C2 communications.
   </Example>
   <Example id="S0678" name="Torisma">
    Torisma has encoded C2 communications with Base64.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot can Base64-encode C2 commands.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has used base64 encoding to hide command strings delivered from the C2.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has returned C2 data as encoded ASCII.
   </Example>
   <Example id="S0514" name="WellMess">
    WellMess has used Base64 encoding to uniquely identify communication to and from the C2.
   </Example>
   <Example id="S0653" name="xCaon">
    xCaon has used Base64 to encode its C2 traffic.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy has used URL/Percent Encoding on data exfiltrated via HTTP POST requests.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1132.002" name="Data Encoding: Non-Standard Encoding">
  Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0031" name="BACKSPACE">
    Newer variants of BACKSPACE will encode C2 communications with a custom system.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot encodes commands from the control server using a range of characters and gzip.
   </Example>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink can use a custom binary scheme to encode messages with specific commands and parameters to be executed.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can use a modified base32 encoding to encode data within the subdomain of C2 requests.
   </Example>
   <Example id="S0346" name="OceanSalt">
    OceanSalt can encode data with a NOT operation before sending the data to the control server.
   </Example>
   <Example id="S1046" name="PowGoop">
    PowGoop can use a modified Base64 encoding mechanism to send data to and from the C2 server.
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT can communicate with the C2 via subdomains that utilize base64 with character substitutions.
   </Example>
   <Example id="S0596" name="ShadowPad">
    ShadowPad has encoded data as readable Latin characters.
   </Example>
   <Example id="S1035" name="Small Sieve">
    Small Sieve can use a custom hex byte swapping encoding scheme to obfuscate tasking traffic.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1486" name="Data Encrypted for Impact">
  Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   IaaS, Linux, Windows, macOS
  </Platforms>
  <Impact_Type>
   Availability
  </Impact_Type>
  <Examples>
   <Example id="G0082" name="APT38">
    APT38 has used Hermes ransomware to encrypt files with AES256.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used a ransomware called Encryptor RaaS to encrypt files on the targeted systems and provide a ransom note to the user.
   </Example>
   <Example id="S0640" name="Avaddon">
    Avaddon encrypts the victim system using a combination of AES256 and RSA encryption schemes.
   </Example>
   <Example id="S0638" name="Babuk">
    Babuk can use ChaCha8 and ECDH to encrypt data.
   </Example>
   <Example id="S0606" name="Bad Rabbit">
    Bad Rabbit has encrypted files and disks using AES-128-CBC and RSA-2048.
   </Example>
   <Example id="S0570" name="BitPaymer">
    BitPaymer can import a hard-coded RSA 1024-bit public key, generate a 128-bit RC4 key for each file, and encrypt the file in place, appending .locked to the filename.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors used Conti ransomware to encrypt a compromised network.
   </Example>
   <Example id="S0611" name="Clop">
    Clop can encrypt files using AES, RSA, and RC4 and will add the ".clop" extension to encrypted files.
   </Example>
   <Example id="S0575" name="Conti">
    Conti can use CreateIoCompletionPort(), PostQueuedCompletionStatus(), and GetQueuedCompletionPort() to rapidly encrypt files, excluding those with the extensions of .exe, .dll, and .lnk. It has used a different AES-256 encryption key per file with a bundled RAS-4096 public encryption key that is unique for each victim. Conti can use "Windows Restart Manager" to ensure files are unlocked and open for encryption.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba has the ability to encrypt system data and add the ".cuba" extension to encrypted files.
   </Example>
   <Example id="S1033" name="DCSrv">
    DCSrv has encrypted drives using the core encryption mechanism from DiskCryptor.
   </Example>
   <Example id="S0616" name="DEATHRANSOM">
    DEATHRANSOM can use public and private key pair encryption to encrypt files for ransom payment.
   </Example>
   <Example id="S0659" name="Diavol">
    Diavol has encrypted files using an RSA key though the CryptEncrypt API and has appended filenames with ".lock64".
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor can encrypt all non-system files using a hybrid AES-RSA algorithm prior to displaying a ransom note.
   </Example>
   <Example id="S0605" name="EKANS">
    EKANS uses standard encryption library functions to encrypt files.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has encrypted virtual disk volumes on ESXi servers using a version of Darkside ransomware.
   </Example>
   <Example id="S0618" name="FIVEHANDS">
    FIVEHANDS can use an embedded NTRU public key to encrypt data for ransom.
   </Example>
   <Example id="S0617" name="HELLOKITTY">
    HELLOKITTY can use an embedded RSA-2048 public key to encrypt victim data for ransom.
   </Example>
   <Example id="G0119" name="Indrik Spider">
    Indrik Spider has encrypted domain-controlled systems using BitPaymer.
   </Example>
   <Example id="S0389" name="JCry">
    JCry has encrypted files and demanded Bitcoin to decrypt those files.
   </Example>
   <Example id="S0607" name="KillDisk">
    KillDisk has a ransomware component that encrypts files with an AES key that is also RSA-1028 encrypted.
   </Example>
   <Example id="S0372" name="LockerGoga">
    LockerGoga has encrypted files, including core Windows OS files, using RSA-OAEP MGF1 and then demanded Bitcoin be paid for the decryption key.
   </Example>
   <Example id="S0449" name="Maze">
    Maze has disrupted systems by encrypting files on targeted machines, claiming to decrypt files if a ransom payment is made. Maze has used the ChaCha algorithm, based on Salsa20, and an RSA algorithm to encrypt files.
   </Example>
   <Example id="S0576" name="MegaCortex">
    MegaCortex has used the open-source library, Mbed Crypto, and generated AES keys to carry out the file encryption process.
   </Example>
   <Example id="S0457" name="Netwalker">
    Netwalker can encrypt files on infected machines to extort victims.
   </Example>
   <Example id="S0368" name="NotPetya">
    NotPetya encrypts user files and disk structures like the MBR with 2048-bit RSA.
   </Example>
   <Example id="S0556" name="Pay2Key">
    Pay2Key can encrypt data on victim's machines using RSA and AES algorithms in order to extort a ransom payment for decryption.
   </Example>
   <Example id="S0654" name="ProLock">
    ProLock can encrypt files on a compromised host with RC6, and encrypts the key with RSA-1024.
   </Example>
   <Example id="S0583" name="Pysa">
    Pysa has used RSA and AES-CBC encryption algorithm to encrypt a list of targeted file extensions.
   </Example>
   <Example id="S0481" name="Ragnar Locker">
    Ragnar Locker encrypts files on the local machine and mapped drives prior to displaying a note demanding a ransom.
   </Example>
   <Example id="S0496" name="REvil">
    REvil can encrypt files on victim systems and demands a ransom to decrypt the files.
   </Example>
   <Example id="S0400" name="RobbinHood">
    RobbinHood will search for an RSA encryption key and then perform its encryption process on the system files.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk has used a combination of symmetric (AES) and asymmetric (RSA) encryption to encrypt files. Files have been encrypted with their own AES key and given a file extension of .RYK. Encrypted directories have had a ransom note of RyukReadMe.txt written to the directory.
   </Example>
   <Example id="S0370" name="SamSam">
    SamSam encrypts victim files using RSA-2048 encryption and demands a ransom be paid in Bitcoin to decrypt those files.
   </Example>
   <Example id="S0639" name="Seth-Locker">
    Seth-Locker can encrypt files on a targeted system, appending them with the suffix .seth.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon has an operational mode for encrypting data instead of overwriting it.
   </Example>
   <Example id="S0242" name="SynAck">
    SynAck encrypts the victims machine followed by asking the victim to pay a ransom.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used a wide variety of ransomware, such as Clop, Locky, Jaff, Bart, Philadelphia, and GlobeImposter, to encrypt victim files and demand a ransom payment.
   </Example>
   <Example id="S0595" name="ThiefQuest">
    ThiefQuest encrypts a set of file extensions on a host, deletes the original files, and provides a ransom note with no contact information.
   </Example>
   <Example id="S0366" name="WannaCry">
    WannaCry encrypts user files and demands that a ransom be paid in Bitcoin to decrypt those files.
   </Example>
   <Example id="S0612" name="WastedLocker">
    WastedLocker can encrypt data and leave a ransom note.
   </Example>
   <Example id="S0341" name="Xbash">
    Xbash has maliciously encrypted victim's database systems and demanded a cryptocurrency ransom be paid.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET performs AES-CBC encryption on files under ~/Documents, ~/Downloads, and~/Desktop with a fixed key and renames files to give them a .enc extension. Only files with sizes less than 500MB are encrypted.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable cloud-delivered protection and Attack Surface Reduction (ASR) rules to block the execution of files that resemble ransomware.
   </Mitigation>
   <Mitigation id="M1053" name="Data Backup">
    Consider implementing IT disaster recovery plans that contain procedures for regularly taking and testing data backups that can be used to restore organizational data.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0010" name="Cloud Storage">
    Cloud Storage Modification
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0033" name="Network Share">
    Network Share Access
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1530" name="Data from Cloud Storage">
  Adversaries may access data from improperly secured cloud storage.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   IaaS, SaaS
  </Platforms>
  <Examples>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has obtained files from the victim's cloud storage instances.
   </Example>
   <Example id="S0683" name="Peirates">
    Peirates can dump the contents of AWS S3 buckets. It can also retrieve service account tokens from kOps buckets in Google Cloud Storage or S3.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Frequently check permissions on cloud storage to ensure proper permissions are set to deny open or unprivileged access to resources.
   </Mitigation>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Encrypt data stored at rest in cloud storage.
   </Mitigation>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Cloud service providers support IP-based restrictions when accessing cloud resources. Consider using IP allowlisting along with user account management to ensure that data access is restricted not only to valid users but only from expected IP ranges to mitigate the use of stolen credentials to access data.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Consider using multi-factor authentication to restrict access to resources and cloud storage APIs.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Use access control lists on storage systems and objects.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Configure user permissions groups and roles for access to cloud storage.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0010" name="Cloud Storage">
    Cloud Storage Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1602" name="Data from Configuration Repository">
  Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Network
  </Platforms>
  <Mitigations>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Configure SNMPv3 to use the highest level of security (authPriv) available.
   </Mitigation>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Apply extended ACLs to block unauthorized protocols outside the trusted network.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Configure intrusion prevention devices to detect SNMP queries and commands from unauthorized sources.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Segregate SNMP traffic on a separate management network.
   </Mitigation>
   <Mitigation id="M1054" name="Software Configuration">
    Allowlist MIB objects and implement SNMP views.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Keep system images and software updated and migrate to SNMPv3.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1602.001" name="Data from Configuration Repository: SNMP (MIB Dump)">
  Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Network
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Configure SNMPv3 to use the highest level of security (authPriv) available.
   </Mitigation>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Apply extended ACLs to block unauthorized protocols outside the trusted network.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Configure intrusion prevention devices to detect SNMP queries and commands from unauthorized sources.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Segregate SNMP traffic on a separate management network.
   </Mitigation>
   <Mitigation id="M1054" name="Software Configuration">
    Allowlist MIB objects and implement SNMP views.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Keep system images and software updated and migrate to SNMPv3.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1602.002" name="Data from Configuration Repository: Network Device Configuration Dump">
  Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Network
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Configure SNMPv3 to use the highest level of security (authPriv) available.
   </Mitigation>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Apply extended ACLs to block unauthorized protocols outside the trusted network.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    onfigure intrusion prevention devices to detect SNMP queries and commands from unauthorized sources. Create signatures to detect Smart Install (SMI) usage from sources other than trusted director.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Segregate SNMP traffic on a separate management network.
   </Mitigation>
   <Mitigation id="M1054" name="Software Configuration">
    Allowlist MIB objects and implement SNMP views. Disable Smart Install (SMI) if not used.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Keep system images and software updated and migrate to SNMPv3.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1213" name="Data from Information Repositories">
  Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has collected files from various information repositories.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has accessed victims’ internal knowledge repositories (wikis) to view sensitive corporate information on products, services, and internal business operations.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has collected schemas and user accounts from systems running SQL Server.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has accessed victim security and IT environments and Microsoft Teams to mine valuable information.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has searched a victim's network for organization collaboration channels like MS Teams or Slack to discover further high-privilege account credentials.
   </Example>
   <Example id="S0598" name="P.A.S. Webshell">
    P.A.S. Webshell has the ability to list and extract data from SQL databases.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used a custom .NET tool to collect documents from an organization's internal central database.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Consider periodic review of accounts and privileges for critical and sensitive repositories.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Enforce the principle of least-privilege. Consider implementing access control mechanisms that include both authentication and authorization.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Develop and publish policies that define acceptable information to be stored in repositories.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1213.001" name="Data from Information Repositories: Confluence">
  Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   SaaS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has searched a victim's network for collaboration platforms like Confluence and JIRA to discover further high-privilege account credentials.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Consider periodic review of accounts and privileges for critical and sensitive Confluence repositories.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Enforce the principle of least-privilege. Consider implementing access control mechanisms that include both authentication and authorization.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Develop and publish policies that define acceptable information to be stored in Confluence repositories.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1213.002" name="Data from Information Repositories: Sharepoint">
  Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Office 365, Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has collected information from Microsoft SharePoint services within target networks.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has collected documents from the victim's SharePoint.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang used a SharePoint enumeration and data dumping tool known as spwebmember.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has searched a victim's network for collaboration platforms like SharePoint to discover further high-privilege account credentials.
   </Example>
   <Example id="S0227" name="spwebmember">
    spwebmember is used to enumerate and dump information from Microsoft SharePoint.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Consider periodic review of accounts and privileges for critical and sensitive SharePoint repositories.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Enforce the principle of least-privilege. Consider implementing access control mechanisms that include both authentication and authorization.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Develop and publish policies that define acceptable information to be stored in SharePoint repositories.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1213.003" name="Data from Information Repositories: Code Repositories">
  Adversaries may leverage code repositories to collect valuable information. Code repositories are tools/services that store source code and automate software builds. They may be hosted internally or privately on third party sites such as Github, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   SaaS
  </Platforms>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 has downloaded source code from code repositories.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has searched a victim's network for code repositories like GitLab and GitHub to discover further high-privilege account credentials.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Consider periodic reviews of accounts and privileges for critical and sensitive code repositories. Scan code repositories for exposed credentials or other sensitive information.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication for logons to code repositories.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Enforce the principle of least-privilege. Consider implementing access control mechanisms that include both authentication and authorization for code repositories.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Develop and publish policies that define acceptable information to be stored in code repositories.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1005" name="Data from Local System">
  Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <System_Requirements>
   Privileges to access certain files and directories
  </System_Requirements>
  <Examples>
   <Example id="S1028" name="Action RAT">
    Action RAT can collect local data from an infected machine.
   </Example>
   <Example id="S1025" name="Amadey">
    Amadey can collect information from a compromised host.
   </Example>
   <Example id="G0138" name="Andariel">
    Andariel has collected large numbers of files from compromised network systems for later extraction.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed can collect data on a compromised host.
   </Example>
   <Example id="G0006" name="APT1">
    APT1 has collected files from a local victim.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has retrieved internal documents from machines inside victim environments, including by using Forfiles to stage documents before exfiltration.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has extracted files from compromised networks.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 will identify Microsoft Office documents on the victim's computer.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 has collected data from victims' local systems.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has collected data from a compromised host.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used various tools to steal files from the compromised host.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 has uploaded files and data from a compromised host.
   </Example>
   <Example id="S1029" name="AuTo Stealer">
    AuTo Stealer can collect data such as PowerPoint files, Word documents, Excel files, PDF files, text files, database files, and image files from an infected machine.
   </Example>
   <Example id="G0001" name="Axiom">
    Axiom has collected data from a compromised network.
   </Example>
   <Example id="S0642" name="BADFLICK">
    BADFLICK has uploaded files from victims' machines.
   </Example>
   <Example id="S0128" name="BADNEWS">
    When it first starts, BADNEWS crawls the victim's local drives and collects documents with the following extensions: .doc, .docx, .pdf, .ppt, .pptx, and .txt.
   </Example>
   <Example id="S0337" name="BadPatch">
    BadPatch collects files from the local system that have the following extensions, then prepares them for exfiltration: .xls, .xlsx, .pdf, .mdb, .rar, .zip, .doc, .docx.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook can collect local files from the system .
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot collects files from the local system.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can retrieve information from the infected machine.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has collected information from a compromised host.
   </Example>
   <Example id="S0564" name="BlackMould">
    BlackMould can copy files on a compromised host.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has uploaded files from victim machines.
   </Example>
   <Example id="S0651" name="BoxCaon">
    BoxCaon can upload files from a compromised host.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has exfiltrated files stolen from local systems.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can capture and compress stolen credentials from the Registry and volume shadow copies.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors obtained files and data from the compromised network.
   </Example>
   <Example id="S0274" name="Calisto">
    Calisto can collect data from user directories.
   </Example>
   <Example id="S0572" name="Caterpillar WebShell">
    Caterpillar WebShell has a module to collect information from the local database.
   </Example>
   <Example id="S1043" name="ccf32">
    ccf32 can collect files from a compromised host.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower can collect data and files from a compromised host.
   </Example>
   <Example id="S0020" name="China Chopper">
    China Chopper's server component can upload local files.
   </Example>
   <Example id="S0667" name="Chrommme">
    Chrommme can collect data from a local system.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can collect information from a compromised host.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can collect data from a local system.
   </Example>
   <Example id="S0492" name="CookieMiner">
    CookieMiner has retrieved iPhone text messages from iTunes phone backup files.
   </Example>
   <Example id="S0050" name="CosmicDuke">
    CosmicDuke steals user files from local hard drives with file extensions that match a predefined list.
   </Example>
   <Example id="C0004" name="CostaRicto">
    During CostaRicto, the threat actors collected data and files from compromised networks.
   </Example>
   <Example id="S1023" name="CreepyDrive">
    CreepyDrive can upload files to C2 from victim machines.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson can collect information from a compromised host.
   </Example>
   <Example id="S0538" name="Crutch">
    Crutch can exfiltrate files from compromised systems.
   </Example>
   <Example id="S0498" name="Cryptoistic">
    Cryptoistic can retrieve files from the local file system.
   </Example>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink can upload files from a compromised host.
   </Example>
   <Example id="S1014" name="DanBot">
    DanBot can upload files from compromised hosts.
   </Example>
   <Example id="G0070" name="Dark Caracal">
    Dark Caracal collected complete contents of the 'Pictures' folder from compromised Windows systems.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman can collect files from a compromised host.
   </Example>
   <Example id="S1021" name="DnsSystem">
    DnsSystem can upload files from infected machines after receiving a command with uploaddd in the string.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has collected data from local victim systems.
   </Example>
   <Example id="S0694" name="DRATzarus">
    DRATzarus can collect information from a compromised host.
   </Example>
   <Example id="S0502" name="Drovorub">
    Drovorub can transfer files from the victim machine.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack can collect a variety of information from victim machines.
   </Example>
   <Example id="S0634" name="EnvyScout">
    EnvyScout can collect sensitive NTLM material from a compromised host.
   </Example>
   <Example id="S0404" name="esentutl">
    esentutl can be used to collect data from local file systems.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke can copy files and directories from a compromised host.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has collected and exfiltrated payment card data from compromised systems.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has collected files and other sensitive information from a compromised network.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro can collect data from a compromised host, including Windows authentication information.
   </Example>
   <Example id="S0036" name="FLASHFLOOD">
    FLASHFLOOD searches for interesting files (either a default or customized set of file extensions) on the local system. FLASHFLOOD will scan the My Recent Documents, Desktop, Temporary Internet Files, and TEMP directories. FLASHFLOOD also collects information stored in the Windows Address Book.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy has collected information and files from a compromised machine.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb can retrieve configuration data from a compromised AD FS server.
   </Example>
   <Example id="S0193" name="Forfiles">
    Forfiles can be used to act on (ex: copy, move, etc.) files/directories in a system during (ex: copy files into a staging area before).
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has searched local system resources to access sensitive documents.
   </Example>
   <Example id="S0503" name="FrameworkPOS">
    FrameworkPOS can collect elements related to credit card data from process memory.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors used Empire to gather various local system information.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can upload files from victims' machines.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM collected data from the victim's local system, including password hashes from the SAM hive in the Registry.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has collected files from infected systems and uploaded them to a C2 server.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can collect data from a compromised host.
   </Example>
   <Example id="S0477" name="Goopy">
    Goopy has the ability to exfiltrate documents from infected systems.
   </Example>
   <Example id="S0237" name="GravityRAT">
    GravityRAT steals files with the following extensions: .docx, .doc, .pptx, .ppt, .xlsx, .xls, .rtf, and .pdf.
   </Example>
   <Example id="S0690" name="Green Lambert">
    Green Lambert can collect data from a compromised host.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent can collect data and files from a compromised host.
   </Example>
   <Example id="S0009" name="Hikit">
    Hikit can upload files from compromised machines.
   </Example>
   <Example id="S0203" name="Hydraq">
    Hydraq creates a backdoor through which remote attackers can read data from files.
   </Example>
   <Example id="S1022" name="IceApple">
    IceApple can collect files, passwords, and other data from a compromised host.
   </Example>
   <Example id="G0100" name="Inception">
    Inception used a file hunting plugin to collect .txt, .pdf, .xls or .doc files from the infected host.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can collect data from the system, and can monitor changes in specified directories.
   </Example>
   <Example id="S0015" name="Ixeshe">
    Ixeshe can collect data from a local system.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar uploads files from a specified directory to the C2 server.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang gathered information and files from local directories for exfiltration.
   </Example>
   <Example id="S1020" name="Kevin">
    Kevin can upload logs and other data from a compromised host.
   </Example>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY can send a file containing victim system information to C2.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has collected Office, PDF, and HWP documents from its victims.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can download files off the target system to send back to the server.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has stored collected information and discovered processes in a tmp file.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ uploaded sensitive files, information, and credentials from a targeted organization for extortion or public release.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has collected data and files from compromised networks.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron can collect files from a local system.
   </Example>
   <Example id="S0211" name="Linfo">
    Linfo creates a backdoor through which remote attackers can obtain data from local systems.
   </Example>
   <Example id="S0409" name="Machete">
    Machete searches the File system for files of interest.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa can collect then exfiltrate files from the compromised system.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has used a web shell to exfiltrate a ZIP file containing a dump of LSASS memory on a compromised machine.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can upload data from the victim's machine to the C2 server.
   </Example>
   <Example id="S0500" name="MCMD">
    MCMD has the ability to upload files from an infected device.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has collected various files from the compromised computers.
   </Example>
   <Example id="S1015" name="Milan">
    Milan can upload files from a compromised host.
   </Example>
   <Example id="S0084" name="Mis-Type">
    Mis-Type has collected files and data from a compromised host.
   </Example>
   <Example id="S0083" name="Misdat">
    Misdat has collected files and data from a compromised host.
   </Example>
   <Example id="S0079" name="MobileOrder">
    MobileOrder exfiltrates data collected from the victim mobile device.
   </Example>
   <Example id="S1026" name="Mongall">
    Mongall has the ability to upload files from victim's machines.
   </Example>
   <Example id="S0630" name="Nebulae">
    Nebulae has the capability to upload collected files to C2.
   </Example>
   <Example id="S0691" name="Neoichor">
    Neoichor can upload files from a victim's machine.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, the threat actors collected files and other data from compromised systems.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT can collect data from a local system.
   </Example>
   <Example id="S0340" name="Octopus">
    Octopus can exfiltrate files from the system using a documents collector tool.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors collected data, files, and other information from compromised networks.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, the threat actors collected data from compromised hosts.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors exfiltrated files and directories of interest from the targeted system.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    OSX_OCEANLOTUS.D has the ability to upload files from a compromised host.
   </Example>
   <Example id="S0594" name="Out1">
    Out1 can copy files and Registry data from compromised hosts.
   </Example>
   <Example id="S1017" name="OutSteel">
    OutSteel can collect information from a compromised host.
   </Example>
   <Example id="S0598" name="P.A.S. Webshell">
    P.A.S. Webshell has the ability to copy files on a compromised host.
   </Example>
   <Example id="S0208" name="Pasam">
    Pasam creates a backdoor through which remote attackers can retrieve files.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork collected and exfiltrated files from the infected system.
   </Example>
   <Example id="S1050" name="PcShare">
    PcShare can collect files and information from a compromised host.
   </Example>
   <Example id="S0517" name="Pillowmint">
    Pillowmint has collected credit card data using native API functions.
   </Example>
   <Example id="S0048" name="PinchDuke">
    PinchDuke collects user files from the compromised host based on predefined file extensions.
   </Example>
   <Example id="S1031" name="PingPull">
    PingPull can collect data from a compromised host.
   </Example>
   <Example id="S0012" name="PoisonIvy">
    PoisonIvy creates a backdoor through which remote attackers can steal system information.
   </Example>
   <Example id="S1012" name="PowerLess">
    PowerLess has the ability to exfiltrate data, including Chrome and Edge browser database files, from compromised machines.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit contains a collection of Exfiltration modules that can access data from local files, volumes, and processes.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS can upload files from compromised hosts.
   </Example>
   <Example id="S0238" name="Proxysvc">
    Proxysvc searches the local system and gathers data.
   </Example>
   <Example id="S0197" name="PUNCHTRACK">
    PUNCHTRACK scrapes memory for properly formatted payment card data.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can use a variety of commands, including esentutl.exe to steal sensitive data from Internet Explorer and Microsoft Edge, to acquire information that is subsequently exfiltrated.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT can retrieve files from compromised client machines.
   </Example>
   <Example id="S0686" name="QuietSieve">
    QuietSieve can collect files from a compromised host.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay can use a file exfiltration tool to collect recently changed files on a compromised host.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can collect Microsoft Word documents from the target's file system, as well as .txt, .doc, and .xls files from the Internet Explorer cache.
   </Example>
   <Example id="S0169" name="RawPOS">
    RawPOS dumps memory from specific processes on a victim system, parses the dumped files, and scrapes them for credit card data.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession can collect data from a compromised host.
   </Example>
   <Example id="S0448" name="Rising Sun">
    Rising Sun has collected data and files from a compromised host.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can collect host data and specific file types.
   </Example>
   <Example id="S0090" name="Rover">
    Rover searches for files on local drives based on a predefined list of file extensions.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot can collect files and information from a compromised host.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has exfiltrated internal documents, files, and other data from compromised hosts.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has the ability to access the file system on a compromised host.
   </Example>
   <Example id="S1019" name="Shark">
    Shark can upload files to its C2.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat has the capability to upload collected files to a C2.
   </Example>
   <Example id="S0610" name="SideTwist">
    SideTwist has the ability to upload files from a compromised host.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA has uploaded files and information from victim machines.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT has collected data and files from a compromised host.
   </Example>
   <Example id="S0646" name="SpicyOmelette">
    SpicyOmelette has collected data and other information from a compromised host.
   </Example>
   <Example id="S1037" name="STARWHALE">
    STARWHALE can collect data from an infected local host.
   </Example>
   <Example id="G0038" name="Stealth Falcon">
    Stealth Falcon malware gathers data from the local victim system.
   </Example>
   <Example id="S1034" name="StrifeWater">
    StrifeWater can collect data from a compromised host.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST collected information from a compromised host.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor can upload data and files from a victim's machine.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to steal documents from the local system including the print spooler queue.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 ran a command to compile an archive of file types of interest from the victim user's directories.
   </Example>
   <Example id="S0665" name="ThreatNeedle">
    ThreatNeedle can collect data and files from a compromised host.
   </Example>
   <Example id="S0668" name="TinyTurla">
    TinyTurla can upload files from a compromised host.
   </Example>
   <Example id="S0671" name="Tomiris">
    Tomiris has the ability to collect recent files matching a hardcoded list of extensions prior to exfiltration.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot collects local files and information from the victim’s local machine.
   </Example>
   <Example id="G0010" name="Turla">
    Turla RPC backdoors can upload files from victim machines.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has collected files from victim machines, including certificates and cookies.
   </Example>
   <Example id="S0452" name="USBferry">
    USBferry can collect information from an air-gapped host machine.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT can collect data from a compromised host.
   </Example>
   <Example id="S0515" name="WellMail">
    WellMail can exfiltrate files from the victim machine.
   </Example>
   <Example id="S0514" name="WellMess">
    WellMess can send files from the victim machine to C2.
   </Example>
   <Example id="S0645" name="Wevtutil">
    Wevtutil can be used to export events from a specific log.
   </Example>
   <Example id="G0124" name="Windigo">
    Windigo has used a script to gather credentials in files left on disk by OpenSSH backdoors.
   </Example>
   <Example id="S0653" name="xCaon">
    xCaon has uploaded files from victims' machines.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET collects contacts and application data from files in Desktop, Documents, Downloads, Dropbox, and WeChat folders.
   </Example>
   <Example id="S0248" name="yty">
    yty collects files with the following extensions: .ppt, .pptx, .pdf, .doc, .docx, .xls, .xlsx, .docm, .rtf, .inp, .xlsm, .csv, .odt, .pps, .vcf and sends them back to the C2 server.
   </Example>
   <Example id="S0672" name="Zox">
    Zox has the ability to upload files from a targeted system.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell can transfer files from a compromised host.
   </Example>
   <Example id="S1013" name="ZxxZ">
    ZxxZ can collect data from a compromised host.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1057" name="Data Loss Prevention">
    Data loss prevention can restrict access to sensitive data and detect sensitive data that is unencrypted.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1039" name="Data from Network Shared Drive">
  Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <System_Requirements>
   Privileges to access network shared drive
  </System_Requirements>
  <CAPEC_ID>
   CAPEC-639
  </CAPEC_ID>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has collected files from network shared drives.
   </Example>
   <Example id="S0128" name="BADNEWS">
    When it first starts, BADNEWS crawls the victim's mapped drives and collects documents with the following extensions: .doc, .docx, .pdf, .ppt, .pptx, and .txt.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has exfiltrated files stolen from file shares.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors collected files from network shared drives prior to network encryption.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has collected data of interest from network shares.
   </Example>
   <Example id="S0050" name="CosmicDuke">
    CosmicDuke steals user files from network shared drives with file extensions and keywords that match a predefined list.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor can collect any files found in the enumerated drivers before sending it to its C2 channel.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has searched network shares to access sensitive documents.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group malware has collected Microsoft Office documents from mapped network drives.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has collected data from remote systems by mounting network shares with net use and using Robocopy to transfer data.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can collect data from network drives and stage it for exfiltration.
   </Example>
   <Example id="G0054" name="Sowbug">
    Sowbug extracted Word documents from a file server on a victim network.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0033" name="Network Share">
    Network Share Access
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1025" name="Data from Removable Media">
  Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <System_Requirements>
   Privileges to access removable media drive and files
  </System_Requirements>
  <Examples>
   <Example id="S0622" name="AppleSeed">
    AppleSeed can find and collect data from removable media devices.
   </Example>
   <Example id="G0007" name="APT28">
    An APT28 backdoor may collect the entire contents of an inserted USB device.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has the ability to collect data from USB devices.
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS copies files with certain extensions from USB devices toa predefined directory.
   </Example>
   <Example id="S0050" name="CosmicDuke">
    CosmicDuke steals user files from removable media with file extensions and keywords that match a predefined list.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson contains a module to collect data from removable drives.
   </Example>
   <Example id="S0538" name="Crutch">
    Crutch can monitor removable drives and exfiltrate files matching a given extension list.
   </Example>
   <Example id="S0569" name="Explosive">
    Explosive can scan all .exe files located in the USB drive.
   </Example>
   <Example id="S0036" name="FLASHFLOOD">
    FLASHFLOOD searches for interesting files (either a default or customized set of file extensions) on removable media and copies them to a staging area. The default file types copied would include data copied to the drive by SPACESHIP.
   </Example>
   <Example id="S1044" name="FunnyDream">
    The FunnyDream FilePakMonitor component has the ability to collect files from removable devices.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    A Gamaredon Group file stealer has the capability to steal data from newly connected logical volumes on a system, including USB drives.
   </Example>
   <Example id="S0237" name="GravityRAT">
    GravityRAT steals files based on an extension list if a USB drive is connected to the system.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can collect jpeg files from connected MTP devices.
   </Example>
   <Example id="S0409" name="Machete">
    Machete can find, encrypt, and upload files from fixed and removable drives.
   </Example>
   <Example id="S0644" name="ObliqueRAT">
    ObliqueRAT has the ability to extract data from removable devices connected to the endpoint.
   </Example>
   <Example id="S0113" name="Prikormka">
    Prikormka contains a module that collects documents with certain extensions from removable media or fixed drives connected via USB.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can collect data from removable media and stage it for exfiltration.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec has a package that collects documents from any inserted USB sticks.
   </Example>
   <Example id="S0090" name="Rover">
    Rover searches for files on attached removable drives based on a predefined list of file extensions every five seconds.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to steal written CD images and files of interest from previously connected removable drives when they become available again.
   </Example>
   <Example id="G0010" name="Turla">
    Turla RPC backdoors can collect files from USB thumb drives.
   </Example>
   <Example id="S0136" name="USBStealer">
    Once a removable media device is inserted back into the first victim, USBStealer collects data from it that was exfiltrated from a second victim.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1057" name="Data Loss Prevention">
    Data loss prevention can restrict access to sensitive data and detect sensitive data that is unencrypted.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1565" name="Data Manipulation">
  Adversaries may insert, delete, or manipulate data in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Impact_Type>
   Integrity
  </Impact_Type>
  <Mitigations>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Consider encrypting important information to reduce an adversary’s ability to perform tailored data modifications.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Identify critical business and system processes that may be targeted by adversaries and work to isolate and secure those systems against unauthorized access and tampering.
   </Mitigation>
   <Mitigation id="M1029" name="Remote Data Storage">
    Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and manipulate backups.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Ensure least privilege principles are applied to important information resources to reduce exposure to data manipulation risk.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation | File Deletion | File Metadata | File Modification
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1565.001" name="Data Manipulation: Stored Data Manipulation">
  Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Impact_Type>
   Integrity
  </Impact_Type>
  <Examples>
   <Example id="G0082" name="APT38">
    APT38 has used DYEPACK to create, delete, and alter records in databases used for SWIFT transactions.
   </Example>
   <Example id="S0562" name="SUNSPOT">
    SUNSPOT created a copy of the SolarWinds Orion software source file with a .bk extension to backup the original content, wrote SUNBURST using the same filename but with a .tmp extension, and then moved SUNBURST using MoveFileEx to the original filename with a .cs extension so it could be compiled within Orion software.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Consider encrypting important information to reduce an adversary’s ability to perform tailored data modifications.
   </Mitigation>
   <Mitigation id="M1029" name="Remote Data Storage">
    Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and manipulate backups.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Ensure least privilege principles are applied to important information resources to reduce exposure to data manipulation risk.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation | File Deletion | File Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1565.002" name="Data Manipulation: Transmitted Data Manipulation">
  Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity, thus threatening the integrity of the data. By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Impact_Type>
   Integrity
  </Impact_Type>
  <Examples>
   <Example id="G0082" name="APT38">
    APT38 has used DYEPACK to manipulate SWIFT messages en route to a printer.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron is capable of modifying email content, headers, and attachments during transit.
   </Example>
   <Example id="S0530" name="Melcoz">
    Melcoz can monitor the clipboard for cryptocurrency addresses and change the intended address to one controlled by the adversary.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has a function that can watch the contents of the system clipboard for valid bitcoin addresses, which it then overwrites with the attacker's address.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Encrypt all important data flows to reduce the impact of tailored modifications on data in transit.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1565.003" name="Data Manipulation: Runtime Data Manipulation">
  Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user, thus threatening the integrity of the data. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User, root
  </Permissions_Required>
  <Impact_Type>
   Integrity
  </Impact_Type>
  <Examples>
   <Example id="G0082" name="APT38">
    APT38 has used DYEPACK.FOX to manipulate PDF data as it is accessed to remove traces of fraudulent SWIFT transactions from the data displayed to the end user.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1030" name="Network Segmentation">
    Identify critical business and system processes that may be targeted by adversaries and work to isolate and secure those systems against unauthorized access and tampering.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Prevent critical business and system processes from being replaced, overwritten, or reconfigured to load potentially malicious code.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation | File Deletion | File Metadata | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1001" name="Data Obfuscation">
  Adversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy may obfuscate portions of the initial C2 handshake.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can send compressed and obfuscated packets to C2.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors encrypted IP addresses used for "Agent" proxy hops with RC4.
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT has used encoded data within subdomains as AES ciphertext to communicate from the host to the C2.
   </Example>
   <Example id="S0610" name="SideTwist">
    SideTwist can embed C2 responses in the source code of a fake Flickr webpage.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA has hashed a string containing system information prior to exfiltration via POST requests.
   </Example>
   <Example id="S0682" name="TrailBlazer">
    TrailBlazer can masquerade its C2 traffic as legitimate Google Notifications HTTP requests.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate some obfuscation activity at the network level.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1001.001" name="Data Obfuscation: Junk Data">
  Adversaries may add junk data to protocols used for command and control to make detection more difficult. By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 added "junk data" to each encoded string, preventing trivial decoding without knowledge of the junk removal algorithm. Each implant was given a "junk length" value when created, tracked by the controller software to allow seamless communication but prevent analysis of the command protocol on the wire.
   </Example>
   <Example id="S0574" name="BendyBear">
    BendyBear has used byte randomization to obscure its behavior.
   </Example>
   <Example id="S0134" name="Downdelph">
    Downdelph inserts pseudo-random characters between each original character during encoding of C2 network requests, making it difficult to write signatures on them.
   </Example>
   <Example id="S0588" name="GoldMax">
    GoldMax has used decoy traffic to surround its malicious network traffic to avoid detection.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent  can pad C2 messages with random generated values.
   </Example>
   <Example id="S1020" name="Kevin">
    Kevin can generate a sequence of dummy HTTP C2 requests to obscure traffic.
   </Example>
   <Example id="S1047" name="Mori">
    Mori has obfuscated the FML.dll with 200MB of junk data.
   </Example>
   <Example id="S0016" name="P2P ZeuS">
    P2P ZeuS added junk data to outgoing UDP packets to peer implants.
   </Example>
   <Example id="S0626" name="P8RAT">
    P8RAT can send randomly-generated data as part of its C2 communication.
   </Example>
   <Example id="S0435" name="PLEAD">
    PLEAD samples were found to be highly obfuscated with junk code.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST added junk bytes to its C2 over HTTP.
   </Example>
   <Example id="S0682" name="TrailBlazer">
    TrailBlazer has used random identifier strings to obscure its C2 operations and result codes.
   </Example>
   <Example id="S0647" name="Turian">
    Turian can insert pseudo-random characters into its network encryption setup.
   </Example>
   <Example id="S0514" name="WellMess">
    WellMess can use junk data in the Base64 string for additional obfuscation.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate some obfuscation activity at the network level.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1001.002" name="Data Obfuscation: Steganography">
  Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 has used steganography to hide C2 communications in images.
   </Example>
   <Example id="G0001" name="Axiom">
    Axiom has used steganography to hide its C2 communications.
   </Example>
   <Example id="S0187" name="Daserf">
    Daserf can use steganography to hide malicious code downloaded to the victim.
   </Example>
   <Example id="S0038" name="Duqu">
    When the Duqu command and control is operating over HTTP or HTTPS, Duqu uploads data to its controller by appending it to a blank JPG file.
   </Example>
   <Example id="S0037" name="HAMMERTOSS">
    HAMMERTOSS is controlled via commands that are appended to image files.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron is controlled via commands that are embedded into PDFs and JPGs using steganographic methods.
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT can process steganographic images attached to email messages to send and receive C2 commands. RDAT can also embed additional messages within BMP images to communicate with the RDAT operator.
   </Example>
   <Example id="S0633" name="Sliver">
    Sliver can encode binary data into a .PNG file for C2 communication.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST C2 data attempted to appear as benign XML related to .NET assemblies or as a faux JSON blob.
   </Example>
   <Example id="S0230" name="ZeroT">
    ZeroT has retrieved stage 2 payloads as Bitmap images that use Least Significant Bit (LSB) steganography.
   </Example>
   <Example id="S0672" name="Zox">
    Zox has used the .PNG file format for C2 communications.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate some obfuscation activity at the network level.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1001.003" name="Data Obfuscation: Protocol Impersonation">
  Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0245" name="BADCALL">
    BADCALL uses a FakeTLS method during C2.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot generates a false TLS handshake using a public certificate to disguise C2 network communications.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can mimic the HTTP protocol for C2 communication, while hiding the actual data in either an HTTP header, URI parameter, the transaction body, or appending it to the URI.
   </Example>
   <Example id="S0076" name="FakeM">
    FakeM C2 traffic attempts to evade detection by resembling data generated by legitimate messenger applications, such as MSN and Yahoo! messengers. Additionally, some variants of FakeM use modified SSL code for communications back to C2 servers, making SSL decryption ineffective.
   </Example>
   <Example id="S0181" name="FALLCHILL">
    FALLCHILL uses fake Transport Layer Security (TLS) to communicate with its C2 server.
   </Example>
   <Example id="S0246" name="HARDRAIN">
    HARDRAIN uses FakeTLS to communicate with its C2 server.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa used a FakeTLS session for C2 communications.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can mimic HTTP protocol with custom HTTP "verbs" HIDE, ZVVP, and NOP.
   </Example>
   <Example id="S0387" name="KeyBoy">
    KeyBoy uses custom SSL libraries to impersonate SSL in C2 traffic.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group malware also uses a unique form of communication encryption known as FakeTLS that mimics TLS but uses a different encryption method, potentially evading SSL traffic inspection/decryption.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum mimics HTTP protocol for C2 communication, while hiding the actual messages in the Cookie and Set-Cookie headers of the HTTP requests.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST masqueraded its network traffic as the Orion Improvement Program (OIP) protocol.
   </Example>
   <Example id="S0586" name="TAINTEDSCRIBE">
    TAINTEDSCRIBE has used FakeTLS for session authentication.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate some obfuscation activity at the network level.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1074" name="Data Staged">
  Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   IaaS, Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S1020" name="Kevin">
    Kevin can create directories to store logs and other collected data.
   </Example>
   <Example id="S0641" name="Kobalos">
    Kobalos can write captured SSH connection credentials to a file under the /var/run directory with a .pid extension for exfiltration.
   </Example>
   <Example id="S1019" name="Shark">
    Shark has stored information in folders named U1 and U2 prior to exfiltration.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has collected and staged credentials and network enumeration information, using  the networkdll and psfin TrickBot modules.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access | File Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1074.001" name="Data Staged: Local Data Staging">
  Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0045" name="ADVSTORESHELL">
    ADVSTORESHELL stores output from command execution in a .dat file in the %TEMP% directory.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed can stage files in a central location prior to exfiltration.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has stored captured credential information in a file named pi.log.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has been known to stage files for exfiltration in a single location.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has utilized tools to aggregate data prior to exfiltration.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth collects data in a plaintext file named r1.log before exfiltration.
   </Example>
   <Example id="S0438" name="Attor">
    Attor has staged collected data in a central upload directory prior to exfiltration.
   </Example>
   <Example id="S1029" name="AuTo Stealer">
    AuTo Stealer can store collected data from an infected host to a file named Hostname_UserName.txt prior to exfiltration.
   </Example>
   <Example id="G0135" name="BackdoorDiplomacy">
    BackdoorDiplomacy has copied files of interest to the main drive's recycle bin.
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS copies documents under 15MB found on the victim system to is the user's %temp%\SMB\ folder. It also copies files from USB devices to a predefined directory.
   </Example>
   <Example id="S0337" name="BadPatch">
    BadPatch stores collected data in log files before exfiltration.
   </Example>
   <Example id="S0651" name="BoxCaon">
    BoxCaon has created a working folder for collected files that it sends to the C2 server.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, PowerView's file share enumeration results were stored in the file c:\ProgramData\found_shares.txt.
   </Example>
   <Example id="S0274" name="Calisto">
    Calisto uses a hidden directory named .calisto to store data from the victim’s machine before exfiltration.
   </Example>
   <Example id="S0335" name="Carbon">
    Carbon creates a base directory that contains the files and folders that are collected.
   </Example>
   <Example id="S0261" name="Catchamas">
    Catchamas stores the gathered data from the machine in .db files and .bmp files under four separate locations.
   </Example>
   <Example id="S1043" name="ccf32">
    ccf32 can temporarily store files in a hidden directory on the local host.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has staged stolen data locally on compromised hosts.
   </Example>
   <Example id="S0667" name="Chrommme">
    Chrommme can store captured system information locally prior to exfiltration.
   </Example>
   <Example id="S0538" name="Crutch">
    Crutch has staged stolen files in the C:\AMD\Temp directory.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman can stage local data in the Windows Registry.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has created a directory named "out" in the user's %AppData% folder and copied files to it.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack can save collected data to disk, different file formats, and network shares.
   </Example>
   <Example id="S0038" name="Duqu">
    Modules can be pushed to and executed by Duqu that copy data to a staging area, compress it, and XOR encrypt it.
   </Example>
   <Example id="S0062" name="DustySky">
    DustySky created folders in temp directories to host collected files before exfiltration.
   </Example>
   <Example id="S0024" name="Dyre">
    Dyre has the ability to create files in a TEMP folder to act as a database to store information.
   </Example>
   <Example id="S0593" name="ECCENTRICBANDWAGON">
    ECCENTRICBANDWAGON has stored keystrokes and screenshots within the %temp%\GoogleChrome, %temp%\Downloads, and %temp%\TrendMicroUpdate directories.
   </Example>
   <Example id="S0081" name="Elise">
    Elise creates a file in AppData\Local\Microsoft\Windows\Explorer and stores all harvested data in that file.
   </Example>
   <Example id="S0343" name="Exaramel for Windows">
    Exaramel for Windows specifies a path to store files scheduled for exfiltration.
   </Example>
   <Example id="G0053" name="FIN5">
    FIN5 scripts save memory dump data into a specific directory on hosts in the victim environment.
   </Example>
   <Example id="S0036" name="FLASHFLOOD">
    FLASHFLOOD stages data it copies from the local system or removable drives in the "%WINDIR%\$NtUninstallKB885884$\" directory.
   </Example>
   <Example id="S0503" name="FrameworkPOS">
    FrameworkPOS can identifiy payment card track data on the victim and copy it to a local file in a subdirectory of C:\Windows.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can stage collected information including screen captures and logged keystrokes locally.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM compressed and staged files in multi-part archives in the Recycle Bin prior to exfiltration.
   </Example>
   <Example id="S0249" name="Gold Dragon">
    Gold Dragon stores information gathered from the endpoint in a file named 1.hwp.
   </Example>
   <Example id="S0170" name="Helminth">
    Helminth creates folders to store output from batch scripts prior to sending the information to its C2 server.
   </Example>
   <Example id="G0119" name="Indrik Spider">
    Indrik Spider has stored collected date in a .tmp file.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole determines a working directory where it stores all the gathered data about the compromised machine.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar stages command output and collected data in files before exfiltration.
   </Example>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY can save collected system information to a file named "info" before exfiltration.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has staged collected data files under C:\Program Files\Common Files\System\Ole DB\.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group malware IndiaIndia saves information gathered about the victim to a file that is saved in the %TEMP% directory, then compressed, encrypted, and uploaded to a C2 server.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has used C:\Windows\Debug and C:\Perflogs as staging directories.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron can store email data in files and directories specified in its configuration, such as C:\Windows\ServiceProfiles\NetworkService\appdata\Local\Temp\.
   </Example>
   <Example id="S0409" name="Machete">
    Machete stores files and logs in a folder on the local drive.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa has stored collected files locally before exfiltration.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can store collected data locally in a created .nfo file.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass stages data prior to exfiltration in multi-part archives, often saved in the Recycle Bin.
   </Example>
   <Example id="S0443" name="MESSAGETAP">
    MESSAGETAP stored targeted SMS messages that matched its target list in CSV files on the compromised system.
   </Example>
   <Example id="S1015" name="Milan">
    Milan has saved files prior to upload from a compromised host to folders beginning with the characters a9850d2f.
   </Example>
   <Example id="S0084" name="Mis-Type">
    Mis-Type has temporarily stored collected information to the files "%AppData%\{Unique Identifier}\HOSTRURKLSR" and "%AppData%\{Unique Identifier}\NEWERSSEMP".
   </Example>
   <Example id="S0149" name="MoonWind">
    MoonWind saves information from its keylogging routine as a .zip file in the present working directory.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has stored a decoy PDF file within a victim's %temp% folder.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has stored collected credential files in c:\windows\temp prior to exfiltration. Mustang Panda has also stored documents for exfiltration in a hidden folder on USB drives.
   </Example>
   <Example id="S0247" name="NavRAT">
    NavRAT writes multiple outputs to a TMP file using the &gt;&gt; method.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE has the ability to write collected data to a file created in the ./LOGS directory.
   </Example>
   <Example id="S0353" name="NOKKI">
    NOKKI can collect data from the victim and stage it in LOCALAPPDATA%\MicroSoft Updatea\uplog.tmp.
   </Example>
   <Example id="S0644" name="ObliqueRAT">
    ObliqueRAT can copy specific files, webcam captures, and screenshots to local directories.
   </Example>
   <Example id="S0340" name="Octopus">
    Octopus has stored collected information in the Application Data directory on a compromised host.
   </Example>
   <Example id="S0264" name="OopsIE">
    OopsIE stages the output from command execution and collected files in specific folders before exfiltration.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, stolen data was copied into a text file using the format From &lt;COMPUTER-NAME&gt; (&lt;Month&gt;-&lt;Day&gt; &lt;Hour&gt;-&lt;Minute&gt;-&lt;Second&gt;).txt prior to compression, encoding, and exfiltration.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors staged archived files in a temporary directory prior to exfiltration.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork copied all targeted files to a directory called index that was eventually uploaded to the C&amp;C server.
   </Example>
   <Example id="S0012" name="PoisonIvy">
    PoisonIvy stages collected data in a text file.
   </Example>
   <Example id="S1012" name="PowerLess">
    PowerLess can stage stolen browser data in C:\\Windows\\Temp\\cup.tmp and keylogger data in C:\\Windows\\Temp\\Report.06E17A5A-7325-4325-8E5D-E172EBA7FC5BK.
   </Example>
   <Example id="S0113" name="Prikormka">
    Prikormka creates a directory, %USERPROFILE%\AppData\Local\SKC\, which is used to store collected log files.
   </Example>
   <Example id="S0147" name="Pteranodon">
    Pteranodon creates various subdirectories under %Temp%\reports\% and copies files to those subdirectories. It also creates a folder at C:\Users\\AppData\Roaming\Microsoft\store to store screenshot JPEG files.
   </Example>
   <Example id="S0196" name="PUNCHBUGGY">
    PUNCHBUGGY has saved information to a random temp file before exfil.
   </Example>
   <Example id="S0197" name="PUNCHTRACK">
    PUNCHTRACK aggregates collected data in a tmp file.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot has stored stolen emails and other data into new folders prior to exfiltration.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay can use a file exfiltration tool to copy files to C:\ProgramData\Adobe\temp prior to exfiltration.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can stage data prior to exfiltration in %APPDATA%\Microsoft\UserSetting and %APPDATA%\Microsoft\UserSetting\MediaCache.
   </Example>
   <Example id="S0169" name="RawPOS">
    Data captured by RawPOS is placed in a temporary file under a directory named "memdump".
   </Example>
   <Example id="S0090" name="Rover">
    Rover copies files from removable drives to C:\system.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has collected stolen files in a temporary folder in preparation for exfiltration.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT can store harvested data in a custom database under the %TEMP% directory.
   </Example>
   <Example id="S0035" name="SPACESHIP">
    SPACESHIP identifies files with certain extensions and copies them to a directory in the user's profile.
   </Example>
   <Example id="S1037" name="STARWHALE">
    STARWHALE has stored collected data in a file called stari.txt.
   </Example>
   <Example id="S1042" name="SUGARDUMP">
    SUGARDUMP has stored collected data under %&lt;malware_execution_folder&gt;%\\CrashLog.txt.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has aggregated collected credentials in text files before exfiltrating.
   </Example>
   <Example id="G0088" name="TEMP.Veles">
    TEMP.Veles has created staging folders in directories that were infrequently used by legitimate users or processes.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has locally staged encrypted archives for later exfiltration efforts.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can create directories to store plugin output and stage data for exfiltration.
   </Example>
   <Example id="S0647" name="Turian">
    Turian can store copied files in a specific directory prior to exfiltration.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has used tmp files to stage gathered information.
   </Example>
   <Example id="S0136" name="USBStealer">
    USBStealer collects files matching certain criteria from the victim and stores them in a local directory for later exfiltration.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy stores all collected information in a single file before exfiltration.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access | File Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1074.002" name="Data Staged: Remote Data Staging">
  Adversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   IaaS, Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has staged archives of collected data on a target's Outlook Web Access (OWA) server.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 staged data and files in password-protected archives on a victim's OWA server.
   </Example>
   <Example id="S1043" name="ccf32">
    ccf32 has copied files to a remote machine infected with Chinoxy or another backdoor.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has staged stolen data on designated servers in the target environment.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 actors have compressed data from remote systems and moved it to another staging system before exfiltration.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 aggregates staged data from a network into a single location.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has staged data remotely prior to exfiltration.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has staged data on remote MSP systems or other victim networks prior to exfiltration.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors copied files to company web servers and subsequently downloaded them.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has moved staged encrypted archives to Internet-facing servers that had previously been compromised with China Chopper prior to exfiltration.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access | File Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1030" name="Data Transfer Size Limits">
  An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.
  <Tactic>
   Exfiltration
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0622" name="AppleSeed">
    AppleSeed has divided files if the size is 0x1000000 bytes or more.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has split archived exfiltration files into chunks smaller than 1MB.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors limited Rclone's bandwidth setting during exfiltration.
   </Example>
   <Example id="S0030" name="Carbanak">
    Carbanak exfiltrates data in compressed chunks if a message is larger than 4096 bytes .
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike will break large data sets into smaller chunks for exfiltration.
   </Example>
   <Example id="S0170" name="Helminth">
    Helminth splits data into chunks up to 23 bytes and sends the data in DNS queries to its C2 server.
   </Example>
   <Example id="S0487" name="Kessel">
    Kessel can split the data to be exilftrated into chunks that will fit in subdomains of DNS queries.
   </Example>
   <Example id="S1020" name="Kevin">
    Kevin can exfiltrate data to the C2 server in 27-character chunks.
   </Example>
   <Example id="S0699" name="Mythic">
    Mythic supports custom chunk sizes used to upload/download files.
   </Example>
   <Example id="S0644" name="ObliqueRAT">
    ObliqueRAT can break large files of interest into smaller chunks to prepare them for exfiltration.
   </Example>
   <Example id="S0264" name="OopsIE">
    OopsIE exfiltrates command output and collected files to its C2 server in 1500-byte blocks.
   </Example>
   <Example id="S0150" name="POSHSPY">
    POSHSPY uploads data in 2048-byte chunks.
   </Example>
   <Example id="S1040" name="Rclone">
    The Rclone "chunker" overlay supports splitting large files in smaller chunks during upload to circumvent size limits.
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT can upload a file via HTTP POST response to the C2 split into 102,400-byte portions. RDAT can also download data from the C2 which is split into 81,920-byte portions.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 actors have split RAR files for exfiltration into parts.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1622" name="Debugger Evasion">
  Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.
  <Tactics>
   Defense Evasion, Discovery
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can search for tools used in static analysis.
   </Example>
   <Example id="S0694" name="DRATzarus">
    DRATzarus can use IsDebuggerPresent to detect whether a debugger is present on a victim.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can check for debugging tools.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has used is_debugger_present as part of its environmental checks.
   </Example>
   <Example id="S0595" name="ThiefQuest">
    ThiefQuest uses a function named is_debugging to perform anti-debugging logic. The function invokes sysctl checking the returned value of P_TRACED. ThiefQuest also calls ptrace with the PTRACE_DENY_ATTACH flag to prevent debugging.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1491" name="Defacement">
  Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons for Defacement include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   IaaS, Linux, Windows, macOS
  </Platforms>
  <Impact_Type>
   Integrity
  </Impact_Type>
  <Mitigations>
   <Mitigation id="M1053" name="Data Backup">
    Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1491.001" name="Defacement: Internal Defacement">
  An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users, thus discrediting the integrity of the systems. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Impact_Type>
   Integrity
  </Impact_Type>
  <Examples>
   <Example id="S0659" name="Diavol">
    After encryption, Diavol will capture the desktop background window, set the background color to black, and change the desktop wallpaper to a newly created bitmap image with the text "All your files are encrypted! For more information see "README-FOR-DECRYPT.txt".
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has left taunting images and messages on the victims' desktops as proof of system access.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group replaced the background wallpaper of systems with a threatening image after rendering the system unbootable with a Disk Structure Wipe.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor can change both the desktop wallpaper and the lock screen image to a custom image.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1053" name="Data Backup">
    Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1491.002" name="Defacement: External Defacement">
  An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. External Defacement may ultimately cause users to distrust the systems and to question/discredit the system’s integrity. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   IaaS, Linux, Windows, macOS
  </Platforms>
  <Impact_Type>
   Integrity
  </Impact_Type>
  <Examples>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team defaced approximately 15,000 websites belonging to Georgian government, non-government, and private sector organizations in 2019.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1053" name="Data Backup">
    Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1140" name="Deobfuscate/Decode Files or Information">
  Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Host Intrusion Prevention Systems, Network Intrusion Detection System, Signature-based Detection
  </Defense_Bypassed>
  <Examples>
   <Example id="S0469" name="ABK">
    ABK has the ability to decrypt AES encrypted payloads.
   </Example>
   <Example id="S1028" name="Action RAT">
    Action RAT can use Base64 to decode actor-controlled C2 server communications.
   </Example>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla has the ability to decrypt strings encrypted with the Rijndael symmetric encryption algorithm.
   </Example>
   <Example id="S1025" name="Amadey">
    Amadey has decoded antivirus name strings.
   </Example>
   <Example id="S0584" name="AppleJeus">
    AppleJeus has decoded files received from a C2.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed can decode its payload prior to execution.
   </Example>
   <Example id="G0073" name="APT19">
    An APT19 HTTP malware variant decrypts strings using single-byte XOR keys.
   </Example>
   <Example id="G0007" name="APT28">
    An APT28 macro uses the command certutil -decode to decode contents of a .txt file storing the base64 encoded payload.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 used 7-Zip to decode its Raindrop malware.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used malware to decrypt encrypted CAB files.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has the ability to decrypt the loader configuration and payload DLL.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth uses a fromCharCode() deobfuscation method to avoid explicitly writing execution commands and to hide its code.
   </Example>
   <Example id="S0347" name="AuditCred">
    AuditCred uses XOR and RC4 to perform decryption on the code functions.
   </Example>
   <Example id="S0640" name="Avaddon">
    Avaddon has decrypted encrypted strings.
   </Example>
   <Example id="S0473" name="Avenger">
    Avenger has the ability to decrypt files downloaded from C2.
   </Example>
   <Example id="S0344" name="Azorult">
    Azorult uses an XOR key to decrypt content and uses Base64 to decode the C2 address.
   </Example>
   <Example id="S0638" name="Babuk">
    Babuk has the ability to unpack itself into memory using XOR.
   </Example>
   <Example id="S0414" name="BabyShark">
    BabyShark has the ability to decode downloaded files prior to execution.
   </Example>
   <Example id="S0475" name="BackConfig">
    BackConfig has used a custom routine to decrypt strings.
   </Example>
   <Example id="S0642" name="BADFLICK">
    BADFLICK can decode shellcode using a custom rotating XOR cipher.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook has decoded its PowerShell script.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot decodes embedded XOR strings.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can decrypt downloaded payloads. Bazar also resolves strings and other artifacts at runtime.
   </Example>
   <Example id="S0470" name="BBK">
    BBK has the ability to decrypt AES encrypted payloads.
   </Example>
   <Example id="S0127" name="BBSRAT">
    BBSRAT uses Expand to decompress a CAB file into executable content.
   </Example>
   <Example id="S0574" name="BendyBear">
    BendyBear has decrypted function blocks using a XOR key during runtime to evade detection.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has decoded strings in the malware using XOR and RC4.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has used AES and XOR to decrypt its DLLs.
   </Example>
   <Example id="S0635" name="BoomBox">
    BoomBox can decrypt AES-encrypted files downloaded from C2.
   </Example>
   <Example id="S0415" name="BOOSTWRITE">
    BOOSTWRITE has used a a 32-byte long multi-XOR key to decode data inside its payload.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER downloads encoded payloads and decodes them on the victim.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can deobfuscate C2 server responses and unpack its code on targeted hosts.
   </Example>
   <Example id="S0482" name="Bundlore">
    Bundlore has used openssl to decrypt AES encrypted payload data. Bundlore has also used base64 and RC4 with a hardcoded key to deobfuscate data.
   </Example>
   <Example id="S0335" name="Carbon">
    Carbon decrypts task and configuration files for execution.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT decodes many of its artifacts and is decrypted (AES-128) after being downloaded.
   </Example>
   <Example id="S0160" name="certutil">
    certutil has been used to decode binaries hidden inside certificate files as Base64 information.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes has decrypted an AES encrypted binary file to trigger the download of other files.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower can decrypt downloaded modules prior to execution.
   </Example>
   <Example id="S1041" name="Chinoxy">
    The Chinoxy dropping function can initiate decryption of its config file.
   </Example>
   <Example id="S0667" name="Chrommme">
    Chrommme can decrypt its encrypted internal code.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can deobfuscate its payload prior to execution.
   </Example>
   <Example id="S0611" name="Clop">
    Clop has used a simple XOR operation to decrypt strings.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can deobfuscate shellcode using a rolling XOR and decrypt metadata from Beacon sessions.
   </Example>
   <Example id="S0369" name="CoinTicker">
    CoinTicker decodes the initially-downloaded hidden encoded file using OpenSSL.
   </Example>
   <Example id="S0126" name="ComRAT">
    ComRAT has used unique per machine passwords to decrypt the orchestrator payload and a hardcoded XOR key to decrypt its communications module. ComRAT has also used a unique password to decrypt the file used for its hidden file system.
   </Example>
   <Example id="S0575" name="Conti">
    Conti has decrypted its payload using a hardcoded AES-256 key.
   </Example>
   <Example id="S0492" name="CookieMiner">
    CookieMiner has used Google Chrome's decryption and extraction operations.
   </Example>
   <Example id="S0614" name="CostaBricks">
    CostaBricks has the ability to use bytecode to decrypt embedded payloads.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson can decode its encoded PE file prior to execution.
   </Example>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink can decrypt and parse instructions sent from C2.
   </Example>
   <Example id="S1014" name="DanBot">
    DanBot can use a VBA macro to decode its payload prior to installation and execution.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel has decrypted strings and imports using RC4 during execution.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman has the ability to self-extract as a RAR archive.
   </Example>
   <Example id="S0255" name="DDKONG">
    DDKONG decodes an embedded configuration using XOR.
   </Example>
   <Example id="S0354" name="Denis">
    Denis will decrypt important strings used for C&amp;C communication.
   </Example>
   <Example id="S0547" name="DropBook">
    DropBook can unarchive data downloaded from the C2 to obtain the payload and persistence modules.
   </Example>
   <Example id="S0502" name="Drovorub">
    Drovorub has de-obsfuscated XOR encrypted payloads in WebSocket messages.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack has used a decryption routine that is part of an executable physical patch.
   </Example>
   <Example id="S0024" name="Dyre">
    Dyre decrypts resources needed for targeting the victim.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has used certutil to decode a string into a cabinet file.
   </Example>
   <Example id="S0377" name="Ebury">
    Ebury has verified C2 domain ownership by decrypting the TXT record using an embedded RSA public key.
   </Example>
   <Example id="S0624" name="Ecipekac">
    Ecipekac has the ability to decrypt fileless loader modules.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor has been decrypted before execution.
   </Example>
   <Example id="S0634" name="EnvyScout">
    EnvyScout can deobfuscate and write malicious ISO files to disk.
   </Example>
   <Example id="S0401" name="Exaramel for Linux">
    Exaramel for Linux can decrypt its configuration file.
   </Example>
   <Example id="S0361" name="Expand">
    Expand can be used to decompress a local or remote CAB file into an executable.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke can decrypt AES encrypted C2 communications.
   </Example>
   <Example id="S0355" name="Final1stspy">
    Final1stspy uses Python code to deobfuscate base64-encoded strings.
   </Example>
   <Example id="S0182" name="FinFisher">
    FinFisher extracts and decrypts stage 3 malware, which is stored in encrypted resources.
   </Example>
   <Example id="S0618" name="FIVEHANDS">
    FIVEHANDS has the ability to decrypt its payload prior to execution.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb can be decrypted in memory using a Lightweight Encryption Algorithm (LEA)-128 key and decoded using a XOR key.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors deobfuscated Base64-encoded commands following the execution of a malicious script, which revealed a small script designed to obtain an additional payload.
   </Example>
   <Example id="S0628" name="FYAnti">
    FYAnti has the ability to decrypt an embedded .NET module.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group tools decrypted additional payloads from the C2. Gamaredon Group has also decoded base64-encoded source code of a downloader.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can decompress and decrypt DLLs and shellcode.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT has decrypted and loaded the gh0st RAT DLL into memory, once the initial dropper executable is launched.
   </Example>
   <Example id="S0588" name="GoldMax">
    GoldMax has decoded and decrypted the configuration file when executed.
   </Example>
   <Example id="S0477" name="Goopy">
    Goopy has used a polymorphic decryptor to decrypt itself at runtime.
   </Example>
   <Example id="G0078" name="Gorgon Group">
    Gorgon Group malware can decode contents from a payload that was Base64 encoded and write the contents to a file.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can decrypt its encrypted internal strings.
   </Example>
   <Example id="S0690" name="Green Lambert">
    Green Lambert can use multiple custom routines to decrypt strings prior to execution.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent can use a decryption algorithm for strings based on Rotate on Right (RoR) and Rotate on Left (RoL) functionality.
   </Example>
   <Example id="S0499" name="Hancitor">
    Hancitor has decoded Base64 encoded URLs to insert a recipient’s name into the filename of the Word document. Hancitor has also extracted executables from ZIP files.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper can decompress and copy driver files using LZCopy.
   </Example>
   <Example id="S1027" name="Heyoka Backdoor">
    Heyoka Backdoor can decrypt its payload prior to execution.
   </Example>
   <Example id="S0394" name="HiddenWasp">
    HiddenWasp uses a cipher to implement a decoding function.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa used certutil to decode Base64 binaries at runtime and a 16-byte XOR key to decrypt data.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has decrypted ELF files with AES.
   </Example>
   <Example id="S0398" name="HyperBro">
    HyperBro can unpack and decrypt its payload prior to execution.
   </Example>
   <Example id="S1022" name="IceApple">
    IceApple can use a Base64-encoded AES key to decrypt tasking.
   </Example>
   <Example id="S0434" name="Imminent Monitor">
    Imminent Monitor has decoded malware components that are then dropped to the system.
   </Example>
   <Example id="S0604" name="Industroyer">
    Industroyer decrypts code to connect to a remote C2 server.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can decrypt, unpack and load a DLL from its resources, or from blobs encrypted with Data Protection API, two-key triple DES, and variations of the XOR cipher.
   </Example>
   <Example id="S0581" name="IronNetInjector">
    IronNetInjector has the ability to decrypt embedded .NET and PE payloads.
   </Example>
   <Example id="S0189" name="ISMInjector">
    ISMInjector uses the certutil command to decode a payload file.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has deobfuscated Base64-encoded shellcode strings prior to loading them.
   </Example>
   <Example id="S0585" name="Kerrdown">
    Kerrdown can decode, decrypt, and decompress multiple layers of shellcode.
   </Example>
   <Example id="S0487" name="Kessel">
    Kessel has decrypted the binary's configuration once the main function was launched.
   </Example>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY can decrypt encrypted strings and write them to a newly created folder.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has decoded malicious VBScripts using Base64.
   </Example>
   <Example id="S0641" name="Kobalos">
    Kobalos decrypts strings right after the initial communication, but before the authentication process.
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS has deobfuscated itself before executing its commands.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has used certutil to download and decode base64 encoded strings and has also devoted a custom section to performing all the components of the deobfuscation process.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs decrypts and extracts a copy of its main DLL payload when executing.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used shellcode within macros to decrypt and manually map DLLs and shellcode into memory at runtime.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has used a DLL known as SeDll to decrypt and execute other JavaScript backdoors.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron has used AES and XOR to decrypt configuration files and commands.
   </Example>
   <Example id="S0513" name="LiteDuke">
    LiteDuke has the ability to decrypt and decode multiple layers of obfuscation.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar can decrypt its configuration data.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has decoded and decrypted its stages multiple times using hard-coded keys to deliver the final payload, and has decoded its server response hex string using XOR.
   </Example>
   <Example id="S0582" name="LookBack">
    LookBack has a function that decrypts malicious data.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can decrypt its C2 address upon execution.
   </Example>
   <Example id="S0409" name="Machete">
    Machete’s downloaded data is decrypted using AES.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa decrypts a downloaded file using AES-128-EBC with a custom delta.
   </Example>
   <Example id="S0576" name="MegaCortex">
    MegaCortex has used a Base64 key to decode its components.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used certutil in a macro to decode base64-encoded content contained in a dropper document attached to an email. The group has also used certutil -decode to decode files on the victim’s machine when dropping UPPERCUT.
   </Example>
   <Example id="S0443" name="MESSAGETAP">
    After checking for the existence of two files, keyword_parm.txt and parm.txt, MESSAGETAP XOR decodes and read the contents of the files.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Upon execution, Metamorfo has unzipped itself after being downloaded to the system and has performed string decryption.
   </Example>
   <Example id="S0280" name="MirageFox">
    MirageFox has a function for decrypting data containing C2 configuration information.
   </Example>
   <Example id="G0021" name="Molerats">
    Molerats decompresses ZIP files once on the victim machine.
   </Example>
   <Example id="S1026" name="Mongall">
    Mongall has the ability to decrypt its payload prior to execution.
   </Example>
   <Example id="S0284" name="More_eggs">
    More_eggs will decode malware components that are then dropped to the system.
   </Example>
   <Example id="S1047" name="Mori">
    Mori can resolve networking APIs from strings that are ADD-encrypted.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater decoded base64-encoded PowerShell commands using a VBS file.
   </Example>
   <Example id="S0637" name="NativeZone">
    NativeZone can decrypt and decode embedded  Cobalt Strike beacon stage shellcode.
   </Example>
   <Example id="S0457" name="Netwalker">
    Netwalker's PowerShell script can decode and decrypt multiple layers of obfuscation, leading to the Netwalker DLL being loaded into memory.
   </Example>
   <Example id="S0353" name="NOKKI">
    NOKKI uses a unique, custom de-obfuscation technique.
   </Example>
   <Example id="G0049" name="OilRig">
    A OilRig macro has run a PowerShell command to decode file contents. OilRig has also used certutil to decode base64-encoded files on victims.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum's loader can decrypt the backdoor code, embedded within the loader or within a legitimate PNG file. A custom XOR cipher or RC4 is used for decryption.
   </Example>
   <Example id="S0052" name="OnionDuke">
    OnionDuke can use a custom decryption algorithm to decrypt strings.
   </Example>
   <Example id="S0264" name="OopsIE">
    OopsIE concatenates then decompresses multiple resources to load an embedded .Net Framework assembly.
   </Example>
   <Example id="C0016" name="Operation Dust Storm">
    During Operation Dust Storm, attackers used VBS code to decode payloads.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, malicious files were decoded prior to execution.
   </Example>
   <Example id="C0005" name="Operation Spalax">
    For Operation Spalax, the threat actors used a variety of packers and droppers to decrypt malicious payloads.
   </Example>
   <Example id="S0402" name="OSX/Shlayer">
    OSX/Shlayer can base64-decode and AES-decrypt downloaded payloads.
   </Example>
   <Example id="S0598" name="P.A.S. Webshell">
    P.A.S. Webshell can use a decryption mechanism to process a user supplied password and allow execution.
   </Example>
   <Example id="S1050" name="PcShare">
    PcShare has decrypted its strings by applying a XOR operation and a decompression using a custom implemented LZM algorithm.
   </Example>
   <Example id="S0517" name="Pillowmint">
    Pillowmint has been decompressed by included shellcode prior to being launched.
   </Example>
   <Example id="S1031" name="PingPull">
    PingPull can decrypt received data from its C2 server by using AES.
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon can decrypt password-protected executables.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX decompresses and decrypts itself using the Microsoft API call RtlDecompressBuffer.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has used LZMA and base64 libraries to decode obfuscated scripts.
   </Example>
   <Example id="S0518" name="PolyglotDuke">
    PolyglotDuke can use a custom algorithm to decrypt strings used by the malware.
   </Example>
   <Example id="S1012" name="PowerLess">
    PowerLess can use base64 and AES ECB decryption prior to execution of downloaded modules.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS can deobfuscate the main backdoor code.
   </Example>
   <Example id="S1046" name="PowGoop">
    PowGoop can decrypt PowerShell scripts for execution.
   </Example>
   <Example id="S0279" name="Proton">
    Proton uses an encrypted file to store commands and configuration values.
   </Example>
   <Example id="S0613" name="PS1">
    PS1 can use an XOR key to decrypt a PowerShell loader and payload binary.
   </Example>
   <Example id="S0147" name="Pteranodon">
    Pteranodon can decrypt encrypted data strings prior to using them.
   </Example>
   <Example id="S0196" name="PUNCHBUGGY">
    PUNCHBUGGY has used PowerShell to decode base64-encoded assembly.
   </Example>
   <Example id="S1032" name="PyDCrypt">
    PyDCrypt has decrypted and dropped the DCSrv payload to disk.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can deobfuscate and re-assemble code strings for execution.
   </Example>
   <Example id="S0269" name="QUADAGENT">
    QUADAGENT uses AES and a preshared key to decrypt the custom Base64 routine used to encode strings and scripts.
   </Example>
   <Example id="S0565" name="Raindrop">
    Raindrop decrypted its Cobalt Strike payload using an AES-256 encryption algorithm in CBC mode with a unique key per sample.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay can decrypt its payload via a XOR key.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can extract its agent from the body of a malicious document.
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT can deobfuscate the base64-encoded and AES-encrypted files downloaded from the C2 server.
   </Example>
   <Example id="S0511" name="RegDuke">
    RegDuke can decrypt strings with a key either stored in the Registry or hardcoded in the code.
   </Example>
   <Example id="S0375" name="Remexi">
    Remexi decrypts the configuration data using XOR with 25-character keys.
   </Example>
   <Example id="S0496" name="REvil">
    REvil can decode encrypted strings to enable execution of commands and payloads.
   </Example>
   <Example id="S0258" name="RGDoor">
    RGDoor decodes Base64 strings and decrypts strings using a custom XOR algorithm.
   </Example>
   <Example id="S0448" name="Rising Sun">
    Rising Sun has decrypted itself using a single-byte XOR scheme. Additionally, Rising Sun can decrypt its configuration data at runtime.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has extracted tar.gz files after downloading them from a C2 server.
   </Example>
   <Example id="S0270" name="RogueRobin">
    RogueRobin decodes an embedded executable using base64 and decompresses it.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can decrypt strings using the victim's hostname as the key.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot can deobfuscate strings and files for execution.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team's VBS backdoor can decode Base64-encoded data and save it to the %TEMP% folder. The group also decrypted received information using the Triple DES algorithm and decompresses it using GZip.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has the ability to decrypt and decompress its payload to enable code execution.
   </Example>
   <Example id="S0596" name="ShadowPad">
    ShadowPad has decrypted a binary blob to start execution.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon decrypts ciphertext using an XOR cipher and a base64-encoded string.
   </Example>
   <Example id="S1019" name="Shark">
    Shark can extract and decrypt downloaded .zip files.
   </Example>
   <Example id="S0546" name="SharpStage">
    SharpStage has decompressed data received from the C2 server.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat has decompressed its core DLL using shellcode once an impersonated antivirus component was running on a system.
   </Example>
   <Example id="S0589" name="Sibot">
    Sibot can decrypt data received from a C2 and save to a file.
   </Example>
   <Example id="S0610" name="SideTwist">
    SideTwist can decode and decrypt messages received from C2.
   </Example>
   <Example id="S0623" name="Siloscape">
    Siloscape has decrypted the password of the C2 server with a simple byte by byte XOR. Siloscape also writes both an archive of Tor and the unzip binary to disk from data embedded within the payload using Visual Studio’s Resource Manager.
   </Example>
   <Example id="S0468" name="Skidmap">
    Skidmap has the ability to download, unpack, and decrypt tar.gz files .
   </Example>
   <Example id="S0226" name="Smoke Loader">
    Smoke Loader deobfuscates its code.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT can run upload to decrypt and upload files from storage.
   </Example>
   <Example id="S0516" name="SoreFang">
    SoreFang can decode and decrypt exfiltrated data sent to C2.
   </Example>
   <Example id="S0543" name="Spark">
    Spark has used a custom XOR algorithm to decrypt the payload.
   </Example>
   <Example id="S0390" name="SQLRat">
    SQLRat has scripts that are responsible for deobfuscating additional scripts.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has decrypted files and payloads using a XOR-based algorithm.
   </Example>
   <Example id="S0188" name="Starloader">
    Starloader decrypts and executes shellcode from a file called Stars.jps.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet decrypts resources that are loaded into memory and executed.
   </Example>
   <Example id="S0562" name="SUNSPOT">
    SUNSPOT decrypts SUNBURST, which was stored in AES128-CBC encrypted blobs.
   </Example>
   <Example id="S0663" name="SysUpdate">
    SysUpdate can deobfuscate packed binaries in memory.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has decrypted packed DLLs with an XOR key.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor can use a stream cipher to decrypt stings used by the malware.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has used a script that decodes a Base64-encoded version of WeaveWorks Scope.
   </Example>
   <Example id="S0560" name="TEARDROP">
    TEARDROP was decoded using a custom rolling XOR algorithm to execute a customized Cobalt Strike payload.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    During execution, Threat Group-3390 malware deobfuscates and decompresses code that was encoded with Metasploit’s shikata_ga_nai encoder as well as compressed with LZNT1 compression.
   </Example>
   <Example id="S0665" name="ThreatNeedle">
    ThreatNeedle can decrypt its payload using RC4, AES, or one-byte XORing.
   </Example>
   <Example id="S0678" name="Torisma">
    Torisma has used XOR and Base64 to decode C2 data.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot decodes the configuration data and modules.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper used shellcode with an XOR algorithm to decrypt a payload. Tropic Trooper also decrypted image files which contained a payload.
   </Example>
   <Example id="S0436" name="TSCookie">
    TSCookie has the ability to decrypt, load, and execute a DLL and its resources.
   </Example>
   <Example id="S0647" name="Turian">
    Turian has the ability to use a XOR decryption key to extract C2 server domains and IP addresses.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used a custom decryption routine, which pulls key and salt values from other artifacts such as a WMI filter or PowerShell Profile, to decode encrypted PowerShell payloads.
   </Example>
   <Example id="S0263" name="TYPEFRAME">
    One TYPEFRAME variant decrypts an archive using an RC4 key, then decompresses and installs the decrypted malicious DLL module. Another variant decodes the embedded file by XORing it with the value "0x35".
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has used crypto key information stored in the Registry to decrypt Tor clients dropped to disk.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has the ability to decode and decrypt downloaded files.
   </Example>
   <Example id="S0636" name="VaporRage">
    VaporRage can deobfuscate XOR-encoded shellcode prior to execution.
   </Example>
   <Example id="S0257" name="VERMIN">
    VERMIN decrypts code, strings, and commands to use once it's on the victim's machine.
   </Example>
   <Example id="S0180" name="Volgmer">
    Volgmer deobfuscates its strings and APIs once its executed.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT can use XOR 0x45 to decrypt obfuscated code.
   </Example>
   <Example id="S0612" name="WastedLocker">
    WastedLocker's custom cryptor, CryptOne, used an XOR based algorithm to decrypt the payload.
   </Example>
   <Example id="S0579" name="Waterbear">
    Waterbear has the ability to decrypt its RC4 encrypted payload for execution.
   </Example>
   <Example id="S0515" name="WellMail">
    WellMail can decompress scripts received from C2.
   </Example>
   <Example id="S0514" name="WellMess">
    WellMess can decode and decrypt data received from C2.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can deobfuscate downloaded files stored in reverse byte order and decrypt embedded resources using multiple XOR operations.
   </Example>
   <Example id="S0466" name="WindTail">
    WindTail has the ability to decrypt strings using hard-coded AES keys.
   </Example>
   <Example id="S0430" name="Winnti for Linux">
    Winnti for Linux has decoded XOR encoded strings holding its configuration upon execution.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    The Winnti for Windows dropper can decrypt and decompresses a data blob.
   </Example>
   <Example id="G0090" name="WIRTE">
    WIRTE has used Base64 to decode malicious VBS script.
   </Example>
   <Example id="S0653" name="xCaon">
    xCaon has decoded strings from the C2 server before executing commands.
   </Example>
   <Example id="S0388" name="YAHOYAH">
    YAHOYAH decrypts downloaded files before execution.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy decodes its secondary payload and writes it to the victim’s machine. Zebrocy also uses AES and XOR to decrypt strings and payloads.
   </Example>
   <Example id="S0230" name="ZeroT">
    ZeroT shellcode decrypts and decompresses its RC4-encrypted payload.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda decrypts strings in the code during the execution process.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has used the AES256 algorithm with a SHA1 derived key to decrypt exploit code.
   </Example>
   <Example id="S1013" name="ZxxZ">
    ZxxZ has used a XOR key to decrypt strings.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1610" name="Deploy Container">
  Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment.
  <Tactics>
   Defense Evasion, Execution
  </Tactics>
  <Platforms>
   Containers
  </Platforms>
  <Permissions_Required>
   User, root
  </Permissions_Required>
  <Supports_Remote>
   Yes
  </Supports_Remote>
  <Examples>
   <Example id="S0600" name="Doki">
    Doki was run through a deployed container.
   </Example>
   <Example id="S0599" name="Kinsing">
    Kinsing was run through a deployed Ubuntu container.
   </Example>
   <Example id="S0683" name="Peirates">
    Peirates can deploy a pod that mounts its node’s root file system, then execute a command to create a reverse shell on the node.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has deployed different types of containers into victim environments to facilitate execution.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Scan images before deployment, and block those that are not in compliance with security policies. In Kubernetes environments, the admission controller can be used to validate images after a container deployment request is authenticated but before the container is deployed.
   </Mitigation>
   <Mitigation id="M1035" name="Limit Access to Resource Over Network">
    Limit communications with the container service to local Unix sockets or remote access via SSH. Require secure port access to communicate with the APIs over TLS by disabling unauthenticated access to the Docker API, Kubernetes API Server, and container orchestration web applications.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Enforce the principle of least privilege by limiting container dashboard access to only the necessary users.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0032" name="Container">
    Container Creation | Container Start
   </Detection>
   <Detection id="DS0014" name="Pod">
    Pod Creation | Pod Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1587" name="Develop Capabilities">
  Adversaries may build capabilities that can be used during targeting. Rather than purchasing, freely downloading, or stealing capabilities, adversaries may develop their own capabilities in-house. This is the process of identifying development requirements and building solutions such as malware, exploits, and self-signed certificates. Adversaries may develop capabilities to support their operations throughout numerous phases of the adversary lifecycle.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0094" name="Kimsuky">
    Kimsuky created and used a mailing toolkit to use in spearphishing attacks.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content
   </Detection>
   <Detection id="DS0004" name="Malware Repository">
    Malware Content | Malware Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1587.001" name="Develop Capabilities: Malware">
  Adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G1007" name="Aoqin Dragon">
    Aoqin Dragon has used custom malware, including Mongall and Heyoka Backdoor, in their operations.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has leveraged numerous pieces of malware that appear to be unique to APT29 and were likely developed for or by the group.
   </Example>
   <Example id="C0010" name="C0010">
    For C0010, UNC3890 actors used unique malware, including SUGARUSH and SUGARDUMP.
   </Example>
   <Example id="G0003" name="Cleaver">
    Cleaver has created customized tools and payloads for functions including ARP poisoning, encryption, credential dumping, ASP.NET shells, web backdoors, process enumeration, WMI querying, HTTP and SMB communications, network interface sniffing, and keystroke logging.
   </Example>
   <Example id="C0004" name="CostaRicto">
    For CostaRicto, the threat actors used custom malware, including PS1, CostaBricks, and SombRAT.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has developed malware for use in operations, including the creation of infected removable media.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has developed custom malware that allowed them to maintain persistence on victim networks.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has developed its own unique malware such as MailFetch.py for use in operations.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has developed custom malware for use in their operations.
   </Example>
   <Example id="G1009" name="Moses Staff">
    Moses Staff has built malware, such as DCSrv and PyDCrypt, for targeting victims' machines.
   </Example>
   <Example id="C0013" name="Operation Sharpshooter">
    For Operation Sharpshooter, the threat actors used the Rising Sun modular backdoor.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors developed their own custom webshells to upload to compromised servers.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has developed malware for its operations, including malicious mobile applications and destructive malware such as NotPetya and Olympic Destroyer.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has developed custom malware such as Hildegard.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has developed its own unique malware for use in operations.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0004" name="Malware Repository">
    Malware Content | Malware Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1587.002" name="Develop Capabilities: Code Signing Certificates">
  Adversaries may create self-signed code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with. Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0040" name="Patchwork">
    Patchwork has created self-signed certificates from fictitious and spoofed legitimate software companies that were later used to sign malware.
   </Example>
   <Example id="G0056" name="PROMETHIUM">
    PROMETHIUM has created self-signed certificates to sign malicious installers.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0004" name="Malware Repository">
    Malware Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1587.003" name="Develop Capabilities: Digital Certificates">
  Adversaries may create self-signed SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner. In the case of self-signing, digital certificates will lack the element of trust associated with the signature of a third-party certificate authority (CA).
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 has created self-signed digital certificates to enable mutual TLS authentication for malware.
   </Example>
   <Example id="C0011" name="C0011">
    For C0011, Transparent Tribe established SSL certificates on the typo-squatted domains the group registered.
   </Example>
   <Example id="G0056" name="PROMETHIUM">
    PROMETHIUM has created self-signed digital certificates for use in HTTPS C2 traffic.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1587.004" name="Develop Capabilities: Exploits">
  Adversaries may develop exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than finding/modifying exploits from online or purchasing them from exploit vendors, an adversary may develop their own exploits.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the use of exploits (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).
  </Detections>
 </Technique>
 <Technique id="T1006" name="Direct Volume Access">
  Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique bypasses Windows file access controls as well as file system monitoring tools.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Defense_Bypassed>
   File monitoring, File system access controls
  </Defense_Bypassed>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0016" name="Drive">
    Drive Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1561" name="Disk Wipe">
  Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Impact_Type>
   Availability
  </Impact_Type>
  <Mitigations>
   <Mitigation id="M1053" name="Data Backup">
    Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0016" name="Drive">
    Drive Access | Drive Modification
   </Detection>
   <Detection id="DS0027" name="Driver">
    Driver Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1561.001" name="Disk Wipe: Disk Content Wipe">
  Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Impact_Type>
   Availability
  </Impact_Type>
  <Examples>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper has the ability to corrupt disk partitions and obtain raw disk access to destroy data.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used malware like WhiskeyAlfa to overwrite the first 64MB of every drive with a mix of static and random buffers. A similar process is then used to wipe content in logical drives and, finally, attempt to wipe every byte of every sector on every drive. WhiskeyBravo can be used to overwrite the first 4.9MB of physical drives. WhiskeyDelta can overwrite the first 132MB or 1.5MB of each drive with random data from heap memory.
   </Example>
   <Example id="S0576" name="MegaCortex">
    MegaCortex can wipe deleted data from all drives using cipher.exe.
   </Example>
   <Example id="S0364" name="RawDisk">
    RawDisk has been used to directly access the hard disk to help overwrite arbitrarily sized portions of disk content.
   </Example>
   <Example id="S0380" name="StoneDrill">
    StoneDrill can wipe the accessible physical or logical drives of the infected machine.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can overwrite sectors of a victim host's hard drive at periodic offsets.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1053" name="Data Backup">
    Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0016" name="Drive">
    Drive Access | Drive Modification
   </Detection>
   <Detection id="DS0027" name="Driver">
    Driver Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1561.002" name="Disk Wipe: Disk Structure Wipe">
  Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User, root
  </Permissions_Required>
  <Impact_Type>
   Availability
  </Impact_Type>
  <Examples>
   <Example id="G0067" name="APT37">
    APT37 has access to destructive malware that is capable of overwriting a machine's Master Boot Record (MBR).
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has used a custom MBR wiper named BOOTWRECK to render systems inoperable.
   </Example>
   <Example id="S0693" name="CaddyWiper">
    CaddyWiper has the ability to destroy information about a physical drive's partitions including the MBR, GPT, and partition entries.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper has the ability to corrupt disk partitions, damage the Master Boot Record (MBR), and overwrite the Master File Table (MFT) of all available physical drives.
   </Example>
   <Example id="S0607" name="KillDisk">
    KillDisk overwrites the first sector of the Master Boot Record with "0x00".
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group malware SHARPKNOT overwrites and deletes the Master Boot Record (MBR) on the victim's machine and has possessed MBR wiper malware since at least 2009.
   </Example>
   <Example id="S0364" name="RawDisk">
    RawDisk was used in Shamoon to help overwrite components of disk structure like the MBR and disk partitions.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used the BlackEnergy KillDisk component to corrupt the infected system's master boot record.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon has been seen overwriting features of disk structure such as the MBR.
   </Example>
   <Example id="S0380" name="StoneDrill">
    StoneDrill can wipe the master boot record of an infected computer.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can overwrite the Master Book Record (MBR) on victim systems with a malicious 16-bit bootloader.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1053" name="Data Backup">
    Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0016" name="Drive">
    Drive Access | Drive Modification
   </Detection>
   <Detection id="DS0027" name="Driver">
    Driver Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1484" name="Domain Policy Modification">
  Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Azure AD, Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Defense_Bypassed>
   File system access controls, System access controls
  </Defense_Bypassed>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Identify and correct GPO permissions abuse opportunities (ex: GPO modification privileges) using auditing tools such as BloodHound (version 1.5.1 and later).
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Use least privilege and protect administrative access to the Domain Controller and Active Directory Federation Services (AD FS) server. Do not create service accounts with administrative privileges.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Consider implementing WMI and security filtering to further tailor which users and computers a GPO will apply to.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Creation | Active Directory Object Deletion | Active Directory Object Modification
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1484.001" name="Domain Policy Modification: Group Policy Modification">
  Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path \&lt;DOMAIN&gt;\SYSVOL\&lt;DOMAIN&gt;\Policies\.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Examples>
   <Example id="S0554" name="Egregor">
    Egregor can modify the GPO to evade detection.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can use New-GPOImmediateTask to modify a GPO that will install and execute a malicious Scheduled Task/Job.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper has the ability to deploy through an infected system's default domain policy.
   </Example>
   <Example id="G0119" name="Indrik Spider">
    Indrik Spider has used Group Policy Objects to deploy batch scripts.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor can use group policy to push a scheduled task from the AD to all network machines.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Identify and correct GPO permissions abuse opportunities (ex: GPO modification privileges) using auditing tools such as BloodHound (version 1.5.1 and later).
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Consider implementing WMI and security filtering to further tailor which users and computers a GPO will apply to.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Creation | Active Directory Object Deletion | Active Directory Object Modification
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1484.002" name="Domain Policy Modification: Domain Trust Modification">
  Adversaries may add new domain trusts or modify the properties of existing domain trusts to evade defenses and/or elevate privileges. Domain trust details, such as whether or not a domain is federated, allow authentication and authorization properties to apply between domains for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Azure AD, Windows
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals can create a backdoor by converting a domain to a federated domain which will be able to authenticate any user across the tenant. AADInternals can also modify DesktopSSO information.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 changed domain federation trust settings using Azure AD administrative permissions to configure the domain to accept authorization tokens signed by their own SAML signing certificate.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1026" name="Privileged Account Management">
    Use the principal of least privilege and protect administrative access to domain trusts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Creation | Active Directory Object Modification
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1482" name="Domain Trust Discovery">
  Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Examples>
   <Example id="S0552" name="AdFind">
    AdFind can gather information about organizational units (OUs) and domain trusts from Active Directory.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 used the Get-AcceptedDomain PowerShell cmdlet to enumerate accepted domains through an Exchange Management Shell.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can use Nltest tools to obtain information about the domain.
   </Example>
   <Example id="S0521" name="BloodHound">
    BloodHound has the ability to map domain trusts and identify misconfigurations for potential abuse.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors used the command nltest /domain_trusts /all_trusts to enumerate domain trusts.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has nltest /domain_trusts to identify domain trust relationships.
   </Example>
   <Example id="S0105" name="dsquery">
    dsquery can be used to gather information on domain trusts with dsquery * -filter "(objectClass=trustedDomain)" -attr *.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has used Nltest to obtain information about domain controllers.
   </Example>
   <Example id="S0363" name="Empire">
    Empire has modules for enumerating domain trusts.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has retrieved a list of trusted domains by using Nltest.exe /domain_trusts.
   </Example>
   <Example id="S0359" name="Nltest">
    Nltest may be used to enumerate trusted domains by using commands such as nltest /domain_trusts.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 has modules for enumerating domain trusts.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit has modules such as Get-NetDomainTrust and Get-NetForestTrust to enumerate domain and forest trusts.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can run nltest /domain_trusts /all_trusts for domain trust discovery.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot can gather information about domain trusts by utilizing Nltest.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Map the trusts within existing domains/forests and keep trust relationships to a minimum.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Employ network segmentation for sensitive domains..
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1189" name="Drive-by Compromise">
  Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token.
  <Tactic>
   Initial Access
  </Tactic>
  <Platforms>
   Linux, SaaS, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0138" name="Andariel">
    Andariel has used watering hole attacks, often with zero-day exploits, to gain initial access to victims within a specific IP range.
   </Example>
   <Example id="G0073" name="APT19">
    APT19 performed a watering hole attack on forbes.com in 2014 to compromise targets.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has compromised targets via strategic web compromise utilizing custom exploit kits.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has infected victims by tricking them into visiting compromised watering hole websites.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 has used strategic web compromises, particularly of South Korean websites, to distribute malware. The group has also used torrent file-sharing sites to more indiscriminately disseminate malware to victims. As part of their compromises, the group has used a Javascript based profiler called RICECURRY to profile a victim's web browser and deliver malicious code accordingly.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has conducted watering holes schemes to gain initial access to victims.
   </Example>
   <Example id="G0001" name="Axiom">
    Axiom has used watering hole attacks to gain access.
   </Example>
   <Example id="S0606" name="Bad Rabbit">
    Bad Rabbit spread through watering holes on popular sites by injecting JavaScript into the HTML body or a .js file.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER compromised three Japanese websites using a Flash exploit to perform watering hole attacks.
   </Example>
   <Example id="S0482" name="Bundlore">
    Bundlore has been spread through malicious advertisements on websites.
   </Example>
   <Example id="C0010" name="C0010">
    During C0010, UNC3890 actors likely established a watering hole that was hosted on a login page of a legitimate Israeli shipping company that was active until at least November 2021.
   </Example>
   <Example id="G0070" name="Dark Caracal">
    Dark Caracal leveraged a watering hole to serve up malicious code.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel used embedded iframes on hotel login portals to redirect selected victims to download malware.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has compromised targets via strategic web compromise (SWC) utilizing a custom exploit kit.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has performed watering hole attacks.
   </Example>
   <Example id="G0066" name="Elderwood">
    Elderwood has delivered zero-day exploits and malware to victims by injecting malicious code into specific public Web pages visited by targets within a particular sector.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro has used compromised websites and Google Ads to bait victims into downloading its installer.
   </Example>
   <Example id="S0215" name="KARAE">
    KARAE was distributed through torrent file-sharing websites to South Korean victims, using a YouTube video downloader application as a lure.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group delivered RATANKBA and other malicious code to victims via a compromised legitimate website.
   </Example>
   <Example id="G0077" name="Leafminer">
    Leafminer has infected victims using watering holes.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has infected victims using watering holes.
   </Example>
   <Example id="S0451" name="LoudMiner">
    LoudMiner is typically bundled with pirated copies of Virtual Studio Technology (VST) for Windows and macOS.
   </Example>
   <Example id="G0095" name="Machete">
    Machete has distributed Machete through a fake blog website.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has conducted watering-hole attacks through media and magazine websites.
   </Example>
   <Example id="C0016" name="Operation Dust Storm">
    During Operation Dust Storm, the threat actors used a watering hole attack on a popular software reseller to exploit the then-zero-day Internet Explorer vulnerability CVE-2014-0322.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork has used watering holes to deliver files with exploits to initial victims.
   </Example>
   <Example id="G0068" name="PLATINUM">
    PLATINUM has sometimes used drive-by attacks against vulnerable browser plugins.
   </Example>
   <Example id="S0216" name="POORAIM">
    POORAIM has been delivered through compromised sites acting as watering holes.
   </Example>
   <Example id="G0056" name="PROMETHIUM">
    PROMETHIUM has used watering hole attacks to deliver malicious versions of legitimate installers.
   </Example>
   <Example id="S0496" name="REvil">
    REvil has infected victim machines through compromised websites and exploit kits.
   </Example>
   <Example id="G0048" name="RTM">
    RTM has distributed its malware via the RIG and SUNDOWN exploit kits, as well as online advertising network Yandex.Direct.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has extensively used strategic web compromises to target victims.
   </Example>
   <Example id="G0134" name="Transparent Tribe">
    Transparent Tribe has used websites with malicious hyperlinks and iframes to infect targeted victims with Crimson, njRAT, and other malicious tools.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has infected victims using watering holes.
   </Example>
   <Example id="G0124" name="Windigo">
    Windigo has distributed Windows malware via drive-by downloads.
   </Example>
   <Example id="G0112" name="Windshift">
    Windshift has used compromised websites to register custom URL schemes on a remote system.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1048" name="Application Isolation and Sandboxing">
    Browser sandboxes can be used to mitigate some of the impact of exploitation, but sandbox escapes may still exist.
   </Mitigation>
   <Mitigation id="M1050" name="Exploit Protection">
    Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior.  Many of these protections depend on the architecture and target application binary for compatibility.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    For malicious code served up through ads, adblockers can help prevent that code from executing in the first place.Script blocking extensions can help prevent the execution of JavaScript that may commonly be used during the exploitation process.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Ensure all browsers and plugins kept updated can help prevent the exploit phase of this technique. Use modern browsers with security features turned on.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1568" name="Dynamic Resolution">
  Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 used dynamic DNS resolution to construct and resolve to randomly-generated subdomains for C2.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has used a dynamic DNS service for C2.
   </Example>
   <Example id="G1002" name="BITTER">
    BITTER has used DDNS for C2 communications.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has incorporated dynamic DNS domains in its infrastructure.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can use dynamic DNS domain names in C2.
   </Example>
   <Example id="S0449" name="Maze">
    Maze has forged POST strings with a random choice from a list of possibilities including "forum", "php", "view", etc. while making connection with the C2, hindering detection efforts.
   </Example>
   <Example id="S0034" name="NETEAGLE">
    NETEAGLE can use HTTP to download resources that contain an IP address and port number pair to connect to for C2.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors used dynamic DNS services for C2.
   </Example>
   <Example id="C0016" name="Operation Dust Storm">
    For Operation Dust Storm, the threat actors used dynamic DNS domains from a variety of free providers, including No-IP, Oray, and 3322.
   </Example>
   <Example id="C0005" name="Operation Spalax">
    For Operation Spalax, the threat actors used dynamic DNS services, including Duck DNS and DNS Exit, as part of their C2 infrastructure.
   </Example>
   <Example id="S0148" name="RTM">
    RTM has resolved Pony C2 server IP addresses by either converting Bitcoin blockchain transaction data to specific octets, or accessing IP addresses directly within the Namecoin blockchain.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST dynamically resolved C2 infrastructure for randomly-generated subdomains within a parent domain.
   </Example>
   <Example id="S0671" name="Tomiris">
    Tomiris has connected to a signalization server that provides a URL and port, and then Tomiris sends a GET request to that URL to establish C2.
   </Example>
   <Example id="G0134" name="Transparent Tribe">
    Transparent Tribe has used dynamic DNS services to set up C2.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Malware researchers can reverse engineer malware variants that use dynamic resolution and determine future C2 infrastructure that the malware will attempt to contact, but this is a time and resource intensive effort.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    In some cases a local DNS sinkhole may be used to help prevent behaviors associated with dynamic resolution.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1568.001" name="Dynamic Resolution: Fast Flux DNS">
  Adversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it which are swapped with high frequency, using a combination of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource record.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S1025" name="Amadey">
    Amadey has used fast flux DNS for its C2.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT operators have used dynamic DNS to mask the true location of their C2 behind rapidly changing IP addresses.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used dynamic DNS service providers to host malicious domains.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT has used a fast flux DNS for C2 IP resolution.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used fast flux to mask botnets by distributing payloads across multiple IPs.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1568.002" name="Dynamic Resolution: Domain Generation Algorithms">
  Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0096" name="APT41">
    APT41 has used DGAs to change their C2 servers monthly.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has the ability to use a DGA for C2 communications.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth has used a DGA in C2 communications.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can implement DGA using the current date as a seed variable.
   </Example>
   <Example id="S0360" name="BONDUPDATER">
    BONDUPDATER uses a DGA to communicate with command and control servers.
   </Example>
   <Example id="S0222" name="CCBkdr">
    CCBkdr can use a DGA for Fallback Channels if communications with the primary command and control server are lost.
   </Example>
   <Example id="S0023" name="CHOPSTICK">
    CHOPSTICK can use a DGA for Fallback Channels, domains are generated by concatenating words from lists.
   </Example>
   <Example id="S0608" name="Conficker">
    Conficker has used a DGA that seeds with the current UTC victim system date to generate domains.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman has used a DGA to generate a domain name for C2.
   </Example>
   <Example id="S0600" name="Doki">
    Doki has used the DynDNS service and a DGA based on the Dogecoin blockchain to generate C2 domains.
   </Example>
   <Example id="S0377" name="Ebury">
    Ebury has used a DGA to generate a domain name for C2.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can use a DGA for hiding C2 addresses, including use of an algorithm with a user-specific key that changes daily.
   </Example>
   <Example id="S1015" name="Milan">
    Milan can use hardcoded domains as an input for domain generation algorithms.
   </Example>
   <Example id="S0051" name="MiniDuke">
    MiniDuke can use DGA to generate new Twitter URLs for C2.
   </Example>
   <Example id="S0508" name="Ngrok">
    Ngrok can provide DGA for C2 servers through the use of random URL strings that change every 12 hours.
   </Example>
   <Example id="S0150" name="POSHSPY">
    POSHSPY uses a DGA to derive command and control URLs from a word list.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can use domain generation algorithms in C2 communication.
   </Example>
   <Example id="S0596" name="ShadowPad">
    ShadowPad uses a DGA that is based on the day of the month for C2 servers.
   </Example>
   <Example id="S1019" name="Shark">
    Shark can send DNS C2 communications using a unique domain generation algorithm.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT can use a custom DGA to generate a subdomain for C2.
   </Example>
   <Example id="G0127" name="TA551">
    TA551 has used a DGA to generate URLs from executed macros.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has used a DGA to generate domain names for C2.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Malware researchers can reverse engineer malware variants that use DGAs and determine future domains that the malware will attempt to contact, but this is a time and resource intensive effort. Even so, there can be thousands of possible domains generated per day; this makes it impractical for defenders to preemptively register all possible C2 domains due to the cost.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    In some cases a local DNS sinkhole may be used to help prevent DGA-based command and control at a reduced cost.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1568.003" name="Dynamic Resolution: DNS Calculation">
  Adversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and/or port number calculation can be used to bypass egress filtering on a C2 channel.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0005" name="APT12">
    APT12 has used multiple variants of DNS Calculation including multiplying the first two octets of an IP address and adding the third octet to that value in order to get a resulting command and control port.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1114" name="Email Collection">
  Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Google Workspace, Linux, Office 365, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has compromised email credentials in order to steal sensitive data.
   </Example>
   <Example id="G0122" name="Silent Librarian">
    Silent Librarian has exfiltrated entire mailboxes from compromised accounts.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Enterprise email solutions have monitoring mechanisms that may include the ability to audit auto-forwarding rules on a regular basis.In an Exchange environment, Administrators can use Get-InboxRule to discover and remove potentially malicious auto-forwarding rules.
   </Mitigation>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Use of encryption provides an added layer of security to sensitive information sent over email. Encryption using public key cryptography requires the adversary to obtain the private certificate along with an encryption key to decrypt messages.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use of multi-factor authentication for public-facing webmail servers is a recommended best practice to minimize the usefulness of usernames and passwords to adversaries.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1114.001" name="Email Collection: Local Email Collection">
  Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user’s local system, such as Outlook storage or cache files.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0006" name="APT1">
    APT1 uses two utilities, GETMAIL and MAPIGET, to steal email. GETMAIL extracts emails from archived Outlook .pst files.
   </Example>
   <Example id="S0030" name="Carbanak">
    Carbanak searches recursively for Outlook personal storage tables (PST) files within user directories and sends them back to the C2 server.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has harvested data from victim's e-mail including through execution of wmic /node: process call create "cmd /c copy c:\Users\\\backup.pst c:\windows\temp\backup.pst" copy "i:\\\My Documents\.pst"copy.
   </Example>
   <Example id="S0050" name="CosmicDuke">
    CosmicDuke searches for Microsoft Outlook data files with extensions .pst and .ost for collection and exfiltration.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson contains a command to collect and exfiltrate emails from Outlook.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has been observed leveraging a module that scrapes email data from Outlook.
   </Example>
   <Example id="S0363" name="Empire">
    Empire has the ability to collect emails on a target system.
   </Example>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY can harvest data from mail clients.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has collected .PST archives.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors used RAT malware to exfiltrate email archives.
   </Example>
   <Example id="S0594" name="Out1">
    Out1 can parse e-mails on a target machine.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can interact with a victim’s Outlook session and look through folders and emails.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can target and steal locally stored emails to support thread hijacking phishing campaigns.
   </Example>
   <Example id="S0226" name="Smoke Loader">
    Smoke Loader searches through Outlook files and directories (e.g., inbox, sent, templates, drafts, archives, etc.).
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Use of encryption provides an added layer of security to sensitive information sent over email. Encryption using public key cryptography requires the adversary to obtain the private certificate along with an encryption key to decrypt messages.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1114.002" name="Email Collection: Remote Email Collection">
  Adversaries may target an Exchange server, Office 365, or Google Workspace to collect sensitive information. Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services, Office 365, or Google Workspace to access email using credentials or access tokens. Tools such as MailSniper can be used to automate searches for specific keywords.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Google Workspace, Office 365, Windows
  </Platforms>
  <Examples>
   <Example id="G0006" name="APT1">
    APT1 uses two utilities, GETMAIL and MAPIGET, to steal email. MAPIGET steals email still on Exchange servers that has not yet been archived.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has collected emails from victim Microsoft Exchange servers.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 collected emails from specific individuals, such as executives and IT staff, using New-MailboxExportRequest followed by Get-MailboxExportRequest.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has harvested data from remote mailboxes including through execution of \\c$\Users\\AppData\Local\Microsoft\Outlook*.ost.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has accessed email accounts using Outlook Web Access.
   </Example>
   <Example id="G0085" name="FIN4">
    FIN4 has accessed and hijacked online email communications using stolen credentials.
   </Example>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has used web shells to export mailbox data.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has used compromised credentials and a .NET tool to dump data from Microsoft Exchange mailboxes.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used tools such as the MailFetch mail crawler to collect victim emails (excluding spam) from online services via IMAP.
   </Example>
   <Example id="G0077" name="Leafminer">
    Leafminer used a tool called MailSniper to search through the Exchange server mailboxes for keywords.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron collects Exchange emails matching rules specified in its configuration.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has exported emails from compromised Exchange servers.
   </Example>
   <Example id="S0413" name="MailSniper">
    MailSniper can be used for searching through email in Exchange and Office 365 environments.
   </Example>
   <Example id="S0053" name="SeaDuke">
    Some SeaDuke samples have a module to extract email from Microsoft Exchange servers using compromised credentials.
   </Example>
   <Example id="S0476" name="Valak">
    Valak can collect sensitive mailing information from Exchange servers, including credentials and the domain certificate of an enterprise.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Use of encryption provides an added layer of security to sensitive information sent over email. Encryption using public key cryptography requires the adversary to obtain the private certificate along with an encryption key to decrypt messages.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use of multi-factor authentication for public-facing webmail servers is a recommended best practice to minimize the usefulness of usernames and passwords to adversaries.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1114.003" name="Email Collection: Email Forwarding Rule">
  Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email-forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim’s organization to use as part of further exploits or operations.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Google Workspace, Linux, Office 365, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has set auto-forward rules on victim's e-mail accounts.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has set an Office 365 tenant level mail transport rule to send all mail in and out of the targeted organization to the newly created account.
   </Example>
   <Example id="G0122" name="Silent Librarian">
    Silent Librarian has set up auto forwarding rules on compromised e-mail accounts.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Enterprise email solutions have monitoring mechanisms that may include the ability to audit auto-forwarding rules on a regular basis.In an Exchange environment, Administrators can use Get-InboxRule to discover and remove potentially malicious auto-forwarding rules.
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Consider disabling external email forwarding.
   </Mitigation>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Use of encryption provides an added layer of security to sensitive information sent over email. Encryption using public key cryptography requires the adversary to obtain the private certificate along with an encryption key to decrypt messages.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1573" name="Encrypted Channel">
  Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 has used multiple layers of encryption within malware to protect C2 communication.
   </Example>
   <Example id="G1002" name="BITTER">
    BITTER has encrypted their C2 communications.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes has used encryption for its C2 channel.
   </Example>
   <Example id="S0498" name="Cryptoistic">
    Cryptoistic can engage in encrypted communications with C2.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT has encrypted TCP communications to evade detection.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar can support encrypted communications between the client and server.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa has used TLS encryption to initialize a custom protocol for C2 communications.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can encrypt C2 communications.
   </Example>
   <Example id="S1012" name="PowerLess">
    PowerLess can use an encrypted channel for C2 communications.
   </Example>
   <Example id="S1046" name="PowGoop">
    PowGoop can receive encrypted commands from C2.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession can use an encrypted beacon to check in with C2.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has encrypted traffic with the C2 to prevent network detection.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.
   </Mitigation>
   <Mitigation id="M1020" name="SSL/TLS Inspection">
    SSL/TLS inspection can be used to see the contents of encrypted sessions to look for network-based indicators of malware communication protocols.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1573.001" name="Encrypted Channel: Symmetric Cryptography">
  Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0066" name="3PARA RAT">
    3PARA RAT command and control commands are encrypted within the HTTP C2 channel using the DES algorithm in CBC mode with a key derived from the MD5 hash of the string HYF54&amp;%9&amp;jkMCXuiS. 3PARA RAT will use an 8-byte XOR key derived from the string HYF54&amp;%9&amp;jkMCXuiS if the DES decoding fails
   </Example>
   <Example id="S0065" name="4H RAT">
    4H RAT obfuscates C2 communication using a 1-byte XOR with the key 0xBE.
   </Example>
   <Example id="S0045" name="ADVSTORESHELL">
    A variant of ADVSTORESHELL encrypts some C2 with 3DES.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 installed a Delphi backdoor that used a custom algorithm for C2 communications.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has used AES for encryption of command and control traffic.
   </Example>
   <Example id="S0438" name="Attor">
    Attor has encrypted data symmetrically using a randomly generated Blowfish (OFB) key which is encrypted with a public RSA key.
   </Example>
   <Example id="S0344" name="Azorult">
    Azorult can encrypt C2 traffic using XOR.
   </Example>
   <Example id="S0245" name="BADCALL">
    BADCALL encrypts C2 traffic using an XOR/ADD cipher.
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS encrypts C2 data with a ROR by 3 and an XOR by 0x23.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook has used AES encryption for C2 communication.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can send C2 communications with XOR encryption.
   </Example>
   <Example id="S0127" name="BBSRAT">
    BBSRAT uses a custom encryption algorithm on data sent back to the C2 server over HTTP.
   </Example>
   <Example id="S0574" name="BendyBear">
    BendyBear communicates to a C2 server over port 443 using modified RC4 and XOR-encrypted chunks.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal variants reported on in 2014 and 2015 used a simple XOR cipher for C2. Some Bisonal samples encrypt C2 communications with RC4.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has encrypted its C2 traffic with RC4.
   </Example>
   <Example id="S0486" name="Bonadan">
    Bonadan can XOR-encrypt C2 communications.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has used RC4 encryption (for Datper malware) and AES (for xxmm malware) to obfuscate HTTP traffic. BRONZE BUTLER has also used a tool called RarStar that encodes data with a custom XOR algorithm when posting it to a C2 server.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can encrypt C2 requests and responses with RC4
   </Example>
   <Example id="S0077" name="CallMe">
    CallMe uses AES to encrypt C2 traffic.
   </Example>
   <Example id="S0030" name="Carbanak">
    Carbanak encrypts the message body of HTTP traffic with RC2 (in CBC mode). Carbanak also uses XOR with random keys for its communications.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT uses a secret key with a series of XOR and addition operations to encrypt C2 traffic.
   </Example>
   <Example id="S0220" name="Chaos">
    Chaos provides a reverse shell connection on 8338/TCP, encrypted via AES.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower can send additional modules over C2 encrypted with a simple substitution cipher.
   </Example>
   <Example id="S0144" name="ChChes">
    ChChes can encrypt C2 traffic with AES or RC4.
   </Example>
   <Example id="S0023" name="CHOPSTICK">
    CHOPSTICK encrypts C2 communications with RC4.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike has the ability to use AES-256 symmetric encryption in CBC mode with HMAC-SHA-256 to encrypt task commands and XOR to encrypt shell code and configuration data.
   </Example>
   <Example id="S0244" name="Comnie">
    Comnie encrypts command and control communications with RC4.
   </Example>
   <Example id="S0137" name="CORESHELL">
    CORESHELL C2 messages are encrypted with custom stream ciphers using six-byte or eight-byte keys.
   </Example>
   <Example id="S0050" name="CosmicDuke">
    CosmicDuke contains a custom version of the RC4 algorithm that includes a programming error.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel has used AES-256 and 3DES for C2 communications.
   </Example>
   <Example id="S0187" name="Daserf">
    Daserf uses RC4 encryption to obfuscate HTTP traffic.
   </Example>
   <Example id="S0021" name="Derusbi">
    Derusbi obfuscates C2 traffic with variable 4-byte XOR keys.
   </Example>
   <Example id="S0200" name="Dipsind">
    Dipsind encrypts C2 data with AES256 in ECB mode.
   </Example>
   <Example id="S0472" name="down_new">
    down_new has the ability to AES encrypt C2 communications.
   </Example>
   <Example id="S0134" name="Downdelph">
    Downdelph uses RC4 to encrypt C2 responses.
   </Example>
   <Example id="S0384" name="Dridex">
    Dridex has encrypted traffic with RC4.
   </Example>
   <Example id="S0038" name="Duqu">
    The Duqu command and control protocol's data stream can be encrypted with AES-CBC.
   </Example>
   <Example id="S0377" name="Ebury">
    Ebury has encrypted C2 traffic using the client IP address, then encoded it as a hexadecimal string.
   </Example>
   <Example id="S0081" name="Elise">
    Elise encrypts exfiltrated data with RC4.
   </Example>
   <Example id="S0082" name="Emissary">
    The C2 server response to a beacon sent by a variant of Emissary contains a 36-character GUID value that is used as an encryption key for subsequent network communications. Some variants of Emissary use various XOR operations to encrypt C2 data.
   </Example>
   <Example id="S0091" name="Epic">
    Epic encrypts commands from the C2 server using a hardcoded key.
   </Example>
   <Example id="S0569" name="Explosive">
    Explosive has encrypted communications with the RC4 method.
   </Example>
   <Example id="S0076" name="FakeM">
    The original variant of FakeM encrypts C2 traffic using a custom encryption cipher that uses an XOR key of "YHCRA" and bit rotation between each XOR operation. Some variants of FakeM use RC4 to encrypt C2 traffic.
   </Example>
   <Example id="S0181" name="FALLCHILL">
    FALLCHILL encrypts C2 data with RC4 encryption.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke can AES encrypt C2 communications.
   </Example>
   <Example id="S0171" name="Felismus">
    Some Felismus samples use a custom encryption method for C2 traffic that utilizes AES and multiple keys.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy has used SEAL encryption during the initial C2 handshake.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb has used a dynamic XOR key and custom XOR methodology for C2 communications.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors communicated with C2 via an encrypted RC4 byte stream and AES-CBC.
   </Example>
   <Example id="S0168" name="Gazer">
    Gazer uses custom encryption for C2 that uses 3DES.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT uses RC4 and XOR to encrypt C2 traffic.
   </Example>
   <Example id="S0342" name="GreyEnergy">
    GreyEnergy encrypts communications using AES256.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent can use an AES key to encrypt C2 communications.
   </Example>
   <Example id="S0132" name="H1N1">
    H1N1 encrypts C2 traffic using an RC4 key.
   </Example>
   <Example id="S0037" name="HAMMERTOSS">
    Before being appended to image files, HAMMERTOSS commands are encrypted with a key composed of both a hard-coded value and a string contained on that day's tweet. To decrypt the commands, an investigator would need access to the intended malware sample, the day's tweet, and the image file containing the command.
   </Example>
   <Example id="S0170" name="Helminth">
    Helminth encrypts data sent to its C2 server over HTTP with RC4.
   </Example>
   <Example id="S0087" name="Hi-Zor">
    Hi-Zor encrypts C2 traffic with a double XOR using two distinct single-byte keys.
   </Example>
   <Example id="S0394" name="HiddenWasp">
    HiddenWasp uses an RC4-like algorithm with an already computed PRGA generated key-stream for network communication.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa used AES-128 to encrypt C2 traffic.
   </Example>
   <Example id="S0009" name="Hikit">
    Hikit performs XOR encryption.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant has compressed network communications and encrypted them with a custom stream cipher.
   </Example>
   <Example id="S0068" name="httpclient">
    httpclient encrypts C2 content with XOR using a single byte, 0x12.
   </Example>
   <Example id="S0203" name="Hydraq">
    Hydraq C2 traffic is encrypted using bitwise NOT and XOR operations.
   </Example>
   <Example id="S0537" name="HyperStack">
    HyperStack has used RSA encryption for C2 communications.
   </Example>
   <Example id="S1022" name="IceApple">
    The IceApple Result Retriever module can AES encrypt C2 responses.
   </Example>
   <Example id="G0100" name="Inception">
    Inception has encrypted network communications with AES.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole uses variations of a simple XOR encryption routine for C&amp;C communications.
   </Example>
   <Example id="S0271" name="KEYMARBLE">
    KEYMARBLE uses a customized XOR algorithm to encrypt C2 communications.
   </Example>
   <Example id="S0641" name="Kobalos">
    Kobalos's post-authentication communication channel uses a 32-byte-long password with RC4 for inbound and outbound traffic.
   </Example>
   <Example id="S0162" name="Komplex">
    The Komplex C2 channel uses an 11-byte XOR algorithm to hide data.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has used AES to encrypt C2 traffic.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Several Lazarus Group malware families encrypt C2 traffic using custom code that uses XOR with an ADD operation and XOR with a SUB operation. Another Lazarus Group malware sample XORs C2 traffic. Other Lazarus Group malware uses Caracachs encryption to encrypt C2 payloads. Lazarus Group has also used AES to encrypt C2 traffic.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron uses AES to encrypt C2 traffic.
   </Example>
   <Example id="S0582" name="LookBack">
    LookBack uses a modified version of RC4 for data transfer.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can perform a decremental-xor encryption on the initial C2 request before sending it over the wire.
   </Example>
   <Example id="S0010" name="Lurid">
    Lurid performs XOR encryption.
   </Example>
   <Example id="S0409" name="Machete">
    Machete has used AES to exfiltrate documents.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has encrypted C2 commands with AES-256.
   </Example>
   <Example id="S1026" name="Mongall">
    Mongall has the ability to RC4 encrypt C2 communications.
   </Example>
   <Example id="S0149" name="MoonWind">
    MoonWind encrypts C2 traffic using RC4 with a static key.
   </Example>
   <Example id="S0284" name="More_eggs">
    More_eggs has used an RC4-based encryption method for its C2 communications.
   </Example>
   <Example id="S0256" name="Mosquito">
    Mosquito uses a custom encryption algorithm, which consists of XOR and a stream that is similar to the Blum Blum Shub algorithm.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used AES to encrypt C2 responses.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has encrypted C2 communications with RC4.
   </Example>
   <Example id="S0336" name="NanoCore">
    NanoCore uses DES to encrypt the C2 traffic.
   </Example>
   <Example id="S0272" name="NDiskMonitor">
    NDiskMonitor uses AES to encrypt certain information sent over its C2 channel.
   </Example>
   <Example id="S0630" name="Nebulae">
    Nebulae can use RC4 and XOR to encrypt C2 communications.
   </Example>
   <Example id="S0034" name="NETEAGLE">
    NETEAGLE will decrypt resources it downloads with HTTP requests by using RC4 with the key "ScoutEagle."
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can use AES encryption for C2 data transferred.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum uses AES to encrypt network traffic. The key can be hardcoded or negotiated with the C2 server in the registration phase.
   </Example>
   <Example id="S0664" name="Pandora">
    Pandora has the ability to encrypt communications with D3DES.
   </Example>
   <Example id="S1031" name="PingPull">
    PingPull can use AES, in cipher block chaining (CBC) mode padded with PKCS5, to encrypt C2 server communications.
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon communications are RC4 encrypted.
   </Example>
   <Example id="S0254" name="PLAINTEE">
    PLAINTEE encodes C2 beacons using XOR.
   </Example>
   <Example id="S0435" name="PLEAD">
    PLEAD has used RC4 encryption to download modules.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX can use RC4 encryption in C2 communications.
   </Example>
   <Example id="S0012" name="PoisonIvy">
    PoisonIvy uses the Camellia cipher to encrypt communications.
   </Example>
   <Example id="S0371" name="POWERTON">
    POWERTON has used AES for encrypting C2 traffic.
   </Example>
   <Example id="S0113" name="Prikormka">
    Prikormka encrypts some C2 traffic with the Blowfish cipher.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can RC4 encrypt strings in C2 communication.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT uses AES with a hardcoded pre-shared key to encrypt network communication.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay can use RC4 to encrypt C2 communications.
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT has used AES ciphertext to encode C2 communications.
   </Example>
   <Example id="S0153" name="RedLeaves">
    RedLeaves has encrypted C2 traffic with RC4, previously using keys of 88888888 and babybear.
   </Example>
   <Example id="S0433" name="Rifdoor">
    Rifdoor has encrypted command and control (C2) communications with a stream cipher.
   </Example>
   <Example id="S0003" name="RIPTIDE">
    APT12 has used the RIPTIDE RAT, which communicates over HTTP with a payload encrypted with RC4.
   </Example>
   <Example id="S0148" name="RTM">
    RTM encrypts C2 traffic with a custom RC4 variant.
   </Example>
   <Example id="S0074" name="Sakula">
    Sakula encodes C2 traffic with single-byte XOR keys.
   </Example>
   <Example id="S0053" name="SeaDuke">
    SeaDuke C2 traffic has been encrypted with RC4 and AES.
   </Example>
   <Example id="S0610" name="SideTwist">
    SideTwist can encrypt C2 communications with a randomly generated key.
   </Example>
   <Example id="S0633" name="Sliver">
    Sliver can use AES-GCM-256 to encrypt a session key for C2 message exchange.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM has encrypted its C2 traffic with RC4.
   </Example>
   <Example id="S0159" name="SNUGRIDE">
    SNUGRIDE encrypts C2 traffic using AES with a static key.
   </Example>
   <Example id="S0627" name="SodaMaster">
    SodaMaster can use RC4 to encrypt C2 communications.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT has encrypted its C2 communications with AES.
   </Example>
   <Example id="G0038" name="Stealth Falcon">
    Stealth Falcon malware encrypts C2 traffic using RC4 with a hard-coded key.
   </Example>
   <Example id="S1034" name="StrifeWater">
    StrifeWater can encrypt C2 traffic using XOR with a hard coded key.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet encodes the payload of system information sent to the command and control servers using a one byte 0xFF XOR key. Stuxnet also uses a 31-byte long static byte string to XOR data sent to command and control servers. The servers use a different static key to encrypt replies to the implant.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST encrypted C2 traffic using a single-byte-XOR cipher.
   </Example>
   <Example id="S0060" name="Sys10">
    Sys10 uses an XOR 0x1 loop to encrypt its C2 domain.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor uses RC4 to encrypt the message body of HTTP content.
   </Example>
   <Example id="S0586" name="TAINTEDSCRIBE">
    TAINTEDSCRIBE uses a Linear Feedback Shift Register (LFSR) algorithm for network encryption.
   </Example>
   <Example id="S0678" name="Torisma">
    Torisma has encrypted its C2 communications using XOR and VEST-32.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot uses a custom crypter leveraging Microsoft’s CryptoAPI to encrypt C2 traffic.
   </Example>
   <Example id="S0436" name="TSCookie">
    TSCookie has encrypted network communications with RC4.
   </Example>
   <Example id="S0275" name="UPPERCUT">
    Some versions of UPPERCUT have used the hard-coded string "this is the encrypt key" for Blowfish encryption when communicating with a C2. Later versions have hard-coded keys uniquely for each C2 address.
   </Example>
   <Example id="S0180" name="Volgmer">
    Volgmer uses a simple XOR cipher to encrypt traffic and files.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT can encrypt its C2 with RC4 with the password warzone160\x00.
   </Example>
   <Example id="S0514" name="WellMess">
    WellMess can encrypt HTTP POST data using RC6 and a dynamically generated AES key encrypted with a hard coded RSA public key.
   </Example>
   <Example id="S0430" name="Winnti for Linux">
    Winnti for Linux has used a custom TCP protocol with four-byte XOR for command and control (C2).
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    Winnti for Windows can XOR encrypt C2 traffic.
   </Example>
   <Example id="S0653" name="xCaon">
    xCaon has encrypted data sent to the C2 server using a XOR key.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET uses RC4 encryption over TCP to communicate with its C2 server.
   </Example>
   <Example id="S0230" name="ZeroT">
    ZeroT has used RC4 to encrypt C2 traffic.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has used AES encrypted communications in C2.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1573.002" name="Encrypted Channel: Asymmetric Cryptography">
  Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver’s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0202" name="adbupd">
    adbupd contains a copy of the OpenSSL library to encrypt C2 traffic.
   </Example>
   <Example id="S0045" name="ADVSTORESHELL">
    A variant of ADVSTORESHELL encrypts some C2 with RSA.
   </Example>
   <Example id="S0438" name="Attor">
    Attor's Blowfish key is encrypted with a public RSA key.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can use TLS in C2 communications.
   </Example>
   <Example id="S0017" name="BISCUIT">
    BISCUIT uses SSL for encrypting C2 communications.
   </Example>
   <Example id="S0335" name="Carbon">
    Carbon has used RSA encryption for C2 communications.
   </Example>
   <Example id="S0023" name="CHOPSTICK">
    CHOPSTICK encrypts C2 communications with TLS.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has used the Plink utility to create SSH tunnels.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can use RSA asymmetric encryption with PKCS1 padding to encrypt data sent to the C2 server.
   </Example>
   <Example id="S0126" name="ComRAT">
    ComRAT can use SSL/TLS encryption for its HTTP-based C2 channel. ComRAT has used public key cryptography with RSA and AES encrypted email attachments for its Gmail C2 channel.
   </Example>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink can encrypt C2 messages with AES-256-CBC sent underneath TLS. OpenSSL library functions are also used to encrypt each message using a randomly generated key and IV, which are then encrypted using a hard-coded RSA public key.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman can use TLS to encrypt its C2 channel.
   </Example>
   <Example id="S0600" name="Doki">
    Doki has used the embedTLS library for network communications.
   </Example>
   <Example id="S0384" name="Dridex">
    Dridex has encrypted traffic with RSA.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet is known to use RSA keys for encrypting C2 traffic.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can use TLS to encrypt its C2 channel.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 used the Plink command-line utility to create SSH tunnels to C2 servers.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has used the Plink utility to tunnel RDP back to C2 infrastructure.
   </Example>
   <Example id="S0168" name="Gazer">
    Gazer uses custom encryption for C2 that uses RSA.
   </Example>
   <Example id="S0588" name="GoldMax">
    GoldMax has RSA-encrypted its communication with the C2 server.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can use SSL in C2 communication.
   </Example>
   <Example id="S0342" name="GreyEnergy">
    GreyEnergy encrypts communications using RSA-2048.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent can use a hardcoded server public RSA key to encrypt the first request to C2.
   </Example>
   <Example id="S0087" name="Hi-Zor">
    Hi-Zor encrypts C2 traffic with TLS.
   </Example>
   <Example id="S0483" name="IcedID">
    IcedID has used SSL and TLS in communications with C2.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can use SSL and TLS for communications.
   </Example>
   <Example id="S0641" name="Kobalos">
    Kobalos's authentication and key exchange is performed using RSA-512.
   </Example>
   <Example id="S0409" name="Machete">
    Machete has used TLS-encrypted FTP to exfiltrate data.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo's C2 communication has been encrypted using OpenSSL.
   </Example>
   <Example id="S0699" name="Mythic">
    Mythic supports SSL encrypted C2.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig used the Plink utility and other tools to create tunnels to C2 servers.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors' proxy implementation "Agent" upgraded the socket in use to a TLS socket.
   </Example>
   <Example id="S0556" name="Pay2Key">
    Pay2Key has used RSA encrypted communications with C2.
   </Example>
   <Example id="S0587" name="Penquin">
    Penquin can encrypt communications using the BlowFish algorithm and a symmetric key exchanged with Diffie Hellman.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT used TLS to encrypt command and control (C2) communications.
   </Example>
   <Example id="S0150" name="POSHSPY">
    POSHSPY encrypts C2 traffic with AES and RSA.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS has encrypted C2 traffic with RSA.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy's default encryption for its C2 communication channel is SSL, but it also has transport options for RSA and AES.
   </Example>
   <Example id="S0496" name="REvil">
    REvil has encrypted C2 communications with the ECIES algorithm.
   </Example>
   <Example id="S0448" name="Rising Sun">
    Rising Sun variants can use SSL for encrypting C2 communications.
   </Example>
   <Example id="S0382" name="ServHelper">
    ServHelper may set up a reverse SSH tunnel to give the attacker access to services running on the victim, such as RDP.
   </Example>
   <Example id="S0633" name="Sliver">
    Sliver can use mutual TLS and RSA  cryptography to exchange a session key.
   </Example>
   <Example id="S1035" name="Small Sieve">
    Small Sieve can use SSL/TLS for its HTTPS Telegram Bot API-based C2 channel.
   </Example>
   <Example id="S0627" name="SodaMaster">
    SodaMaster can use a hardcoded RSA key to encrypt some of its C2 traffic.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT can SSL encrypt C2 traffic.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity has encrypted C2 traffic using SSL/TLS.
   </Example>
   <Example id="S0018" name="Sykipot">
    Sykipot uses SSL for encrypting C2 communications.
   </Example>
   <Example id="S0668" name="TinyTurla">
    TinyTurla has the ability to encrypt C2 traffic with SSL/TLS.
   </Example>
   <Example id="S0183" name="Tor">
    Tor encapsulates traffic in multiple layers of encryption, using TLS by default.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can secure C2 communications with SSL and TLS.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has used SSL to connect to C2 servers.
   </Example>
   <Example id="S0180" name="Volgmer">
    Some Volgmer variants use SSL to encrypt C2 communications.
   </Example>
   <Example id="S0366" name="WannaCry">
    WannaCry uses Tor for command and control traffic and routes a custom cryptographic protocol over the Tor circuit.
   </Example>
   <Example id="S0515" name="WellMail">
    WellMail can use hard coded client and certificate authority certificates to communicate with C2 over mutual TLS.
   </Example>
   <Example id="S0514" name="WellMess">
    WellMess can communicate to C2 with mutual TLS where client and server mutually check certificates.
   </Example>
   <Example id="S0117" name="XTunnel">
    XTunnel uses SSL/TLS and RC4 to encrypt traffic.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy uses SSL and AES ECB for encrypting C2 communications.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.
   </Mitigation>
   <Mitigation id="M1020" name="SSL/TLS Inspection">
    SSL/TLS inspection can be used to see the contents of encrypted sessions to look for network-based indicators of malware communication protocols.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1499" name="Endpoint Denial of Service">
  Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Azure AD, Containers, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Impact_Type>
   Availability
  </Impact_Type>
  <CAPEC_ID>
   CAPEC-227, CAPEC-131, CAPEC-130, CAPEC-125
  </CAPEC_ID>
  <Examples>
   <Example id="S0052" name="OnionDuke">
    OnionDuke has the capability to use a Denial of Service module.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team temporarily disrupted service to Georgian government, non-government, and private sector websites after compromising a Georgian web hosting provider in 2019.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell has a feature to perform SYN flood attack on a host.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0013" name="Sensor Health">
    Host Status
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1499.001" name="Endpoint Denial of Service: OS Exhaustion Flood">
  Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Impact_Type>
   Availability
  </Impact_Type>
  <CAPEC_ID>
   CAPEC-469, CAPEC-482
  </CAPEC_ID>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0013" name="Sensor Health">
    Host Status
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1499.002" name="Endpoint Denial of Service: Service Exhaustion Flood">
  Adversaries may target the different network services provided by systems to conduct a denial of service (DoS). Adversaries often target the availability of DNS and web services, however others have been targeted as well. Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Impact_Type>
   Availability
  </Impact_Type>
  <CAPEC_ID>
   CAPEC-488, CAPEC-489, CAPEC-528
  </CAPEC_ID>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0013" name="Sensor Health">
    Host Status
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1499.003" name="Endpoint Denial of Service: Application Exhaustion Flood">
  Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Impact_Type>
   Availability
  </Impact_Type>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0013" name="Sensor Health">
    Host Status
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1499.004" name="Endpoint Denial of Service: Application or System Exploitation">
  Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users.  Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Impact_Type>
   Availability
  </Impact_Type>
  <Examples>
   <Example id="S0604" name="Industroyer">
    Industroyer uses a custom DoS tool that leverages CVE-2015-5374 and targets hardcoded IP addresses of Siemens SIPROTEC devices.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0013" name="Sensor Health">
    Host Status
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1611" name="Escape to Host">
  Adversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment.
  <Tactic>
   Privilege Escalation
  </Tactic>
  <Platforms>
   Containers, Linux, Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User, root
  </Permissions_Required>
  <Examples>
   <Example id="S0600" name="Doki">
    Doki’s container was configured to bind the host root directory.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has used the BOtB tool that can break out of containers.
   </Example>
   <Example id="S0683" name="Peirates">
    Peirates can gain a reverse shell on a host node by mounting the Kubernetes hostPath.
   </Example>
   <Example id="S0623" name="Siloscape">
    Siloscape maps the host’s C drive to the container by creating a global symbolic link to the host through the calling of NtSetInformationSymbolicLink.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has deployed privileged containers that mount the filesystem of victim machine.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1048" name="Application Isolation and Sandboxing">
    Consider utilizing seccomp, seccomp-bpf, or a similar solution that restricts certain system calls such as mount. In Kubernetes environments, consider defining a Pod Security Policy that limits container access to host process namespaces, the host network, and the host file system.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Use read-only containers, read-only file systems, and minimal images when possible to prevent the running of commands.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Ensure containers are not running as root by default and do not use unnecessary privileges or mounted components. In Kubernetes environments, consider defining a Pod Security Policy that prevents pods from running privileged containers.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0032" name="Container">
    Container Creation
   </Detection>
   <Detection id="DS0008" name="Kernel">
    Kernel Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
   <Detection id="DS0034" name="Volume">
    Volume Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1585" name="Establish Accounts">
  Adversaries may create and cultivate accounts with services that can be used during targeting. Adversaries can create accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations. This development could be applied to social media, website, or other publicly available information that could be referenced and scrutinized for legitimacy over the course of an operation using that persona or identity.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0025" name="APT17">
    APT17 has created and cultivated profile pages in Microsoft TechNet. To make profile pages appear more legitimate, APT17 has created biographical sections and posted in forum threads.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has created KeyBase accounts to communicate with ransomware victims.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
   <Detection id="DS0021" name="Persona">
    Social Media
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1585.001" name="Establish Accounts: Social Media Accounts">
  Adversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0050" name="APT32">
    APT32 has set up Facebook pages in tandem with fake websites.
   </Example>
   <Example id="G0003" name="Cleaver">
    Cleaver has created fake LinkedIn profiles that included profile photos, details, and connections.
   </Example>
   <Example id="G1011" name="EXOTIC LILY">
    EXOTIC LILY has established social media profiles to mimic employees of targeted companies.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used a Twitter account to communicate with ransomware victims.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has established fraudulent LinkedIn accounts impersonating HR department employees to target potential victims with fake job offers.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has created social media accounts to monitor news and security trends as well as potential targets.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has created new LinkedIn and Twitter accounts to conduct social engineering against potential victims.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has created new social media accounts for targeting efforts.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has created fake LinkedIn and other social media accounts to contact targets and convince them--through messages and voice communications--to open malicious links.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has established social media accounts to disseminate victim internal-only documents and other sensitive data.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
   <Detection id="DS0021" name="Persona">
    Social Media
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1585.002" name="Establish Accounts: Email Accounts">
  Adversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct Phishing for Information or Phishing.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0006" name="APT1">
    APT1 has created email accounts for later use in social engineering, phishing, and when registering domains.
   </Example>
   <Example id="G1011" name="EXOTIC LILY">
    EXOTIC LILY has created e-mail accounts to spoof targeted organizations.
   </Example>
   <Example id="C0007" name="FunnyDream">
    For FunnyDream, the threat actors likely established an identified email account to register a variety of domains that were used during the campaign.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has established email accounts for use in domain registration including for ProtonMail addresses.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has created email accounts for phishing operations.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has created new email accounts for spearphishing operations.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has created new email accounts for targeting efforts.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has established email accounts using fake personas for spearphishing operations.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has leveraged the legitimate email marketing service SMTP2Go for phishing campaigns.
   </Example>
   <Example id="C0016" name="Operation Dust Storm">
    For Operation Dust Storm, the threat actors established email addresses to register domains for their operations.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, attackers created email addresses to register for a free account for a control server used for the implants.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    For Operation Wocao, the threat actors registered email accounts to use during the campaign.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has created email accounts that mimic legitimate organizations for its spearphishing operations.
   </Example>
   <Example id="G0122" name="Silent Librarian">
    Silent Librarian has established e-mail accounts to receive e-mails forwarded from compromised accounts.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).
  </Detections>
 </Technique>
 <Technique id="T1585.003" name="Establish Accounts: Cloud Accounts">
  Adversaries may create accounts with cloud providers that can be used during targeting. Adversaries can use cloud accounts to further their operations, including leveraging cloud storage services such as Dropbox, MEGA, Microsoft OneDrive, or AWS S3 buckets for Exfiltration to Cloud Storage or to Upload Tools. Cloud accounts can also be used in the acquisition of infrastructure, such as Virtual Private Servers or Serverless infrastructure. Establishing cloud accounts may allow adversaries to develop sophisticated capabilities without managing their own servers.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during exfiltration (ex: Transfer Data to Cloud Account).
  </Detections>
 </Technique>
 <Technique id="T1546" name="Event Triggered Execution">
  Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.
  <Tactics>
   Privilege Escalation, Persistence
  </Tactics>
  <Platforms>
   IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Mitigations/>
  <Detections>
   <Detection id="DS0025" name="Cloud Service">
    Cloud Service Modification
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Metadata | File Modification
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
   <Detection id="DS0005" name="WMI">
    WMI Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1546.001" name="Event Triggered Execution: Change Default File Association">
  Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.
  <Tactics>
   Privilege Escalation, Persistence
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-556
  </CAPEC_ID>
  <Examples>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has a HWP document stealer module which changes the default program association in the registry to open HWP documents.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can conduct an image hijack of an .msc file extension as part of its UAC bypass process.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1546.002" name="Event Triggered Execution: Screensaver">
  Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. The Windows screensaver application scrnsave.scr is located in C:\Windows\System32\, and C:\Windows\sysWOW64\  on 64-bit Windows systems, along with screensavers included with base Windows installations.
  <Tactics>
   Privilege Escalation, Persistence
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0168" name="Gazer">
    Gazer can establish persistence through the system screensaver by configuring it to execute the malware.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Use Group Policy to disable screensavers if they are unnecessary.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Block .scr files from being executed from non-standard locations.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1546.003" name="Event Triggered Execution: Windows Management Instrumentation Event Subscription">
  Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime.
  <Tactics>
   Privilege Escalation, Persistence
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM
  </Permissions_Required>
  <Examples>
   <Example id="S0202" name="adbupd">
    adbupd can use a WMI script to achieve persistence.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used WMI event subscriptions for persistence.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has attempted to use WMI event subscriptions to establish persistence on compromised hosts.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has used mofcomp.exe to establish WMI Event Subscription persistence mechanisms configured from a *.mof file.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has used WMI event subscriptions for persistence.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has used WMI for persistence.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda's custom ORat tool uses a WMI event consumer to maintain persistence.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 has the ability to persist on a system using WMI events.
   </Example>
   <Example id="S0150" name="POSHSPY">
    POSHSPY uses a WMI event subscription to establish persistence.
   </Example>
   <Example id="S0371" name="POWERTON">
    POWERTON can use WMI for persistence.
   </Example>
   <Example id="S0511" name="RegDuke">
    RegDuke can persist using a WMI consumer that is launched every time a process named WINWORD.EXE is started.
   </Example>
   <Example id="S0053" name="SeaDuke">
    SeaDuke uses an event filter in WMI code to execute a previously dropped executable shortly after system startup.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can create a WMI Event to execute a payload for persistence.
   </Example>
   <Example id="S0682" name="TrailBlazer">
    TrailBlazer has the ability to use WMI for persistence.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used WMI event filters and consumers to establish persistence.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent malware from abusing WMI to attain persistence.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Prevent credential overlap across systems of administrator and privileged accounts.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    By default, only administrators are allowed to connect remotely using WMI; restrict other users that are allowed to connect, or disallow all users from connecting remotely to WMI.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0005" name="WMI">
    WMI Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1546.004" name="Event Triggered Execution: Unix Shell Configuration Modification">
  Adversaries may establish persistence through executing malicious commands triggered by a user’s shell. User Unix Shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user’s home directory (~/) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user’s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately.
  <Tactics>
   Privilege Escalation, Persistence
  </Tactics>
  <Platforms>
   Linux, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Examples>
   <Example id="S0690" name="Green Lambert">
    Green Lambert can establish persistence on a compromised host through modifying the profile, login, and run command (rc) files associated with the bash, csh, and tcsh shells.
   </Example>
   <Example id="S0362" name="Linux Rabbit">
    Linux Rabbit maintains persistence on an infected machine through rc.local and .bashrc files.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Making these files immutable and only changeable by certain administrators will limit the ability for adversaries to easily create user level persistence.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1546.005" name="Event Triggered Execution: Trap">
  Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like ctrl+c and ctrl+d.
  <Tactics>
   Privilege Escalation, Persistence
  </Tactics>
  <Platforms>
   Linux, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1546.006" name="Event Triggered Execution: LC_LOAD_DYLIB Addition">
  Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. There are tools available to perform these changes.
  <Tactics>
   Privilege Escalation, Persistence
  </Tactics>
  <Platforms>
   macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Binaries can also be baselined for what dynamic libraries they require, and if an app requires a new dynamic library that wasn\u2019t included as part of an update, it should be investigated.
   </Mitigation>
   <Mitigation id="M1045" name="Code Signing">
    Enforce that all binaries be signed by the correct Apple Developer IDs.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Allow applications via known hashes.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Metadata | File Modification
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1546.007" name="Event Triggered Execution: Netsh Helper DLL">
  Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at HKLM\SOFTWARE\Microsoft\Netsh.
  <Tactics>
   Privilege Escalation, Persistence
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM
  </Permissions_Required>
  <Examples>
   <Example id="S0108" name="netsh">
    netsh can be used as a persistence proxy technique to execute a helper DLL when netsh.exe is executed.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1546.008" name="Event Triggered Execution: Accessibility Features">
  Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.
  <Tactics>
   Privilege Escalation, Persistence
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Effective_Permissions>
   SYSTEM
  </Effective_Permissions>
  <CAPEC_ID>
   CAPEC-558
  </CAPEC_ID>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 used sticky-keys to obtain unauthenticated, privileged console access.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 replaces the Sticky Keys binary C:\Windows\System32\sethc.exe for persistence.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 leveraged sticky keys to establish persistence.
   </Example>
   <Example id="G0001" name="Axiom">
    Axiom actors have been known to use the Sticky Keys replacement within RDP sessions to obtain persistence.
   </Example>
   <Example id="G0009" name="Deep Panda">
    Deep Panda has used the sticky-keys technique to bypass the RDP login screen on remote systems during intrusions.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can leverage WMI debugging to remotely replace binaries like sethc.exe, Utilman.exe, and Magnify.exe with cmd.exe.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used sticky keys to launch a command prompt.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    Adversaries can replace accessibility features binaries with alternate binaries to execute this technique. Identify and block potentially malicious software executed through accessibility features functionality by using application control
   </Mitigation>
   <Mitigation id="M1035" name="Limit Access to Resource Over Network">
    If possible, use a Remote Desktop Gateway to manage connections and security configuration of RDP within a network.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    To use this technique remotely, an adversary must use it in conjunction with RDP. Ensure that Network Level Authentication is enabled to force the remote desktop session to authenticate before the session is created and the login screen displayed. It is enabled by default on Windows Vista and later.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1546.009" name="Event Triggered Execution: AppCert DLLs">
  Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs Registry key under HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\ are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec.
  <Tactics>
   Privilege Escalation, Persistence
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM
  </Permissions_Required>
  <Effective_Permissions>
   Administrator, SYSTEM
  </Effective_Permissions>
  <Examples>
   <Example id="S0196" name="PUNCHBUGGY">
    PUNCHBUGGY can establish using a AppCertDLLs Registry key.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    Adversaries install new AppCertDLL binaries to execute this technique. Identify and block potentially malicious software executed through AppCertDLLs functionality by using application control
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1546.010" name="Event Triggered Execution: AppInit DLLs">
  Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Windows or HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library.
  <Tactics>
   Privilege Escalation, Persistence
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <System_Requirements>
   Secure boot disabled on systems running Windows 8 and later
  </System_Requirements>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Effective_Permissions>
   Administrator, SYSTEM
  </Effective_Permissions>
  <Examples>
   <Example id="G0087" name="APT39">
    APT39 has used malware to set LoadAppInit_DLLs in the Registry key SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows in order to establish persistence.
   </Example>
   <Example id="S0107" name="Cherry Picker">
    Some variants of Cherry Picker use AppInit_DLLs to achieve persistence by creating the following Registry key: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows "AppInit_DLLs"="pserver32.dll"
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can insert itself into the address space of other applications using the AppInit DLL Registry key.
   </Example>
   <Example id="S0098" name="T9000">
    If a victim meets certain criteria, T9000 uses the AppInit_DLL functionality to achieve persistence by ensuring that every user mode process that is spawned will load its malicious DLL, ResN32.dll. It does this by creating the following Registry keys: HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs – %APPDATA%\Intel\ResN32.dll and HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows\LoadAppInit_DLLs – 0x1.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    Adversaries can install new AppInit DLLs binaries to execute this technique. Identify and block potentially malicious software executed through AppInit DLLs functionality by using application control
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Upgrade to Windows 8 or later and enable secure boot.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1546.011" name="Event Triggered Execution: Application Shimming">
  Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10.
  <Tactics>
   Privilege Escalation, Persistence
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Examples>
   <Example id="G0046" name="FIN7">
    FIN7 has used application shim databases for persistence.
   </Example>
   <Example id="S0517" name="Pillowmint">
    Pillowmint has used a malicious shim database to maintain persistence.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has the ability to use application shimming for persistence if it detects it is running as admin on Windows XP or 7, by creating a shim database to patch services.exe.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat has installed shim databases in the AppPatch folder.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1051" name="Update Software">
    Microsoft released an optional patch update - KB3045645 - that will remove the "auto-elevate" flag within the sdbinst.exe. This will prevent use of application shimming to bypass UAC.
   </Mitigation>
   <Mitigation id="M1052" name="User Account Control">
    Changing UAC settings to "Always Notify" will give the user more visibility when UAC elevation is requested, however, this option will not be popular among users due to the constant UAC interruptions.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1546.012" name="Event Triggered Execution: Image File Execution Options Injection">
  Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g., C:\dbg\ntsd.exe -g  notepad.exe).
  <Tactics>
   Privilege Escalation, Persistence
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM
  </Permissions_Required>
  <Examples>
   <Example id="S0461" name="SDBbot">
    SDBbot has the ability to use image file execution options for persistence if it detects it is running with admin privileges on a Windows version newer than Windows 7.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST created an Image File Execution Options (IFEO) Debugger registry value for the process dllhost.exe to trigger the installation of Cobalt Strike.
   </Example>
   <Example id="G0088" name="TEMP.Veles">
    TEMP.Veles has modified and added entries within HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options to maintain persistence.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1546.013" name="Event Triggered Execution: PowerShell Profile">
  Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (profile.ps1) is a script that runs when PowerShell starts and can be used as a logon script to customize user environments.
  <Tactics>
   Privilege Escalation, Persistence
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Examples>
   <Example id="G0010" name="Turla">
    Turla has used PowerShell profiles to maintain persistence on an infected machine.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1045" name="Code Signing">
    Enforce execution of only signed PowerShell scripts. Sign profiles to avoid them from being modified.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Making PowerShell profiles immutable and only changeable by certain administrators will limit the ability for adversaries to easily create user level persistence.
   </Mitigation>
   <Mitigation id="M1054" name="Software Configuration">
    Avoid PowerShell profiles if not needed. Use the -No Profile flag with when executing PowerShell scripts remotely to prevent local profiles and scripts from being executed.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1546.014" name="Event Triggered Execution: Emond">
  Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a Launch Daemon that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at /sbin/emond will load any rules from the /etc/emond.d/rules/ directory and take action once an explicitly defined event takes place.
  <Tactics>
   Privilege Escalation, Persistence
  </Tactics>
  <Platforms>
   macOS
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Consider disabling emond by removing the Launch Daemon plist file.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1546.015" name="Event Triggered Execution: Component Object Model Hijacking">
  Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.  References to various COM objects are stored in the Registry.
  <Tactics>
   Privilege Escalation, Persistence
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0045" name="ADVSTORESHELL">
    Some variants of ADVSTORESHELL achieve persistence by registering the payload as a Shell Icon Overlay handler COM object.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has used COM hijacking for persistence by replacing the legitimate MMDeviceEnumerator object with a payload.
   </Example>
   <Example id="S0127" name="BBSRAT">
    BBSRAT has been seen persisting via COM hijacking through replacement of the COM object for MruPidlList {42aedc87-2188-41fd-b9a3-0c966feabec1} or Microsoft WBEM New Event Subsystem {F3130CDB-AA52-4C3A-AB32-85FFC23AF9C1} depending on the system's CPU architecture.
   </Example>
   <Example id="S0126" name="ComRAT">
    ComRAT samples have been seen which hijack COM objects for persistence by replacing the path to shell32.dll in registry location HKCU\Software\Classes\CLSID{42aedc87-2188-41fd-b9a3-0c966feabec1}\InprocServer32.
   </Example>
   <Example id="S0679" name="Ferocious">
    Ferocious can use COM hijacking to establish persistence.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    JHUHUGIT has used COM hijacking to establish persistence by hijacking a class named MMDeviceEnumerator and also by registering the payload as a Shell Icon Overlay handler COM object ({3543619C-D563-43f7-95EA-4DA7E1CC396A}).
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has modified ComSysApp service to load the malicious DLL payload.
   </Example>
   <Example id="S0256" name="Mosquito">
    Mosquito uses COM hijacking as a method of persistence.
   </Example>
   <Example id="S1050" name="PcShare">
    PcShare has created the HKCU\\Software\\Classes\\CLSID\\{42aedc87-2188-41fd-b9a3-0c966feabec1}\\InprocServer32 Registry key for persistence.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can add a CLSID key for payload execution through Registry.CurrentUser.CreateSubKey("Software\\Classes\\CLSID\\{" + clsid + "}\\InProcServer32").
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT  can perform COM hijacking by setting the path to itself to the HKCU\Software\Classes\Folder\shell\open\command key with a DelegateExecute parameter.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1546.016" name="Event Triggered Execution: Installer Packages">
  Adversaries may establish persistence and elevate privileges by using an installer to trigger the execution of malicious content. Installer packages are OS specific and contain the resources an operating system needs to install applications on a system. Installer packages can include scripts that run prior to installation as well as after installation is complete. Installer scripts may inherit elevated permissions when executed. Developers often use these scripts to prepare the environment for installation, check requirements, download dependencies, and remove files after installation.
  <Tactics>
   Privilege Escalation, Persistence
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Effective_Permissions>
   root
  </Effective_Permissions>
  <Examples>
   <Example id="S0584" name="AppleJeus">
    During AppleJeus's installation process, it uses postinstall scripts to extract a hidden plist from the application's /Resources folder and execute the plist file as a Launch Daemon with elevated permissions.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1480" name="Execution Guardrails">
  Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary’s campaign.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Host Forensic Analysis, Signature-based Detection, Static File Analysis
  </Defense_Bypassed>
  <Examples>
   <Example id="S0504" name="Anchor">
    Anchor can terminate itself if specific execution flags are not present.
   </Example>
   <Example id="S0570" name="BitPaymer">
    BitPaymer compares file names and paths to a list of excluded names and directory names during encryption.
   </Example>
   <Example id="S0635" name="BoomBox">
    BoomBox can check its current working directory and for the presence of a specific file and terminate if specific values are not found.
   </Example>
   <Example id="S0634" name="EnvyScout">
    EnvyScout can call window.location.pathname to ensure that embedded files are being executed from the C: drive, and will terminate if they are not.
   </Example>
   <Example id="S0637" name="NativeZone">
    NativeZone can check for the presence of KM.EkeyAlmaz1C.dll and will halt execution unless it is in the same directory as the rest of the malware's components.
   </Example>
   <Example id="S1035" name="Small Sieve">
    Small Sieve can only execute correctly if the word Platypus is passed to it on the command line.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet checks for specific operating systems on 32-bit machines, Registry keys, and dates for vulnerabilities, and will exit execution if the values are not met.
   </Example>
   <Example id="S0562" name="SUNSPOT">
    SUNSPOT only replaces SolarWinds Orion source code if the MD5 checksums of both the original source code file and backdoored replacement source code match hardcoded values.
   </Example>
   <Example id="S0678" name="Torisma">
    Torisma is only delivered to a compromised host if the victim's IP address is on an allow-list.
   </Example>
   <Example id="S0636" name="VaporRage">
    VaporRage has the ability to check for the presence of a specific DLL and terminate if it is not found.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1055" name="Do Not Mitigate">
    Execution Guardrails likely should not be mitigated with preventative controls because it may protect unintended targets from being compromised. If targeted, efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identifying subsequent malicious behavior if compromised.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1480.001" name="Execution Guardrails: Environmental Keying">
  Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation of Execution Guardrails that utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Host Forensic Analysis, Signature-based Detection, Static File Analysis
  </Defense_Bypassed>
  <Examples>
   <Example id="G0096" name="APT41">
    APT41 has encrypted payloads using the Data Protection API (DPAPI), which relies on keys tied to specific user accounts on specific machines. APT41 has also environmentally keyed second stage malware with an RC5 key derived in part from the infected system's volume serial number.
   </Example>
   <Example id="G0020" name="Equation">
    Equation has been observed utilizing environmental keying in payload delivery.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can use Data Protection API to encrypt its components on the victim’s computer, to evade detection, and to make sure the payload can only be decrypted and loaded on one specific compromised computer.
   </Example>
   <Example id="S0685" name="PowerPunch">
    PowerPunch can use the volume serial number from a target host to generate a unique XOR key for the next stage payload.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT relies on a specific victim hostname to execute and decrypt important strings.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    The Winnti for Windows dropper component can verify the existence of a single command line parameter and either terminate if it is not found or later use it as a decryption key.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1055" name="Do Not Mitigate">
    Environmental Keying likely should not be mitigated with preventative controls because it may protect unintended targets from being compromised. If targeted, efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identifying subsequent malicious behavior if compromised.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1048" name="Exfiltration Over Alternative Protocol">
  Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.
  <Tactic>
   Exfiltration
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0482" name="Bundlore">
    Bundlore uses the curl -s -L -o command to exfiltrate archived data to a URL.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes has exfiltrated its collected data from the infected machine to the C2, sometimes using the MIME protocol.
   </Example>
   <Example id="S0503" name="FrameworkPOS">
    FrameworkPOS can use DNS tunneling for exfiltration of credit card data.
   </Example>
   <Example id="S0203" name="Hydraq">
    Hydraq connects to a predefined domain on port 443 to exfil gathered information.
   </Example>
   <Example id="S0641" name="Kobalos">
    Kobalos can exfiltrate credentials over the network via UDP.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has used a .NET tool named dog.exe to exiltrate information over an e-mail account.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has sent locally staged files with collected credentials to C2 servers using cURL.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1057" name="Data Loss Prevention">
    Data loss prevention can detect and block sensitive data being uploaded via web browsers.
   </Mitigation>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Enforce proxies and use dedicated servers for services such as DNS and only allow those systems to communicate over respective ports/protocols, instead of all systems within a network.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Follow best practices for network firewall configurations to allow only necessary ports and traffic to enter and exit the network.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1048.001" name="Exfiltration Over Alternative Protocol: Exfiltration Over Symmetric Encrypted Non-C2 Protocol">
  Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.
  <Tactic>
   Exfiltration
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Enforce proxies and use dedicated servers for services such as DNS and only allow those systems to communicate over respective ports/protocols, instead of all systems within a network.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Follow best practices for network firewall configurations to allow only necessary ports and traffic to enter and exit the network.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1048.002" name="Exfiltration Over Alternative Protocol: Exfiltration Over Asymmetric Encrypted Non-C2 Protocol">
  Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.
  <Tactic>
   Exfiltration
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has exfiltrated archives of collected data previously staged on a target's OWA server via HTTPS.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has exfiltrated collected data over a simple HTTPS request to a password-protected archive staged on a victim's OWA servers.
   </Example>
   <Example id="S1040" name="Rclone">
    Rclone can exfiltrate data over SFTP or HTTPS via WebDAV.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1057" name="Data Loss Prevention">
    Data loss prevention can detect and block sensitive data being uploaded via web browsers.
   </Mitigation>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Enforce proxies and use dedicated servers for services such as DNS and only allow those systems to communicate over respective ports/protocols, instead of all systems within a network.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Follow best practices for network firewall configurations to allow only necessary ports and traffic to enter and exit the network.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1048.003" name="Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol">
  Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.
  <Tactic>
   Exfiltration
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla has routines for exfiltration over SMTP, FTP, and HTTP.
   </Example>
   <Example id="G0050" name="APT32">
    APT32's backdoor can exfiltrate data by encoding it in the subdomain field of DNS packets.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has used FTP to exfiltrate files (separately from the C2 channel).
   </Example>
   <Example id="S0190" name="BITSAdmin">
    BITSAdmin can be used to create BITS Jobs to upload files from a compromised host.
   </Example>
   <Example id="S0252" name="Brave Prince">
    Some Brave Prince variants have used South  Korea's Daum email service to exfiltrate information, and later variants have posted the data to a web server via an HTTP post command.
   </Example>
   <Example id="S0335" name="Carbon">
    Carbon uses HTTP to send data to the C2 server.
   </Example>
   <Example id="S1043" name="ccf32">
    ccf32 can upload collected data and files to an FTP server.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower can send victim data via FTP with credentials hardcoded in the script.
   </Example>
   <Example id="S0107" name="Cherry Picker">
    Cherry Picker exfiltrates files over FTP.
   </Example>
   <Example id="S0492" name="CookieMiner">
    CookieMiner has used the curl --upload-file command to exfiltrate data over HTTP.
   </Example>
   <Example id="S0212" name="CORALDECK">
    CORALDECK has exfiltrated data in HTTP POST headers.
   </Example>
   <Example id="S0050" name="CosmicDuke">
    CosmicDuke exfiltrates collected files over FTP or WebDAV. Exfiltration servers can be separately configured from C2 servers.
   </Example>
   <Example id="S0281" name="Dok">
    Dok exfiltrates logs of its execution stored in the /tmp folder over FTP using the curl command.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has sent stolen payment card data to remote servers via HTTP POSTs.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has used FTP to exfiltrate collected data.
   </Example>
   <Example id="S0095" name="ftp">
    ftp may be used to exfiltrate data separate from the main command and control protocol.
   </Example>
   <Example id="S0487" name="Kessel">
    Kessel can exfiltrate credentials and other information via HTTP POST request, TCP, and DNS.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has used FTP to exfiltrate reconnaissance data out.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group malware SierraBravo-Two generates an email message via SMTP containing information about newly infected victims.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has exfiltrated data over FTP separately from its primary C2 channel over DNS.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has used ftp for exfiltration.
   </Example>
   <Example id="S1040" name="Rclone">
    Rclone can exfiltrate data over FTP or HTTP, including HTTP via WebDAV.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec can exfiltrate data via a DNS tunnel or email, separately from its C2 channel.
   </Example>
   <Example id="G0076" name="Thrip">
    Thrip has used WinSCP to exfiltrate data from a targeted organization over FTP.
   </Example>
   <Example id="S0466" name="WindTail">
    WindTail has the ability to automatically exfiltrate files using the macOS built-in utility /usr/bin/curl.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has exfiltrated victim information using FTP.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1057" name="Data Loss Prevention">
    Data loss prevention can detect and block sensitive data being sent over unencrypted protocols.
   </Mitigation>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Enforce proxies and use dedicated servers for services such as DNS and only allow those systems to communicate over respective ports/protocols, instead of all systems within a network.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Follow best practices for network firewall configurations to allow only necessary ports and traffic to enter and exit the network.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1041" name="Exfiltration Over C2 Channel">
  Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.
  <Tactic>
   Exfiltration
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0045" name="ADVSTORESHELL">
    ADVSTORESHELL exfiltrates data over the same channel used for C2.
   </Example>
   <Example id="S1025" name="Amadey">
    Amadey has sent victim data to its C2 servers.
   </Example>
   <Example id="S0584" name="AppleJeus">
    AppleJeus has exfiltrated collected host information to a C2 server.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed can exfiltrate files via the C2 channel.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has a tool that exfiltrates data over the C2 channel.
   </Example>
   <Example id="G0050" name="APT32">
    APT32's backdoor has exfiltrated data using the already opened channel with its C&amp;C server.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has exfiltrated stolen victim data through C2 communications.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth exfiltrates collected information from its r1.log file to the external C2 server.
   </Example>
   <Example id="S0438" name="Attor">
    Attor has exfiltrated data over the C2 channel.
   </Example>
   <Example id="S1029" name="AuTo Stealer">
    AuTo Stealer can exfiltrate data over actor-controlled C2 servers via HTTP or TCP.
   </Example>
   <Example id="S0031" name="BACKSPACE">
    Adversaries can direct BACKSPACE to upload files to the C2 Server.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook can upload files from a victim's machine over the C2 channel.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot exfiltrates data over its C2 channel.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has added the exfiltrated data to the URL over the C2 channel.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has sent user and system information to a C2 server via HTTP POST requests.
   </Example>
   <Example id="S0657" name="BLUELIGHT">
    BLUELIGHT has exfiltrated data over its C2 channel.
   </Example>
   <Example id="S0651" name="BoxCaon">
    BoxCaon uploads files and data from a compromised host over the existing C2 channel.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can send collected data in JSON format to C2.
   </Example>
   <Example id="S0077" name="CallMe">
    CallMe exfiltrates data to its C2 server over the same protocol as C2 communications.
   </Example>
   <Example id="S0351" name="Cannon">
    Cannon exfiltrates collected data over email via SMTP/S and POP3/S C2 channels.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp has exfiltrated data via HTTP to already established C2 servers.
   </Example>
   <Example id="S0572" name="Caterpillar WebShell">
    Caterpillar WebShell can upload files over the C2 channel.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower can exfiltrate gathered data to a hardcoded C2 URL via HTTP POST.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used Cobalt Strike C2 beacons for data exfiltration.
   </Example>
   <Example id="S0667" name="Chrommme">
    Chrommme can exfiltrate collected data via C2.
   </Example>
   <Example id="G0142" name="Confucius">
    Confucius has exfiltrated stolen files to its C2 server.
   </Example>
   <Example id="S1024" name="CreepySnail">
    CreepySnail can connect to C2 for data exfiltration.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson can exfiltrate stolen information over its C2.
   </Example>
   <Example id="S0538" name="Crutch">
    Crutch can exfiltrate data over the primary C2 channel (Dropbox HTTP API).
   </Example>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink has the ability to upload exfiltrated files to a C2 server.
   </Example>
   <Example id="S1021" name="DnsSystem">
    DnsSystem can exfiltrate collected data to its C2 server.
   </Example>
   <Example id="S0600" name="Doki">
    Doki has used Ngrok to establish C2 and exfiltrate data.
   </Example>
   <Example id="S0502" name="Drovorub">
    Drovorub can exfiltrate files over C2 infrastructure.
   </Example>
   <Example id="S0062" name="DustySky">
    DustySky has exfiltrated data to the C2 server.
   </Example>
   <Example id="S0024" name="Dyre">
    Dyre has the ability to send information staged on a compromised host externally to C2.
   </Example>
   <Example id="S0377" name="Ebury">
    Ebury can exfiltrate SSH credentials through custom DNS queries.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has been seen exfiltrating system information stored within cookies sent within an HTTP GET request back to its C2 servers.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can send data gathered from a target through the command and control channel.
   </Example>
   <Example id="S0568" name="EVILNUM">
    EVILNUM can upload files over the C2 channel from the infected host.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro has exfiltrated data to the C2 server.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy has sent data collected from a compromised host to its C2 servers.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb can remotely exfiltrate sensitive information from a compromised AD FS server.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors collected information via Empire, which sent the data back to the adversary's C2.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can execute commands, including gathering user information, and send the results to C2.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM used Web shells and HTRAN for C2 and to exfiltrate data.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    A Gamaredon Group file stealer can transfer collected files to a hardcoded C2 server.
   </Example>
   <Example id="S0493" name="GoldenSpy">
    GoldenSpy has exfiltrated host environment information to an external C2 domain via port 9006.
   </Example>
   <Example id="S0588" name="GoldMax">
    GoldMax can exfiltrate files over the existing C2 channel.
   </Example>
   <Example id="S0477" name="Goopy">
    Goopy has the ability to exfiltrate data over the Microsoft Outlook C2 channel.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can send data it retrieves to the C2 server.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent has sent data related to a compromise host over its C2 channel.
   </Example>
   <Example id="S0391" name="HAWKBALL">
    HAWKBALL has sent system information and files over the C2 channel.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa exfiltrated data over its C2 channel.
   </Example>
   <Example id="S0376" name="HOPLIGHT">
    HOPLIGHT has used its C2 channel to exfiltrate data.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant has the ability to download files from the infected host to the command and control (C2) server.
   </Example>
   <Example id="S1022" name="IceApple">
    IceApple's Multi File Exfiltrator module can exfiltrate multiple files from a compromised host as an HTTP response over C2.
   </Example>
   <Example id="S0434" name="Imminent Monitor">
    Imminent Monitor has uploaded a file containing debugger logs, network information and system information to the C2.
   </Example>
   <Example id="S0604" name="Industroyer">
    Industroyer sends information about hardware profiles and previously-received commands back to the C2 server in a POST-request.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang transferred compressed and encrypted RAR files containing exfiltration through the established backdoor command and control channel during operations.
   </Example>
   <Example id="S0487" name="Kessel">
    Kessel has exfiltrated information gathered from the infected system to the C2 server.
   </Example>
   <Example id="S1020" name="Kevin">
    Kevin can send data from the victim host through a DNS C2 channel.
   </Example>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY can exfiltrate collected information from the host to the C2 server.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has exfiltrated data over its C2 channel.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has sent data and files to its C2 server.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has exfiltrated data and files over a C2 channel through its various tools and malware.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has exfiltrated data over its C2 channel.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron exfiltrates data over its email C2 channel.
   </Example>
   <Example id="S0680" name="LitePower">
    LitePower can send collected data, including screenshots, over its C2 channel.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has the ability to initiate contact with command and control (C2) to exfiltrate stolen data.
   </Example>
   <Example id="S0409" name="Machete">
    Machete's collected data is exfiltrated over the same channel used for C2.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa exfiltrates data from a supplied path over its C2 channel.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can exfiltrate locally stored data via its C2.
   </Example>
   <Example id="S0459" name="MechaFlounder">
    MechaFlounder has the ability to send the compromised user's account name and hostname within a URL to C2.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo can send the data it collects to the C2 server.
   </Example>
   <Example id="S0084" name="Mis-Type">
    Mis-Type has transmitted collected files and data to its C2 server.
   </Example>
   <Example id="S0083" name="Misdat">
    Misdat has uploaded files and data to its C2 servers.
   </Example>
   <Example id="S0079" name="MobileOrder">
    MobileOrder exfiltrates data to its C2 server over the same protocol as C2 communications.
   </Example>
   <Example id="S1026" name="Mongall">
    Mongall can upload files and information from a compromised host to its C2 server.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used C2 infrastructure to receive exfiltrated data.
   </Example>
   <Example id="S0034" name="NETEAGLE">
    NETEAGLE is capable of reading files over the C2 channel.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT has used HTTP to receive stolen information from the infected machine.
   </Example>
   <Example id="S0340" name="Octopus">
    Octopus has uploaded stolen files and data from a victim's machine over its C2 channel.
   </Example>
   <Example id="S0439" name="Okrum">
    Data exfiltration is done by Okrum using the already opened channel with the C2 server.
   </Example>
   <Example id="S0264" name="OopsIE">
    OopsIE can upload files from the victim's machine to its C2 server.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, the threat actors uploaded stolen files to their C2 servers.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used the XServer backdoor to exfiltrate data.
   </Example>
   <Example id="S1017" name="OutSteel">
    OutSteel can upload files from a compromised host over its C2 channel.
   </Example>
   <Example id="S1050" name="PcShare">
    PcShare can upload files and information from a compromised host to its C2 servers.
   </Example>
   <Example id="S0587" name="Penquin">
    Penquin can execute the command code do_upload to send files to C2.
   </Example>
   <Example id="S1031" name="PingPull">
    PingPull has the ability to exfiltrate stolen victim data through its C2 channel.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has exfiltrated data over the C2 channel.
   </Example>
   <Example id="S0441" name="PowerShower">
    PowerShower has used a PowerShell document stealer module to pack and exfiltrate .txt, .pdf, .xls or .doc files smaller than 5MB that were modified during the past two days.
   </Example>
   <Example id="S0238" name="Proxysvc">
    Proxysvc performs data exfiltration over the control server channel using a custom protocol.
   </Example>
   <Example id="S0078" name="Psylo">
    Psylo exfiltrates data to its C2 server over the same protocol as C2 communications.
   </Example>
   <Example id="S0147" name="Pteranodon">
    Pteranodon exfiltrates screenshot files to its C2 server.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can send screenshots files, keylogger data, files, and recorded audio back to the C2 server.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can send stolen information to C2 nodes including passwords, accounts, and emails.
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT can exfiltrate data gathered from the infected system via the established Exchange Web Services API C2 channel.
   </Example>
   <Example id="S0375" name="Remexi">
    Remexi performs exfiltration over BITSAdmin, which is also used for the C2 channel.
   </Example>
   <Example id="S0496" name="REvil">
    REvil can exfiltrate host and malware information to C2 servers.
   </Example>
   <Example id="S0448" name="Rising Sun">
    Rising Sun can send data gathered from the infected machine via HTTP POST request to the C2.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can send collected files back over same C2 channel.
   </Example>
   <Example id="S0085" name="S-Type">
    S-Type has uploaded data and files from a compromised host to its C2 servers.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has sent system information to its C2 server using HTTP.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has sent collected data from a compromised host to its C2 servers.
   </Example>
   <Example id="S1019" name="Shark">
    Shark has the ability to upload files from the compromised host over a DNS or HTTP C2 channel.
   </Example>
   <Example id="S0445" name="ShimRatReporter">
    ShimRatReporter sent generated reports to the C2 via HTTP POST requests.
   </Example>
   <Example id="S0610" name="SideTwist">
    SideTwist has exfiltrated data over its C2 channel.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can transfer files from an infected host to the C2 server.
   </Example>
   <Example id="S0633" name="Sliver">
    Sliver can exfiltrate files from the victim using the download command.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA has sent system information to a C2 server via HTTP and HTTPS POST requests.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM has exfiltrated data to its C2 server.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT has uploaded collected data and files from a compromised host to its C2 server.
   </Example>
   <Example id="S0543" name="Spark">
    Spark has exfiltrated data over the C2 channel.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has exfiltrated victim data using HTTP POST requests to its C2 servers.
   </Example>
   <Example id="S1037" name="STARWHALE">
    STARWHALE can exfiltrate collected data to its C2 servers.
   </Example>
   <Example id="G0038" name="Stealth Falcon">
    After data is collected by Stealth Falcon malware, it is exfiltrated over the existing C2 channel.
   </Example>
   <Example id="S1034" name="StrifeWater">
    StrifeWater can send data and files from a compromised host to its C2 server.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity can exfiltrate collected documents through C2 channels.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet sends compromised victim information via HTTP.
   </Example>
   <Example id="S1042" name="SUGARDUMP">
    SUGARDUMP has sent stolen credentials and other data to its C2 server.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to send collected files over its C2.
   </Example>
   <Example id="S0595" name="ThiefQuest">
    ThiefQuest exfiltrates targeted file extensions in the /Users/ folder to the command and control server via unencrypted HTTP. Network packets contain a string with two pieces of information: a file path and the contents of the file in a base64 encoded string.
   </Example>
   <Example id="S0671" name="Tomiris">
    Tomiris can upload files matching a hardcoded set of extensions, such as .doc, .docx, .pdf, and .rar, to its C2 server.
   </Example>
   <Example id="S0678" name="Torisma">
    Torisma can send victim data to an actor-controlled C2 server.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot can send information about the compromised host and upload data to a hardcoded C2 server.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has used HTTP POSTs to exfil gathered information.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has the ability to exfiltrate data over the C2 channel.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT can send collected victim data to its C2 server.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has exfiltrated domain credentials and network enumeration information over command and control (C2) channels.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET exfiltrates data stolen from a system over its C2 channel.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy has exfiltrated data to the designated C2 server using HTTP POST requests.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has exfiltrated files via the Dropbox API C2.
   </Example>
   <Example id="S0086" name="ZLib">
    ZLib has sent data and files from a compromised host to its C2 servers.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1057" name="Data Loss Prevention">
    Data loss prevention can detect and block sensitive data being sent over unencrypted protocols.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool command and control signatures over time or construct protocols in such a way to avoid detection by common defensive tools.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1011" name="Exfiltration Over Other Network Medium">
  Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel.
  <Tactic>
   Exfiltration
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Mitigations>
   <Mitigation id="M1028" name="Operating System Configuration">
    Prevent the creation of new network adapters where possible.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1011.001" name="Exfiltration Over Other Network Medium: Exfiltration Over Bluetooth">
  Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an adversary may opt to exfiltrate data using a Bluetooth communication channel.
  <Tactic>
   Exfiltration
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0143" name="Flame">
    Flame has a module named BeetleJuice that contains Bluetooth functionality that may be used in different ways, including transmitting encoded information from the infected system over the Bluetooth protocol, acting as a Bluetooth beacon, and identifying other Bluetooth devices in the vicinity.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Disable Bluetooth in local computer security settings or by group policy if it is not needed within an environment.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Prevent the creation of new network adapters where possible.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1052" name="Exfiltration Over Physical Medium">
  Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.
  <Tactic>
   Exfiltration
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <System_Requirements>
   Presence of physical medium or device
  </System_Requirements>
  <Mitigations>
   <Mitigation id="M1057" name="Data Loss Prevention">
    Data loss prevention can detect and block sensitive data being copied to physical mediums.
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Disable Autorun if it is unnecessary.
   </Mitigation>
   <Mitigation id="M1034" name="Limit Hardware Installation">
    Limit the use of USB devices and removable media within a network.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0016" name="Drive">
    Drive Creation
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1052.001" name="Exfiltration Over Physical Medium: Exfiltration over USB">
  Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.
  <Tactic>
   Exfiltration
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <System_Requirements>
   Presence of physical medium or device
  </System_Requirements>
  <Examples>
   <Example id="S0092" name="Agent.btz">
    Agent.btz creates a file named thumb.dd on all USB flash drives connected to the victim. This file contains information about the infected system and activity logs.
   </Example>
   <Example id="S0409" name="Machete">
    Machete has a feature to copy files from every drive onto a removable drive in a hidden folder.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has used a customized PlugX variant which could exfiltrate documents from air-gapped networks.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec contains a module to move data from airgapped networks to Internet-connected systems by using a removable USB device.
   </Example>
   <Example id="S0035" name="SPACESHIP">
    SPACESHIP copies staged data to removable drives when they are inserted into the system.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has exfiltrated data using USB storage devices.
   </Example>
   <Example id="S0136" name="USBStealer">
    USBStealer exfiltrates collected files via removable media from air-gapped victims.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1057" name="Data Loss Prevention">
    Data loss prevention can detect and block sensitive data being copied to USB devices.
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Disable Autorun if it is unnecessary.
   </Mitigation>
   <Mitigation id="M1034" name="Limit Hardware Installation">
    Limit the use of USB devices and removable media within a network.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0016" name="Drive">
    Drive Creation
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1567" name="Exfiltration Over Web Service">
  Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.
  <Tactic>
   Exfiltration
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0622" name="AppleSeed">
    AppleSeed has exfiltrated files using web services.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 can exfiltrate data over Google Drive.
   </Example>
   <Example id="S0547" name="DropBook">
    DropBook has used legitimate web services to exfiltrate data.
   </Example>
   <Example id="S0508" name="Ngrok">
    Ngrok has been used by threat actors to configure servers for data exfiltration.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1057" name="Data Loss Prevention">
    Data loss prevention can be detect and block sensitive data being uploaded to web services via web browsers.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    Web proxies can be used to enforce an external network communication policy that prevents use of unauthorized external services.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1567.001" name="Exfiltration Over Web Service: Exfiltration to Code Repository">
  Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.
  <Tactic>
   Exfiltration
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0363" name="Empire">
    Empire can use GitHub for data exfiltration.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    Web proxies can be used to enforce an external network communication policy that prevents use of unauthorized external services.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1567.002" name="Exfiltration Over Web Service: Exfiltration to Cloud Storage">
  Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.
  <Tactic>
   Exfiltration
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0635" name="BoomBox">
    BoomBox can upload data to dedicated per-victim folders in Dropbox.
   </Example>
   <Example id="S0651" name="BoxCaon">
    BoxCaon has the capability to download folders' contents on the system and upload the results back to its Dropbox drive.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors exfiltrated files and sensitive data to the MEGA cloud storage site using the Rclone command rclone.exe copy --max-age 2y "\\SERVER\Shares" Mega:DATA -q --ignore-existing --auto-confirm --multi-thread-streams 7 --transfers 7 --bwlimit 10M.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has exfiltrated stolen data to OneDrive accounts.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can send files from a victim's machine to Dropbox.
   </Example>
   <Example id="G0142" name="Confucius">
    Confucius has exfiltrated victim data to cloud storage service accounts.
   </Example>
   <Example id="S1023" name="CreepyDrive">
    CreepyDrive can use cloud services including OneDrive for data exfiltration.
   </Example>
   <Example id="S0538" name="Crutch">
    Crutch has exfiltrated stolen data to Dropbox.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has used the megacmd tool to upload stolen files from a victim network to MEGA.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can use Dropbox for data exfiltration.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has exfiltrated stolen data to the MEGA file sharing site.
   </Example>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has exfiltrated data to file sharing sites, including MEGA.
   </Example>
   <Example id="S0037" name="HAMMERTOSS">
    HAMMERTOSS exfiltrates data by uploading it to accounts created by the actors on Web cloud storage providers for the adversaries to retrieve later.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has used cloud services, including OneDrive, for data exfiltration.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has exfiltrated stolen files and data to actor-controlled Blogspot accounts.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has exfiltrated stolen data to Dropbox using a customized version of dbxcli.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has used an uploader known as LUNCHMONEY that can exfiltrate files to Dropbox.
   </Example>
   <Example id="S0340" name="Octopus">
    Octopus has exfiltrated data to file sharing sites.
   </Example>
   <Example id="G1005" name="POLONIUM">
    POLONIUM has exfiltrated stolen data to POLONIUM-owned OneDrive and Dropbox accounts.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay can use a file exfiltration tool to upload specific files to Dropbox.
   </Example>
   <Example id="S1040" name="Rclone">
    Rclone can exfiltrate data to cloud storage services such as Dropbox, Google Drive, Amazon S3, and MEGA.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can send collected data to cloud storage services such as PCloud.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has exfiltrated stolen data to Dropbox.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used WebDAV to upload stolen USB files to a cloud drive.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has exfiltrated stolen data to Dropbox.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    Web proxies can be used to enforce an external network communication policy that prevents use of unauthorized external services.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1190" name="Exploit Public-Facing Application">
  Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include Exploitation for Defense Evasion.
  <Tactic>
   Initial Access
  </Tactic>
  <Platforms>
   Containers, IaaS, Linux, Network, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has used a variety of public exploits, including CVE 2020-0688 and CVE 2020-17144, to gain execution on vulnerable Microsoft Exchange; they have also conducted SQL injection attacks against external websites.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has exploited CVE-2019-19781 for Citrix, CVE-2019-11510 for Pulse Secure VPNs, CVE-2018-13379 for FortiGate VPNs, and CVE-2019-9670 in Zimbra software to gain access. They have also exploited CVE-2020-0688 against the Microsoft Exchange Control Panel to regain access to a network.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used SQL injection for initial compromise.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 exploited CVE-2020-10189 against Zoho ManageEngine Desktop Central, and CVE-2019-19781 to compromise Citrix Application Delivery Controllers (ADC) and gateway devices.
   </Example>
   <Example id="G0001" name="Axiom">
    Axiom has been observed using SQL injection to gain access to systems.
   </Example>
   <Example id="G0135" name="BackdoorDiplomacy">
    BackdoorDiplomacy has exploited CVE-2020-5902, an F5 BIP-IP vulnerability, to drop a Linux backdoor. BackdoorDiplomacy has also exploited mis-configured Plesk servers.
   </Example>
   <Example id="G0098" name="BlackTech">
    BlackTech has exploited a buffer overflow vulnerability in Microsoft Internet Information Services (IIS) 6.0, CVE-2017-7269, in order to establish a new HTTP or command and control (C2) server.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has gained initial access by exploiting CVE-2019-18935, a vulnerability within Telerik UI for ASP.NET AJAX.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has conducted SQL injection attacks, exploited vulnerabilities CVE-2019-19781 and CVE-2020-0688 for Citrix and MS Exchange, and CVE-2018-13379 for Fortinet VPNs.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has compromised victims by directly exploiting vulnerabilities of public-facing servers, including those associated with Microsoft Exchange and Oracle GlassFish.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has exploited known vulnerabilities in Fortinet, PulseSecure, and Palo Alto VPN appliances.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM exploited a publicly-facing servers including Wildfly/JBoss servers to gain access to the network.
   </Example>
   <Example id="G0115" name="GOLD SOUTHFIELD">
    GOLD SOUTHFIELD has exploited Oracle WebLogic vulnerabilities for initial compromise.
   </Example>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has exploited CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065  to compromise on-premises versions of Microsoft Exchange Server, enabling access to email accounts and installation of additional malware.
   </Example>
   <Example id="S0224" name="Havij">
    Havij is used to automate SQL injection.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has compromised networks by exploiting Internet-facing applications, including vulnerable Microsoft Exchange and SharePoint servers.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has exploited various vulnerabilities for initial access, including Microsoft Exchange vulnerability CVE-2020-0688.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has used open-source JNDI exploit kits to exploit Log4j (CVE-2021-44228) and has exploited ProxyShell (CVE-2021-34473, CVE-2021-34523, CVE-2021-31207) on MS Exchange servers.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has leveraged vulnerabilities in Pulse Secure VPNs to hijack sessions.
   </Example>
   <Example id="G1009" name="Moses Staff">
    Moses Staff has exploited known vulnerabilities in public-facing infrastructure such as Microsoft Exchange Servers.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has exploited the Microsoft Exchange memory corruption vulnerability (CVE-2020-0688).
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors used SQL injection exploits against extranet web servers to gain access.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors exploited multiple vulnerabilities in externally facing servers.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors gained initial access by exploiting vulnerabilities in JBoss webservers.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke exploited Apache Struts, Oracle WebLogic (CVE-2017-10271), and Adobe ColdFusion (CVE-2017-3066) vulnerabilities to deliver malware.
   </Example>
   <Example id="S0623" name="Siloscape">
    Siloscape is executed after the attacker gains initial access to a Windows container using a known vulnerability.
   </Example>
   <Example id="S0516" name="SoreFang">
    SoreFang can gain access by exploiting a Sangfor SSL VPN vulnerability that allows for the placement and delivery of malicious update binaries.
   </Example>
   <Example id="S0225" name="sqlmap">
    sqlmap can be used to automate exploitation of SQL injection vulnerabilities.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has exploited the Microsoft SharePoint vulnerability CVE-2019-0604 and CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065 in Exchange Server.
   </Example>
   <Example id="G0123" name="Volatile Cedar">
    Volatile Cedar has targeted publicly facing web servers, with both automatic and manual vulnerability discovery.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell has been dropped through exploitation of CVE-2011-2462, CVE-2013-3163, and CVE-2014-0322.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1048" name="Application Isolation and Sandboxing">
    Application isolation will limit what other processes and system features the exploited target can access.
   </Mitigation>
   <Mitigation id="M1050" name="Exploit Protection">
    Web Application Firewalls may be used to limit exposure of applications to prevent exploit traffic from reaching the application.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Segment externally facing servers and services from the rest of the network with a DMZ or on separate hosting infrastructure.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Use least privilege for service accounts will limit what permissions the exploited process gets on the rest of the system.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Update software regularly by employing patch management for externally exposed applications.
   </Mitigation>
   <Mitigation id="M1016" name="Vulnerability Scanning">
    Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1203" name="Exploitation for Client Execution">
  Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <System_Requirements>
   Remote exploitation for execution requires a remotely accessible service reachable over the network or other vector of access such as spearphishing or drive-by compromise.
  </System_Requirements>
  <Examples>
   <Example id="G0018" name="admin@338">
    admin@338 has exploited client software vulnerabilities for execution, such as Microsoft Word CVE-2012-0158.
   </Example>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla has exploited Office vulnerabilities such as CVE-2017-11882 and CVE-2017-8570 for execution during delivery.
   </Example>
   <Example id="G0138" name="Andariel">
    Andariel has exploited numerous ActiveX vulnerabilities, including zero-days.
   </Example>
   <Example id="G1007" name="Aoqin Dragon">
    Aoqin Dragon has exploited CVE-2012-0158 and CVE-2010-3333 for execution against targeted systems.
   </Example>
   <Example id="G0005" name="APT12">
    APT12 has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities (CVE-2009-3129, CVE-2012-0158) and vulnerabilities in Adobe Reader and Flash (CVE-2009-4324, CVE-2009-0927, CVE-2011-0609, CVE-2011-0611).
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has exploited Microsoft Office vulnerability CVE-2017-0262 for execution.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used multiple software exploits for common client software, like Microsoft Word, Exchange, and Adobe Reader, to gain code execution.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has exploited the Adobe Flash Player vulnerability CVE-2015-3113 and Internet Explorer vulnerability CVE-2014-1776.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has used RTF document that includes an exploit to execute malicious code. (CVE-2017-11882)
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has attempted to exploit a known vulnerability in WinRAR (CVE-2018-20250), and attempted to gain remote code execution via a security bypass vulnerability (CVE-2017-11774).
   </Example>
   <Example id="G0067" name="APT37">
    APT37 has used exploits for Flash Player (CVE-2016-4117, CVE-2018-4878), Word (CVE-2017-0199), Internet Explorer (CVE-2020-1380 and CVE-2020-26411), and Microsoft Edge (CVE-2021-26411) for execution.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 leveraged the follow exploits in their operations: CVE-2012-0158, CVE-2015-1641, CVE-2017-0199, CVE-2017-11882, and CVE-2019-3396.
   </Example>
   <Example id="G0001" name="Axiom">
    Axiom has used exploits for multiple vulnerabilities including CVE-2014-0322, CVE-2012-4792, CVE-2012-1889, and CVE-2013-3893.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot leverages a known zero-day vulnerability in Adobe Flash to execute the implant into the victims’ machines.
   </Example>
   <Example id="G1002" name="BITTER">
    BITTER has exploited Microsoft Office vulnerabilities CVE-2012-0158, CVE-2017-11882, CVE-2018-0798, and CVE-2018-0802.
   </Example>
   <Example id="G0098" name="BlackTech">
    BlackTech has exploited multiple vulnerabilities for execution, including Microsoft Office vulnerabilities CVE-2012-0158, CVE-2014-6352, CVE-2017-0199, and Adobe Flash CVE-2015-5119.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has exploited Microsoft Office vulnerabilities CVE-2014-4114, CVE-2018-0802, and CVE-2018-0798 for execution.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group had exploited multiple vulnerabilities for execution, including Microsoft’s Equation Editor (CVE-2017-11882), an Internet Explorer vulnerability (CVE-2018-8174), CVE-2017-8570, CVE-2017-0199, and CVE-2017-8759.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can exploit Oracle Java vulnerabilities for execution, including CVE-2011-3544, CVE-2013-2465, CVE-2012-4681, and CVE-2013-2460.
   </Example>
   <Example id="G0142" name="Confucius">
    Confucius has exploited Microsoft Office vulnerabilities, including CVE-2015-1641, CVE-2017-11882, and CVE-2018-0802.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel has exploited Adobe Flash vulnerability CVE-2015-8651 for execution.
   </Example>
   <Example id="S0243" name="DealersChoice">
    DealersChoice leverages vulnerable versions of Flash to perform execution.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has exploited CVE-2011-0611 in Adobe Flash Player to gain execution on a targeted system.
   </Example>
   <Example id="G0066" name="Elderwood">
    Elderwood has used exploitation of endpoint software, including Microsoft Internet Explorer Adobe Flash vulnerabilities, to gain execution. They have also used zero-day exploits.
   </Example>
   <Example id="G1003" name="Ember Bear">
    Ember Bear has exploited Microsoft Office vulnerability CVE-2017-11882.
   </Example>
   <Example id="S0396" name="EvilBunny">
    EvilBunny has exploited CVE-2011-4369, a vulnerability in the PRC component in Adobe Reader.
   </Example>
   <Example id="G1011" name="EXOTIC LILY">
    EXOTIC LILY has used malicious documents containing exploits for CVE-2021-40444 affecting Microsoft MSHTML.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors exploited CVE-2017-11882 to execute code on the victim's machine.
   </Example>
   <Example id="S0391" name="HAWKBALL">
    HAWKBALL has exploited Microsoft Office vulnerabilities CVE-2017-11882 and CVE-2018-0802 to deliver the payload.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa has exploited CVE-2018-0798 for execution.
   </Example>
   <Example id="G0100" name="Inception">
    Inception has exploited CVE-2012-0158, CVE-2014-1761, CVE-2017-11882 and CVE-2018-0802 for execution.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole has installed legitimate but vulnerable Total Video Player software and wdigest.dll library drivers on compromised hosts to exploit stack overflow and input validation vulnerabilities for code execution.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has exploited Adobe Flash vulnerability CVE-2018-4878 for execution.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has exploited multiple Microsoft Office and .NET vulnerabilities for execution, including CVE-2017-0199, CVE-2017-8759, and CVE-2017-11882.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has exploited the Office vulnerability CVE-2017-0199 for execution.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has exploited CVE-2017-0199 in Microsoft Word to execute code.
   </Example>
   <Example id="C0016" name="Operation Dust Storm">
    During Operation Dust Storm, the threat actors exploited Adobe Flash vulnerability CVE-2011-0611, Microsoft Windows Help vulnerability CVE-2010-1885, and several Internet Explorer vulnerabilities, including CVE-2011-1255, CVE-2012-1889, and CVE-2014-0322.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork uses malicious documents to deliver remote execution exploits as part of. The group has previously exploited CVE-2017-8570, CVE-2012-1856, CVE-2014-4114, CVE-2017-0199, CVE-2017-11882, and CVE-2015-1641.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay has been embedded in documents exploiting CVE-2017-0199, CVE-2017-11882, and CVE-2017-8570.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has exploited vulnerabilities in Microsoft PowerPoint via OLE objects (CVE-2014-4114) and Microsoft Word via crafted TIFF images (CVE-2013-3906).
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has exploited vulnerabilities to gain execution including CVE-2017-11882 and CVE-2020-0674.
   </Example>
   <Example id="S0374" name="SpeakUp">
    SpeakUp attempts to exploit the following vulnerabilities in order to execute its malicious script: CVE-2012-0874, CVE-2010-1871, CVE-2017-10271, CVE-2018-2894, CVE-2016-3088, JBoss AS 3/4/5/6, and the Hadoop YARN ResourceManager.
   </Example>
   <Example id="S0578" name="SUPERNOVA">
    SUPERNOVA was installed via exploitation of a SolarWinds Orion API authentication bypass vulnerability (CVE-2020-10148).
   </Example>
   <Example id="G0062" name="TA459">
    TA459 has exploited Microsoft Word vulnerability CVE-2017-0199 for execution.
   </Example>
   <Example id="G0089" name="The White Company">
    The White Company has taken advantage of a known vulnerability in Microsoft Word (CVE 2012-0158) to execute code.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has exploited CVE-2018-0798 in Equation Editor.
   </Example>
   <Example id="G0131" name="Tonto Team">
    Tonto Team has exploited Microsoft vulnerabilities, including CVE-2018-0798, CVE-2018-8174, CVE-2018-0802, CVE-2017-11882, CVE-2019-9489 CVE-2020-8468, and CVE-2018-0798 to enable execution of their delivered malicious payloads.
   </Example>
   <Example id="G0134" name="Transparent Tribe">
    Transparent Tribe has crafted malicious files to exploit CVE-2012-0158 and CVE-2010-3333 for execution.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has executed commands through Microsoft security vulnerabilities, including CVE-2017-11882, CVE-2018-0802, and CVE-2012-0158.
   </Example>
   <Example id="S0341" name="Xbash">
    Xbash can attempt to exploit known vulnerabilities in Hadoop, Redis, or ActiveMQ when it finds those services running in order to conduct further execution.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1048" name="Application Isolation and Sandboxing">
    Browser sandboxes can be used to mitigate some of the impact of exploitation, but sandbox escapes may still exist.
   </Mitigation>
   <Mitigation id="M1050" name="Exploit Protection">
    Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior.  Many of these protections depend on the architecture and target application binary for compatibility.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1212" name="Exploitation for Credential Access">
  Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Mitigations>
   <Mitigation id="M1048" name="Application Isolation and Sandboxing">
    Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. Risks of additional exploits and weaknesses in these systems may still exist.
   </Mitigation>
   <Mitigation id="M1050" name="Exploit Protection">
    Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. Many of these protections depend on the architecture and target application binary for compatibility and may not work for software targeted for defense evasion.
   </Mitigation>
   <Mitigation id="M1019" name="Threat Intelligence Program">
    Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Update software regularly by employing patch management for internal enterprise endpoints and servers.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1211" name="Exploitation for Defense Evasion">
  Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, System access controls
  </Defense_Bypassed>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has used CVE-2015-4902 to bypass security features.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1048" name="Application Isolation and Sandboxing">
    Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. Risks of additional exploits and weaknesses in these systems may still exist.
   </Mitigation>
   <Mitigation id="M1050" name="Exploit Protection">
    Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior.  Many of these protections depend on the architecture and target application binary for compatibility and may not work for software targeted for defense evasion.
   </Mitigation>
   <Mitigation id="M1019" name="Threat Intelligence Program">
    Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Update software regularly by employing patch management for internal enterprise endpoints and servers.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1068" name="Exploitation for Privilege Escalation">
  Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.
  <Tactic>
   Privilege Escalation
  </Tactic>
  <Platforms>
   Containers, Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Effective_Permissions>
   User
  </Effective_Permissions>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has exploited CVE-2014-4076, CVE-2015-2387, CVE-2015-1701, CVE-2017-0263 to escalate privileges.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has exploited CVE-2021-36934 to escalate privileges on a compromised host.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has used CVE-2016-7255 to escalate privileges.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has used a publicly available exploit for CVE-2017-0213 to escalate privileges on a local system.
   </Example>
   <Example id="G1002" name="BITTER">
    BITTER has exploited CVE-2021-1732 for privilege escalation.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp has exploited multiple Windows vulnerabilities (CVE-2010-2743, CVE-2010-3338, CVE-2010-4398, CVE-2008-1084) and a .NET Runtime Optimization vulnerability for privilege escalation.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has used exploits to increase their levels of rights and privileges.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can exploit vulnerabilities such as MS14-058.
   </Example>
   <Example id="S0050" name="CosmicDuke">
    CosmicDuke attempts to exploit privilege escalation vulnerabilities CVE-2010-0232 or CVE-2010-4398.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can exploit vulnerabilities such as MS16-032 and MS16-135.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used tools to exploit Windows vulnerabilities in order to escalate privileges. The tools targeted CVE-2013-3660, CVE-2011-2005, and CVE-2010-4398, all of which could allow local users to access kernel-level privileges.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has exploited the CVE-2016-0167 local vulnerability.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has used the BOtB tool which exploits CVE-2019-5736.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole has exploited CVE-2007-5633 vulnerability in the speedfan.sys driver to obtain kernel mode privileges.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    JHUHUGIT has exploited CVE-2015-1701 and CVE-2015-2387 to escalate privileges.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has exploited unpatched vulnerabilities on internally accessible servers including JIRA, GitLab, and Confluence for privilege escalation.
   </Example>
   <Example id="S0664" name="Pandora">
    Pandora can use CVE-2017-15303 to bypass Windows Driver Signature Enforcement (DSE) protection and load its driver.
   </Example>
   <Example id="G0068" name="PLATINUM">
    PLATINUM has leveraged a zero-day vulnerability to escalate privileges.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 contains modules for local privilege escalation exploits such as CVE-2016-9192 and CVE-2016-0099.
   </Example>
   <Example id="S0654" name="ProLock">
    ProLock can use CVE-2019-0859 to escalate privileges on a compromised host.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec has a plugin to drop and execute vulnerable Outpost Sandbox or avast! Virtualization drivers in order to gain kernel mode privileges.
   </Example>
   <Example id="S0623" name="Siloscape">
    Siloscape has leveraged a vulnerability in Windows containers to perform an Escape to Host.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet used MS10-073 and an undisclosed Task Scheduler vulnerability to escalate privileges on local Windows machines.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has used CVE-2014-6324 and CVE-2017-0213 to escalate privileges.
   </Example>
   <Example id="G0131" name="Tonto Team">
    Tonto Team has exploited CVE-2019-0803 and MS16-032 to escalate privileges.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has exploited vulnerabilities in the VBoxDrv.sys driver to obtain kernel mode privileges.
   </Example>
   <Example id="G0107" name="Whitefly">
    Whitefly has used an open-source tool to exploit a known Windows privilege escalation vulnerability (CVE-2016-0051) on unpatched computers.
   </Example>
   <Example id="S0176" name="Wingbird">
    Wingbird exploits CVE-2016-4117 to allow an executable to gain escalated privileges.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET has used a zero-day exploit in the ssh launchdaemon to elevate privileges and bypass SIP.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has exploited CVE-2017-0005 for local privilege escalation.
   </Example>
   <Example id="S0672" name="Zox">
    Zox has the ability to leverage local and remote exploits to escalate privileges.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1048" name="Application Isolation and Sandboxing">
    Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. Risks of additional exploits and weaknesses in these systems may still exist.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Consider blocking the execution of known vulnerable drivers that adversaries may exploit to execute code in kernel mode. Validate driver block rules in audit mode to ensure stability prior to production deployment.
   </Mitigation>
   <Mitigation id="M1050" name="Exploit Protection">
    Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior.  Many of these protections depend on the architecture and target application binary for compatibility and may not work for software components targeted for privilege escalation.
   </Mitigation>
   <Mitigation id="M1019" name="Threat Intelligence Program">
    Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Update software regularly by employing patch management for internal enterprise endpoints and servers.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0027" name="Driver">
    Driver Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1210" name="Exploitation of Remote Services">
  Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.
  <Tactic>
   Lateral Movement
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <System_Requirements>
   Unpatched software or otherwise vulnerable target. Depending on the target and goal, the system and exploitable service may need to be remotely accessible from the internal network.
  </System_Requirements>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 exploited a Windows SMB Remote Code Execution Vulnerability to conduct lateral movement.
   </Example>
   <Example id="S0606" name="Bad Rabbit">
    Bad Rabbit used the EternalRomance SMB exploit to spread through victim networks.
   </Example>
   <Example id="S0608" name="Conficker">
    Conficker exploited the MS08-067 Windows vulnerability for remote code execution through a crafted RPC request.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has exploited a Windows Netlogon vulnerability (CVE-2020-1472) to obtain access to Windows Active Directory servers.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has used Mimikatz to exploit a domain controller via the ZeroLogon exploit (CVE-2020-1472).
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has been seen exploiting SMB via a vulnerability exploit like EternalBlue (MS17-010) to achieve lateral movement and propagation.
   </Example>
   <Example id="S0363" name="Empire">
    Empire has a limited number of built-in modules for exploiting remote SMB, JBoss, and Jenkins servers.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has exploited ZeroLogon (CVE-2020-1472) against vulnerable domain controllers.
   </Example>
   <Example id="S0143" name="Flame">
    Flame can use MS10-061 to exploit a print spooler vulnerability in a remote system with a shared printer in order to move laterally.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has exploited known vulnerabilities in remote services including RDP.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can spread within a network via the BlueKeep (CVE-2019-0708) and EternalBlue (CVE-2017-0144) vulnerabilities in RDP and SMB respectively.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can exploit multiple vulnerabilities including EternalBlue (CVE-2017-0144) and EternalRomance (CVE-2017-0144).
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used tools to exploit the ZeroLogon vulnerability (CVE-2020-1472).
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has exploited the Microsoft Netlogon vulnerability (CVE-2020-1472).
   </Example>
   <Example id="S0368" name="NotPetya">
    NotPetya can use two exploits in SMBv1, EternalBlue and EternalRomance, to spread itself to other remote systems on the network.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 contains a module for exploiting SMB via EternalBlue.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can move laterally using worm-like functionality through exploitation of SMB.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet propagates using the MS10-061 Print Spooler and MS08-067 Windows Server Service vulnerabilities.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has exploited MS17-010 to move laterally to other systems on the network.
   </Example>
   <Example id="G0131" name="Tonto Team">
    Tonto Team has used EternalBlue exploits for lateral movement.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot utilizes EternalBlue and EternalRomance exploits for lateral movement in the modules wormwinDll, wormDll, mwormDll, nwormDll, tabDll.
   </Example>
   <Example id="S0366" name="WannaCry">
    WannaCry uses an exploit in SMBv1 to spread itself to other remote systems on a network.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has exploited or attempted to exploit Zerologon (CVE-2020-1472) and EternalBlue (MS17-010) vulnerabilities.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1048" name="Application Isolation and Sandboxing">
    Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. Risks of additional exploits and weaknesses in these systems may still exist.
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Minimize available services to only those that are necessary.
   </Mitigation>
   <Mitigation id="M1050" name="Exploit Protection">
    Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior.  Many of these protections depend on the architecture and target application binary for compatibility and may not work for all software or services targeted.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Segment networks and systems appropriately to reduce access to critical systems and services to controlled methods.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Minimize permissions and access for service accounts to limit impact of exploitation.
   </Mitigation>
   <Mitigation id="M1019" name="Threat Intelligence Program">
    Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Update software regularly by employing patch management for internal enterprise endpoints and servers.
   </Mitigation>
   <Mitigation id="M1016" name="Vulnerability Scanning">
    Regularly scan the internal network for available services to identify new and potentially vulnerable services.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1133" name="External Remote Services">
  Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.
  <Tactics>
   Persistence, Initial Access
  </Tactics>
  <Platforms>
   Containers, Linux, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-555
  </CAPEC_ID>
  <Examples>
   <Example id="G0026" name="APT18">
    APT18 actors leverage legitimate credentials to log into external remote services.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has used Tor and a variety of commercial VPN services to route brute force authentication attempts.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used compromised identities to access networks via SSH,  VPNs, and other remote access tools.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 compromised an online billing/payment service using VPN access between a third-party service provider and the targeted payment service.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used legitimate credentials to login to an external VPN, Citrix, SSH, and other remote services.
   </Example>
   <Example id="C0004" name="CostaRicto">
    During CostaRicto, the threat actors set up remote tunneling using an SSH tool to maintain access to a compromised environment.
   </Example>
   <Example id="S0600" name="Doki">
    Doki was executed through an open Docker daemon API port.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has used VPNs and Outlook Web Access (OWA) to maintain access to victim networks.
   </Example>
   <Example id="G0053" name="FIN5">
    FIN5 has used legitimate VPN, Citrix, or VNC credentials to maintain access to a victim environment.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM has used VPN services, including SoftEther VPN, to access and maintain persistence in victim environments.
   </Example>
   <Example id="G0115" name="GOLD SOUTHFIELD">
    GOLD SOUTHFIELD has used publicly-accessible RDP and remote management and monitoring (RMM) servers to gain access to victim machines.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard was executed through an unsecure kubelet that allowed anonymous access to the victim environment.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has gained access through VPNs including with compromised accounts and stolen VPN certificates.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used RDP to establish persistence.
   </Example>
   <Example id="S0599" name="Kinsing">
    Kinsing was executed in an Ubuntu container deployed via an open Docker daemon API.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has gained access to internet-facing systems and applications, including virtual private network (VPN), remote desktop protocol (RDP), and virtual desktop infrastructure (VDI) including Citrix.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has used external remote services such as virtual private networks (VPN) to gain initial access.
   </Example>
   <Example id="S0362" name="Linux Rabbit">
    Linux Rabbit attempts to gain access to the server via SSH.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors used compromised VPN accounts to gain access to victim systems.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig uses remote services such as VPN, Citrix, or OWA to persist in an environment.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors enabled WinRM over HTTP/HTTPS as a backup persistence mechanism using the following command: cscript //nologo "C:\Windows\System32\winrm.vbs" set winrm/config/service@{EnableCompatibilityHttpsListener="true"}.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used stolen credentials to connect to the victim's network via VPN.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used Dropbear SSH with a hardcoded backdoor password to maintain persistence within the target network. Sandworm Team has also used VPN tunnels established in legitimate software company infrastructure to gain access to internal networks of that software company's users.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has used open-source tools such as Weave Scope to target exposed Docker API ports and gain initial access to victim environments.
   </Example>
   <Example id="G0088" name="TEMP.Veles">
    TEMP.Veles has used a VPN to persist in the victim environment.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 actors look for and use VPN profiles during an operation to access the network using external VPN services.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has accessed victim networks by using stolen credentials to access the corporate VPN infrastructure.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Disable or block remotely available services that may be unnecessary.
   </Mitigation>
   <Mitigation id="M1035" name="Limit Access to Resource Over Network">
    Limit access to remote services through centrally managed concentrators such as VPNs and other managed remote access systems.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use strong two-factor or multi-factor authentication for remote service accounts to mitigate an adversary's ability to leverage stolen credentials, but be aware of Multi-Factor Authentication Interception techniques for some two-factor authentication implementations.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Metadata
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1008" name="Fallback Channels">
  Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0504" name="Anchor">
    Anchor can use secondary C2 servers for communication after establishing connectivity and relaying victim information to primary C2 servers.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed can use a second channel for C2 when the primary channel is in upload mode.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used the Steam community page as a fallback mechanism for C2.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar has the ability to use an alternative C2 server if the primary server fails.
   </Example>
   <Example id="S0017" name="BISCUIT">
    BISCUIT malware contains a secondary fallback command and control server that is contacted after the primary command and control server.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    BlackEnergy has the capability to communicate over a backup channel via plus.google.com.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can use backup C2 servers if the primary server fails.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT can communicate over multiple C2 host and port combinations.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower can change its C2 channel once every 360 loops by retrieving a new domain from the actors’ S3 bucket.
   </Example>
   <Example id="S0023" name="CHOPSTICK">
    CHOPSTICK can switch to a new C2 channel if the current one is broken.
   </Example>
   <Example id="S0538" name="Crutch">
    Crutch has used a hardcoded GitHub repository as a fallback channel.
   </Example>
   <Example id="S0021" name="Derusbi">
    Derusbi uses a backup communication method with an HTTP beacon.
   </Example>
   <Example id="S0062" name="DustySky">
    DustySky has two hard-coded domains for C2 servers; if the first does not respond, it will try the second.
   </Example>
   <Example id="S0377" name="Ebury">
    Ebury has implemented a fallback mechanism to begin using a DGA when the attacker hasn't connected to the infected system for three days.
   </Example>
   <Example id="S0401" name="Exaramel for Linux">
    Exaramel for Linux can attempt to find a new C2 server if it receives an error.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke has used several C2 servers per targeted organization.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7's Harpy backdoor malware can use DNS as a backup channel for C2 if HTTP fails.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can use multiple domains and protocols in C2.
   </Example>
   <Example id="S0376" name="HOPLIGHT">
    HOPLIGHT has multiple C2 channels in place in case one fails.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole has been configured with several servers available for alternate C2 communications.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    JHUHUGIT tests if it can reach its C2 server by first attempting a direct connection, and if it fails, obtaining proxy settings and sending the connection through a proxy, and finally injecting code into a running browser if the proxy method fails.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar can accept multiple URLs for C2 servers.
   </Example>
   <Example id="S1020" name="Kevin">
    Kevin can assign hard-coded fallback domains for C2.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs uses a large list of C2 servers that it cycles through until a successful connection is established.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group malware SierraAlfa sends data to one of the hard-coded C2 servers chosen at random, and if the transmission fails, chooses a new C2 server to attempt the transmission again.
   </Example>
   <Example id="S0211" name="Linfo">
    Linfo creates a backdoor through which remote attackers can change C2 servers.
   </Example>
   <Example id="S0409" name="Machete">
    Machete has sent data over HTTP if FTP failed, and has also used a fallback server.
   </Example>
   <Example id="S0051" name="MiniDuke">
    MiniDuke uses Google Search to identify C2 servers if its primary C2 method via Twitter is not working.
   </Example>
   <Example id="S0084" name="Mis-Type">
    Mis-Type first attempts to use a Base64-encoded network protocol over a raw TCP socket for C2, and if that method fails, falls back to a secondary HTTP-based protocol to communicate to an alternate C2 server.
   </Example>
   <Example id="S0699" name="Mythic">
    Mythic can use a list of C2 URLs as fallback mechanisms in case one IP or domain gets blocked.
   </Example>
   <Example id="S0034" name="NETEAGLE">
    NETEAGLE will attempt to detect if the infected host is configured to a proxy. If so, NETEAGLE will send beacons via an HTTP POST request; otherwise it will send beacons via UDP/6000.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors used company extranet servers as secondary C2 servers.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig malware ISMAgent falls back to its DNS tunneling mechanism if it is unable to reach the C2 server over HTTP.
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon can switch to an alternate C2 domain when a particular date has been reached.
   </Example>
   <Example id="S0269" name="QUADAGENT">
    QUADAGENT uses multiple protocols (HTTPS, HTTP, DNS) for its C2 server as fallback channels if communication with one is unsuccessful.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay has the ability to switch between TCP and HTTP for C2 if one method is not working.
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT has used HTTP if DNS C2 communications were not functioning.
   </Example>
   <Example id="S0085" name="S-Type">
    S-Type primarily uses port 80 for C2, but falls back to ports 443 or 8080 if initial communication fails.
   </Example>
   <Example id="S1019" name="Shark">
    Shark can update its configuration to use a different C2 server.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat has used a secondary C2 location if the first was unavailable.
   </Example>
   <Example id="S0610" name="SideTwist">
    SideTwist has primarily used port 443 for C2 but can use port 80 as a fallback.
   </Example>
   <Example id="S0058" name="SslMM">
    SslMM has a hard-coded primary and backup C2 string.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet has the ability to generate new C2 domains.
   </Example>
   <Example id="S0586" name="TAINTEDSCRIBE">
    TAINTEDSCRIBE can randomly pick one of five hard-coded IP addresses for C2 communication; if one of the IP fails, it will wait 60 seconds and then try another IP address.
   </Example>
   <Example id="S0668" name="TinyTurla">
    TinyTurla can go through a list of C2 server IPs and will try to register with each until one responds.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot can use secondary C2 servers for communication after establishing connectivity and relaying victim information to primary C2 servers.
   </Example>
   <Example id="S0476" name="Valak">
    Valak can communicate over multiple C2 hosts.
   </Example>
   <Example id="S0059" name="WinMM">
    WinMM is usually configured with primary and backup domains for C2 communications.
   </Example>
   <Example id="S0117" name="XTunnel">
    The C2 server used by XTunnel provides a port number to the victim to use as a fallback in case the connection closes on the currently used port.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific protocol used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1083" name="File and Directory Discovery">
  Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <System_Requirements>
   Some folders may require Administrator, SYSTEM or specific user depending on permission levels and access controls
  </System_Requirements>
  <CAPEC_ID>
   CAPEC-127, CAPEC-497
  </CAPEC_ID>
  <Examples>
   <Example id="S0066" name="3PARA RAT">
    3PARA RAT has a command to retrieve metadata for files on disk as well as a command to list the current working directory.
   </Example>
   <Example id="S0065" name="4H RAT">
    4H RAT has the capability to obtain file and directory listings.
   </Example>
   <Example id="S1028" name="Action RAT">
    Action RAT has the ability to collect drive and file information on an infected machine.
   </Example>
   <Example id="G0018" name="admin@338">
    admin@338 actors used the following commands after exploiting a machine with LOWBALL malware to obtain information about files and directories: dir c:\ &gt;&gt; %temp%\download dir "c:\Documents and Settings" &gt;&gt; %temp%\download dir "c:\Program Files\" &gt;&gt; %temp%\download dir d:\ &gt;&gt; %temp%\download
   </Example>
   <Example id="S0045" name="ADVSTORESHELL">
    ADVSTORESHELL can list files and directories.
   </Example>
   <Example id="S1025" name="Amadey">
    Amadey has searched for folders associated with antivirus software.
   </Example>
   <Example id="G1007" name="Aoqin Dragon">
    Aoqin Dragon has run scripts to identify file formats including Microsoft Word.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed has the ability to search for .txt, .ppt, .hwp, .pdf, and .doc files in specified directories.
   </Example>
   <Example id="G0026" name="APT18">
    APT18 can list files information for specific directories.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has used Forfiles to locate PDF, Excel, and Word documents during collection. The group also searched a compromised DCCC computer for specific terms.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 obtained information about the configured Exchange virtual directory using Get-WebServicesVirtualDirectory.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has a tool that looks for files and directories on the local file system.
   </Example>
   <Example id="G0050" name="APT32">
    APT32's backdoor possesses the capability to list files and directories on a machine.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 have enumerated files and directories, or searched in specific locations within a compromised host.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used tools with the ability to search for files on a compromised host.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 has executed file /bin/pwd on exploited victims, perhaps to return architecture related information.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has the ability to gather metadata from a file and to search for file and directory names.
   </Example>
   <Example id="S0438" name="Attor">
    Attor has a plugin that enumerates files with specific extensions on all hard disk drives and stores file information in encrypted log files.
   </Example>
   <Example id="S0347" name="AuditCred">
    AuditCred can search through folders and files on the system.
   </Example>
   <Example id="S0129" name="AutoIt backdoor">
    AutoIt backdoor is capable of identifying documents on the victim with the following extensions: .doc; .pdf, .csv, .ppt, .docx, .pst, .xls, .xlsx, .pptx, and .jpeg.
   </Example>
   <Example id="S0640" name="Avaddon">
    Avaddon has searched for specific files prior to encryption.
   </Example>
   <Example id="S0473" name="Avenger">
    Avenger has the ability to browse files in directories such as Program Files and the Desktop.
   </Example>
   <Example id="S0344" name="Azorult">
    Azorult can recursively search for files in folders and collects files from the desktop with certain extensions.
   </Example>
   <Example id="S0638" name="Babuk">
    Babuk has the ability to enumerate files on a targeted system.
   </Example>
   <Example id="S0414" name="BabyShark">
    BabyShark has used dir to search for "programfiles" and "appdata".
   </Example>
   <Example id="S0475" name="BackConfig">
    BackConfig has the ability to identify folders and files related to previous infections.
   </Example>
   <Example id="S0093" name="Backdoor.Oldrea">
    Backdoor.Oldrea collects information about available drives, default browser, desktop file list, My Documents, Internet history, program files, and root of available drives. It also searches for ICS-related software files.
   </Example>
   <Example id="S0031" name="BACKSPACE">
    BACKSPACE allows adversaries to search for files.
   </Example>
   <Example id="S0642" name="BADFLICK">
    BADFLICK has searched for files on the infected host.
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS identifies files with certain extensions from USB devices, then copies them to a predefined directory.
   </Example>
   <Example id="S0337" name="BadPatch">
    BadPatch searches for files with specific file extensions.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook has a command to list files on a system.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot searches for files on the victim's machine.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can enumerate the victim's desktop.
   </Example>
   <Example id="S0127" name="BBSRAT">
    BBSRAT can list file and directory information.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal can retrieve a file listing from the system.
   </Example>
   <Example id="S0069" name="BLACKCOFFEE">
    BLACKCOFFEE has the capability to enumerate files.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    BlackEnergy gathers a list of installed apps from the uninstall program Registry. It also gathers registered mail, browser, and instant messaging clients from the Registry. BlackEnergy has searched for given file types.
   </Example>
   <Example id="S0564" name="BlackMould">
    BlackMould has the ability to find files on the targeted system.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN can search, read, write, move, and execute files.
   </Example>
   <Example id="S0657" name="BLUELIGHT">
    BLUELIGHT can enumerate files and collect associated metadata.
   </Example>
   <Example id="S0635" name="BoomBox">
    BoomBox can search for specific files and directories on a machine.
   </Example>
   <Example id="S0651" name="BoxCaon">
    BoxCaon has searched for files on the system, such as documents located in the desktop folder.
   </Example>
   <Example id="S0252" name="Brave Prince">
    Brave Prince gathers file and directory information from the victim’s machine.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has collected a list of files from the victim and uploaded it to its C2 server, and then created a new list of specific files to steal.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors conducted a file listing discovery against multiple hosts to ensure locker encryption was successful.
   </Example>
   <Example id="S0693" name="CaddyWiper">
    CaddyWiper can enumerate all files and directories on a compromised host.
   </Example>
   <Example id="S0351" name="Cannon">
    Cannon can obtain victim drive information as well as a list of folders in C:\Program Files.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT checks its current working directory upon execution and also contains watchdog functionality that ensures its executable is located in the correct path (else it will rewrite the payload).
   </Example>
   <Example id="S0572" name="Caterpillar WebShell">
    Caterpillar WebShell can search for files in directories.
   </Example>
   <Example id="S1043" name="ccf32">
    ccf32 can parse collected files to identify specific file extensions.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower can enumerate drives and list the contents of the C: drive on a victim's computer.
   </Example>
   <Example id="S0144" name="ChChes">
    ChChes collects the victim's %TEMP% directory path and version of Internet Explorer.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has utilized multiple commands to identify data of interest in file and directory listings.
   </Example>
   <Example id="S0020" name="China Chopper">
    China Chopper's server component can list directory contents.
   </Example>
   <Example id="S0023" name="CHOPSTICK">
    An older version of CHOPSTICK has a module that monitors all mounted volumes for files with the extensions .doc, .docx, .pgp, .gpg, .m2f, or .m2o.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can browse directories on a compromised host.
   </Example>
   <Example id="S0611" name="Clop">
    Clop has searched folders and subfolders for files to encrypt.
   </Example>
   <Example id="S0106" name="cmd">
    cmd can be used to find files and directories with native functionality such as dir commands.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can explore files on a compromised system.
   </Example>
   <Example id="G0142" name="Confucius">
    Confucius has used a file stealer that checks the Document, Downloads, Desktop, and Picture folders for documents and images with specific extensions.
   </Example>
   <Example id="S0575" name="Conti">
    Conti can discover files on a local system.
   </Example>
   <Example id="S0492" name="CookieMiner">
    CookieMiner has looked for files in the user's home directory with "wallet" in their name using find.
   </Example>
   <Example id="S0212" name="CORALDECK">
    CORALDECK searches for specified files.
   </Example>
   <Example id="S0050" name="CosmicDuke">
    CosmicDuke searches attached and mounted drives for file extensions and keywords that match a predefined list.
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can discover specified filetypes and log files on a targeted system.
   </Example>
   <Example id="S1023" name="CreepyDrive">
    CreepyDrive can specify the local file path to upload files from.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson contains commands to list files and directories, as well as search for files matching certain extensions from a defined list.
   </Example>
   <Example id="S0235" name="CrossRAT">
    CrossRAT can list all files on a system.
   </Example>
   <Example id="S0498" name="Cryptoistic">
    Cryptoistic can scan a directory to identify files for deletion.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba can enumerate files by using a variety of functions.
   </Example>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink can use the Linux API statvfs to enumerate the current working directory.
   </Example>
   <Example id="S0497" name="Dacls">
    Dacls can scan directories on a compromised host.
   </Example>
   <Example id="G0070" name="Dark Caracal">
    Dark Caracal collected file listings of all default Windows directories.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel has used malware that searched for files with specific patterns.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman has the ability to enumerate file and folder names.
   </Example>
   <Example id="S0255" name="DDKONG">
    DDKONG lists files on the victim’s machine.
   </Example>
   <Example id="S0616" name="DEATHRANSOM">
    DEATHRANSOM can use loop operations to enumerate directories on a compromised host.
   </Example>
   <Example id="S0354" name="Denis">
    Denis has several commands to search directories for files.
   </Example>
   <Example id="S0021" name="Derusbi">
    Derusbi is capable of obtaining directory, file, and drive listings.
   </Example>
   <Example id="S0659" name="Diavol">
    Diavol has a command to traverse the files and directories in a given path.
   </Example>
   <Example id="S0600" name="Doki">
    Doki has resolved the path of a process PID to use as a script argument.
   </Example>
   <Example id="S0472" name="down_new">
    down_new has the ability to list the directories on a compromised host.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has used a batch script to gather folder and file names from victim hosts.
   </Example>
   <Example id="S0547" name="DropBook">
    DropBook can collect the names of all files and folders in the Program Files directories.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack can list files on available disk volumes.
   </Example>
   <Example id="S0062" name="DustySky">
    DustySky scans the victim for files that contain certain keywords and document types including PDF, DOC, DOCX, XLS, and XLSX, from a list that is obtained from the C2 as a text file. It can also identify logical drives for the infected machine.
   </Example>
   <Example id="S0377" name="Ebury">
    Ebury can list directory entries.
   </Example>
   <Example id="S0081" name="Elise">
    A variant of Elise executes dir C:\progra~1 when initially run.
   </Example>
   <Example id="S0064" name="ELMER">
    ELMER is capable of performing directory listings.
   </Example>
   <Example id="S0363" name="Empire">
    Empire includes various modules for finding files of interest on hosts and network shares.
   </Example>
   <Example id="S0091" name="Epic">
    Epic recursively searches for all .doc files on the system and collects a directory listing of the Desktop, %TEMP%, and %WINDOWS%\Temp directories.
   </Example>
   <Example id="S0181" name="FALLCHILL">
    FALLCHILL can search files on a victim.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke can enumerate directories on target machines.
   </Example>
   <Example id="S0182" name="FinFisher">
    FinFisher enumerates directories and scans for certain files.
   </Example>
   <Example id="S0618" name="FIVEHANDS">
    FIVEHANDS has the ability to enumerate files on a compromised host in order to encrypt files with specific extensions.
   </Example>
   <Example id="S0036" name="FLASHFLOOD">
    FLASHFLOOD searches for interesting files (either a default or customized set of file extensions) on the local system and removable media.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb's loader can check for the FoggyWeb backdoor .pri file on a compromised AD FS server.
   </Example>
   <Example id="S0193" name="Forfiles">
    Forfiles can be used to locate certain types of files/directories in a system.(ex: locate all files with a specific extension, name, and/or age)
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used WizTree to obtain network files and directory listings.
   </Example>
   <Example id="S0277" name="FruitFly">
    FruitFly looks for specific files and file types.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can identify files with .doc, .docx, .ppt, .pptx, .xls, .xlsx, and .pdf extensions and specific timestamps for collection.
   </Example>
   <Example id="S0628" name="FYAnti">
    FYAnti can search the C:\Windows\Microsoft.NET\ directory for files of a specified size.
   </Example>
   <Example id="S0410" name="Fysbis">
    Fysbis has the ability to search for files.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group macros can scan for Microsoft Word and Excel files to inject with additional malicious macros. Gamaredon Group has also used its backdoors to automatically list interesting files (such as Office documents) found on a system.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can retrieve data from specific Windows directories, as well as open random files as part of Virtualization/Sandbox Evasion.
   </Example>
   <Example id="S0049" name="GeminiDuke">
    GeminiDuke collects information from the victim, including installed drivers, programs previously executed by users, programs and services configured to automatically run at startup, files and folders present in any user's home folder, files and folders present in any user's My Documents, programs installed to the Program Files folder, and recently accessed files, folders, and programs.
   </Example>
   <Example id="S0249" name="Gold Dragon">
    Gold Dragon lists the directories for Desktop, program files, and the user’s recently accessed files.
   </Example>
   <Example id="S0493" name="GoldenSpy">
    GoldenSpy has included a program "ExeProtector", which monitors for the existence of GoldenSpy on the infected system and redownloads if necessary.
   </Example>
   <Example id="S0237" name="GravityRAT">
    GravityRAT collects the volumes mapped on the system, and also steals files with the following extensions: .docx, .doc, .pptx, .ppt, .xlsx, .xls, .rtf, and .pdf.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent has the ability to enumerate files and directories on a compromised host.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper can enumerate common folders such as My Documents, Desktop, and AppData.
   </Example>
   <Example id="S1027" name="Heyoka Backdoor">
    Heyoka Backdoor has the ability to search the compromised host for files.
   </Example>
   <Example id="S0376" name="HOPLIGHT">
    HOPLIGHT has been observed enumerating system drives and partitions.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant has the ability to retrieve a list of files in a given directory as well as drives and drive types.
   </Example>
   <Example id="S0070" name="HTTPBrowser">
    HTTPBrowser is capable of listing files, folders, and drives on a victim.
   </Example>
   <Example id="S0203" name="Hydraq">
    Hydraq creates a backdoor through which remote attackers can check for the existence of files, including its own components, as well as retrieve a list of logical drives.
   </Example>
   <Example id="S1022" name="IceApple">
    The IceApple Directory Lister module can list information about files and directories including creation time, last write time, name, and size.
   </Example>
   <Example id="S0434" name="Imminent Monitor">
    Imminent Monitor has a dynamic debugging feature to check whether it is located in the %TEMP% directory, otherwise it copies itself there.
   </Example>
   <Example id="G0100" name="Inception">
    Inception used a file listing plugin to collect information about file and directories both on local and remote drives.
   </Example>
   <Example id="S0604" name="Industroyer">
    Industroyer’s data wiper component enumerates specific files on all the Windows drives.
   </Example>
   <Example id="S0259" name="InnaputRAT">
    InnaputRAT enumerates directories and obtains file attributes on a system.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can list information about files in a directory and recently opened or used documents. InvisiMole can also search for specific files by supplied file mask.
   </Example>
   <Example id="S0015" name="Ixeshe">
    Ixeshe can list file and directory information.
   </Example>
   <Example id="S0201" name="JPIN">
    JPIN can enumerate drives and their types. It can also change file permissions using cacls.exe.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT can browse file systems.
   </Example>
   <Example id="S0088" name="Kasidet">
    Kasidet has the ability to search for a given filename on a victim.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar finds a specified directory, lists the files and metadata about those files.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang uses command-line interaction to search files and directories.
   </Example>
   <Example id="S0387" name="KeyBoy">
    KeyBoy has a command to launch a file browser or explorer on the system.
   </Example>
   <Example id="S0271" name="KEYMARBLE">
    KEYMARBLE has a command to search for files on the victim’s machine.
   </Example>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY can enumerate files and directories on a compromised host.
   </Example>
   <Example id="S0607" name="KillDisk">
    KillDisk has used the FindNextFile command as part of its file deletion process.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has the ability to enumerate all files and directories on an infected system.
   </Example>
   <Example id="S0599" name="Kinsing">
    Kinsing has used the find command to search for specific files.
   </Example>
   <Example id="S0437" name="Kivars">
    Kivars has the ability to list drives on the infected host.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can obtain a list of directories.
   </Example>
   <Example id="S0356" name="KONNI">
    A version of KONNI searches for filenames created with a previous version of the malware, suggesting different versions targeted the same victims and the versions may work together.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs collects a list of files and directories in C:\ with the command dir /s /a c:\ &gt;&gt; "C:\windows\TEMP
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Several Lazarus Group has conducted word searches on compromised machines to identify specific documents of interest. Lazarus Group malware can use a common function to identify target files by their extension, and some also enumerate files and directories, including a Destover-like variant that lists files and gathers information for all drives.
   </Example>
   <Example id="G0077" name="Leafminer">
    Leafminer used a tool called MailSniper to search for files on the desktop and another utility called Sobolsoft to extract attachments from EML files.
   </Example>
   <Example id="S0211" name="Linfo">
    Linfo creates a backdoor through which remote attackers can list contents of drives and search for files.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot can search for specific files on an infected host.
   </Example>
   <Example id="S0582" name="LookBack">
    LookBack can retrieve file listings from the victim machine.
   </Example>
   <Example id="S0409" name="Machete">
    Machete produces file listings in order to search for files to be exfiltrated.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa can search for a specific file on the compromised computer and can enumerate files in Desktop, Downloads, and Documents folders.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound malware can list a victim's logical drives and the type, as well the total/free space of the fixed devices. Other malware can list a directory's contents.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can look for files carrying specific extensions such as: .rtf, .doc, .docx, .xls, .xlsx, .ppt, .pptx, .pps, .ppsx, .txt, .gpg, .pkr, .kdbx, .key, and .jpb.
   </Example>
   <Example id="S0576" name="MegaCortex">
    MegaCortex can parse the available drives and directories to determine which files to encrypt.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has searched compromised systems for folders of interest including those related to HR, audit and expense, and meeting memos.
   </Example>
   <Example id="S0443" name="MESSAGETAP">
    MESSAGETAP checks for the existence of two configuration files (keyword_parm.txt and parm.txt) and attempts to read the files every 30 seconds.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has searched the Program Files directories for specific folders and has searched for strings related to its mutexes.
   </Example>
   <Example id="S0339" name="Micropsia">
    Micropsia can perform a recursive directory listing for all volume drives available on the victim's machine and can also fetch specific files by their paths.
   </Example>
   <Example id="S0051" name="MiniDuke">
    MiniDuke can enumerate local drives.
   </Example>
   <Example id="S0083" name="Misdat">
    Misdat is capable of running commands to obtain a list of files and directories, as well as enumerating logical drives.
   </Example>
   <Example id="S0079" name="MobileOrder">
    MobileOrder has a command to upload to its C2 server information about files on the victim mobile device, including SD card size, installed app list, SMS content, contacts, and calling history.
   </Example>
   <Example id="S0149" name="MoonWind">
    MoonWind has a command to return a directory listing for a specified directory.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used malware that checked if the ProgramData folder had folders or files with the keywords "Kasper," "Panda," or "ESET."
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has searched the entire target system for DOC, DOCX, PPT, PPTX, XLS, XLSX, and PDF files.
   </Example>
   <Example id="S0272" name="NDiskMonitor">
    NDiskMonitor can obtain a list of all files and directories as well as logical drives.
   </Example>
   <Example id="S0630" name="Nebulae">
    Nebulae can list files and directories on a compromised host.
   </Example>
   <Example id="S0034" name="NETEAGLE">
    NETEAGLE allows adversaries to enumerate and modify the infected host's file system. It supports searching for directories, creating directories, listing directory contents, reading and writing to files, retrieving file attributes, and retrieving volume information.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE has the ability to search for files on the compromised host.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors used zwShell to establish full remote control of the connected machine and browse the victim file system.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT can browse file systems using a file manager module.
   </Example>
   <Example id="S0368" name="NotPetya">
    NotPetya searches for files ending with dozens of different file extensions prior to encryption.
   </Example>
   <Example id="S0644" name="ObliqueRAT">
    ObliqueRAT has the ability to recursively enumerate files on an infected endpoint.
   </Example>
   <Example id="S0346" name="OceanSalt">
    OceanSalt can extract drive information from the endpoint and search files on the system.
   </Example>
   <Example id="S0340" name="Octopus">
    Octopus can collect information on the Windows directory and searches for compressed RAR files on the host.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum has used DriveLetterView to enumerate drive information.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used dir c:\\ to search for files.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, the threat actors used a malicious DLL to search for files with specific keywords.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors gathered a recursive directory listing to find files and directories of interest.
   </Example>
   <Example id="S0229" name="Orz">
    Orz can gather victim drive information.
   </Example>
   <Example id="S0402" name="OSX/Shlayer">
    OSX/Shlayer has used the command appDir="$(dirname $(dirname "$currentDir"))" and $(dirname "$(pwd -P)") to construct installation paths.
   </Example>
   <Example id="S1017" name="OutSteel">
    OutSteel can search for specific file extensions, including zipped files.
   </Example>
   <Example id="S0072" name="OwaAuth">
    OwaAuth has a command to list its directory and logical drives.
   </Example>
   <Example id="S0598" name="P.A.S. Webshell">
    P.A.S. Webshell has the ability to list files and file characteristics including extension, size, ownership, and permissions.
   </Example>
   <Example id="S0208" name="Pasam">
    Pasam creates a backdoor through which remote attackers can retrieve lists of files.
   </Example>
   <Example id="G0040" name="Patchwork">
    A Patchwork payload has searched all fixed drives on the victim for files matching a specified list of extensions.
   </Example>
   <Example id="S0587" name="Penquin">
    Penquin can use the command code do_vslist to send file names, size, and status to C2.
   </Example>
   <Example id="S0643" name="Peppy">
    Peppy can identify specific files for exfiltration.
   </Example>
   <Example id="S0048" name="PinchDuke">
    PinchDuke searches for files created within a certain timeframe and whose file extension matches a predefined list.
   </Example>
   <Example id="S1031" name="PingPull">
    PingPull can enumerate storage volumes and folder contents of a compromised host.
   </Example>
   <Example id="S0124" name="Pisloader">
    Pisloader has commands to list drives on the victim machine and to list file information for a given directory.
   </Example>
   <Example id="S0435" name="PLEAD">
    PLEAD has the ability to list drives and files on the compromised host.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX has a module to enumerate drives and find files recursively.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has the ability to list files upon receiving the ls command from C2.
   </Example>
   <Example id="S0216" name="POORAIM">
    POORAIM can conduct file browsing.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 can enumerate files on the local file system and includes a module for enumerating recently accessed files.
   </Example>
   <Example id="S0139" name="PowerDuke">
    PowerDuke has commands to get the current directory name as well as the size of a file. It also has commands to obtain information about logical drives, drive type, and free space.
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER may enumerate user directories on a victim.
   </Example>
   <Example id="S0113" name="Prikormka">
    A module in Prikormka collects information about the paths, size, and creation time of files with specific file extensions, but not the actual content of the file.
   </Example>
   <Example id="S0238" name="Proxysvc">
    Proxysvc lists files in directories.
   </Example>
   <Example id="S0078" name="Psylo">
    Psylo has commands to enumerate all storage devices and to find all files that start with a particular string.
   </Example>
   <Example id="S0147" name="Pteranodon">
    Pteranodon identifies files matching certain file extension and copies them to subdirectories it created.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can walk through directories and recursively search for strings in files.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can identify whether it has been run previously on a host by checking for a specified folder.
   </Example>
   <Example id="S0686" name="QuietSieve">
    QuietSieve can search files on the target host by extension, including doc, docx, xls, rtf, odt, txt, jpg, pdf, rar, zip, and 7z.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay can use a file exfiltration tool to collect recently changed files with specific extensions.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can collect directory and file lists.
   </Example>
   <Example id="S0055" name="RARSTONE">
    RARSTONE obtains installer properties from Uninstall Registry Key entries to obtain information about installed applications and how to uninstall certain applications.
   </Example>
   <Example id="S1040" name="Rclone">
    Rclone can list files and directories with the ls, lsd, and lsl commands.
   </Example>
   <Example id="S0153" name="RedLeaves">
    RedLeaves can enumerate and search for files and directories.
   </Example>
   <Example id="S0332" name="Remcos">
    Remcos can search for files on the infected machine.
   </Example>
   <Example id="S0375" name="Remexi">
    Remexi searches for files on the system.
   </Example>
   <Example id="S0592" name="RemoteUtilities">
    RemoteUtilities can enumerate files and directories on a target machine.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec is capable of listing contents of folders on the victim. Remsec also searches for custom network encryption software on victims.
   </Example>
   <Example id="S0496" name="REvil">
    REvil has the ability to identify specific files and directories that are not to be encrypted.
   </Example>
   <Example id="S0448" name="Rising Sun">
    Rising Sun can enumerate information about files from the infected system, including file size, attributes, creation time, last access time, and write time. Rising Sun can enumerate the compilation timestamp of Windows executable files.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT has the ability to gather a list of files and directories on the infected system.
   </Example>
   <Example id="S0090" name="Rover">
    Rover automatically searches for files on local drives based on a predefined list of file extensions.
   </Example>
   <Example id="S0148" name="RTM">
    RTM can check for specific files and directories associated with virtualization and malware analysis.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk has enumerated files and folders on all mounted drives.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot can search a compromised host for specific files.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has enumerated files on a compromised host.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has the ability to get directory listings or drive information on a compromised host.
   </Example>
   <Example id="S0345" name="Seasalt">
    Seasalt has the capability to identify the drive type on a victim.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat can list directories.
   </Example>
   <Example id="S0063" name="SHOTPUT">
    SHOTPUT has a command to obtain a directory listing.
   </Example>
   <Example id="S0610" name="SideTwist">
    SideTwist has the ability to search for specific files.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has used malware to collect information on files and directories.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY has several modules, such as ls.py, pwd.py, and recentFiles.py, to enumerate directories and files.
   </Example>
   <Example id="S0623" name="Siloscape">
    Siloscape searches for the Kubernetes config file and other related files using a regular expression.
   </Example>
   <Example id="S0468" name="Skidmap">
    Skidmap has checked for the existence of specific files including /usr/sbin/setenforce and  /etc/selinux/config. It also has the ability to monitor the cryptocurrency miner file and process.
   </Example>
   <Example id="S0633" name="Sliver">
    Sliver can enumerate files on a target system.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA can enumerate files and directories.
   </Example>
   <Example id="S0226" name="Smoke Loader">
    Smoke Loader recursively searches through directories for files.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT can execute enum to enumerate files in storage on a compromised system.
   </Example>
   <Example id="S0516" name="SoreFang">
    SoreFang has the ability to list directories.
   </Example>
   <Example id="S0157" name="SOUNDBITE">
    SOUNDBITE is capable of enumerating and manipulating files and directories.
   </Example>
   <Example id="G0054" name="Sowbug">
    Sowbug identified and extracted all Word documents on a server by using a command containing * .doc and *.docx. The actors also searched for documents based on a specific date range and attempted to identify all installed software on a victim.
   </Example>
   <Example id="S0035" name="SPACESHIP">
    SPACESHIP identifies files and directories for collection by searching for specific file extensions or file modification time.
   </Example>
   <Example id="S0142" name="StreamEx">
    StreamEx has the ability to enumerate drive types.
   </Example>
   <Example id="S1034" name="StrifeWater">
    StrifeWater can enumerate files on a compromised host.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity can parse the hard drive on a compromised host to identify specific file extensions.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet uses a driver to scan for specific filesystem driver objects.
   </Example>
   <Example id="S1042" name="SUGARDUMP">
    SUGARDUMP can search for and collect data from specific Chrome, Opera, Microsoft Edge, and Firefox files, including any folders that have the string Profile in its name.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST had commands to enumerate files and directories.
   </Example>
   <Example id="S0562" name="SUNSPOT">
    SUNSPOT enumerated the Orion software Visual Studio solution directory path.
   </Example>
   <Example id="S0242" name="SynAck">
    SynAck checks its directory location in an attempt to avoid launching in a sandbox.
   </Example>
   <Example id="S0663" name="SysUpdate">
    SysUpdate can search files on a compromised host.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor can search for specific files.
   </Example>
   <Example id="S0586" name="TAINTEDSCRIBE">
    TAINTEDSCRIBE can use DirectoryList to enumerate files in a specified directory.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to index files from drives, user profiles, and removable drives.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has used a script that checks /proc/*/environ for environment variables related to AWS.
   </Example>
   <Example id="S0665" name="ThreatNeedle">
    ThreatNeedle can obtain file and directory information.
   </Example>
   <Example id="S0131" name="TINYTYPHON">
    TINYTYPHON searches through the drive containing the OS, then all drive letters C through to Z, for documents matching certain extensions.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot searches the system for all of the following file extensions: .avi, .mov, .mkv, .mpeg, .mpeg4, .mp4, .mp3, .wav, .ogg, .jpeg, .jpg, .png, .bmp, .gif, .tiff, .ico, .xlsx, and .zip. It can also obtain browsing history, cookies, and plug-in information.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can enumerate files and directories on a compromised host.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has monitored files' modified time.
   </Example>
   <Example id="S0436" name="TSCookie">
    TSCookie has the ability to discover drive information on the infected host.
   </Example>
   <Example id="S0647" name="Turian">
    Turian can search for specific files and list directories.
   </Example>
   <Example id="G0010" name="Turla">
    Turla surveys a system upon check-in to discover files in specific locations on the hard disk %TEMP% directory, the current user's desktop, the Program Files directory, and Recent.
   </Example>
   <Example id="S0263" name="TYPEFRAME">
    TYPEFRAME can search directories for files on the victim’s machine.
   </Example>
   <Example id="S0275" name="UPPERCUT">
    UPPERCUT has the capability to gather the victim's current directory.
   </Example>
   <Example id="S0452" name="USBferry">
    USBferry can detect the victim's file or folder list.
   </Example>
   <Example id="S0136" name="USBStealer">
    USBStealer searches victim drives for files matching certain extensions (".skr",".pkr" or ".key") or names.
   </Example>
   <Example id="S0180" name="Volgmer">
    Volgmer can list directories on a victim.
   </Example>
   <Example id="S0366" name="WannaCry">
    WannaCry searches for variety of user files by file extension before encrypting them using RSA and AES, including Office, PDF, image, audio, video, source code, archive/compression format, and key and certificate files.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT can enumerate directories on a compromise host.
   </Example>
   <Example id="S0612" name="WastedLocker">
    WastedLocker can enumerate files and directories just prior to encryption.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can locate files based on hardcoded file extensions.
   </Example>
   <Example id="G0124" name="Windigo">
    Windigo has used a script to check for the presence of files created by OpenSSH backdoors.
   </Example>
   <Example id="S0466" name="WindTail">
    WindTail has the ability to enumerate the users home directory and the path to its own application bundle.
   </Example>
   <Example id="S0219" name="WINERACK">
    WINERACK can enumerate files and directories.
   </Example>
   <Example id="S0059" name="WinMM">
    WinMM sets a WH_CBT Windows hook to search for and capture files on the victim.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    Winnti for Windows can check for the presence of specific files prior to moving to the next phase of execution.
   </Example>
   <Example id="G0044" name="Winnti Group">
    Winnti Group has used a program named ff.exe to search for specific documents on compromised hosts.
   </Example>
   <Example id="S0161" name="XAgentOSX">
    XAgentOSX contains the readFiles function to return a detailed listing (sometimes recursive) of a specified directory.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET has used mdfind to enumerate a list of apps known to grant screen sharing permissions.
   </Example>
   <Example id="S0248" name="yty">
    yty gathers information on victim’s drives and has a plugin for document listing.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy searches for files that are 60mb and less and contain the following extensions: .doc, .docx, .xls, .xlsx, .ppt, .pptx, .exe, .zip, and .rar. Zebrocy also runs the echo %APPDATA% command to list the contents of the directory.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda searches for specific directories on the victim’s machine.
   </Example>
   <Example id="S0086" name="ZLib">
    ZLib has the ability to enumerate files and drives.
   </Example>
   <Example id="S0672" name="Zox">
    Zox can enumerate files on a compromised host.
   </Example>
   <Example id="S0350" name="zwShell">
    zwShell can browse the file system.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell has a command to open a file manager and explorer on the system.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1222" name="File and Directory Permissions Modification">
  Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   File system access controls
  </Defense_Bypassed>
  <Mitigations>
   <Mitigation id="M1026" name="Privileged Account Management">
    Ensure critical system files as well as those known to be abused by adversaries have restrictive permissions and are owned by an appropriately privileged account, especially if access is not required by users nor will inhibit system functionality.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Applying more restrictive permissions to files and directories could prevent adversaries from modifying their access control lists. Additionally, ensure that user settings regarding local and remote symbolic links are properly set or disabled where unneeded.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Modification
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Metadata
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1222.001" name="File and Directory Permissions Modification: Windows File and Directory Permissions Modification">
  Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User
  </Permissions_Required>
  <Examples>
   <Example id="S0570" name="BitPaymer">
    BitPaymer can use icacls /reset and takeown /F to reset a targeted executable's permissions and then take ownership.
   </Example>
   <Example id="S0693" name="CaddyWiper">
    CaddyWiper can modify ACL entries to take ownership of files.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can modify the binary ACL to prevent security tools from running.
   </Example>
   <Example id="S0201" name="JPIN">
    JPIN can use the command-line utility cacls.exe to change file permissions.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk can launch icacls  /grant Everyone:F /T /C /Q to delete every access-based restrictions on files and directories.
   </Example>
   <Example id="S0366" name="WannaCry">
    WannaCry uses attrib +h and icacls . /grant Everyone:F /T /C /Q to make some of its files hidden and grant all users full access controls.
   </Example>
   <Example id="S0612" name="WastedLocker">
    WastedLocker has a command to take ownership of a file and reset the ACL permissions using the takeown.exe /F filepath command.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used the icacls command to modify access control to backup servers, providing them with full control of all the system folders.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1026" name="Privileged Account Management">
    Ensure critical system files as well as those known to be abused by adversaries have restrictive permissions and are owned by an appropriately privileged account, especially if access is not required by users nor will inhibit system functionality.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Applying more restrictive permissions to files and directories could prevent adversaries from modifying the access control lists.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Modification
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Metadata
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1222.002" name="File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification">
  Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, macOS
  </Platforms>
  <Permissions_Required>
   User, root
  </Permissions_Required>
  <Examples>
   <Example id="G0050" name="APT32">
    APT32's macOS backdoor changes the permission of the file it wants to execute to 755.
   </Example>
   <Example id="S0482" name="Bundlore">
    Bundlore changes the permissions of a payload using the command chmod -R 755.
   </Example>
   <Example id="S0281" name="Dok">
    Dok gives all users execute permissions for the application using the command chmod +x /Users/Shared/AppStore.app.
   </Example>
   <Example id="S0599" name="Kinsing">
    Kinsing has used chmod to modify permissions on key files for use.
   </Example>
   <Example id="S0402" name="OSX/Shlayer">
    OSX/Shlayer can use the chmod utility to set a file as executable, such as chmod 777 or chmod +x.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    OSX_OCEANLOTUS.D has changed permissions of a second-stage payload to an executable via chmod.
   </Example>
   <Example id="S0598" name="P.A.S. Webshell">
    P.A.S. Webshell has the ability to modify file permissions.
   </Example>
   <Example id="S0587" name="Penquin">
    Penquin can add the executable flag to a downloaded file.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has changed file permissions of files so they could not be modified.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has modified the permissions on binaries with chattr.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET uses the chmod +x command to grant executable permissions to the malicious file.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1026" name="Privileged Account Management">
    Ensure critical system files as well as those known to be abused by adversaries have restrictive permissions and are owned by an appropriately privileged account, especially if access is not required by users nor will inhibit system functionality.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Applying more restrictive permissions to files and directories could prevent adversaries from modifying the access control lists.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Metadata
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1495" name="Firmware Corruption">
  Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices may include the motherboard, hard drive, or video cards.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <Impact_Type>
   Availability
  </Impact_Type>
  <Examples>
   <Example id="S0606" name="Bad Rabbit">
    Bad Rabbit has used an executable that installs a modified bootloader to prevent normal boot-up.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot module "Trickboot" can write or erase the UEFI/BIOS firmware of a compromised device.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1046" name="Boot Integrity">
    Check the integrity of the existing BIOS and device firmware to determine if it is vulnerable to modification.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Prevent adversary access to privileged accounts or access necessary to replace system firmware.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Patch the BIOS and other firmware as necessary to prevent successful use of known vulnerabilities.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0001" name="Firmware">
    Firmware Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1187" name="Forced Authentication">
  Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0079" name="DarkHydrus">
    DarkHydrus used Template Injection to launch an authentication window for users to enter their credentials.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has gathered hashed user credentials over SMB using spearphishing attachments with external resource links and by modifying .LNK file icon resources to collect credentials from virtualized systems.
   </Example>
   <Example id="S0634" name="EnvyScout">
    EnvyScout can use protocol handlers to coax the operating system to send NTLMv2 authentication responses to attacker-controlled infrastructure.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Block SMB traffic from exiting an enterprise network with egress filtering or by blocking TCP ports 139, 445 and UDP port 137. Filter or block WebDAV protocol traffic from exiting the network. If access to external resources over SMB and WebDAV is necessary, then traffic should be tightly limited with allowlisting.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Use strong passwords to increase the difficulty of credential hashes from being cracked if they are obtained.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Access | File Creation | File Modification
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1606" name="Forge Web Credentials">
  Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Administrators should perform an audit of all access lists and the permissions they have been granted to access web applications and services. This should be done extensively on all resources in order to establish a baseline, followed up on with periodic audits of new or updated resources. Suspicious accounts/credentials should be investigated and removed.Enable advanced auditing on ADFS. Check the success and failure audit options in the ADFS Management snap-in. Enable Audit Application Generated events on the AD FS farm via Group Policy Object.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Restrict permissions and access to the AD FS server to only originate from privileged access workstations.
   </Mitigation>
   <Mitigation id="M1054" name="Software Configuration">
    Configure browsers/applications to regularly delete persistent web credentials (such as cookies).
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Ensure that user accounts with administrative rights follow best practices, including use of privileged access workstations, Just in Time/Just Enough Administration (JIT/JEA), and strong authentication. Reduce the number of users that are members of highly privileged Directory Roles.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0006" name="Web Credential">
    Web Credential Creation | Web Credential Usage
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1606.001" name="Forge Web Credentials: Web Cookies">
  Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   IaaS, Linux, SaaS, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 has bypassed MFA set on OWA accounts by generating a cookie value from a previously stolen secret key.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Administrators should perform an audit of all access lists and the permissions they have been granted to access web applications and services. This should be done extensively on all resources in order to establish a baseline, followed up on with periodic audits of new or updated resources. Suspicious accounts/credentials should be investigated and removed.
   </Mitigation>
   <Mitigation id="M1054" name="Software Configuration">
    Configure browsers/applications to regularly delete persistent web cookies.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0006" name="Web Credential">
    Web Credential Usage
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1606.002" name="Forge Web Credentials: SAML Tokens">
  An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Office 365, SaaS, Windows
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals can be used to create SAML tokens using the AD Federated Services token signing certificate.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 created tokens using compromised SAML signing certificates.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1015" name="Active Directory Configuration">
    For containing the impact of a previously forged SAML token, rotate the token-signing AD FS certificate in rapid succession twice, which will invalidate any tokens generated using the previous certificate.
   </Mitigation>
   <Mitigation id="M1047" name="Audit">
    Enable advanced auditing on AD FS. Check the success and failure audit options in the AD FS Management snap-in. Enable Audit Application Generated events on the AD FS farm via Group Policy Object.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Restrict permissions and access to the AD FS server to only originate from privileged access workstations.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Ensure that user accounts with administrative rights follow best practices, including use of privileged access workstations, Just in Time/Just Enough Administration (JIT/JEA), and strong authentication. Reduce the number of users that are members of highly privileged Directory Roles.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation | Logon Session Metadata
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
   <Detection id="DS0006" name="Web Credential">
    Web Credential Creation | Web Credential Usage
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1592" name="Gather Victim Host Information">
  Adversaries may gather information about the victim's hosts that can be used during targeting. Information about hosts may include a variety of details, including administrative data (ex: name, assigned IP, functionality, etc.) as well as specifics regarding its configuration (ex: operating system, language, etc.).
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1592.001" name="Gather Victim Host Information: Hardware">
  Adversaries may gather information about the victim's host hardware that can be used during targeting. Information about hardware infrastructure may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: card/biometric readers, dedicated encryption hardware, etc.).
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1592.002" name="Gather Victim Host Information: Software">
  Adversaries may gather information about the victim's host software that can be used during targeting. Information about installed software may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: antivirus, SIEMs, etc.).
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0138" name="Andariel">
    Andariel has inserted a malicious script within compromised websites to collect potential victim information such as browser type, system language, Flash Player version, and other data.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has researched software code to enable supply-chain operations, most notably for the 2017 NotPetya attack. Sandworm Team also collected a list of computers using specific software as part of its targeting efforts.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1592.003" name="Gather Victim Host Information: Firmware">
  Adversaries may gather information about the victim's host firmware that can be used during targeting. Information about host firmware may include a variety of details such as type and versions on specific hosts, which may be used to infer more information about hosts in the environment (ex: configuration, purpose, age/patch level, etc.).
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1592.004" name="Gather Victim Host Information: Client Configurations">
  Adversaries may gather information about the victim's client configurations that can be used during targeting. Information about client configurations may include a variety of details and settings, including operating system/version, virtualization, architecture (ex: 32 or 64 bit), language, and/or time zone.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has interacted with Office 365 tenants to gather details regarding target's environments.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1589" name="Gather Victim Identity Information">
  Adversaries may gather information about the victim's identity that can be used during targeting. Information about identities may include a variety of details, including personal data (ex: employee names, email addresses, etc.) as well as sensitive details such as credentials.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0050" name="APT32">
    APT32 has conducted targeted surveillance against activists and bloggers.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has identified specific potential victims at targeted organizations.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has gathered detailed information of target employees to enhance their social engineering lures.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has acquired mobile phone numbers of potential targets, possibly for mobile malware or additional phishing operations.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors targeted people based on their organizational roles and privileges.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1589.001" name="Gather Victim Identity Information: Credentials">
  Adversaries may gather credentials that can be used during targeting. Account credentials gathered by adversaries may be those directly associated with the target victim organization or attempt to take advantage of the tendency for users to use the same passwords across personal and business accounts.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has harvested user's login credentials.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has conducted credential theft operations to obtain credentials to be used for access to victim environments.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has collected credentials for the target organization from previous breaches for use in brute force attacks.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has gathered user identities and credentials to gain initial access to a victim's organization; the group has also called an organization's help desk to reset a target's credentials.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has collected compromised credentials to use for targeting efforts.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound gathered credentials from two victims that they then attempted to validate across 75 different websites.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1589.002" name="Gather Victim Identity Information: Email Addresses">
  Adversaries may gather email addresses that can be used during targeting. Even if internal instances exist, organizations may have public-facing email infrastructure and addresses for employees.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals can check for the existence of user email addresses using public Microsoft APIs.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has collected e-mail addresses for activists and bloggers in order to target them with spyware.
   </Example>
   <Example id="G1011" name="EXOTIC LILY">
    EXOTIC LILY has gathered targeted individuals' e-mail addresses through open source research and website contact forms.
   </Example>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has collected e-mail addresses for users they intended to target.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has targeted executives, human resources staff, and IT personnel for spearphishing.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has collected valid email addresses that were subsequently used in spearphishing campaigns.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has gathered employee email addresses, including personal accounts, for social engineering and initial access efforts.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group collected email addresses belonging to various departments of a targeted organization which were used in follow-on phishing campaigns.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has acquired the personal email addresses of some individuals they intend to target.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has specifically targeted government agency employees with spearphishing e-mails.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has obtained valid emails addresses while conducting research against target organizations that were subsequently used in spearphishing campaigns.
   </Example>
   <Example id="G0122" name="Silent Librarian">
    Silent Librarian has collected e-mail addresses from targeted organizations from open Internet searches.
   </Example>
   <Example id="G0127" name="TA551">
    TA551 has used spoofed company emails that were acquired from email clients on previously infected hosts to target other individuals.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1589.003" name="Gather Victim Identity Information: Employee Names">
  Adversaries may gather employee names that can be used during targeting. Employee names be used to derive email addresses as well as to help guide other reconnaissance efforts and/or craft more-believable lures.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has collected victim employee name information.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team's research of potential victim organizations included the identification and collection of employee information.
   </Example>
   <Example id="G0122" name="Silent Librarian">
    Silent Librarian has collected lists of names for individuals from targeted organizations.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1590" name="Gather Victim Network Information">
  Adversaries may gather information about the victim's networks that can be used during targeting. Information about networks may include a variety of details, including administrative data (ex: IP ranges, domain names, etc.) as well as specifics regarding its topology and operations.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM gathered the fully qualified domain names (FQDNs) for targeted Exchange servers in the victim's environment.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1590.001" name="Gather Victim Network Information: Domain Properties">
  Adversaries may gather information about the victim's network domain(s) that can be used during targeting. Information about domains and their properties may include a variety of details, including what domain(s) the victim owns as well as administrative data (ex: name, registrar, etc.) and more directly actionable information such as contacts (email addresses and phone numbers), business addresses, and name servers.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals can gather information about a tenant’s domains using public Microsoft APIs.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team conducted technical reconnaissance of the Parliament of Georgia's official internet domain prior to its 2019 attack.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1590.002" name="Gather Victim Network Information: DNS">
  Adversaries may gather information about the victim's DNS that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target’s subdomains, mail servers, and other hosts. DNS, MX, TXT, and SPF records may also reveal the use of third party cloud and SaaS providers, such as Office 365, G Suite, Salesforce, or Zendesk.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1590.003" name="Gather Victim Network Information: Network Trust Dependencies">
  Adversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1590.004" name="Gather Victim Network Information: Network Topology">
  Adversaries may gather information about the victim's network topology that can be used during targeting. Information about network topologies may include a variety of details, including the physical and/or logical arrangement of both external-facing and internal network environments. This information may also include specifics regarding network devices (gateways, routers, etc.) and other infrastructure.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1590.005" name="Gather Victim Network Information: IP Addresses">
  Adversaries may gather the victim's IP addresses that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses. Information about assigned IP addresses may include a variety of details, such as which IP addresses are in use. IP addresses may also enable an adversary to derive other details about a victim, such as organizational size, physical location(s), Internet service provider, and or where/how their publicly-facing infrastructure is hosted.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0138" name="Andariel">
    Andariel has limited its watering hole attacks to specific IP address ranges.
   </Example>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has obtained IP addresses for publicly-accessible Exchange servers.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1590.006" name="Gather Victim Network Information: Network Security Appliances">
  Adversaries may gather information about the victim's network security appliances that can be used during targeting. Information about network security appliances may include a variety of details, such as the existence and specifics of deployed firewalls, content filters, and proxies/bastion hosts. Adversaries may also target information about victim network-based intrusion detection systems (NIDS) or other appliances related to defensive cybersecurity operations.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1591" name="Gather Victim Org Information">
  Adversaries may gather information about the victim's organization that can be used during targeting. Information about an organization may include a variety of details, including the names of divisions/departments, specifics of business operations, as well as the roles and responsibilities of key employees.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has collected victim organization information including but not limited to organization hierarchy, functions, press releases, and others.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has studied publicly available information about a targeted organization to tailor spearphishing efforts against specific departments and/or individuals.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1591.001" name="Gather Victim Org Information: Determine Physical Locations">
  Adversaries may gather the victim's physical location(s) that can be used during targeting. Information about physical locations of a target organization may include a variety of details, including where key resources and infrastructure are housed. Physical locations may also indicate what legal jurisdiction and/or authorities the victim operates within.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1591.002" name="Gather Victim Org Information: Business Relationships">
  Adversaries may gather information about the victim's business relationships that can be used during targeting. Information about an organization’s business relationships may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access. This information may also reveal supply chains and shipment paths for the victim’s hardware and software resources.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has collected open source information to identify relationships between organizations for targeting purposes.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has gathered detailed knowledge of an organization's supply chain relationships.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    In preparation for its attack against the 2018 Winter Olympics, Sandworm Team conducted online research of partner organizations listed on an official PyeongChang Olympics partnership site.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1591.003" name="Gather Victim Org Information: Identify Business Tempo">
  Adversaries may gather information about the victim's business tempo that can be used during targeting. Information about an organization’s business tempo may include a variety of details, including operational hours/days of the week. This information may also reveal times/dates of purchases and shipments of the victim’s hardware and software resources.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1591.004" name="Gather Victim Org Information: Identify Roles">
  Adversaries may gather information about identities and roles within the victim organization that can be used during targeting. Information about business roles may reveal a variety of targetable details, including identifiable information for key personnel as well as what data/resources they have access to.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G1001" name="HEXANE">
    HEXANE has identified executives, HR, and IT staff at victim organizations for further targeting.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has gathered detailed knowledge of team structures within a target organization.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has targeted specific individuals within an organization with tailored job vacancy announcements.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1615" name="Group Policy Discovery">
  Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predicable network path \\SYSVOL\\Policies\.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0521" name="BloodHound">
    BloodHound has the ability to collect local admin information via GPO.
   </Example>
   <Example id="S0082" name="Emissary">
    Emissary has the capability to execute gpresult.
   </Example>
   <Example id="S0363" name="Empire">
    Empire includes various modules for enumerating Group Policy.
   </Example>
   <Example id="G0010" name="Turla">
    Turla surveys a system upon check-in to discover Group Policy details using the gpresult command.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Access
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1200" name="Hardware Additions">
  Adversaries may introduce computer accessories, networking hardware, or other computing devices into a system or network that can be used as a vector to gain access. Rather than just connecting and distributing payloads via removable storage (i.e. Replication Through Removable Media), more robust hardware additions can be used to introduce new functionalities and/or features into a system that can then be abused.
  <Tactic>
   Initial Access
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-440
  </CAPEC_ID>
  <Examples>
   <Example id="G0105" name="DarkVishnya">
    DarkVishnya used Bash Bunny, Raspberry Pi, netbooks or inexpensive laptops to connect to the company’s local network.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1035" name="Limit Access to Resource Over Network">
    Establish network access control policies, such as using device certificates and the 802.1x standard.  Restrict use of DHCP to registered devices to prevent unregistered devices from communicating with trusted systems.
   </Mitigation>
   <Mitigation id="M1034" name="Limit Hardware Installation">
    Block unknown devices and accessories by endpoint security configuration and monitoring agent.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0016" name="Drive">
    Drive Creation
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1564" name="Hide Artifacts">
  Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Office 365, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0482" name="Bundlore">
    Bundlore uses the mktemp utility to make unique file and directory names for payloads, such as TMP_DIR=`mktemp -d -t x.
   </Example>
   <Example id="S0402" name="OSX/Shlayer">
    OSX/Shlayer has used the mktemp utility to make random and unique filenames for payloads, such as export tmpDir="$(mktemp -d /tmp/XXXXXXXXXXXX)" or mktemp -t Installer.
   </Example>
   <Example id="S1011" name="Tarrask">
    Tarrask is able to create "hidden" scheduled tasks by deleting the Security Descriptor (SD) registry value.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT can masquerade the Process Environment Block on a compromised host to hide it's attempts to elevate privileges through IFileOperation.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Metadata | File Modification
   </Detection>
   <Detection id="DS0001" name="Firmware">
    Firmware Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Creation
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Creation | User Account Metadata
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1564.001" name="Hide Artifacts: Hidden Files and Directories">
  Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls –a for Linux and macOS).
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Defense_Bypassed>
   Host forensic analysis
  </Defense_Bypassed>
  <Examples>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla has created hidden folders.
   </Example>
   <Example id="S0584" name="AppleJeus">
    AppleJeus has added a leading . to plist filenames, unlisting them from the Finder app and default Terminal directory listings.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has saved files with hidden file attributes.
   </Example>
   <Example id="G0050" name="APT32">
    APT32's macOS backdoor hides the clientID file via a chflags function.
   </Example>
   <Example id="S0438" name="Attor">
    Attor can set attributes of log files and directories to HIDDEN, SYSTEM, ARCHIVE, or a combination of those.
   </Example>
   <Example id="S0475" name="BackConfig">
    BackConfig has the ability to set folders or files to be hidden from the Windows Explorer default view.
   </Example>
   <Example id="S0274" name="Calisto">
    Calisto uses a hidden directory named .calisto to store data from the victim’s machine before exfiltration.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp has created a hidden file in the Startup folder of the current user.
   </Example>
   <Example id="S1043" name="ccf32">
    ccf32 has created a hidden directory on targeted systems, naming it after the current local time (year, month, and day).
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling has the ability to set its file attributes to hidden.
   </Example>
   <Example id="S0369" name="CoinTicker">
    CoinTicker downloads the following hidden files to evade detection and maintain persistence: /private/tmp/.info.enc, /private/tmp/.info.py, /private/tmp/.server.sh, ~/Library/LaunchAgents/.espl.plist, ~/Library/Containers/.
   </Example>
   <Example id="S0497" name="Dacls">
    Dacls has had its payload named with a dot prefix to make it hidden from view in the Finder application.
   </Example>
   <Example id="S0634" name="EnvyScout">
    EnvyScout can use hidden directories and files to hide malicious executables.
   </Example>
   <Example id="S0569" name="Explosive">
    Explosive has commonly set file and path attributes to hidden.
   </Example>
   <Example id="S0277" name="FruitFly">
    FruitFly saves itself with a leading "." to make it a hidden file.
   </Example>
   <Example id="S0278" name="iKitten">
    iKitten saves itself with a leading "." so that it's hidden from users by default.
   </Example>
   <Example id="S0434" name="Imminent Monitor">
    Imminent Monitor has a dynamic debugging feature to set the file attribute to hidden.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can create hidden system directories.
   </Example>
   <Example id="S0015" name="Ixeshe">
    Ixeshe sets its own executable file's attributes to hidden.
   </Example>
   <Example id="S0162" name="Komplex">
    The Komplex payload is stored in a hidden directory at /Users/Shared/.local/kextd.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used a VBA Macro to set its file attributes to System and Hidden and has named files with a dot prefix to hide them from the Finder application.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has the ability to copy itself to a hidden file and directory.
   </Example>
   <Example id="S0451" name="LoudMiner">
    LoudMiner has set the attributes of the VirtualBox directory and VBoxVmService parent directory to "hidden".
   </Example>
   <Example id="S0409" name="Machete">
    Machete has the capability to exfiltrate stolen data to a hidden folder on a removable drive.
   </Example>
   <Example id="S0282" name="MacSpy">
    MacSpy stores itself in ~/Library/.DS_Stores/
   </Example>
   <Example id="S0339" name="Micropsia">
    Micropsia creates a new hidden directory to store all components' outputs in a dedicated sub-folder for each.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda's PlugX variant has created a hidden folder on USB drives named RECYCLE.BIN to store malicious executables and collected data.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can copy itself to and launch itself from hidden folders.
   </Example>
   <Example id="S0439" name="Okrum">
    Before exfiltration, Okrum's backdoor has used hidden files to store logs and outputs from backdoor commands.
   </Example>
   <Example id="S0402" name="OSX/Shlayer">
    OSX/Shlayer has executed a .command script from a hidden directory in a mounted DMG.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    OSX_OCEANLOTUS.D sets the main loader file’s attributes to hidden.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX can modify the characteristics of folders to hide them from the compromised user.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has the ability to hide and unhide files.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT has the ability to set file attributes to "hidden" to hide files from the compromised user's view in Windows File Explorer.
   </Example>
   <Example id="S0448" name="Rising Sun">
    Rising Sun can modify file attributes to hide files.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke downloaded a file "libprocesshider", which could hide files on the target system.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA has been created with a hidden attribute to insure it's not visible to the victim.
   </Example>
   <Example id="S0663" name="SysUpdate">
    SysUpdate has the ability to set file attributes to hidden.
   </Example>
   <Example id="S0595" name="ThiefQuest">
    ThiefQuest hides a copy of itself in the user's ~/Library directory by using a . at the beginning of the file name followed by 9 random characters.
   </Example>
   <Example id="G0134" name="Transparent Tribe">
    Transparent Tribe can hide legitimate directories and replace them with malicious copies of the same name.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has created a hidden directory under C:\ProgramData\Apple\Updates\ and C:\Users\Public\Documents\Flash\.
   </Example>
   <Example id="S0366" name="WannaCry">
    WannaCry uses attrib +h to make some of its files hidden.
   </Example>
   <Example id="S0612" name="WastedLocker">
    WastedLocker has copied a random file from the Windows System32 folder to the %APPDATA% location under a different hidden filename.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET uses a hidden folder named .xcassets and .git to embed itself in Xcode.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Metadata
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1564.002" name="Hide Artifacts: Hidden Users">
  Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has modified the Registry to hide created user accounts.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has run reg add ‘HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList’ /v to hide a newly created user.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM has modified the Registry to hide created user accounts from the Windows logon screen.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1028" name="Operating System Configuration">
    If the computer is domain joined, then group policy can help restrict the ability to create or hide users. Similarly, preventing the modification of the /Library/Preferences/com.apple.loginwindow Hide500Users value will force all users to be visible.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Creation | User Account Metadata
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1564.003" name="Hide Artifacts: Hidden Window">
  Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla has used ProcessWindowStyle.Hidden to hide windows.
   </Example>
   <Example id="G0073" name="APT19">
    APT19 used -W Hidden to conceal PowerShell windows by setting the WindowStyle parameter to hidden.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has used the WindowStyle parameter to conceal PowerShell windows.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has been known to use -WindowStyle Hidden to conceal PowerShell windows.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has used the WindowStyle parameter to conceal PowerShell windows.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth loads its module with the XSL script parameter vShow set to zero, which opens the application with a hidden window.
   </Example>
   <Example id="S0360" name="BONDUPDATER">
    BONDUPDATER uses -windowstyle hidden to conceal a PowerShell window that downloads a payload.
   </Example>
   <Example id="G0052" name="CopyKittens">
    CopyKittens has used -w hidden and -windowstyle hidden to conceal PowerShell windows.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba has executed hidden PowerShell windows.
   </Example>
   <Example id="G0079" name="DarkHydrus">
    DarkHydrus has used -WindowStyle Hidden to conceal PowerShell windows.
   </Example>
   <Example id="G0009" name="Deep Panda">
    Deep Panda has used -w hidden to conceal PowerShell windows by setting the WindowStyle parameter to hidden.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has used hidcon to run batch files in a hidden console window.
   </Example>
   <Example id="G0078" name="Gorgon Group">
    Gorgon Group has used -W Hidden to conceal PowerShell windows by setting the WindowStyle parameter to hidden.
   </Example>
   <Example id="S0037" name="HAMMERTOSS">
    HAMMERTOSS has used -WindowStyle hidden to conceal PowerShell windows.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa used a payload that creates a hidden window.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant has the ability to hide the window for operations performed on a given file.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole has executed legitimate tools in hidden windows.
   </Example>
   <Example id="S1020" name="Kevin">
    Kevin can hide the current window from the targeted user via the ShowWindow API function.
   </Example>
   <Example id="S0387" name="KeyBoy">
    KeyBoy uses -w Hidden to conceal a PowerShell window that downloads a payload.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used an information gathering module that will hide an AV software window from the victim.
   </Example>
   <Example id="S0437" name="Kivars">
    Kivars has the ability to conceal its activity through hiding active windows.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic has used the command Powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden to hide its window.
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS has used -WindowsStyle Hidden to hide the command window.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound malware has a function to determine whether the C2 server wishes to execute the newly dropped file in a hidden window.
   </Example>
   <Example id="S0500" name="MCMD">
    MCMD can modify processes to prevent them from being visible on the desktop.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has hidden its GUI using the ShowWindow() WINAPI call.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor can hide its console window upon execution to decrease its visibility to a victim.
   </Example>
   <Example id="G0133" name="Nomadic Octopus">
    Nomadic Octopus executed PowerShell in a hidden window.
   </Example>
   <Example id="S0441" name="PowerShower">
    PowerShower has added a registry key so future powershell.exe instances are spawned with coordinates for a window position off-screen by default.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT can hide process windows and make web requests invisible to the compromised user. Requests marked as invisible have been sent with user-agent string Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194A though QuasarRAT can only be run on Windows systems.
   </Example>
   <Example id="S0686" name="QuietSieve">
    QuietSieve has the ability to execute payloads in a hidden window.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY has the ability to set its window state to hidden.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity has the ability to hide the console window for its document search module from the user.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif droppers have used COM properties to execute malware in hidden windows.
   </Example>
   <Example id="S0466" name="WindTail">
    WindTail can instruct the OS to execute an application without a dock icon or menu.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    Limit or restrict program execution using anti-virus software. On MacOS, allowlist programs that are allowed to have the plist tag. All other programs should be considered suspicious.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1564.004" name="Hide Artifacts: NTFS File Attributes">
  Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <System_Requirements>
   NTFS partitioned hard drive
  </System_Requirements>
  <Defense_Bypassed>
   Anti-virus, Host forensic analysis, Signature-based detection
  </Defense_Bypassed>
  <Examples>
   <Example id="S0504" name="Anchor">
    Anchor has used NTFS to hide files.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 used NTFS alternate data streams to hide their payloads.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth can abuse alternate data streams (ADS) to store content for malicious payloads.
   </Example>
   <Example id="S0570" name="BitPaymer">
    BitPaymer has copied itself to the :bin alternate data stream of a newly created file.
   </Example>
   <Example id="S0404" name="esentutl">
    esentutl can be used to read and write alternate data streams.
   </Example>
   <Example id="S0361" name="Expand">
    Expand can be used to download or copy a file into an alternate data stream.
   </Example>
   <Example id="S0168" name="Gazer">
    Gazer stores configuration items in alternate data streams (ADSs) if the Registry is not accessible.
   </Example>
   <Example id="S0397" name="LoJax">
    LoJax has loaded an embedded NTFS DXE driver to be able to access and write to NTFS partitions.
   </Example>
   <Example id="S0139" name="PowerDuke">
    PowerDuke hides many of its backdoor payloads in an alternate data stream (ADS).
   </Example>
   <Example id="S0145" name="POWERSOURCE">
    If the victim is using PowerShell 3.0 or later, POWERSOURCE writes its decoded payload to an alternate data stream (ADS) named kernel32.dll that is saved in %PROGRAMDATA%\Windows\.
   </Example>
   <Example id="S0019" name="Regin">
    The Regin malware platform uses Extended Attributes to store encrypted executables.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has the ability save and execute files as alternate data streams (ADS).
   </Example>
   <Example id="S0612" name="WastedLocker">
    WastedLocker has the ability to save and execute files as an alternate data stream (ADS).
   </Example>
   <Example id="S0027" name="Zeroaccess">
    Some variants of the Zeroaccess Trojan have been known to store data in Extended Attributes.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Consider adjusting read and write permissions for NTFS EA, though this should be tested to ensure routine OS operations are not impeded.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Metadata | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1564.005" name="Hide Artifacts: Hidden File System">
  Adversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Examples>
   <Example id="S0114" name="BOOTRASH">
    BOOTRASH has used unallocated disk space between partitions for a hidden file system that stores components of the Nemesis bootkit.
   </Example>
   <Example id="S0126" name="ComRAT">
    ComRAT has used a portable FAT16 partition image placed in %TEMP% as a hidden file system.
   </Example>
   <Example id="G0020" name="Equation">
    Equation has used an encrypted virtual file system stored in the Windows Registry.
   </Example>
   <Example id="S0019" name="Regin">
    Regin has used a hidden file system to store some of its components.
   </Example>
   <Example id="G0041" name="Strider">
    Strider has used a hidden file system that is stored as a file on disk.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0001" name="Firmware">
    Firmware Modification
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1564.006" name="Hide Artifacts: Run Virtual Instance">
  Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0451" name="LoudMiner">
    LoudMiner has used QEMU and VirtualBox to run a Tiny Core Linux virtual machine, which runs XMRig and makes connections to the C2 server for updates.
   </Example>
   <Example id="S0449" name="Maze">
    Maze operators have used VirtualBox and a Windows 7 virtual machine to run the ransomware; the virtual machine's configuration file mapped the shared network drives of the target company, presumably so Maze can encrypt files on the shared drives as well as the local machine.
   </Example>
   <Example id="S0481" name="Ragnar Locker">
    Ragnar Locker has used VirtualBox and a stripped Windows XP virtual machine to run itself. The use of a shared folder specified in the configuration enables Ragnar Locker to encrypt files on the host operating system, including files on any mapped drives.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Disable Hyper-V if not necessary within a given environment.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Use application control to mitigate installation and use of unapproved virtualization software.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0007" name="Image">
    Image Metadata
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1564.007" name="Hide Artifacts: VBA Stomping">
  Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <System_Requirements>
   MS Office version specified in
  </System_Requirements>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Turn off or restrict access to unneeded VB components.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Metadata
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1564.008" name="Hide Artifacts: Email Hiding Rules">
  Adversaries may use email rules to hide inbound emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various email functions, including moving emails to other folders, marking emails as read, or deleting emails. Rules may be created or modified within email clients or through external features such as the New-InboxRule or Set-InboxRule PowerShell cmdlets on Windows systems.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Google Workspace, Linux, Office 365, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0085" name="FIN4">
    FIN4 has created rules in victims' Microsoft Outlook accounts to automatically delete emails containing words such as "hacked," "phish," and "malware" in a likely attempt to prevent organizations from communicating about their activities.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Enterprise email solutions may have monitoring mechanisms that may include the ability to audit inbox rules on a regular basis. In an Exchange environment, Administrators can use Get-InboxRule to discover and remove potentially malicious inbox rules.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1564.009" name="Hide Artifacts: Resource Forking">
  Adversaries may abuse resource forks to hide malicious code or executables to evade detection and bypass security applications. A resource fork provides applications a structured way to store resources such as thumbnail images, menu definitions, icons, dialog boxes, and code.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   macOS
  </Platforms>
  <Defense_Bypassed>
   Gatekeeper, Notarization
  </Defense_Bypassed>
  <Examples>
   <Example id="S0276" name="Keydnap">
    Keydnap uses a resource fork to present a macOS JPEG or text file icon rather than the executable's icon assigned by the operating system.
   </Example>
   <Example id="S0402" name="OSX/Shlayer">
    OSX/Shlayer has used a resource fork to hide a compressed binary file of itself from the terminal, Finder, and potentially evade traditional scanners.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1013" name="Application Developer Guidance">
    Configure applications to use the application bundle structure which leverages the /Resources folder location.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Metadata
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1564.010" name="Hide Artifacts: Process Argument Spoofing">
  Adversaries may attempt to hide process command-line arguments by overwriting process memory. Process command-line arguments are stored in the process environment block (PEB), a data structure used by Windows to store various information about/used by a process. The PEB includes the process command-line arguments that are referenced when executing the process. When a process is created, defensive tools/sensors that monitor process creations may retrieve the process arguments from the PEB.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can use spoof arguments in spawned processes that execute beacon commands.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT has the ability to modify its process memory to hide process command-line arguments.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1574" name="Hijack Execution Flow">
  Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.
  <Tactics>
   Persistence, Privilege Escalation, Defense Evasion
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Application Control
  </Defense_Bypassed>
  <Examples>
   <Example id="S0354" name="Denis">
    Denis replaces the nonexistent Windows DLL "msfte.dll" with its own malicious version, which is loaded by the SearchIndexer.exe and SearchProtocolHost.exe.
   </Example>
   <Example id="S0567" name="Dtrack">
    One of Dtrack can replace the normal flow of a program execution with malicious code.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat can hijack the cryptbase.dll within migwiz.exe to escalate privileges and bypass UAC controls.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1013" name="Application Developer Guidance">
    When possible, include hash values in manifest files to help prevent side-loading of malicious libraries.
   </Mitigation>
   <Mitigation id="M1047" name="Audit">
    Use auditing tools capable of detecting hijacking opportunities on systems within an enterprise and correct them. Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for hijacking weaknesses.
   </Mitigation>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    Some endpoint security solutions can be configured to block some types of behaviors related to process injection/memory tampering based on common sequences of indicators (ex: execution of specific API functions).
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Adversaries may use new payloads to execute this technique. Identify and block potentially malicious software executed through hijacking by using application control solutions also capable of blocking libraries loaded by legitimate software.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Install software in write-protected locations. Set directory access controls to prevent file writes to the search paths for applications, both in the folders where applications are run from and the standard library folders.
   </Mitigation>
   <Mitigation id="M1044" name="Restrict Library Loading">
    Disallow loading of remote DLLs. This is included by default in Windows Server 2012+ and is available by patch for XP+ and Server 2003+.Enable Safe DLL Search Mode to force search for system DLLs in directories with greater restrictions (e.g. %SYSTEMROOT%)to be used before local directory DLLs (e.g. a user's home directory)The Safe DLL Search Mode can be enabled via Group Policy at Computer Configuration &gt;
   </Mitigation>
   <Mitigation id="M1024" name="Restrict Registry Permissions">
    Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Update software regularly to include patches that fix DLL side-loading vulnerabilities.
   </Mitigation>
   <Mitigation id="M1052" name="User Account Control">
    Turn off UAC's privilege elevation for standard users
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service binary target path locations. Deny execution from user directories such as file download directories and temp directories where able.Ensure that proper permissions and directory access control are set to deny users the ability to write files to the top-level directory C: and system directories, such as C:\Windows\, to reduce places where malicious files could be placed for execution.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Metadata
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1574.001" name="Hijack Execution Flow: DLL Search Order Hijacking">
  Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.
  <Tactics>
   Persistence, Privilege Escalation, Defense Evasion
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <CAPEC_ID>
   CAPEC-471
  </CAPEC_ID>
  <Examples>
   <Example id="G0096" name="APT41">
    APT41 has used search order hijacking to execute malicious payloads, such as Winnti RAT.
   </Example>
   <Example id="G0143" name="Aquatic Panda">
    Aquatic Panda has used DLL search-order hijacking to load exe, dll, and dat files into memory.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth can launch itself via DLL Search Order Hijacking.
   </Example>
   <Example id="G0135" name="BackdoorDiplomacy">
    BackdoorDiplomacy has executed DLL search order hijacking.
   </Example>
   <Example id="S0415" name="BOOSTWRITE">
    BOOSTWRITE has exploited the loading of the legitimate Dwrite.dll file by actually loading the gdi library, which then loads the gdiplus library and ultimately loads the local Dwrite dll.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes has used search order hijacking to load a malicious DLL.
   </Example>
   <Example id="S0538" name="Crutch">
    Crutch can persist via DLL search order hijacking on Google Chrome, Mozilla Firefox, or Microsoft OneDrive.
   </Example>
   <Example id="S0134" name="Downdelph">
    Downdelph uses search order hijacking of the Windows executable sysprep.exe to escalate privileges.
   </Example>
   <Example id="S0363" name="Empire">
    Empire contains modules that can discover and exploit various DLL hijacking opportunities.
   </Example>
   <Example id="G0120" name="Evilnum">
    Evilnum has used the malware variant, TerraTV, to load a malicious DLL placed in the TeamViewer directory, instead of the original Windows DLL located in a system folder.
   </Example>
   <Example id="S0182" name="FinFisher">
    A FinFisher variant uses DLL search order hijacking.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb's loader has used DLL Search Order Hijacking to load malicious code instead of the legitimate version.dll during the Microsoft.IdentityServer.ServiceHost.exe execution process.
   </Example>
   <Example id="S0009" name="Hikit">
    Hikit has used DLL Search Order Hijacking to load oci.dll as a persistence mechanism.
   </Example>
   <Example id="S0070" name="HTTPBrowser">
    HTTPBrowser abuses the Windows DLL load order by using a legitimate Symantec anti-virus binary, VPDN_LU.exe, to load a malicious DLL that mimics a legitimate Symantec DLL, navlu.dll.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can be launched by using DLL search order hijacking in which the wrapper DLL is placed in the same folder as explorer.exe and loaded during startup into the Windows Explorer process instead of the legitimate library.
   </Example>
   <Example id="S0530" name="Melcoz">
    Melcoz can use DLL hijacking to bypass security controls.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used DLL search order hijacking.
   </Example>
   <Example id="S0280" name="MirageFox">
    MirageFox is likely loaded via DLL hijacking into a legitimate McAfee binary.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX has the ability to use DLL search order hijacking for installation on targeted systems.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit DLL hijacking opportunities in services and processes.
   </Example>
   <Example id="S0113" name="Prikormka">
    Prikormka uses DLL search order hijacking for persistence by saving itself as ntshrui.dll to the Windows directory so it will load before the legitimate ntshrui.dll saved in the System32 subdirectory.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can hijack outdated Windows application dependencies with malicious versions of its own DLL payload.
   </Example>
   <Example id="S0153" name="RedLeaves">
    RedLeaves is launched through use of DLL search order hijacking to load a malicious dll.
   </Example>
   <Example id="G0048" name="RTM">
    RTM has used search order hijacking to force TeamViewer to load a malicious DLL.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has performed DLL search order hijacking to execute their payload.
   </Example>
   <Example id="G0131" name="Tonto Team">
    Tonto Team abuses a legitimate and signed Microsoft executable to launch a malicious DLL.
   </Example>
   <Example id="S0612" name="WastedLocker">
    WastedLocker has performed DLL hijacking before execution.
   </Example>
   <Example id="S0109" name="WEBC2">
    Variants of WEBC2 achieve persistence by using DLL search order hijacking, usually by copying the DLL file to %SYSTEMROOT% (C:\WINDOWS\ntshrui.dll).
   </Example>
   <Example id="G0107" name="Whitefly">
    Whitefly has used search order hijacking to run the loader Vcrodat.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Use auditing tools capable of detecting DLL search order hijacking opportunities on systems within an enterprise and correct them. Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for DLL hijacking weaknesses.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Adversaries may use new DLLs to execute this technique. Identify and block potentially malicious software executed through search order hijacking by using application control solutions capable of blocking DLLs loaded by legitimate software.
   </Mitigation>
   <Mitigation id="M1044" name="Restrict Library Loading">
    Disallow loading of remote DLLs. This is included by default in Windows Server 2012+ and is available by patch for XP+ and Server 2003+.Enable Safe DLL Search Mode to force search for system DLLs in directories with greater restrictions (e.g. %SYSTEMROOT%)to be used before local directory DLLs (e.g. a user's home directory)The Safe DLL Search Mode can be enabled via Group Policy at Computer Configuration &gt;
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1574.002" name="Hijack Execution Flow: DLL Side-Loading">
  Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).
  <Tactics>
   Persistence, Privilege Escalation, Defense Evasion
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Application Control
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-641
  </CAPEC_ID>
  <Examples>
   <Example id="G0073" name="APT19">
    APT19 launched an HTTP malware variant and a Port 22 malware variant using a legitimate executable that loaded the malicious DLL.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has been known to side load DLLs with a valid version of Chrome with one of their tools.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 ran legitimately-signed executables from Symantec and McAfee which load a malicious DLL. The group also side-loads its backdoor by dropping a library and a legitimate, signed executable (AcroTranscoder).
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used legitimate executables to perform DLL side-loading of their malware.
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS typically loads its DLL file into a legitimate signed Java or VMware executable.
   </Example>
   <Example id="S0127" name="BBSRAT">
    DLL side-loading has been used to execute BBSRAT through a legitimate Citrix executable, ssonsvr.exe. The Citrix executable was dropped along with BBSRAT by the dropper.
   </Example>
   <Example id="G0098" name="BlackTech">
    BlackTech has used DLL side loading by giving DLLs hardcoded names and placing them in searched directories.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has used legitimate applications to side-load malicious DLLs.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used side loading to place malicious DLLs in memory.
   </Example>
   <Example id="S1041" name="Chinoxy">
    Chinoxy can use a digitally signed binary ("Logitech Bluetooth Wizard Host Process") to load its dll into memory.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can store a file named mpsvc.dll, which opens a malicious mpsvc.mui file, in the same folder as the legitimate Microsoft executable MsMpEng.exe to gain execution.
   </Example>
   <Example id="S0354" name="Denis">
    Denis exploits a security vulnerability to load a fake DLL and execute its code.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has placed a malicious payload in %WINDIR%\SYSTEM32\oci.dll so it would be sideloaded by the MSDTC service.
   </Example>
   <Example id="S0624" name="Ecipekac">
    Ecipekac can abuse the legitimate application policytool.exe to load a malicious DLL.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor has used DLL side-loading to execute its payload.
   </Example>
   <Example id="S0182" name="FinFisher">
    FinFisher uses DLL side-loading to load malicious programs.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM used DLL side-loading to covertly load PoisonIvy into memory on the victim machine.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    A gh0st RAT variant has used DLL side-loading.
   </Example>
   <Example id="S0477" name="Goopy">
    Goopy has the ability to side-load malicious DLLs with legitimate applications from Kaspersky, Microsoft, and Google.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa’s JavaScript file used a legitimate Microsoft Office 2007 package to side-load the OINFO12.OCX dynamic link library.
   </Example>
   <Example id="S0070" name="HTTPBrowser">
    HTTPBrowser has used DLL side-loading.
   </Example>
   <Example id="S0398" name="HyperBro">
    HyperBro has used a legitimate application to sideload a DLL to decrypt, decompress, and run a payload.
   </Example>
   <Example id="S0528" name="Javali">
    Javali can use DLL side-loading to load malicious DLLs into legitimate executables.
   </Example>
   <Example id="S0585" name="Kerrdown">
    Kerrdown can use DLL side-loading to load malicious DLLs.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has replaced win_fw.dll, an internal component that is executed during IDA Pro installation, with a malicious DLL to download and execute a payload.
   </Example>
   <Example id="S0582" name="LookBack">
    LookBack side loads its communications module as a DLL into the libcurl.dll loader.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used DLL side-loading to launch versions of Mimikatz and PwDump6 as well as UPPERCUT.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has side-loaded its malicious DLL file.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater maintains persistence on victim networks through side-loading dlls to trick legitimate programs into running malware.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has used a legitimately signed executable to execute a malicious payload within a DLL file.
   </Example>
   <Example id="G0019" name="Naikon">
    Naikon has used DLL side-loading to load malicious DLL's into legitimate executables.
   </Example>
   <Example id="S0630" name="Nebulae">
    Nebulae can use DLL side-loading to gain execution.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used the legitimate Windows services IKEEXT and PrintNotify to side-load malicious DLLs.
   </Example>
   <Example id="S0664" name="Pandora">
    Pandora can use DLL side-loading to execute malicious payloads.
   </Example>
   <Example id="G0040" name="Patchwork">
    A Patchwork .dll that contains BADNEWS is loaded and executed using DLL side-loading.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX has used DLL side-loading to evade anti-virus.
   </Example>
   <Example id="S1046" name="PowGoop">
    PowGoop can side-load Goopdate.dll into GoogleUpdate.exe.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay can use side-loading to run malicious executables.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession can be installed via DLL side-loading.
   </Example>
   <Example id="S0074" name="Sakula">
    Sakula uses DLL side-loading, typically using a digitally signed sample of Kaspersky Anti-Virus (AV) 6.0 for Windows Workstations or McAfee's Outlook Scan About Box to load malicious DLL files.
   </Example>
   <Example id="G1008" name="SideCopy">
    SideCopy has used a malicious loader DLL file to execute the credwiz.exe process and side-load the malicious payload Duser.dll.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has used DLL side-loading to drop and execute malicious payloads including the hijacking of the legitimate Windows application file rekeywiz.exe.
   </Example>
   <Example id="S0663" name="SysUpdate">
    SysUpdate can load DLLs through vulnerable legitimate executables.
   </Example>
   <Example id="S0098" name="T9000">
    During the T9000 installation process, it drops a copy of the legitimate Microsoft binary igfxtray.exe. The executable contains a side-loading weakness which is used to load a portion of the malware.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has used DLL side-loading, including by using legitimate Kaspersky antivirus variants in which the DLL acts as a stub loader that loads and executes the shell code.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has been known to side-load DLLs using a valid version of a Windows Address Book and Windows Defender executable with one of their tools.
   </Example>
   <Example id="S0579" name="Waterbear">
    Waterbear has used DLL side loading to import and load a malicious DLL loader.
   </Example>
   <Example id="S0176" name="Wingbird">
    Wingbird side loads a malicious file, sspisrv.dll, in part of a spoofed lssas.exe service.
   </Example>
   <Example id="S0230" name="ZeroT">
    ZeroT has used DLL side-loading to load malicious payloads.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1013" name="Application Developer Guidance">
    When possible, include hash values in manifest files to help prevent side-loading of malicious libraries.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Update software regularly to include patches that fix DLL side-loading vulnerabilities.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1574.004" name="Hijack Execution Flow: Dylib Hijacking">
  Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with @rpath, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the LC_LOAD_WEAK_DYLIB function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.
  <Tactics>
   Persistence, Privilege Escalation, Defense Evasion
  </Tactics>
  <Platforms>
   macOS
  </Platforms>
  <Defense_Bypassed>
   Application Control
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-471
  </CAPEC_ID>
  <Examples>
   <Example id="S0363" name="Empire">
    Empire has a dylib hijacker module that generates a malicious dylib given the path to a legitimate dylib of a vulnerable application.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Set directory access controls to prevent file writes to the search paths for applications, both in the folders where applications are run from and the standard dylib folders.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1574.005" name="Hijack Execution Flow: Executable Installer File Permissions Weakness">
  Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.
  <Tactics>
   Persistence, Privilege Escalation, Defense Evasion
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Effective_Permissions>
   Administrator, SYSTEM, User
  </Effective_Permissions>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Use auditing tools capable of detecting file system permissions abuse opportunities on systems within an enterprise and correct them. Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for service file system permissions weaknesses.
   </Mitigation>
   <Mitigation id="M1052" name="User Account Control">
    Turn off UAC's privilege elevation for standard users
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service binary target path locations. Deny execution from user directories such as file download directories and temp directories where able.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1574.006" name="Hijack Execution Flow: Dynamic Linker Hijacking">
  Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as LD_PRELOAD on Linux or DYLD_INSERT_LIBRARIES on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.
  <Tactics>
   Persistence, Privilege Escalation, Defense Evasion
  </Tactics>
  <Platforms>
   Linux, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-13, CAPEC-640
  </CAPEC_ID>
  <Examples>
   <Example id="G0096" name="APT41">
    APT41 has configured payloads to load via LD_PRELOAD.
   </Example>
   <Example id="S0377" name="Ebury">
    Ebury has injected its dynamic library into descendent processes of sshd via LD_PRELOAD.
   </Example>
   <Example id="S0394" name="HiddenWasp">
    HiddenWasp adds itself as a shared object to the LD_PRELOAD environment variable.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has modified /etc/ld.so.preload to intercept shared library import functions.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has modified /etc/ld.so.preload to hook libc functions in order to hide the installed dropper and mining software in process lists.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET adds malicious file paths to the DYLD_FRAMEWORK_PATH and DYLD_LIBRARY_PATH environment variables to execute malicious code.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    Adversaries may use new payloads to execute this technique. Identify and block potentially malicious software executed through hijacking by using application control solutions also capable of blocking libraries loaded by legitimate software.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    When System Integrity Protection (SIP) is enabled in macOS, the aforementioned environment variables are ignored when executing protected binaries. Third-party applications can also leverage Apple’s Hardened Runtime, ensuring these environment variables are subject to imposed restrictions. Admins can add restrictions to applications by setting the setuid and/or setgid bits, use entitlements, or have a __RESTRICT segment in the Mach-O binary.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1574.007" name="Hijack Execution Flow: Path Interception by PATH Environment Variable">
  Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.
  <Tactics>
   Persistence, Privilege Escalation, Defense Evasion
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Defense_Bypassed>
   Application Control
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-13, CAPEC-38
  </CAPEC_ID>
  <Examples>
   <Example id="S0363" name="Empire">
    Empire contains modules that can discover and exploit path interception opportunities in the PATH environment variable.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit path interception opportunities in the PATH environment variable.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Find and eliminate path interception weaknesses in program configuration files, scripts, the PATH environment variable, services, and in shortcuts by surrounding PATH variables with quotation marks when functions allow for them. Be aware of the search order Windows uses for executing or loading binaries and use fully qualified paths wherever appropriate.Clean up old Windows Registry keys when software is uninstalled to avoid keys with no associated legitimate binaries. Periodically search for and correct or report path interception weaknesses on systems that may have been introduced using custom or available tools that report software using insecure path configurations.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Adversaries will likely need to place new binaries in locations to be executed through this weakness. Identify and block potentially malicious software executed path interception by using application control tools, like Windows Defender Application Control, AppLocker, or Software Restriction Policies where appropriate.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Ensure that proper permissions and directory access control are set to deny users the ability to write files to the top-level directory C: and system directories, such as C:\Windows\, to reduce places where malicious files could be placed for execution. Require that all executables be placed in write-protected directories.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1574.008" name="Hijack Execution Flow: Path Interception by Search Order Hijacking">
  Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.
  <Tactics>
   Persistence, Privilege Escalation, Defense Evasion
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User
  </Permissions_Required>
  <Effective_Permissions>
   Administrator, SYSTEM, User
  </Effective_Permissions>
  <CAPEC_ID>
   CAPEC-159
  </CAPEC_ID>
  <Examples>
   <Example id="S0363" name="Empire">
    Empire contains modules that can discover and exploit search order hijacking vulnerabilities.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit search order hijacking vulnerabilities.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Find and eliminate path interception weaknesses in program configuration files, scripts, the PATH environment variable, services, and in shortcuts by surrounding PATH variables with quotation marks when functions allow for them. Be aware of the search order Windows uses for executing or loading binaries and use fully qualified paths wherever appropriate.Clean up old Windows Registry keys when software is uninstalled to avoid keys with no associated legitimate binaries. Periodically search for and correct or report path interception weaknesses on systems that may have been introduced using custom or available tools that report software using insecure path configurations.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Adversaries will likely need to place new binaries in locations to be executed through this weakness. Identify and block potentially malicious software executed path interception by using application control tools, like Windows Defender Application Control, AppLocker, or Software Restriction Policies where appropriate.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Ensure that proper permissions and directory access control are set to deny users the ability to write files to the top-level directory C: and system directories, such as C:\Windows\, to reduce places where malicious files could be placed for execution. Require that all executables be placed in write-protected directories.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1574.009" name="Hijack Execution Flow: Path Interception by Unquoted Path">
  Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.
  <Tactics>
   Persistence, Privilege Escalation, Defense Evasion
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <CAPEC_ID>
   CAPEC-38
  </CAPEC_ID>
  <Examples>
   <Example id="S0363" name="Empire">
    Empire contains modules that can discover and exploit unquoted path vulnerabilities.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit unquoted path vulnerabilities.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Find and eliminate path interception weaknesses in program configuration files, scripts, the PATH environment variable, services, and in shortcuts by surrounding PATH variables with quotation marks when functions allow for them. Be aware of the search order Windows uses for executing or loading binaries and use fully qualified paths wherever appropriate.Clean up old Windows Registry keys when software is uninstalled to avoid keys with no associated legitimate binaries. Periodically search for and correct or report path interception weaknesses on systems that may have been introduced using custom or available tools that report software using insecure path configurations.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Adversaries will likely need to place new binaries in locations to be executed through this weakness. Identify and block potentially malicious software executed path interception by using application control tools, like Windows Defender Application Control, AppLocker, or Software Restriction Policies where appropriate.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Ensure that proper permissions and directory access control are set to deny users the ability to write files to the top-level directory C: and system directories, such as C:\Windows\, to reduce places where malicious files could be placed for execution. Require that all executables be placed in write-protected directories.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1574.010" name="Hijack Execution Flow: Services File Permissions Weakness">
  Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.
  <Tactics>
   Persistence, Privilege Escalation, Defense Evasion
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Effective_Permissions>
   Administrator, SYSTEM, User
  </Effective_Permissions>
  <CAPEC_ID>
   CAPEC-17
  </CAPEC_ID>
  <Examples>
   <Example id="S0089" name="BlackEnergy">
    One variant of BlackEnergy locates existing driver services that have been disabled and drops its driver component into one of those service's paths, replacing the legitimate executable. The malware then sets the hijacked service to start automatically to establish persistence.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Use auditing tools capable of detecting file system permissions abuse opportunities on systems within an enterprise and correct them. Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for service file system permissions weaknesses.
   </Mitigation>
   <Mitigation id="M1052" name="User Account Control">
    Turn off UAC's privilege elevation for standard users
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service binary target path locations. Deny execution from user directories such as file download directories and temp directories where able.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1574.011" name="Hijack Execution Flow: Services Registry Permissions Weakness">
  Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under HKLM\SYSTEM\CurrentControlSet\Services. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  PowerShell, or Reg. Access to Registry keys is controlled through access control lists and user permissions.
  <Tactics>
   Persistence, Privilege Escalation, Defense Evasion
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Effective_Permissions>
   SYSTEM
  </Effective_Permissions>
  <Defense_Bypassed>
   Application Control
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-478
  </CAPEC_ID>
  <Examples>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, the threat actors used a batch file that modified the COMSysApp service to load a malicious ipnet.dll payload and to load a DLL into the svchost.exe process.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1024" name="Restrict Registry Permissions">
    Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Modification
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1574.012" name="Hijack Execution Flow: COR_PROFILER">
  Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.
  <Tactics>
   Persistence, Privilege Escalation, Defense Evasion
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Examples>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has used wmic.exe and Windows Registry modifications to set the COR_PROFILER environment variable to execute a malicious DLL whenever a process loads the .NET CLR.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    Identify and block potentially malicious unmanaged COR_PROFILER profiling DLLs  by using application control solutions like AppLocker that are capable of auditing and/or blocking unapproved DLLs.
   </Mitigation>
   <Mitigation id="M1024" name="Restrict Registry Permissions">
    Ensure proper permissions are set for Registry hives to prevent users from modifying keys associated with COR_PROFILER.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit the privileges of user accounts so that only authorized administrators can edit system environment variables.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1574.013" name="Hijack Execution Flow: KernelCallbackTable">
  Adversaries may abuse the KernelCallbackTable of a process to hijack its execution flow in order to run their own payloads.
  <Tactics>
   Persistence, Privilege Escalation, Defense Evasion
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Examples>
   <Example id="S0182" name="FinFisher">
    FinFisher has used the KernelCallbackTable to hijack the execution flow of a process by replacing the __fnDWORD function with the address of a created Asynchronous Procedure Call stub routine.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has abused the KernelCallbackTable to hijack process control flow and execute shellcode.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    Some endpoint security solutions can be configured to block some types of behaviors related to process injection/memory tampering based on common sequences of indicators (ex: execution of specific API functions).
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1562" name="Impair Defenses">
  Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Containers, IaaS, Linux, Network, Office 365, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Digital Certificate Validation, File monitoring, Firewall, Host forensic analysis, Host intrusion prevention systems, Log analysis, Signature-based detection
  </Defense_Bypassed>
  <Examples>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has disabled LSA protection on compromised hosts using "reg" add HKLM\SYSTEM\CurrentControlSet\Control\LSA /v RunAsPPL /t REG_DWORD /d 0 /f.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet reduces the integrity level of objects to allow write actions.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    Use application control where appropriate, especially regarding the execution of tools outside of the organization's security policies (such as rootkit removal tools) that have been abused to impair system defenses. Ensure that only approved security applications are used and running on enterprise systems.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Ensure proper process and file permissions are in place to prevent adversaries from disabling or interfering with security/logging services.
   </Mitigation>
   <Mitigation id="M1024" name="Restrict Registry Permissions">
    Ensure proper Registry permissions are in place to prevent adversaries from disabling or interfering with security/logging services.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security/logging services.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0025" name="Cloud Service">
    Cloud Service Disable | Cloud Service Modification
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0027" name="Driver">
    Driver Load
   </Detection>
   <Detection id="DS0018" name="Firewall">
    Firewall Disable | Firewall Rule Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation | Process Termination
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
   <Detection id="DS0013" name="Sensor Health">
    Host Status
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Metadata
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Deletion | Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1562.001" name="Impair Defenses: Disable or Modify Tools">
  Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Containers, IaaS, Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, File monitoring, Host intrusion prevention systems, Log analysis, Signature-based detection
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-578
  </CAPEC_ID>
  <Examples>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla has the capability to kill any running analysis processes and AV software.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 used the service control manager on a remote system to disable services associated with security monitoring products.
   </Example>
   <Example id="G0143" name="Aquatic Panda">
    Aquatic Panda has attempted to stop endpoint detection and response (EDR) tools on compromised systems.
   </Example>
   <Example id="S0640" name="Avaddon">
    Avaddon looks for and attempts to stop anti-malware solutions.
   </Example>
   <Example id="S0638" name="Babuk">
    Babuk can stop anti-virus services on a compromised host.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar has manually loaded ntdll from disk in order to identity and remove API hooks set by security products.
   </Example>
   <Example id="S0252" name="Brave Prince">
    Brave Prince terminates antimalware processes.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has incorporated code into several tools that attempts to terminate anti-virus processes.
   </Example>
   <Example id="S0482" name="Bundlore">
    Bundlore can change browser security settings to enable extensions to be installed. Bundlore uses the pkill cfprefsd command to prevent users from inspecting processes.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp has attempted to disable security software by creating a suspended process for the security software and injecting code to delete antivirus core files when the process is resumed.
   </Example>
   <Example id="S0144" name="ChChes">
    ChChes can alter the victim's proxy configuration.
   </Example>
   <Example id="S0611" name="Clop">
    Clop can uninstall or disable security products.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike has the ability to use Smart Applet attacks to disable the Java SecurityManager sandbox.
   </Example>
   <Example id="S0608" name="Conficker">
    Conficker terminates various services related to system security and Windows.
   </Example>
   <Example id="S0334" name="DarkComet">
    DarkComet can disable Security Center functions like anti-virus.
   </Example>
   <Example id="S0659" name="Diavol">
    Diavol can attempt to stop security software.
   </Example>
   <Example id="S0695" name="Donut">
    Donut can patch Antimalware Scan Interface (AMSI), Windows Lockdown Policy (WLDP), as well as exit-related Native API functions to avoid process termination.
   </Example>
   <Example id="S0377" name="Ebury">
    Ebury can disable SELinux Role-Based Access Control and deactivate PAM modules.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor has disabled Windows Defender to evade protections.
   </Example>
   <Example id="S0605" name="EKANS">
    EKANS stops processes related to security and management software.
   </Example>
   <Example id="G1003" name="Ember Bear">
    Ember Bear has executed a batch script designed to disable Windows Defender on a compromised host.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has deployed a utility script named kill.bat to disable anti-virus.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has delivered macros which can tamper with Microsoft Office security settings.
   </Example>
   <Example id="S0249" name="Gold Dragon">
    Gold Dragon terminates anti-malware processes if they’re found running on the system.
   </Example>
   <Example id="S0477" name="Goopy">
    Goopy has the ability to disable Microsoft Outlook's security policies to disable macro warnings.
   </Example>
   <Example id="G0078" name="Gorgon Group">
    Gorgon Group malware can attempt to disable security features in Microsoft Office and Windows Defender using the taskkill command.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can hook APIs, kill processes, break file system paths, and change ACLs to prevent security tools from running.
   </Example>
   <Example id="S0132" name="H1N1">
    H1N1 kills and disables services for Windows Security Center, and Windows Defender.
   </Example>
   <Example id="S0061" name="HDoor">
    HDoor kills anti-virus found on the victim.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has modified DNS resolvers to evade DNS monitoring tools.
   </Example>
   <Example id="S0434" name="Imminent Monitor">
    Imminent Monitor has a feature to disable Windows Task Manager.
   </Example>
   <Example id="G0119" name="Indrik Spider">
    Indrik Spider used PsExec to leverage Windows Defender to disable scanning of all downloaded files and to restrict real-time monitoring.
   </Example>
   <Example id="S0201" name="JPIN">
    JPIN can lower security settings by changing Registry keys.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has been observed turning off Windows Security Center and can hide the AV software window from the view of the infected user.
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS will attempt to delete or disable all Registry keys and scheduled tasks related to Microsoft Security Defender and Security Essentials.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group malware TangoDelta attempts to terminate various processes associated with McAfee. Additionally, Lazarus Group malware SHARPKNOT disables the Microsoft Windows System Event Notification and Alerter services..
   </Example>
   <Example id="S0372" name="LockerGoga">
    LockerGoga installation has been immediately preceded by a "task kill" command in order to disable anti-virus.
   </Example>
   <Example id="S1048" name="macOS.OSAMiner">
    macOS.OSAMiner has searched for the Activity Monitor process in the System Events process list and kills the process if running. macOS.OSAMiner also searches the operating system's install.log for apps matching its hardcoded list, killing all matching process names.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has disabled antivirus services on targeted systems in order to upload malicious payloads.
   </Example>
   <Example id="S0449" name="Maze">
    Maze has disabled dynamic analysis and other security tools including IDA debugger, x32dbg, and OllyDbg.
   </Example>
   <Example id="S0576" name="MegaCortex">
    MegaCortex was used to kill endpoint security processes.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has a function to kill processes associated with defenses and can prevent certain processes from launching.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor can attempt to uninstall Kaspersky Antivirus or remove the Kaspersky license; it can also add all files and folders related to the attack to the Windows Defender exclusion list.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater can disable the system's local proxy settings.
   </Example>
   <Example id="S0228" name="NanHaiShu">
    NanHaiShu can change Internet Explorer settings to reduce warnings about malware activity.
   </Example>
   <Example id="S0336" name="NanoCore">
    NanoCore can modify the victim's anti-virus.
   </Example>
   <Example id="S0457" name="Netwalker">
    Netwalker can detect and terminate active security software-related processes on infected systems.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors disabled anti-virus and anti-spyware tools in some instances on the victim’s machines. The actors also disabled proxy settings to allow direct communication from victims to the Internet.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS can disable Microsoft Office Protected View by changing Registry keys.
   </Example>
   <Example id="S0279" name="Proton">
    Proton kills security tools like Wireshark that are running.
   </Example>
   <Example id="G0024" name="Putter Panda">
    Malware used by Putter Panda attempts to terminate processes corresponding to two components of Sophos Anti-Virus (SAVAdminService.exe and SavService.exe).
   </Example>
   <Example id="S0583" name="Pysa">
    Pysa has the capability to stop antivirus services and disable Windows Defender.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot has the ability to modify the Registry to add its binaries to the Windows Defender exclusion list.
   </Example>
   <Example id="S0481" name="Ragnar Locker">
    Ragnar Locker has attempted to terminate/stop processes and services associated with endpoint security products.
   </Example>
   <Example id="S0496" name="REvil">
    REvil can connect to and disable the Symantec server on the victim's network.
   </Example>
   <Example id="S0400" name="RobbinHood">
    RobbinHood will search for Windows services that are associated with antivirus software on the system and kill the process.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke used scripts which detected and uninstalled antivirus software.
   </Example>
   <Example id="S0253" name="RunningRAT">
    RunningRAT kills antimalware running process.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk has stopped services related to anti-virus.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY's amsiPatch.py module can disable Antimalware Scan Interface (AMSI) functions.
   </Example>
   <Example id="S0468" name="Skidmap">
    Skidmap has the ability to set SELinux to permissive mode.
   </Example>
   <Example id="S0058" name="SslMM">
    SslMM identifies and kills anti-malware processes.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity can add directories used by the malware to the Windows Defender exclusions list to prevent detection.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST attempted to disable software security services following checks against a FNV-1a + XOR hashed hardcoded blocklist.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used malware to disable Windows Defender.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has disabled and uninstalled security tools such as Alibaba, Tencent, and BMC cloud monitoring agents on cloud-based infrastructure.
   </Example>
   <Example id="S0595" name="ThiefQuest">
    ThiefQuest uses the function kill_unwanted to obtain a list of running processes and kills each process matching a list of security related processes.
   </Example>
   <Example id="S0004" name="TinyZBot">
    TinyZBot can disable Avira anti-virus.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot can disable Windows Defender.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used a AMSI bypass, which patches the in-memory amsi.dll, in PowerShell scripts to bypass Windows antimalware products.
   </Example>
   <Example id="S0130" name="Unknown Logger">
    Unknown Logger has functionality to disable security tools, including Kaspersky, BitDefender, and MalwareBytes.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT can disarm Windows Defender during the UAC process to evade detection.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can download and execute AdvancedRun.exe to disable the Windows Defender Theat Protection service and set an exclusion path for the C:\ drive.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has shut down or uninstalled security applications on victim systems that might prevent ransomware from executing.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell can kill AV products' processes.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    Use application control where appropriate, especially regarding the execution of tools outside of the organization's security policies (such as rootkit removal tools) that have been abused to impair system defenses. Ensure that only approved security applications are used and running on enterprise systems.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Ensure proper process and file permissions are in place to prevent adversaries from disabling or interfering with security services.
   </Mitigation>
   <Mitigation id="M1024" name="Restrict Registry Permissions">
    Ensure proper Registry permissions are in place to prevent adversaries from disabling or interfering with security services.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0027" name="Driver">
    Driver Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Termination
   </Detection>
   <Detection id="DS0013" name="Sensor Health">
    Host Status
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Metadata
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Deletion | Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1562.002" name="Impair Defenses: Disable Windows Event Logging">
  Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Defense_Bypassed>
   Log analysis
  </Defense_Bypassed>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 used AUDITPOL to prevent the collection of audit logs.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has disabled event logging on compromised systems.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has used appcmd.exe to disable logging on a victim server.
   </Example>
   <Example id="S0645" name="Wevtutil">
    Wevtutil can be used to disable specific event logs on the system.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Consider periodic review of auditpol settings for Administrator accounts and perform dynamic baselining on SIEM(s) to investigate potential malicious activity. Also ensure that the EventLog service and its threads are properly running.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Ensure proper process and file permissions are in place to prevent adversaries from disabling or interfering with logging or deleting or modifying .evtx logging files. Ensure .evtx files, which are located at C:\Windows\system32\Winevt\Logs, have the proper file permissions for limited, legitimate access and audit policies for detection.
   </Mitigation>
   <Mitigation id="M1024" name="Restrict Registry Permissions">
    Ensure proper Registry permissions are in place to prevent adversaries from disabling or interfering logging. The addition of the MiniNT registry key disables Event Viewer.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with logging.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
   <Detection id="DS0013" name="Sensor Health">
    Host Status
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1562.003" name="Impair Defenses: Impair Command History Logging">
  Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Host forensic analysis, Log analysis
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-13
  </CAPEC_ID>
  <Examples>
   <Example id="G0082" name="APT38">
    APT38 has prepended a space to all of their terminal commands to operate without leaving traces in the HISTCONTROL environment.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can bypass ScriptBlock logging to execute unmanaged PowerShell code from memory.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1039" name="Environment Variable Permissions">
    Prevent users from changing the HISTCONTROL, HISTFILE, and HISTFILESIZE environment variables.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Make sure that the HISTCONTROL environment variable is set to "ignoredups" instead of "ignoreboth" or "ignorespace".
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0013" name="Sensor Health">
    Host Status
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1562.004" name="Impair Defenses: Disable or Modify System Firewall">
  Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Firewall
  </Defense_Bypassed>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 used netsh to configure firewall rules that limited certain UDP outbound packets.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 have created firewall exemptions on specific ports, including ports 443, 6443, 8443, and 9443.
   </Example>
   <Example id="S0031" name="BACKSPACE">
    The "ZR" variant of BACKSPACE will check to see if known host-based firewalls are installed on the infected systems. BACKSPACE will attempt to establish a C2 channel, then will examine open windows to identify a pop-up from the firewall software and will simulate a mouse-click to allow the connection to proceed.
   </Example>
   <Example id="S0245" name="BADCALL">
    BADCALL disables the Windows firewall before binding to a port.
   </Example>
   <Example id="G0008" name="Carbanak">
    Carbanak may use netsh to add local firewall rule exceptions.
   </Example>
   <Example id="S0492" name="CookieMiner">
    CookieMiner has checked for the presence of "Little Snitch", macOS network monitoring and application firewall software, stopping and exiting if it is found.
   </Example>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink can modify the Linux iptables firewall to enable C2 communication via a stored list of port numbers.
   </Example>
   <Example id="S0334" name="DarkComet">
    DarkComet can disable Security Center functions like the Windows Firewall.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has disabled host-based firewalls. The group has also globally opened port 3389.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can block the Deibold Warsaw GAS Tecnologia security tool at the firewall level.
   </Example>
   <Example id="S0132" name="H1N1">
    H1N1 kills and disables services for Windows Firewall.
   </Example>
   <Example id="S0246" name="HARDRAIN">
    HARDRAIN opens the Windows Firewall to modify incoming connections.
   </Example>
   <Example id="S0376" name="HOPLIGHT">
    HOPLIGHT has modified the firewall using netsh.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole has a command to disable routing and the Firewall on the victim’s machine.
   </Example>
   <Example id="S0088" name="Kasidet">
    Kasidet has the ability to change firewall settings to allow a plug-in to be downloaded.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has been observed disabling the system firewall.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Various Lazarus Group malware modifies the Windows firewall to allow incoming connections or disable it entirely using netsh.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has added the following rule to a victim's Windows firewall to allow RDP traffic - "netsh" advfirewall firewall add rule name="Terminal Server" dir=in action=allow protocol=TCP localport=3389.
   </Example>
   <Example id="G1009" name="Moses Staff">
    Moses Staff has used batch scripts that can disable the Windows firewall on specific remote machines.
   </Example>
   <Example id="S0336" name="NanoCore">
    NanoCore can modify the victim's firewall.
   </Example>
   <Example id="S0108" name="netsh">
    netsh can be used to disable local firewall settings.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT has modified the Windows firewall to allow itself to communicate through the firewall.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used PowerShell to add and delete rules in the Windows firewall.
   </Example>
   <Example id="S1032" name="PyDCrypt">
    PyDCrypt has modified firewall rules to allow incoming SMB, NetBIOS, and RPC connections using netsh.exe on remote machines.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec can add or remove applications or ports on the Windows firewall or disable it entirely.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke used scripts which killed processes and added firewall rules to block traffic related to other cryptominers.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has disabled iptables.
   </Example>
   <Example id="S0263" name="TYPEFRAME">
    TYPEFRAME can open the Windows Firewall on the victim’s machine to allow incoming connections.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell can disable the firewall by modifying the registry key HKLM\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\StandardProfile.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Ensure proper process and file permissions are in place to prevent adversaries from disabling or modifying firewall settings.
   </Mitigation>
   <Mitigation id="M1024" name="Restrict Registry Permissions">
    Ensure proper Registry permissions are in place to prevent adversaries from disabling or modifying firewall settings.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Ensure proper user permissions are in place to prevent adversaries from disabling or modifying firewall settings.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0018" name="Firewall">
    Firewall Disable | Firewall Rule Modification
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1562.006" name="Impair Defenses: Indicator Blocking">
  An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting  These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as PowerShell or Windows Management Instrumentation.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Host intrusion prevention systems
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-571
  </CAPEC_ID>
  <Examples>
   <Example id="S0377" name="Ebury">
    Ebury can hook logging functions so that nothing from the backdoor gets sent to the logging facility.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper has the ability to set the HKLM:\SYSTEM\\CurrentControlSet\\Control\\CrashControl\CrashDumpEnabled Registry key to 0 in order to disable crash dumps.
   </Example>
   <Example id="S0579" name="Waterbear">
    Waterbear can hook the ZwOpenProcess and GetExtendedTcpTable APIs called by the process of a security product to hide PIDs and TCP records from detection.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Ensure event tracers/forwarders , firewall policies, and other associated mechanisms are secured with appropriate permissions and access controls.
   </Mitigation>
   <Mitigation id="M1054" name="Software Configuration">
    Consider automatically relaunching forwarding mechanisms at recurring intervals (ex: temporal, on-logon, etc.) as well as applying appropriate change management to firewall rules and other related system configurations.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Ensure event tracers/forwarders , firewall policies, and other associated mechanisms are secured with appropriate permissions and access controls and cannot be manipulated by user accounts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0013" name="Sensor Health">
    Host Status
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1562.007" name="Impair Defenses: Disable or Modify Cloud Firewall">
  Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in Disable or Modify System Firewall.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   IaaS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Routinely check account role permissions to ensure only expected users and roles have permission to modify cloud firewalls.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Ensure least privilege principles are applied to Identity and Access Management (IAM) security policies.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0018" name="Firewall">
    Firewall Disable | Firewall Rule Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1562.008" name="Impair Defenses: Disable Cloud Logs">
  An adversary may disable cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   IaaS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1018" name="User Account Management">
    Configure default account policy to enable logging. Manage policies to ensure only necessary users have permissions to make changes to logging policies.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0025" name="Cloud Service">
    Cloud Service Disable | Cloud Service Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1562.009" name="Impair Defenses: Safe Mode Boot">
  Adversaries may abuse Windows safe mode to disable endpoint defenses. Safe mode starts up the Windows operating system with a limited set of drivers and services. Third-party security software such as endpoint detection and response (EDR) tools may not start after booting Windows in safe mode. There are two versions of safe mode: Safe Mode and Safe Mode with Networking. It is possible to start additional services after a safe mode boot.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Defense_Bypassed>
   Anti-virus, Host Intrusion Prevention Systems
  </Defense_Bypassed>
  <Examples>
   <Example id="S0496" name="REvil">
    REvil can force a reboot in safe mode with networking.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1026" name="Privileged Account Management">
    Restrict administrator accounts to as few individuals as possible, following least privilege principles, that may be abused to remotely boot a machine in safe mode.
   </Mitigation>
   <Mitigation id="M1054" name="Software Configuration">
    Ensure that endpoint defenses run in safe mode.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Creation | Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1562.010" name="Impair Defenses: Downgrade Attack">
  Adversaries may downgrade or use a version of system features that may be outdated, vulnerable, and/or does not support updated security controls such as logging. For example, PowerShell versions 5+ includes Script Block Logging (SBL) which can record executed script content. However, adversaries may attempt to execute a previous version of PowerShell that does not support SBL with the intent to Impair Defenses while running malicious scripts that may have otherwise been detected.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Consider removing previous versions of tools that are unnecessary to the environment when possible.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation | Process Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1525" name="Implant Internal Image">
  Adversaries may implant cloud or container images with malicious code to establish persistence after gaining access to an environment. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Unlike Upload Malware, this technique focuses on adversaries implanting an image in a registry within a victim’s environment. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Containers, IaaS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Periodically check the integrity of images and containers used in cloud deployments to ensure they have not been modified to include malicious software.
   </Mitigation>
   <Mitigation id="M1045" name="Code Signing">
    Several cloud service providers support content trust models that require container images be signed by trusted sources.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Limit permissions associated with creating and modifying platform images or containers based on the principle of least privilege.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0007" name="Image">
    Image Creation | Image Metadata | Image Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1070" name="Indicator Removal">
  Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Containers, Google Workspace, Linux, Network, Office 365, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Host intrusion prevention systems, Log analysis
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-93
  </CAPEC_ID>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 temporarily replaced legitimate utilities with their own, executed their payload, and then restored the original file.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot deletes all artifacts associated with the malware from the infected machine.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    BlackEnergy has removed the watermark associated with enabling the TESTSIGNING boot configuration option by removing the relevant strings in the user32.dll.mui of the system.
   </Example>
   <Example id="S0527" name="CSPY Downloader">
    CSPY Downloader has the ability to remove values it writes to the Registry.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman can uninstall malicious components from the Registry, stop processes, and clear the browser history.
   </Example>
   <Example id="S0695" name="Donut">
    Donut can erase file references to payloads in-memory after being reflectively loaded and executed.
   </Example>
   <Example id="S0568" name="EVILNUM">
    EVILNUM has a function called "DeleteLeftovers" to remove certain artifacts of the attack.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro can close specific Windows Security and Internet Explorer dialog boxes to mask external connections.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream has the ability to clean traces of malware deployment.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper can disable pop-up information about folders and desktop items and delete Registry keys to hide malicious services.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has restored malicious KernelCallbackTable code to its original state after the process execution flow has been hijacked.
   </Example>
   <Example id="S0449" name="Maze">
    Maze has used the "Wow64RevertWow64FsRedirection" function following attempts to delete the shadow volumes, in order to leave the system in the same state as it was prior to redirection.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has a command to delete a Registry key it uses, \Software\Microsoft\Internet Explorer\notes.
   </Example>
   <Example id="S0691" name="Neoichor">
    Neoichor can clear the browser history on a compromised host by changing the ClearBrowsingHistoryOnExit value to 1 in the HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\Privacy Registry key.
   </Example>
   <Example id="S0229" name="Orz">
    Orz can overwrite Registry settings to reduce its visibility on the victim.
   </Example>
   <Example id="S0448" name="Rising Sun">
    Rising Sun can clear a memory blog in the process by overwriting it with junk bytes.
   </Example>
   <Example id="S0085" name="S-Type">
    S-Type has deleted accounts it has created.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has the ability to clean up and remove data structures from a compromised host.
   </Example>
   <Example id="S0596" name="ShadowPad">
    ShadowPad has deleted arbitrary Registry values.
   </Example>
   <Example id="S0589" name="Sibot">
    Sibot will delete an associated registry key if a certain server response is received.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can remove artifacts from the compromised host, including created Registry keys.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet can delete OLE Automation and SQL stored procedures used to store malicious payloads.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST removed HTTP proxy registry values to clean up traces of execution.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Obfuscate/encrypt event files locally and in transit to avoid giving feedback to an adversary.
   </Mitigation>
   <Mitigation id="M1029" name="Remote Data Storage">
    Automatically forward events to a log server or data repository to prevent conditions in which the adversary can locate and manipulate data on the local system. When possible, minimize time delay on event reporting to avoid prolonged storage on the local system.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Protect generated event files that are stored locally with proper permissions and authentication and limit opportunities for adversaries to increase privileges by preventing Privilege Escalation opportunities.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Deletion | File Metadata | File Modification
   </Detection>
   <Detection id="DS0018" name="Firewall">
    Firewall Rule Modification
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
   <Detection id="DS0003" name="Scheduled Job">
    Scheduled Job Modification
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Deletion | Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1070.001" name="Indicator Removal: Clear Windows Event Logs">
  Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <System_Requirements>
   Clearing the Windows event logs requires Administrator permissions
  </System_Requirements>
  <Defense_Bypassed>
   Anti Virus, Host Intrusion Prevention Systems, Log Analysis
  </Defense_Bypassed>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has cleared event logs, including by using the commands wevtutil cl System and wevtutil cl Security.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has cleared select event log entries.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 clears Window Event logs and Sysmon logs from the system.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 attempted to remove evidence of some of its activity by clearing Windows security and system events.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    The BlackEnergy component KillDisk is capable of deleting Windows Event Logs.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has cleared event logs on compromised hosts.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has cleared Windows event logs and other logs produced by tools they used, including system, security, terminal services, remote services, and audit logs. The actors also deleted specific Registry keys.
   </Example>
   <Example id="G0053" name="FIN5">
    FIN5 has cleared event logs from victims.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has cleared logs during post compromise cleanup activities.
   </Example>
   <Example id="S0182" name="FinFisher">
    FinFisher clears the system event logs using  OpenEventLog/ClearEventLog APIs .
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT is able to wipe event logs.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper can overwrite the C:\Windows\System32\winevt\Logs file on a targeted system.
   </Example>
   <Example id="S0698" name="HermeticWizard">
    HermeticWizard has the ability to use wevtutil cl system to clear event logs.
   </Example>
   <Example id="S0203" name="Hydraq">
    Hydraq creates a backdoor through which remote attackers can clear all system event logs.
   </Example>
   <Example id="G0119" name="Indrik Spider">
    Indrik Spider has used Cobalt Strike to empty log files.
   </Example>
   <Example id="S0607" name="KillDisk">
    KillDisk deletes Application, Security, Setup, and System Windows Event Logs.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can clear and remove event logs.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor can use Wevtutil to remove Security, System and Application Event Viewer logs.
   </Example>
   <Example id="S0368" name="NotPetya">
    NotPetya uses wevtutil to clear the Windows event logs.
   </Example>
   <Example id="S0365" name="Olympic Destroyer">
    Olympic Destroyer will attempt to clear the System and Security event logs using wevtutil.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, the threat actors deleted all Windows system and security event logs using /Q /c wevtutil cl system and /Q /c wevtutil cl security.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy has a module to clear event logs with PowerShell.
   </Example>
   <Example id="S0253" name="RunningRAT">
    RunningRAT contains code to clear event logs.
   </Example>
   <Example id="S0242" name="SynAck">
    SynAck clears event logs.
   </Example>
   <Example id="S0645" name="Wevtutil">
    Wevtutil can be used to clear system and security event logs from the system.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell has a command to clear system event logs.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Obfuscate/encrypt event files locally and in transit to avoid giving feedback to an adversary.
   </Mitigation>
   <Mitigation id="M1029" name="Remote Data Storage">
    Automatically forward events to a log server or data repository to prevent conditions in which the adversary can locate and manipulate data on the local system. When possible, minimize time delay on event reporting to avoid prolonged storage on the local system.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Protect generated event files that are stored locally with proper permissions and authentication and limit opportunities for adversaries to increase privileges by preventing Privilege Escalation opportunities.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Deletion
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1070.002" name="Indicator Removal: Clear Linux or Mac System Logs">
  Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the /var/log/ directory. Subfolders in this directory categorize logs by their related functions, such as:
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, macOS
  </Platforms>
  <Examples>
   <Example id="S1016" name="MacMa">
    MacMa can clear possible malware traces such as application logs.
   </Example>
   <Example id="S0279" name="Proton">
    Proton removes logs from /var/logs and /Library/logs.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has cleared log files within the /var/log/ folder.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has removed system logs from /var/log/syslog.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Obfuscate/encrypt event files locally and in transit to avoid giving feedback to an adversary.
   </Mitigation>
   <Mitigation id="M1029" name="Remote Data Storage">
    Automatically forward events to a log server or data repository to prevent conditions in which the adversary can locate and manipulate data on the local system. When possible, minimize time delay on event reporting to avoid prolonged storage on the local system.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Protect generated event files that are stored locally with proper permissions and authentication and limit opportunities for adversaries to increase privileges by preventing Privilege Escalation opportunities.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Deletion | File Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1070.003" name="Indicator Removal: Clear Command History">
  In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Host forensic analysis, Log analysis
  </Defense_Bypassed>
  <Examples>
   <Example id="G0096" name="APT41">
    APT41 attempted to remove evidence of some of its activity by deleting Bash histories.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has used history -c to clear script shell logs.
   </Example>
   <Example id="S0641" name="Kobalos">
    Kobalos can remove all command history on compromised hosts.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has routinely deleted log files on a compromised router, including automatic log deletion through the use of the logrotate utility.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has removed mailbox export requests from compromised Exchange servers.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used Wevtutil to remove PowerShell execution logs.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has cleared command history with history -c.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1039" name="Environment Variable Permissions">
    Making the environment variables associated with command history read only may ensure that the history is preserved.
   </Mitigation>
   <Mitigation id="M1029" name="Remote Data Storage">
    Forward logging of historical data to remote data store and centralized logging solution to preserve historical command line log data.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Preventing users from deleting or writing to certain files can stop adversaries from maliciously altering their ~/.bash_history or ConsoleHost_history.txt files.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Deletion | File Modification
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1070.004" name="Indicator Removal: File Deletion">
  Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Host forensic analysis
  </Defense_Bypassed>
  <Examples>
   <Example id="S0045" name="ADVSTORESHELL">
    ADVSTORESHELL can delete files and directories.
   </Example>
   <Example id="S0504" name="Anchor">
    Anchor can self delete its dropper after the malware is successfully deployed.
   </Example>
   <Example id="S0584" name="AppleJeus">
    AppleJeus has deleted the MSI file after installation.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed can delete files from a compromised host after they are exfiltrated.
   </Example>
   <Example id="G0026" name="APT18">
    APT18 actors deleted tools and batch files from victim systems.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has intentionally deleted computer files to cover their tracks, including with use of the program CCleaner.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 routinely removed their tools, including custom backdoors, once remote access was achieved. APT29 has also used SDelete to remove artifacts from victims.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has a tool that can delete files.
   </Example>
   <Example id="G0050" name="APT32">
    APT32's macOS backdoor can receive a "delete" command.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has used a utility called CLOSESHAVE that can securely delete a file from the system. They have also removed malware, tools, or other non-native files used during the intrusion to reduce their footprint or as part of the post-intrusion cleanup process.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used malware to delete files after they are deployed on a compromised host.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 deleted files from the system.
   </Example>
   <Example id="G0143" name="Aquatic Panda">
    Aquatic Panda has deleted malicious executables from compromised machines.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has the ability to delete files and directories on compromised hosts.
   </Example>
   <Example id="S0438" name="Attor">
    Attor’s plugin deletes the collected files and log files after exfiltration.
   </Example>
   <Example id="S0347" name="AuditCred">
    AuditCred can delete files from the system.
   </Example>
   <Example id="S0344" name="Azorult">
    Azorult can delete files from victim machines.
   </Example>
   <Example id="S0414" name="BabyShark">
    BabyShark has cleaned up all files associated with the secondary payload execution.
   </Example>
   <Example id="S0475" name="BackConfig">
    BackConfig has the ability to remove files and folders related to previous infections.
   </Example>
   <Example id="S0093" name="Backdoor.Oldrea">
    Backdoor.Oldrea contains a cleanup module that removes traces of itself from the victim.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook has a command to delete a file.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot marks files to be deleted upon the next system reboot and uninstalls and removes itself from the system.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can delete its loader using a batch file in the Windows temporary folder.
   </Example>
   <Example id="S0127" name="BBSRAT">
    BBSRAT can delete files and directories.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal will delete its dropper and VBS scripts from the victim’s machine.
   </Example>
   <Example id="S0069" name="BLACKCOFFEE">
    BLACKCOFFEE has the capability to delete files.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has deleted itself and associated artifacts from victim machines.
   </Example>
   <Example id="S0657" name="BLUELIGHT">
    BLUELIGHT can uninstall itself.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    The BRONZE BUTLER uploader or malware the uploader uses command to delete the RAR archives after they have been exfiltrated.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can uninstall its loader through the use of a Sdl command.
   </Example>
   <Example id="S0274" name="Calisto">
    Calisto has the capability to use rm -rf to remove folders and files from the victim's machine.
   </Example>
   <Example id="S0030" name="Carbanak">
    Carbanak has a command to delete files.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT can uninstall itself, including deleting its executable.
   </Example>
   <Example id="S0462" name="CARROTBAT">
    CARROTBAT has the ability to delete downloaded files from a compromised host.
   </Example>
   <Example id="S1043" name="ccf32">
    ccf32 can delete files and folders from compromised machines.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower can delete created files from a compromised system.
   </Example>
   <Example id="S0107" name="Cherry Picker">
    Recent versions of Cherry Picker delete files and registry keys created by the malware.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has performed file deletion to evade detection.
   </Example>
   <Example id="S0106" name="cmd">
    cmd can be used to delete files from the file system.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group deleted the DLL dropper from the victim’s machine to cover their tracks.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson has the ability to delete files from a compromised host.
   </Example>
   <Example id="S0498" name="Cryptoistic">
    Cryptoistic has the ability delete files from a compromised host.
   </Example>
   <Example id="S0527" name="CSPY Downloader">
    CSPY Downloader has the ability to self delete.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba can use the command cmd.exe /c del to delete its artifacts from the system.
   </Example>
   <Example id="S1014" name="DanBot">
    DanBot can delete its configuration file after installation.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman has been observed deleting its original launcher after installation.
   </Example>
   <Example id="S0354" name="Denis">
    Denis has a command to delete files from the victim’s machine.
   </Example>
   <Example id="S0021" name="Derusbi">
    Derusbi is capable of deleting files. It has been observed loading a Linux Kernel Module (LKM) and then deleting it from the hard disk as well as overwriting the data with null bytes.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has deleted many of its files used during operations as part of cleanup, including removing applications and deleting screenshots.
   </Example>
   <Example id="S0502" name="Drovorub">
    Drovorub can delete specific files from a compromised host.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack can remove its persistence and delete itself.
   </Example>
   <Example id="S0062" name="DustySky">
    DustySky can delete files it creates from the infected system.
   </Example>
   <Example id="S0593" name="ECCENTRICBANDWAGON">
    ECCENTRICBANDWAGON can delete log files generated from the malware stored at C:\windows\temp\tmp0207.
   </Example>
   <Example id="S0081" name="Elise">
    Elise is capable of launching a remote shell on the host to delete itself.
   </Example>
   <Example id="S0091" name="Epic">
    Epic has a command to delete a file from the machine.
   </Example>
   <Example id="S0396" name="EvilBunny">
    EvilBunny has deleted the initial dropper after running through the environment checks.
   </Example>
   <Example id="G0120" name="Evilnum">
    Evilnum has deleted files used during infection.
   </Example>
   <Example id="S0401" name="Exaramel for Linux">
    Exaramel for Linux can uninstall its persistence mechanism and delete its configuration file.
   </Example>
   <Example id="S0181" name="FALLCHILL">
    FALLCHILL can delete malware and associated artifacts from the victim.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke can secure delete its DLL.
   </Example>
   <Example id="S0267" name="FELIXROOT">
    FELIXROOT deletes the .LNK file from the startup directory as well as the dropper components.
   </Example>
   <Example id="S0679" name="Ferocious">
    Ferocious can delete files from a compromised host.
   </Example>
   <Example id="G0051" name="FIN10">
    FIN10 has used batch scripts and scheduled tasks to delete critical system files.
   </Example>
   <Example id="G0053" name="FIN5">
    FIN5 uses SDelete to clean up the environment and attempt to prevent detection.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has removed files from victim machines.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has deleted tmp and prefetch files during post compromise cleanup activities.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy can execute batch scripts to delete files.
   </Example>
   <Example id="S0277" name="FruitFly">
    FruitFly will delete files on the system.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can delete files including its dropper component.
   </Example>
   <Example id="S0410" name="Fysbis">
    Fysbis has the ability to delete files.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group tools can delete files used during an operation.
   </Example>
   <Example id="S0168" name="Gazer">
    Gazer has commands to delete files and persistence mechanisms from the victim.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can delete its dropper component from the targeted system.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT has the capability to to delete files.
   </Example>
   <Example id="S0249" name="Gold Dragon">
    Gold Dragon deletes one of its files, 2.hwp, from the endpoint after establishing persistence.
   </Example>
   <Example id="S0493" name="GoldenSpy">
    GoldenSpy's uninstaller can delete registry entries, files and folders, and finally itself once these tasks have been completed.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can delete .LNK files created in the Startup folder.
   </Example>
   <Example id="S0690" name="Green Lambert">
    Green Lambert can delete the original executable after initial installation in addition to unused functions.
   </Example>
   <Example id="S0342" name="GreyEnergy">
    GreyEnergy can securely delete a file by hooking into the DeleteFileA and DeleteFileW functions in the Windows API.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent can delete old binaries on a compromised host.
   </Example>
   <Example id="G0043" name="Group5">
    Malware used by Group5 is capable of remotely deleting files from victims.
   </Example>
   <Example id="S0561" name="GuLoader">
    GuLoader can delete its executable from the AppData\Local\Temp directory on the compromised host.
   </Example>
   <Example id="S0151" name="HALFBAKED">
    HALFBAKED can delete a specified file.
   </Example>
   <Example id="S0499" name="Hancitor">
    Hancitor has deleted files using the VBA kill function.
   </Example>
   <Example id="S0391" name="HAWKBALL">
    HAWKBALL has the ability to delete files.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper has the ability to overwrite its own file with random bites.
   </Example>
   <Example id="S1027" name="Heyoka Backdoor">
    Heyoka Backdoor has the ability to delete folders and files from a targeted system.
   </Example>
   <Example id="S0087" name="Hi-Zor">
    Hi-Zor deletes its RAT installer file as it executes its DLL payload file.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has deleted scripts after execution.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant has the ability to clean up installed files, delete files, and delete itself from the victim’s machine.
   </Example>
   <Example id="S0070" name="HTTPBrowser">
    HTTPBrowser deletes its original installer file once installation is complete.
   </Example>
   <Example id="S0203" name="Hydraq">
    Hydraq creates a backdoor through which remote attackers can delete files.
   </Example>
   <Example id="S0398" name="HyperBro">
    HyperBro has the ability to delete a specified file.
   </Example>
   <Example id="S1022" name="IceApple">
    IceApple can delete files and directories from targeted systems.
   </Example>
   <Example id="S0434" name="Imminent Monitor">
    Imminent Monitor has deleted files related to its dynamic debugger feature.
   </Example>
   <Example id="S0259" name="InnaputRAT">
    InnaputRAT has a command to delete files.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole has deleted files and directories including XML and files successfully uploaded to C2 servers.
   </Example>
   <Example id="S0015" name="Ixeshe">
    Ixeshe has a command to delete a file from the machine.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    The JHUHUGIT dropper can delete itself from the victim. Another JHUHUGIT variant has the capability to delete specified files.
   </Example>
   <Example id="S0201" name="JPIN">
    JPIN's installer/uninstaller component deletes itself if it encounters a version of Windows earlier than Windows XP or identifies security-related processes running.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT has a function to delete files from the victim’s machine.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar can delete files.
   </Example>
   <Example id="S1020" name="Kevin">
    Kevin can delete files created on the victim's machine.
   </Example>
   <Example id="S0271" name="KEYMARBLE">
    KEYMARBLE has the capability to delete files off the victim’s machine.
   </Example>
   <Example id="S0607" name="KillDisk">
    KillDisk has the ability to quit and delete itself.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has deleted the exfiltrated data on disk after transmission. Kimsuky has also used an instrumentor script to terminate browser processes running on an infected system and then delete the cookie files on disk.
   </Example>
   <Example id="S0437" name="Kivars">
    Kivars has the ability to uninstall malware from the infected host.
   </Example>
   <Example id="S0162" name="Komplex">
    The Komplex trojan supports file deletion.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI can delete files.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group malware has deleted files in various ways, including "suicide scripts" to delete malware binaries from the victim. Lazarus Group also uses secure file deletion to delete files from the victim.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron has a function to delete files.
   </Example>
   <Example id="S0211" name="Linfo">
    Linfo creates a backdoor through which remote attackers can delete files.
   </Example>
   <Example id="S0513" name="LiteDuke">
    LiteDuke can securely delete files by first writing random data to the file.
   </Example>
   <Example id="S0372" name="LockerGoga">
    LockerGoga has been observed deleting its original launcher after execution.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot will delete its dropped files after bypassing UAC.
   </Example>
   <Example id="S0582" name="LookBack">
    LookBack removes itself after execution and can delete files on the system.
   </Example>
   <Example id="S0451" name="LoudMiner">
    LoudMiner deleted installation files after completion.
   </Example>
   <Example id="S0409" name="Machete">
    Once a file is uploaded, Machete will delete it from the machine.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa can delete itself from the compromised computer.
   </Example>
   <Example id="S0282" name="MacSpy">
    MacSpy deletes any temporary files it creates
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has deleted and overwrote files to cover tracks.
   </Example>
   <Example id="G0045" name="menuPass">
    A menuPass macro deletes files after it has decoded and decompressed them.
   </Example>
   <Example id="S0443" name="MESSAGETAP">
    Once loaded into memory, MESSAGETAP deletes the keyword_parm.txt and parm.txt configuration files from disk.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has deleted itself from the system after execution.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor will delete the folder containing malicious scripts if it detects the hostname as PIS-APP, PIS-MOB, WSUSPROXY, or PIS-DB.
   </Example>
   <Example id="S1015" name="Milan">
    Milan can delete files via C:\Windows\system32\cmd.exe /c ping 1.1.1.1 -n 1 -w 3000 &gt; Nul &amp; rmdir /s /q.
   </Example>
   <Example id="S0083" name="Misdat">
    Misdat is capable of deleting the backdoor file.
   </Example>
   <Example id="S0149" name="MoonWind">
    MoonWind can delete itself or specified files.
   </Example>
   <Example id="S0284" name="More_eggs">
    More_eggs can remove itself from a system.
   </Example>
   <Example id="S1047" name="Mori">
    Mori can delete its DLL file and related files by Registry value.
   </Example>
   <Example id="S0256" name="Mosquito">
    Mosquito deletes files using DeleteFileW API call.
   </Example>
   <Example id="S0233" name="MURKYTOP">
    MURKYTOP has the capability to delete local files.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda will delete their tools and files, and kill processes after their objectives are reached.
   </Example>
   <Example id="S0228" name="NanHaiShu">
    NanHaiShu launches a script to delete their original decoy file to cover tracks.
   </Example>
   <Example id="S0630" name="Nebulae">
    Nebulae has the ability to delete files and directories.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT is capable of deleting files.
   </Example>
   <Example id="S0353" name="NOKKI">
    NOKKI can delete files to cover tracks.
   </Example>
   <Example id="S0346" name="OceanSalt">
    OceanSalt can delete files from the system.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has deleted files associated with their payload after execution.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum's backdoor deletes files after they have been successfully uploaded to C2 servers.
   </Example>
   <Example id="S0264" name="OopsIE">
    OopsIE has the capability to delete files and scripts from the victim's machine.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, the threat actors used batch files that reduced their fingerprint on a compromised system by deleting malware-related files.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, the threat actors consistently removed traces of their activity by first overwriting a file using /c cd /d c:\windows\temp\ &amp; copy \\&lt;IP ADDRESS&gt;\c$\windows\system32\devmgr.dll \\&lt;IP ADDRESS&gt;\c$\windows\temp\LMAKSW.ps1 /y and then deleting the overwritten file using /c cd /d c:\windows\temp\ &amp; del \\&lt;IP ADDRESS&gt;\c$\windows\temp\LMAKSW.ps1.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    OSX_OCEANLOTUS.D has a command to delete a file from the system. OSX_OCEANLOTUS.D deletes the app bundle and dropper after execution.
   </Example>
   <Example id="S1017" name="OutSteel">
    OutSteel can delete itself following the successful execution of a follow-on payload.
   </Example>
   <Example id="S0598" name="P.A.S. Webshell">
    P.A.S. Webshell can delete scripts from a subdirectory of /tmp after they are run.
   </Example>
   <Example id="S0208" name="Pasam">
    Pasam creates a backdoor through which remote attackers can delete files.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork removed certain files and replaced them so they could not be retrieved.
   </Example>
   <Example id="S0556" name="Pay2Key">
    Pay2Key can remove its log file from disk.
   </Example>
   <Example id="S1050" name="PcShare">
    PcShare has deleted its files and components from a compromised host.
   </Example>
   <Example id="S0587" name="Penquin">
    Penquin can delete downloaded executables after running them.
   </Example>
   <Example id="S0517" name="Pillowmint">
    Pillowmint has deleted the filepath %APPDATA%\Intel\devmonsrv.exe.
   </Example>
   <Example id="S0435" name="PLEAD">
    PLEAD has the ability to delete files on the compromised host.
   </Example>
   <Example id="S0067" name="pngdowner">
    pngdowner deletes content from C2 communications that was saved to the user's temporary directory.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has the ability to overwrite scripts and delete itself if a sandbox environment is detected.
   </Example>
   <Example id="S0453" name="Pony">
    Pony has used scripts to delete itself after execution.
   </Example>
   <Example id="S0139" name="PowerDuke">
    PowerDuke has a command to write random data across a file and delete it.
   </Example>
   <Example id="S0441" name="PowerShower">
    PowerShower has the ability to remove all files created during the dropper process.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS can delete all files on the C:\, D:\, E:\ and, F:\ drives using PowerShell Remove-Item commands.
   </Example>
   <Example id="S0113" name="Prikormka">
    After encrypting its own log files, the log encryption module in Prikormka deletes the original, unencrypted files from the host.
   </Example>
   <Example id="S0654" name="ProLock">
    ProLock can remove files containing its payload after they are executed.
   </Example>
   <Example id="S0279" name="Proton">
    Proton removes all files in the /tmp directory.
   </Example>
   <Example id="S0238" name="Proxysvc">
    Proxysvc can delete files indicated by the attacker and remove itself from disk using a batch file.
   </Example>
   <Example id="S0147" name="Pteranodon">
    Pteranodon can delete files that may interfere with it executing. It also can delete temporary files and itself after the initial script executes.
   </Example>
   <Example id="S0196" name="PUNCHBUGGY">
    PUNCHBUGGY can delete files written to disk.
   </Example>
   <Example id="S1032" name="PyDCrypt">
    PyDCrypt will remove all created artifacts such as dropped executables.
   </Example>
   <Example id="S0583" name="Pysa">
    Pysa has deleted batch files after execution.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can delete folders and files including overwriting its executable with legitimate programs.
   </Example>
   <Example id="S0269" name="QUADAGENT">
    QUADAGENT has a command to delete its Registry key and scheduled task.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay has the ability to uninstall itself by deleting its service and files.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession can remove files from a targeted system.
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT can issue SOAP requests to delete already processed C2 emails. RDAT can also delete itself from the infected system.
   </Example>
   <Example id="S0416" name="RDFSNIFFER">
    RDFSNIFFER has the capability of deleting local files.
   </Example>
   <Example id="S0172" name="Reaver">
    Reaver deletes the original dropped file from the victim.
   </Example>
   <Example id="S0153" name="RedLeaves">
    RedLeaves can delete specified files.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec is capable of deleting files on the victim. It also securely removes itself after collecting and exfiltrating data.
   </Example>
   <Example id="S0496" name="REvil">
    REvil can mark its binary code for deletion after reboot.
   </Example>
   <Example id="S0448" name="Rising Sun">
    Rising Sun can delete files and artifacts it creates.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has deleted files on infected machines.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can request to delete files.
   </Example>
   <Example id="S0148" name="RTM">
    RTM can delete all files created during its execution.
   </Example>
   <Example id="S0253" name="RunningRAT">
    RunningRAT contains code to delete files from the victim’s machine.
   </Example>
   <Example id="S0085" name="S-Type">
    S-Type has deleted files it has created on a compromised host.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot can run a batch script named del.bat to remove any Saint Bot payload-linked files from a compromise system if anti-analysis or locale checks fail.
   </Example>
   <Example id="S0074" name="Sakula">
    Some Sakula samples use cmd.exe to delete temporary files.
   </Example>
   <Example id="S0370" name="SamSam">
    SamSam has been seen deleting its own files and payloads to make analysis of the attack more difficult.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used backdoors that can delete files used in an attack from an infected system.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has the ability to delete files from a compromised host.
   </Example>
   <Example id="S0195" name="SDelete">
    SDelete deletes data in a way that makes it unrecoverable.
   </Example>
   <Example id="S0053" name="SeaDuke">
    SeaDuke can securely delete files, including deleting itself from the victim.
   </Example>
   <Example id="S0345" name="Seasalt">
    Seasalt has a command to delete a specified file.
   </Example>
   <Example id="S0382" name="ServHelper">
    ServHelper has a module to delete itself from the infected machine.
   </Example>
   <Example id="S1019" name="Shark">
    Shark can delete files downloaded to the compromised host.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat can uninstall itself from compromised hosts, as well create and modify directories, delete, move, copy, and rename files.
   </Example>
   <Example id="S0589" name="Sibot">
    Sibot will delete itself if a certain server response is received.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has deleted artifacts, including scheduled tasks, communicates files from the C2 and other logs.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can remove files from the compromised host.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA has deleted itself and the 'index.dat' file on a compromised machine to remove recent Internet history from the system.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT has the ability to run cancel or closeanddeletestorage to remove all files from storage and delete the storage temp file on a compromised host.
   </Example>
   <Example id="S0374" name="SpeakUp">
    SpeakUp deletes files to remove evidence on the machine.
   </Example>
   <Example id="S0390" name="SQLRat">
    SQLRat has used been observed deleting scripts once used.
   </Example>
   <Example id="S0380" name="StoneDrill">
    StoneDrill has been observed deleting the temporary files once they fulfill their task.
   </Example>
   <Example id="S1034" name="StrifeWater">
    StrifeWater can self delete to cover its tracks.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity can delete previously exfiltrated files from the compromised host.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet uses an RPC server that contains a routine for file deletion and also removes itself from the system through a DLL export by deleting specific files.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST had a command to delete files.
   </Example>
   <Example id="S0562" name="SUNSPOT">
    Following the successful injection of SUNBURST, SUNSPOT deleted a temporary file it created named InventoryManager.bk after restoring the original SolarWinds Orion source code to the software library.
   </Example>
   <Example id="S0663" name="SysUpdate">
    SysUpdate can delete its configuration file from the targeted system.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor can use DeleteFileA to remove files from infected hosts.
   </Example>
   <Example id="S0586" name="TAINTEDSCRIBE">
    TAINTEDSCRIBE can delete files from a compromised host.
   </Example>
   <Example id="S0164" name="TDTESS">
    TDTESS creates then deletes log files during installation of itself as a service.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has used a payload that removes itself after running. TeamTNT also has deleted locally staged files for collecting credentials or scan results for local IP addresses after exfiltrating them.
   </Example>
   <Example id="G0088" name="TEMP.Veles">
    TEMP.Veles routinely deleted tools, logs, and other files after they were finished with them.
   </Example>
   <Example id="G0089" name="The White Company">
    The White Company has the ability to delete its malware entirely from the target system.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has deleted existing logs and exfiltrated file archives from a victim.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany has used plugins with a self-delete capability.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has deleted dropper files on an infected system using command scripts.
   </Example>
   <Example id="S0263" name="TYPEFRAME">
    TYPEFRAME can delete files off the system.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has deleted data staged in tmp files after exfiltration.
   </Example>
   <Example id="S0136" name="USBStealer">
    USBStealer has several commands to delete files associated with the malware from the victim.
   </Example>
   <Example id="S0442" name="VBShower">
    VBShower has attempted to complicate forensic analysis by deleting all the files contained in %APPDATA%..\Local\Temporary Internet Files\Content.Word and %APPDATA%..\Local Settings\Temporary Internet Files\Content.Word\.
   </Example>
   <Example id="S0257" name="VERMIN">
    VERMIN can delete files on the victim’s machine.
   </Example>
   <Example id="S0180" name="Volgmer">
    Volgmer can delete files and itself after infection to avoid analysis.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can delete tools from a compromised host after execution.
   </Example>
   <Example id="S0155" name="WINDSHIELD">
    WINDSHIELD is capable of file deletion along with other file system interaction.
   </Example>
   <Example id="S0466" name="WindTail">
    WindTail has the ability to receive and execute a self-delete command.
   </Example>
   <Example id="S0176" name="Wingbird">
    Wingbird deletes its payload along with the payload's parent process after it finishes copying files.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    Winnti for Windows can delete the DLLs for its various components from a compromised host.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used file deletion to remove some modules and configurations from an infected host after use.
   </Example>
   <Example id="S0161" name="XAgentOSX">
    XAgentOSX contains the deletFileFromPath function to delete a specified file using the NSFileManager:removeFileAtPath method.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy has a command to delete files and directories.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda has a command to delete a file. It also can uninstall scripts and delete files to cover its track.
   </Example>
   <Example id="S0350" name="zwShell">
    zwShell has deleted itself after creating a service as well as deleted a temporary file when the system reboots.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell can delete files from the system.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Deletion
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1070.005" name="Indicator Removal: Network Share Connection Removal">
  Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and SMB/Windows Admin Shares connections can be removed when no longer needed. Net is an example utility that can be used to remove network share connections with the net use \system\share /delete command.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <System_Requirements>
   Established network share connection to a remote system. Level of access depends on permissions of the account used.
  </System_Requirements>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Defense_Bypassed>
   Host forensic analysis
  </Defense_Bypassed>
  <Examples>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can disconnect previously connected remote drives.
   </Example>
   <Example id="S0039" name="Net">
    The net use \system\share /delete command can be used in Net to remove an established connection to a network share.
   </Example>
   <Example id="S0400" name="RobbinHood">
    RobbinHood disconnects all network shares from the computer with the command net use * /DELETE /Y.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has detached network shares after exfiltrating files, likely to evade detection.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1070.006" name="Indicator Removal: Timestomp">
  Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   SYSTEM, User, root
  </Permissions_Required>
  <Defense_Bypassed>
   Host forensic analysis
  </Defense_Bypassed>
  <Examples>
   <Example id="S0066" name="3PARA RAT">
    3PARA RAT has a command to set certain attributes such as creation/modification timestamps on files.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has performed timestomping on victim files.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 modified timestamps of backdoors to match legitimate Windows files.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has used scheduled task raw XML with a backdated timestamp of June 2, 2016. The group has also set the creation time of the files dropped by the second stage of the exploit to match the creation time of kernel32.dll. Additionally, APT32 has used a random value to modify the timestamp of the file storing the clientID.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has modified data timestamps to mimic files that are in the same folder on a compromised host.
   </Example>
   <Example id="S0438" name="Attor">
    Attor has manipulated the time of last access to files and registry keys after they have been created or modified.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot modifies the time of a file as specified by the control server.
   </Example>
   <Example id="S0570" name="BitPaymer">
    BitPaymer can modify the timestamp of an executable so that it can be identified and restored by the decryption tool.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has modified file and directory timestamps.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used a Windows version of the Linux touch command to modify the date and time stamp on DLLs.
   </Example>
   <Example id="S0020" name="China Chopper">
    China Chopper's server component can change the timestamp of files.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can timestomp any files or payloads placed on a target machine to help them blend in.
   </Example>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink has the ability to use the Linux API function utime to change the timestamps of modified firmware update images.
   </Example>
   <Example id="S0021" name="Derusbi">
    The Derusbi malware supports timestomping.
   </Example>
   <Example id="S0081" name="Elise">
    Elise performs timestomping of a CAB file it creates.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can timestomp any files or payloads placed on a target machine to help them blend in.
   </Example>
   <Example id="S0568" name="EVILNUM">
    EVILNUM has changed the creation date of files.
   </Example>
   <Example id="S0181" name="FALLCHILL">
    FALLCHILL can modify file or directory timestamps.
   </Example>
   <Example id="S0168" name="Gazer">
    For early Gazer versions, the compilation timestamp was faked.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium has the ability to perform timestomping of files on targeted systems.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole samples were timestomped by the authors by setting the PE timestamps to all zero values. InvisiMole also has a built-in command to modify file times.
   </Example>
   <Example id="S0387" name="KeyBoy">
    KeyBoy time-stomped its DLL in order to evade detection.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has manipulated timestamps for creation or compilation dates to defeat anti-forensics.
   </Example>
   <Example id="S0641" name="Kobalos">
    Kobalos can modify timestamps of replaced files, such as ssh with the added credential stealer or sshd used to deploy Kobalos.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Several Lazarus Group malware families use timestomping, including modifying the last write timestamp of a specified Registry key to a random date, as well as copying the timestamp for legitimate .exe files (such as calc.exe or mspaint.exe) to its dropped files.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa has the capability to create and modify file timestamps.
   </Example>
   <Example id="S0083" name="Misdat">
    Many Misdat samples were programmed using Borland Delphi, which will mangle the default PE compile timestamp of a file.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    OSX_OCEANLOTUS.D can use the touch -t command to change timestamps.
   </Example>
   <Example id="S0072" name="OwaAuth">
    OwaAuth has a command to timestop a file or directory.
   </Example>
   <Example id="S1031" name="PingPull">
    PingPull has the ability to timestomp a file.
   </Example>
   <Example id="S0150" name="POSHSPY">
    POSHSPY modifies timestamps of all downloaded executables to match a randomly selected file created prior to 2013.
   </Example>
   <Example id="S0393" name="PowerStallion">
    PowerStallion modifies the MAC times of its local log files to match that of the victim's desktop.ini file.
   </Example>
   <Example id="S0078" name="Psylo">
    Psylo has a command to conduct timestomping by setting a specified file’s timestamps to match those of a system file in the System32 directory.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has changed the time stamp of certain files.
   </Example>
   <Example id="S0185" name="SEASHARPEE">
    SEASHARPEE can timestomp files on victims using a Web shell.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon can change the modified time for files to evade forensic detection.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet extracts and writes driver files that match the times of other legitimate files.
   </Example>
   <Example id="S0586" name="TAINTEDSCRIBE">
    TAINTEDSCRIBE can change the timestamp of specified filenames.
   </Example>
   <Example id="S0164" name="TDTESS">
    After creating a new service for persistence, TDTESS sets the file creation time for the service to the creation time of the victim's legitimate svchost.exe file.
   </Example>
   <Example id="G0088" name="TEMP.Veles">
    TEMP.Veles used timestomping to modify the $STANDARD_INFORMATION attribute on tools.
   </Example>
   <Example id="S0136" name="USBStealer">
    USBStealer sets the timestamps of its dropper files to the last-access and last-write timestamps of a standard Windows library chosen on the system.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    Winnti for Windows can set the timestamps for its worker and service components to match that of cmd.exe.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0022" name="File">
    File Metadata | File Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1070.007" name="Indicator Removal: Clear Network Connection History and Configurations">
  Adversaries may clear or remove evidence of malicious network connections in order to clean up traces of their operations. Configuration settings as well as various artifacts that highlight connection history may be created on a system from behaviors that require network connections, such as Remote Services or External Remote Services. Defenders may use these artifacts to monitor or otherwise analyze network connections created by adversaries.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0559" name="SUNBURST">
    SUNBURST also removed the firewall rules it created during execution.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1029" name="Remote Data Storage">
    Automatically forward events to a log server or data repository to prevent conditions in which the adversary can locate and manipulate data on the local system. When possible, minimize time delay on event reporting to avoid prolonged storage on the local system.
   </Mitigation>
   <Mitigation id="M1024" name="Restrict Registry Permissions">
    Protect generated event files and logs that are stored locally with proper permissions and authentication and limit opportunities for adversaries to increase privileges by preventing Privilege Escalation opportunities.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0018" name="Firewall">
    Firewall Rule Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1070.008" name="Indicator Removal: Clear Mailbox Data">
  Adversaries may modify mail application data to remove evidence of their activity. Email applications allow users and other programs to export and delete mailbox data via command line tools or use of APIs. Mail application data can be emails or logs generated by the application or operating system, such as export requests.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Google Workspace, Linux, Office 365, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 removed evidence of email export requests using Remove-MailboxExportRequest.
   </Example>
   <Example id="S0477" name="Goopy">
    Goopy has the ability to delete emails used for C2 once the content has been copied.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1029" name="Remote Data Storage">
    Automatically forward mail data and events to a log server or data repository to prevent conditions in which the adversary can locate and manipulate data on the local system. When possible, minimize time delay on event reporting to avoid prolonged storage on the local system.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Protect generated event files that are stored locally with proper permissions and authentication and limit opportunities for adversaries to increase privileges by preventing Privilege Escalation opportunities.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Deletion | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1070.009" name="Indicator Removal: Clear Persistence">
  Adversaries may clear artifacts associated with previously established persistence on a host system to remove evidence of their activity. This may involve various actions, such as removing services, deleting executables, Modify Registry, Plist File Modification, or other methods of cleanup to prevent defenders from collecting evidence of their persistent presence.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0534" name="Bazar">
    Bazar's loader can delete scheduled tasks created by a previous instance of the malware.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent can delete previously created tasks on a compromised host.
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS can delete created registry keys used for persistence as part of its cleanup procedure.
   </Example>
   <Example id="S0500" name="MCMD">
    MCMD has the ability to remove set Registry Keys, including those used for persistence.
   </Example>
   <Example id="S0083" name="Misdat">
    Misdat is capable of deleting Registry keys used for persistence.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT is capable of manipulating and deleting registry keys, including those used for persistence.
   </Example>
   <Example id="S0517" name="Pillowmint">
    Pillowmint can uninstall the malicious service from an infected machine.
   </Example>
   <Example id="S0148" name="RTM">
    RTM has the ability to remove Registry entries that it created for persistence.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST removed IFEO registry values to clean up traces of persistence.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1029" name="Remote Data Storage">
    Automatically forward events to a log server or data repository to prevent conditions in which the adversary can locate and manipulate data on the local system. When possible, minimize time delay on event reporting to avoid prolonged storage on the local system.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Protect generated event files that are stored locally with proper permissions and authentication and limit opportunities for adversaries to increase privileges by preventing Privilege Escalation opportunities.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Deletion | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0003" name="Scheduled Job">
    Scheduled Job Modification
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Deletion | Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1202" name="Indirect Command Execution">
  Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking cmd. For example, Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a Command and Scripting Interpreter, Run window, or via scripts.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Defense_Bypassed>
   Application Control, Static File Analysis
  </Defense_Bypassed>
  <Examples>
   <Example id="S0193" name="Forfiles">
    Forfiles can be used to subvert controls and possibly conceal command execution by not directly invoking cmd.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group persistence mechanisms have used forfiles.exe to execute .htm files.
   </Example>
   <Example id="S0379" name="Revenge RAT">
    Revenge RAT uses the Forfiles utility to execute commands on the system.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1105" name="Ingress Tool Transfer">
  Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer).
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0469" name="ABK">
    ABK has the ability to download files from C2.
   </Example>
   <Example id="S1028" name="Action RAT">
    Action RAT has the ability to download additional payloads onto an infected machine.
   </Example>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla can download additional files for execution on the victim’s machine.
   </Example>
   <Example id="S0092" name="Agent.btz">
    Agent.btz attempts to download an encrypted binary from a specified domain.
   </Example>
   <Example id="G0130" name="Ajax Security Team">
    Ajax Security Team has used Wrapper/Gholee, custom-developed malware, which downloaded additional malware to the infected system.
   </Example>
   <Example id="S1025" name="Amadey">
    Amadey can download and execute files to further infect a host machine with additional malware.
   </Example>
   <Example id="S0504" name="Anchor">
    Anchor can download additional payloads.
   </Example>
   <Example id="G0138" name="Andariel">
    Andariel has downloaded additional tools and malware onto compromised hosts.
   </Example>
   <Example id="G0099" name="APT-C-36">
    APT-C-36 has downloaded binary data from a specified domain after the malicious document is opened.
   </Example>
   <Example id="G0026" name="APT18">
    APT18 can upload a file to the victim’s machine.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has downloaded additional files, including by using a first-stage downloader to contact the C2 server to obtain the second-stage implant.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has downloaded additional tools, such as TEARDROP malware and Cobalt Strike, to a compromised host following initial access.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has a tool that can copy files to remote machines.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has added JavaScript to victim websites to download additional frameworks that profile and compromise website visitors.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has downloaded additional files and programs from its C2 server.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 has downloaded second stage malware from compromised websites.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 used a backdoor, NESTEGG, that has the capability to download and upload files to and from a victim’s machine.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has downloaded tools to compromised hosts.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used certutil to download additional files.
   </Example>
   <Example id="G0143" name="Aquatic Panda">
    Aquatic Panda has downloaded additional malware onto compromised hosts.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has the ability to download additional payloads from C2.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth uses certutil and BITSAdmin to download additional malware.
   </Example>
   <Example id="S0438" name="Attor">
    Attor can download additional plugins, updates and other files.
   </Example>
   <Example id="S0347" name="AuditCred">
    AuditCred can download files and additional malware.
   </Example>
   <Example id="S0473" name="Avenger">
    Avenger has the ability to download files from C2 to a compromised host.
   </Example>
   <Example id="S0344" name="Azorult">
    Azorult can download and execute additional files. Azorult has also downloaded a ransomware payload called Hermes.
   </Example>
   <Example id="S0414" name="BabyShark">
    BabyShark has downloaded additional files from the C2.
   </Example>
   <Example id="S0475" name="BackConfig">
    BackConfig can download and execute additional payloads on a compromised host.
   </Example>
   <Example id="S0093" name="Backdoor.Oldrea">
    Backdoor.Oldrea can download additional modules from C2.
   </Example>
   <Example id="G0135" name="BackdoorDiplomacy">
    BackdoorDiplomacy has downloaded additional files and tools onto a compromised host.
   </Example>
   <Example id="S0642" name="BADFLICK">
    BADFLICK has download files from its C2 server.
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS is capable of downloading additional files through C2 channels, including a new version of itself.
   </Example>
   <Example id="S0337" name="BadPatch">
    BadPatch can download and execute or update malware.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook can download files to the system.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot uploads files and secondary payloads to the victim's machine.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can download and deploy additional payloads, including ransomware and post-exploitation frameworks such as Cobalt Strike.
   </Example>
   <Example id="S0470" name="BBK">
    BBK has the ability to download files from C2 to the infected host.
   </Example>
   <Example id="S0574" name="BendyBear">
    BendyBear is designed to download an implant from a C2 server.
   </Example>
   <Example id="S0017" name="BISCUIT">
    BISCUIT has a command to download a file from the C2 server.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has the capability to download files to execute on the victim’s machine.
   </Example>
   <Example id="S0190" name="BITSAdmin">
    BITSAdmin can be used to create BITS Jobs to upload and/or download files.
   </Example>
   <Example id="G1002" name="BITTER">
    BITTER has downloaded additional malware and tools onto a compromised host.
   </Example>
   <Example id="S0564" name="BlackMould">
    BlackMould has the ability to download files to the victim's machine.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has downloaded files to a victim machine.
   </Example>
   <Example id="S0657" name="BLUELIGHT">
    BLUELIGHT can download additional files onto the host.
   </Example>
   <Example id="S0486" name="Bonadan">
    Bonadan can download additional modules from the C2 server.
   </Example>
   <Example id="S0360" name="BONDUPDATER">
    BONDUPDATER can download or upload files from its C2 server.
   </Example>
   <Example id="S0635" name="BoomBox">
    BoomBox has the ability to download next stage malware components to a compromised system.
   </Example>
   <Example id="S0651" name="BoxCaon">
    BoxCaon can download files.
   </Example>
   <Example id="S0204" name="Briba">
    Briba downloads files onto infected hosts.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has used various tools to download files, including DGet (a similar tool to wget).
   </Example>
   <Example id="S0471" name="build_downer">
    build_downer has the ability to download files from C2 to the infected host.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can download and execute additional payloads including through the use of a Dex command.
   </Example>
   <Example id="S0482" name="Bundlore">
    Bundlore can download and execute new versions of itself.
   </Example>
   <Example id="C0010" name="C0010">
    During C0010, UNC3890 actors downloaded tools and malware onto a compromised host.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors downloaded additional tools and files onto a compromised network.
   </Example>
   <Example id="S0274" name="Calisto">
    Calisto has the capability to upload and download files to the victim's machine.
   </Example>
   <Example id="S0077" name="CallMe">
    CallMe has the capability to download a file to the victim from the C2 server.
   </Example>
   <Example id="S0351" name="Cannon">
    Cannon can download a payload for execution.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp can download and execute new plugins from the C2 server.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT can download and execute additional payloads.
   </Example>
   <Example id="S0465" name="CARROTBALL">
    CARROTBALL has the ability to download and install a remote payload.
   </Example>
   <Example id="S0462" name="CARROTBAT">
    CARROTBAT has the ability to download and execute a remote file via certutil.
   </Example>
   <Example id="S0572" name="Caterpillar WebShell">
    Caterpillar WebShell has a module to download and upload files to the system.
   </Example>
   <Example id="S0160" name="certutil">
    certutil can be used to download files from a given URL.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes can download additional files onto an infected machine.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower has the ability to download additional modules to a compromised host.
   </Example>
   <Example id="S0144" name="ChChes">
    ChChes is capable of downloading files, including additional modules.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has remotely copied tools and malware onto targeted systems.
   </Example>
   <Example id="S0020" name="China Chopper">
    China Chopper's server component can download remote files.
   </Example>
   <Example id="S0023" name="CHOPSTICK">
    CHOPSTICK is capable of performing remote file transmission.
   </Example>
   <Example id="S0667" name="Chrommme">
    Chrommme can download its code from C2.
   </Example>
   <Example id="S0054" name="CloudDuke">
    CloudDuke downloads and executes additional malware from either a Web address or a Microsoft OneDrive account.
   </Example>
   <Example id="S0106" name="cmd">
    cmd can be used to copy files to/from a remotely connected external system.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has used public sites such as github.com and sendspace.com to upload files and then download them to victim computers.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can deliver additional payloads to victim machines.
   </Example>
   <Example id="S0369" name="CoinTicker">
    CoinTicker executes a Python script to download its second stage.
   </Example>
   <Example id="S0608" name="Conficker">
    Conficker downloads an HTTP server to the infected machine.
   </Example>
   <Example id="G0142" name="Confucius">
    Confucius has downloaded additional files and payloads onto a compromised host following initial access.
   </Example>
   <Example id="S0492" name="CookieMiner">
    CookieMiner can download additional scripts from a web server.
   </Example>
   <Example id="S0137" name="CORESHELL">
    CORESHELL downloads another dropper from its C2 server.
   </Example>
   <Example id="S0614" name="CostaBricks">
    CostaBricks has been used to load SombRAT onto a compromised host.
   </Example>
   <Example id="C0004" name="CostaRicto">
    During CostaRicto, the threat actors downloaded malware and tools onto a compromised host.
   </Example>
   <Example id="S1023" name="CreepyDrive">
    CreepyDrive can download files to the compromised host.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson contains a command to retrieve files from its C2 server.
   </Example>
   <Example id="S0498" name="Cryptoistic">
    Cryptoistic has the ability to send and receive files.
   </Example>
   <Example id="S0527" name="CSPY Downloader">
    CSPY Downloader can download additional tools to a compromised host.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba can download files from its C2 server.
   </Example>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink has the ability to download files to target systems.
   </Example>
   <Example id="S0497" name="Dacls">
    Dacls can download its payload from a C2 server.
   </Example>
   <Example id="S1014" name="DanBot">
    DanBot can download additional files to a targeted system.
   </Example>
   <Example id="S0334" name="DarkComet">
    DarkComet can load any files onto the infected machine to execute.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel has used first-stage payloads that download additional malware from C2 servers.
   </Example>
   <Example id="S0187" name="Daserf">
    Daserf can download remote files.
   </Example>
   <Example id="S0255" name="DDKONG">
    DDKONG downloads and uploads files on the victim’s machine.
   </Example>
   <Example id="S0616" name="DEATHRANSOM">
    DEATHRANSOM can download files to a compromised host.
   </Example>
   <Example id="S0354" name="Denis">
    Denis deploys additional backdoors and hacking tools to the system.
   </Example>
   <Example id="S0659" name="Diavol">
    Diavol can receive configuration updates and additional payloads including wscpy.exe from C2.
   </Example>
   <Example id="S0200" name="Dipsind">
    Dipsind can download remote files.
   </Example>
   <Example id="S1021" name="DnsSystem">
    DnsSystem can download files to compromised systems after receiving a command with the string downloaddd.
   </Example>
   <Example id="S0213" name="DOGCALL">
    DOGCALL can download and execute additional payloads.
   </Example>
   <Example id="S0600" name="Doki">
    Doki has downloaded scripts from C2.
   </Example>
   <Example id="S0695" name="Donut">
    Donut can download and execute previously staged shellcode payloads.
   </Example>
   <Example id="S0472" name="down_new">
    down_new has the ability to download files to the compromised host.
   </Example>
   <Example id="S0134" name="Downdelph">
    After downloading its main config file, Downdelph downloads multiple payloads from C2 servers.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has copied and installed tools for operations once in the victim environment.
   </Example>
   <Example id="S0694" name="DRATzarus">
    DRATzarus can deploy additional tools onto an infected machine.
   </Example>
   <Example id="S0547" name="DropBook">
    DropBook can download and execute additional files.
   </Example>
   <Example id="S0502" name="Drovorub">
    Drovorub can download files to a compromised host.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack’s can download and upload a file to the victim’s computer.
   </Example>
   <Example id="S0024" name="Dyre">
    Dyre has a command to download and executes additional files.
   </Example>
   <Example id="S0624" name="Ecipekac">
    Ecipekac can download additional payloads to a compromised host.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor has the ability to download files from its C2 server.
   </Example>
   <Example id="G0066" name="Elderwood">
    The Ritsol backdoor trojan used by Elderwood can download files onto a compromised host from a remote location.
   </Example>
   <Example id="S0081" name="Elise">
    Elise can download additional files from the C2 server for execution.
   </Example>
   <Example id="G1003" name="Ember Bear">
    Ember Bear has used tools to download malicious code.
   </Example>
   <Example id="S0082" name="Emissary">
    Emissary has the capability to download files from the C2 server.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can upload and download to and from a victim machine.
   </Example>
   <Example id="S0404" name="esentutl">
    esentutl can be used to copy files from a given URL.
   </Example>
   <Example id="S0396" name="EvilBunny">
    EvilBunny has downloaded additional Lua scripts from the C2.
   </Example>
   <Example id="S0568" name="EVILNUM">
    EVILNUM can download and upload files to the victim's computer.
   </Example>
   <Example id="G0120" name="Evilnum">
    Evilnum can deploy additional components or tools as needed.
   </Example>
   <Example id="S0401" name="Exaramel for Linux">
    Exaramel for Linux has a command to download a file from  and to a remote C2 server.
   </Example>
   <Example id="S0569" name="Explosive">
    Explosive has a function to download a file to the infected system.
   </Example>
   <Example id="S0171" name="Felismus">
    Felismus can download files from remote servers.
   </Example>
   <Example id="S0267" name="FELIXROOT">
    FELIXROOT downloads and uploads files to and from the victim’s machine.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has downloaded additional malware to execute on the victim's machine, including by using a PowerShell script to launch shellcode that retrieves an additional payload.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has used remote code execution to download subsequent payloads.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro can download additional malware from the C2 server.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy can transfer files from C2.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb can receive additional malicious components from an actor controlled C2 server and execute them on a compromised AD FS server.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has downloaded additional tools including PsExec directly to endpoints.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors downloaded files and tools onto a victim machine.
   </Example>
   <Example id="S0095" name="ftp">
    ftp may be abused by adversaries to transfer tools or files from an external system into a compromised environment.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can download additional files onto a compromised host.
   </Example>
   <Example id="C0007" name="FunnyDream">
    During FunnyDream, the threat actors downloaded additional droppers and backdoors onto a compromised system.
   </Example>
   <Example id="S0628" name="FYAnti">
    FYAnti can download additional payloads to a compromised host.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM dropped additional tools to victims during their operation, including portqry.exe, a renamed cmd.exe file, winrar, and HTRAN.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has downloaded additional malware and tools onto a compromised host.
   </Example>
   <Example id="S0168" name="Gazer">
    Gazer can execute a task to download a file.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can download additional plug-ins to a compromised host.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT can download files to the victim’s machine.
   </Example>
   <Example id="S0249" name="Gold Dragon">
    Gold Dragon can download additional components from the C2 server.
   </Example>
   <Example id="S0493" name="GoldenSpy">
    GoldenSpy constantly attempts to download and execute files from the remote C2, including GoldenSpy itself if not found on the system.
   </Example>
   <Example id="S0588" name="GoldMax">
    GoldMax can download and execute additional files.
   </Example>
   <Example id="G0078" name="Gorgon Group">
    Gorgon Group malware can download additional files from C2 servers.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can download its second stage from a hardcoded URL within the loader's code.
   </Example>
   <Example id="S0342" name="GreyEnergy">
    GreyEnergy can download additional modules and payloads.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent has the ability to download and execute additional payloads.
   </Example>
   <Example id="S0561" name="GuLoader">
    GuLoader can download further malware for execution on the victim's machine.
   </Example>
   <Example id="S0132" name="H1N1">
    H1N1 contains a command to download and execute a file from a remotely hosted URL using WinINet HTTP requests.
   </Example>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has downloaded malware and tools--including Nishang and PowerCat--onto a compromised host.
   </Example>
   <Example id="S0499" name="Hancitor">
    Hancitor has the ability to download additional files from C2.
   </Example>
   <Example id="S0214" name="HAPPYWORK">
    can download and execute a second-stage payload.
   </Example>
   <Example id="S0170" name="Helminth">
    Helminth can download additional files.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has downloaded additional payloads and malicious scripts onto a compromised host.
   </Example>
   <Example id="S0087" name="Hi-Zor">
    Hi-Zor has the ability to upload and download files from its C2 server.
   </Example>
   <Example id="S0394" name="HiddenWasp">
    HiddenWasp downloads a tar compressed archive from a download server to the system.
   </Example>
   <Example id="S0009" name="Hikit">
    Hikit has the ability to download files to a compromised host.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has downloaded additional scripts that build and run Monero cryptocurrency miners.
   </Example>
   <Example id="S0376" name="HOPLIGHT">
    HOPLIGHT has the ability to connect to a remote host in order to upload and download files.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant has the ability to upload a file from the command and control (C2) server to the victim machine.
   </Example>
   <Example id="S0070" name="HTTPBrowser">
    HTTPBrowser is capable of writing a file to the compromised system from the C2 server.
   </Example>
   <Example id="S0203" name="Hydraq">
    Hydraq creates a backdoor through which remote attackers can download files and additional malware components.
   </Example>
   <Example id="S0398" name="HyperBro">
    HyperBro has the ability to download additional files.
   </Example>
   <Example id="S0483" name="IcedID">
    IcedID has the ability to download additional modules and a configuration file from C2.
   </Example>
   <Example id="G0136" name="IndigoZebra">
    IndigoZebra has downloaded additional files and tools from its C2 server.
   </Example>
   <Example id="G0119" name="Indrik Spider">
    Indrik Spider has downloaded additional scripts, malware, and tools onto a compromised host.
   </Example>
   <Example id="S0604" name="Industroyer">
    Industroyer downloads a shellcode payload from a remote C2 server and loads it into memory.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can upload files to the victim's machine for operations.
   </Example>
   <Example id="S0015" name="Ixeshe">
    Ixeshe can download and execute additional files.
   </Example>
   <Example id="S0528" name="Javali">
    Javali can download payloads from remote C2 servers.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    JHUHUGIT can retrieve an additional payload from its C2 server.
   </Example>
   <Example id="S0201" name="JPIN">
    JPIN can download files and upgrade itself.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT can download and execute files.
   </Example>
   <Example id="S0648" name="JSS Loader">
    JSS Loader has the ability to download malicious executables to a compromised host.
   </Example>
   <Example id="S0215" name="KARAE">
    KARAE can upload and download files, including second-stage malware.
   </Example>
   <Example id="S0088" name="Kasidet">
    Kasidet has the ability to download and execute additional files.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar downloads additional plug-ins to load on the victim’s machine, including the ability to upgrade and replace its own binary.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has used tools to download files to compromised machines.
   </Example>
   <Example id="S0585" name="Kerrdown">
    Kerrdown can download specific payloads to a compromised host based on OS architecture.
   </Example>
   <Example id="S0487" name="Kessel">
    Kessel can download additional modules from the C2 server.
   </Example>
   <Example id="S1020" name="Kevin">
    Kevin can download files to the compromised host.
   </Example>
   <Example id="S0387" name="KeyBoy">
    KeyBoy has a download and upload functionality.
   </Example>
   <Example id="S0271" name="KEYMARBLE">
    KEYMARBLE can upload files to the victim’s machine and can download additional payloads.
   </Example>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY has the ability to download and execute code from remote servers.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has downloaded additional scripts, tools, and malware onto victim systems.
   </Example>
   <Example id="S0599" name="Kinsing">
    Kinsing has downloaded additional lateral movement scripts from C2.
   </Example>
   <Example id="S0437" name="Kivars">
    Kivars has the ability to download and execute files.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can download additional files and tools.
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS has executed a PowerShell command to download a file to the system.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI can download files and execute them on the victim’s machine.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs downloads additional files from C2 servers.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has downloaded files, malware, and tools from its C2 onto a compromised host.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter had downloaded additional tools to a compromised host.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has downloaded additional scripts and files from adversary-controlled servers.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron has the ability to download and execute additional files.
   </Example>
   <Example id="S0211" name="Linfo">
    Linfo creates a backdoor through which remote attackers can download files onto compromised hosts.
   </Example>
   <Example id="S0513" name="LiteDuke">
    LiteDuke has the ability to download files.
   </Example>
   <Example id="S0680" name="LitePower">
    LitePower has the ability to download payloads containing system commands to a compromised host.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar can download additional plugins, files, and tools.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot downloaded several staged items onto the victim's machine.
   </Example>
   <Example id="S0451" name="LoudMiner">
    LoudMiner used SCP to update the miner from the C2.
   </Example>
   <Example id="S0042" name="LOWBALL">
    LOWBALL uses the Dropbox API to request two files, one of which is the same file as the one dropped by the malicious email attachment. This is most likely meant to be a mechanism to update the compromised host with a new version of the LOWBALL malware.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can download and execute a replica of itself using certutil.
   </Example>
   <Example id="S0409" name="Machete">
    Machete can download additional files for execution on the victim’s machine.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa has downloaded additional files, including an exploit for used privilege escalation.
   </Example>
   <Example id="S1048" name="macOS.OSAMiner">
    macOS.OSAMiner has used curl to download a Stripped Payloads from a public facing adversary-controlled webpage.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has downloaded additional code and files from servers onto victims.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can download additional files and tools from its C2 server, including through the use of BITSAdmin.
   </Example>
   <Example id="S0500" name="MCMD">
    MCMD can upload additional files to a compromised host.
   </Example>
   <Example id="S0459" name="MechaFlounder">
    MechaFlounder has the ability to upload and download files to and from a compromised host.
   </Example>
   <Example id="S0530" name="Melcoz">
    Melcoz has the ability to download additional files to a compromised host.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has installed updates and new malware on victims.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has used MSI files to download additional files to execute.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor has the ability to download additional files for execution on the victim's machine.
   </Example>
   <Example id="S0339" name="Micropsia">
    Micropsia can download and execute an executable from the C2 server.
   </Example>
   <Example id="S1015" name="Milan">
    Milan has received files from C2 and stored them in log folders beginning with the character sequence a9850d2f.
   </Example>
   <Example id="S0051" name="MiniDuke">
    MiniDuke can download additional encrypted backdoors onto the victim via GIF files.
   </Example>
   <Example id="S0084" name="Mis-Type">
    Mis-Type has downloaded additional malware and files onto a compromised host.
   </Example>
   <Example id="S0083" name="Misdat">
    Misdat is capable of downloading files from the C2.
   </Example>
   <Example id="S0080" name="Mivast">
    Mivast has the capability to download and execute .exe files.
   </Example>
   <Example id="S0079" name="MobileOrder">
    MobileOrder has a command to download a file from the C2 server to the victim mobile device's SD card.
   </Example>
   <Example id="S0553" name="MoleNet">
    MoleNet can download additional payloads from the C2.
   </Example>
   <Example id="G0021" name="Molerats">
    Molerats used executables to download malicious files from different sources.
   </Example>
   <Example id="S1026" name="Mongall">
    Mongall can download files to targeted systems.
   </Example>
   <Example id="S0284" name="More_eggs">
    More_eggs can download and launch additional payloads.
   </Example>
   <Example id="G1009" name="Moses Staff">
    Moses Staff has downloaded and installed web shells to following path C:\inetpub\wwwroot\aspnet_client\system_web\IISpool.aspx.
   </Example>
   <Example id="S0256" name="Mosquito">
    Mosquito can upload and download files to the victim.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used malware that can upload additional files to the victim’s machine.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has downloaded additional executables following the initial infection stage.
   </Example>
   <Example id="S0228" name="NanHaiShu">
    NanHaiShu can download additional files from URLs.
   </Example>
   <Example id="S0336" name="NanoCore">
    NanoCore has the capability to download and activate additional modules for execution.
   </Example>
   <Example id="S0247" name="NavRAT">
    NavRAT can download files remotely.
   </Example>
   <Example id="S0272" name="NDiskMonitor">
    NDiskMonitor can download and execute a file from given URL.
   </Example>
   <Example id="S0630" name="Nebulae">
    Nebulae can download files from C2.
   </Example>
   <Example id="S0691" name="Neoichor">
    Neoichor can download additional files onto a compromised host.
   </Example>
   <Example id="S0210" name="Nerex">
    Nerex creates a backdoor through which remote attackers can download files onto a compromised host.
   </Example>
   <Example id="S0457" name="Netwalker">
    Operators deploying Netwalker have used psexec and certutil to retrieve the Netwalker payload.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can downloaded payloads from C2 to the compromised host.
   </Example>
   <Example id="S0118" name="Nidiran">
    Nidiran can download and execute files.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors used administrative utilities to deliver Trojan components to remote systems.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT can download files to the victim’s machine.
   </Example>
   <Example id="S0353" name="NOKKI">
    NOKKI has downloaded a remote module for execution.
   </Example>
   <Example id="G0133" name="Nomadic Octopus">
    Nomadic Octopus has used malicious macros to download additional files to the victim's machine.
   </Example>
   <Example id="S0340" name="Octopus">
    Octopus can download additional files and tools onto the victim’s machine.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig can download remote files onto victims.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum has built-in commands for uploading, downloading, and executing files to the system.
   </Example>
   <Example id="S0264" name="OopsIE">
    OopsIE can download files from its C2 server to the victim's machine.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, the threat actors downloaded additional malware and malicious scripts onto a compromised host.
   </Example>
   <Example id="C0013" name="Operation Sharpshooter">
    During Operation Sharpshooter, additional payloads were downloaded after a target was infected with a first-stage downloader.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors downloaded additional files to the infected system.
   </Example>
   <Example id="S0229" name="Orz">
    Orz can download files onto the victim.
   </Example>
   <Example id="S0402" name="OSX/Shlayer">
    OSX/Shlayer can download payloads, and extract bytes from files. OSX/Shlayer uses the curl -fsL "$url" &gt;$tmp_path command to download malicious payloads into a temporary directory.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    OSX_OCEANLOTUS.D has a command to download and execute a file on the victim’s machine.
   </Example>
   <Example id="S1017" name="OutSteel">
    OutSteel can download files from its C2 server.
   </Example>
   <Example id="S0598" name="P.A.S. Webshell">
    P.A.S. Webshell can upload and download files to and from compromised hosts.
   </Example>
   <Example id="S0626" name="P8RAT">
    P8RAT can download additional payloads to a target system.
   </Example>
   <Example id="S0664" name="Pandora">
    Pandora can load additional drivers and files onto a victim machine.
   </Example>
   <Example id="S0208" name="Pasam">
    Pasam creates a backdoor through which remote attackers can upload files.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork payloads download additional files from the C2 server.
   </Example>
   <Example id="S0587" name="Penquin">
    Penquin can execute the command code do_download to retrieve remote files from C2.
   </Example>
   <Example id="S0643" name="Peppy">
    Peppy can download and execute remote files.
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon can install additional modules via C2 commands.
   </Example>
   <Example id="S0124" name="Pisloader">
    Pisloader has a command to upload a file to the victim machine.
   </Example>
   <Example id="S0254" name="PLAINTEE">
    PLAINTEE has downloaded and executed additional plugins.
   </Example>
   <Example id="G0068" name="PLATINUM">
    PLATINUM has transferred files using the Intel® Active Management Technology (AMT) Serial-over-LAN (SOL) channel.
   </Example>
   <Example id="S0435" name="PLEAD">
    PLEAD has the ability to upload and download files to and from an infected host.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX has a module to download and execute files on the compromised machine.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has the ability to copy files and download/upload files into C2 channels using FTP and HTTPS.
   </Example>
   <Example id="S0012" name="PoisonIvy">
    PoisonIvy creates a backdoor through which remote attackers can upload files.
   </Example>
   <Example id="S0518" name="PolyglotDuke">
    PolyglotDuke can retrieve payloads from the C2 server.
   </Example>
   <Example id="S0453" name="Pony">
    Pony can download additional files onto the infected system.
   </Example>
   <Example id="S0150" name="POSHSPY">
    POSHSPY downloads and executes additional PowerShell code and Windows binaries.
   </Example>
   <Example id="S0139" name="PowerDuke">
    PowerDuke has a command to download a file.
   </Example>
   <Example id="S1012" name="PowerLess">
    PowerLess can download additional payloads to a compromised host.
   </Example>
   <Example id="S0685" name="PowerPunch">
    PowerPunch can download payloads from adversary infrastructure.
   </Example>
   <Example id="S0145" name="POWERSOURCE">
    POWERSOURCE has been observed being used to download TEXTMATE and the Cobalt Strike Beacon payload onto victims.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS can retrieve and execute additional PowerShell payloads from the C2 server.
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER can download or upload files from its C2 server.
   </Example>
   <Example id="S0613" name="PS1">
    CostaBricks can download additional payloads onto a compromised host.
   </Example>
   <Example id="S0078" name="Psylo">
    Psylo has a command to download a file to the system from its C2 server.
   </Example>
   <Example id="S0147" name="Pteranodon">
    Pteranodon can download and execute additional files.
   </Example>
   <Example id="S0196" name="PUNCHBUGGY">
    PUNCHBUGGY can download additional files and payloads to compromised hosts.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can upload and download to/from a victim machine.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot has the ability to download additional components and malware.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT can download files to the victim’s machine and execute them.
   </Example>
   <Example id="S0686" name="QuietSieve">
    QuietSieve can download and execute payloads on a target host.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay can download files to a compromised host.
   </Example>
   <Example id="G0075" name="Rancor">
    Rancor has downloaded additional malware, including by using certutil.
   </Example>
   <Example id="S0055" name="RARSTONE">
    RARSTONE downloads its backdoor component from a C2 server and loads it directly into memory.
   </Example>
   <Example id="S0241" name="RATANKBA">
    RATANKBA uploads and downloads information.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession has the ability to drop additional files to an infected machine.
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT can download files via DNS.
   </Example>
   <Example id="S0153" name="RedLeaves">
    RedLeaves is capable of downloading a file from a specified URL.
   </Example>
   <Example id="S0511" name="RegDuke">
    RegDuke can download files from C2.
   </Example>
   <Example id="S0332" name="Remcos">
    Remcos can upload and download files to and from the victim’s machine.
   </Example>
   <Example id="S0166" name="RemoteCMD">
    RemoteCMD copies a file over to the remote system before execution.
   </Example>
   <Example id="S0592" name="RemoteUtilities">
    RemoteUtilities can upload and download files to and from a target machine.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec contains a network loader to receive executable modules from remote attackers and run them on the local victim. It can also upload and download files over HTTP and HTTPS.
   </Example>
   <Example id="S0379" name="Revenge RAT">
    Revenge RAT has the ability to upload and download files.
   </Example>
   <Example id="S0496" name="REvil">
    REvil can download a copy of itself from an attacker controlled IP address to the victim machine.
   </Example>
   <Example id="S0258" name="RGDoor">
    RGDoor uploads and downloads files to and from the victim’s machine.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke used malware to download additional malicious files to the target system.
   </Example>
   <Example id="S0270" name="RogueRobin">
    RogueRobin can save a new file to the system from the C2 server.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can retrieve additional malicious payloads from its C2 server.
   </Example>
   <Example id="S0148" name="RTM">
    RTM can download additional files.
   </Example>
   <Example id="S0085" name="S-Type">
    S-Type can download additional files onto a compromised host.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot can download additional files onto a compromised host.
   </Example>
   <Example id="S0074" name="Sakula">
    Sakula has the capability to download files.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has pushed additional malicious tools onto an infected system to steal user credentials, move laterally, and destroy data.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has the ability to download a DLL from C2 to a compromised host.
   </Example>
   <Example id="S0053" name="SeaDuke">
    SeaDuke is capable of uploading and downloading files.
   </Example>
   <Example id="S0345" name="Seasalt">
    Seasalt has a command to download additional files.
   </Example>
   <Example id="S0185" name="SEASHARPEE">
    SEASHARPEE can download remote files onto victims.
   </Example>
   <Example id="S0382" name="ServHelper">
    ServHelper may download additional files to execute.
   </Example>
   <Example id="S0639" name="Seth-Locker">
    Seth-Locker has the ability to download and execute files on a compromised host.
   </Example>
   <Example id="S0596" name="ShadowPad">
    ShadowPad has downloaded code from a C2 server.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon can download an executable to run on the victim.
   </Example>
   <Example id="S1019" name="Shark">
    Shark  can download additional files from its C2 via HTTP or DNS.
   </Example>
   <Example id="S0546" name="SharpStage">
    SharpStage has the ability to download and execute additional payloads via a DropBox API.
   </Example>
   <Example id="S0450" name="SHARPSTATS">
    SHARPSTATS has the ability to upload and download files.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat can download additional files.
   </Example>
   <Example id="S0445" name="ShimRatReporter">
    ShimRatReporter had the ability to download additional payloads.
   </Example>
   <Example id="S0217" name="SHUTTERSPEED">
    SHUTTERSPEED can download and execute an arbitary executable.
   </Example>
   <Example id="S0589" name="Sibot">
    Sibot can download and execute a payload onto a compromised system.
   </Example>
   <Example id="G1008" name="SideCopy">
    SideCopy has delivered trojanized executables via spearphishing emails that contacts actor-controlled servers to download malicious payloads.
   </Example>
   <Example id="S0610" name="SideTwist">
    SideTwist has the ability to download additional files.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has used LNK files to download remote files to the victim's network.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has downloaded additional modules and malware to victim’s machines.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can load additional files and tools, including Mimikatz.
   </Example>
   <Example id="S0468" name="Skidmap">
    Skidmap has the ability to download files on an infected host.
   </Example>
   <Example id="S0633" name="Sliver">
    Sliver can upload files from the C2 server to the victim machine using the upload command.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA has downloaded files onto a victim machine.
   </Example>
   <Example id="S0218" name="SLOWDRIFT">
    SLOWDRIFT downloads additional payloads.
   </Example>
   <Example id="S1035" name="Small Sieve">
    Small Sieve has the ability to download files.
   </Example>
   <Example id="S0226" name="Smoke Loader">
    Smoke Loader downloads a new version of itself once it has installed. It also downloads additional plugins.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM has used Powershell to download UltraVNC and Ngrok from third-party file sharing sites.
   </Example>
   <Example id="S0627" name="SodaMaster">
    SodaMaster has the ability to download additional payloads from C2 to the targeted system.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT has the ability to download and execute additional payloads.
   </Example>
   <Example id="S0516" name="SoreFang">
    SoreFang can download additional payloads from C2.
   </Example>
   <Example id="S0374" name="SpeakUp">
    SpeakUp downloads and executes additional files from a remote server.
   </Example>
   <Example id="S0646" name="SpicyOmelette">
    SpicyOmelette can download malicious files from threat actor controlled AWS URL's.
   </Example>
   <Example id="S0390" name="SQLRat">
    SQLRat can make a direct SQL connection to a Microsoft database controlled by the attackers, retrieve an item from the bindata table, then write and execute the file on disk.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has downloaded and executed additional encoded payloads.
   </Example>
   <Example id="S0380" name="StoneDrill">
    StoneDrill has downloaded and dropped temporary files containing scripts; it additionally has a function to upload files from the victims machine.
   </Example>
   <Example id="S1034" name="StrifeWater">
    StrifeWater can download updates and auxiliary modules.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity can download files to specified targets.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST delivered different payloads, including TEARDROP in at least one instance.
   </Example>
   <Example id="S0663" name="SysUpdate">
    SysUpdate has the ability to download files to a compromised host.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has downloaded additional malware to execute on victim systems.
   </Example>
   <Example id="G0127" name="TA551">
    TA551 has retrieved DLLs and installer binaries for malware execution from C2.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor has downloaded additional files onto a compromised host.
   </Example>
   <Example id="S0586" name="TAINTEDSCRIBE">
    TAINTEDSCRIBE can download additional modules from its C2 server.
   </Example>
   <Example id="S0164" name="TDTESS">
    TDTESS has a command to download and execute an additional file.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has the curl and wget commands as well as batch scripts to download new tools.
   </Example>
   <Example id="S0595" name="ThiefQuest">
    ThiefQuest can download and execute payloads in-memory or from disk.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has downloaded additional malware and tools, including through the use of certutil, onto a compromised host .
   </Example>
   <Example id="S0665" name="ThreatNeedle">
    ThreatNeedle can download additional tools to enable lateral movement.
   </Example>
   <Example id="S0668" name="TinyTurla">
    TinyTurla has the ability to act as a second-stage dropper used to infect the system with additional malware.
   </Example>
   <Example id="S0671" name="Tomiris">
    Tomiris can download files and execute them on a victim's system.
   </Example>
   <Example id="G0131" name="Tonto Team">
    Tonto Team has downloaded malicious DLLs which served as a ShadowPad loader.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot downloads several additional files and saves them to the victim's machine.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can upload, download, and execute files on the victim.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has used a delivered trojan to download additional files.
   </Example>
   <Example id="S0436" name="TSCookie">
    TSCookie has the ability to upload and download files to and from the infected host.
   </Example>
   <Example id="S0647" name="Turian">
    Turian can download additional files and tools from its C2.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used shellcode to download Meterpreter after compromising a victim.
   </Example>
   <Example id="S0199" name="TURNEDUP">
    TURNEDUP is capable of downloading additional files.
   </Example>
   <Example id="S0263" name="TYPEFRAME">
    TYPEFRAME can upload and download files to the victim’s machine.
   </Example>
   <Example id="S0333" name="UBoatRAT">
    UBoatRAT can upload and download files to the victim’s machine.
   </Example>
   <Example id="S0130" name="Unknown Logger">
    Unknown Logger is capable of downloading remote files.
   </Example>
   <Example id="S0275" name="UPPERCUT">
    UPPERCUT can download and upload files to and from the victim’s machine.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has dropped payload and configuration files to disk. Ursnif has also been used to download and execute additional payloads.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has downloaded a variety of modules and payloads to the compromised host, including IcedID and NetSupport Manager RAT-based malware.
   </Example>
   <Example id="S0636" name="VaporRage">
    VaporRage has the ability to download malicious shellcode to compromised systems.
   </Example>
   <Example id="S0207" name="Vasport">
    Vasport can download files.
   </Example>
   <Example id="S0442" name="VBShower">
    VBShower has the ability to download VBS files to the target computer.
   </Example>
   <Example id="S0257" name="VERMIN">
    VERMIN can download and upload files to the victim's machine.
   </Example>
   <Example id="G0123" name="Volatile Cedar">
    Volatile Cedar can deploy additional tools.
   </Example>
   <Example id="S0180" name="Volgmer">
    Volgmer can download remote files and additional payloads to the victim's machine.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT can download and execute additional files.
   </Example>
   <Example id="S0579" name="Waterbear">
    Waterbear can receive and load executables from remote C2 servers.
   </Example>
   <Example id="S0109" name="WEBC2">
    WEBC2 can download and execute a file.
   </Example>
   <Example id="S0515" name="WellMail">
    WellMail can receive data and executable scripts from C2.
   </Example>
   <Example id="S0514" name="WellMess">
    WellMess can write files to a compromised host.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can download additional stages of malware from a Discord CDN channel.
   </Example>
   <Example id="G0107" name="Whitefly">
    Whitefly has the ability to download additional tools from the C2.
   </Example>
   <Example id="S0206" name="Wiarp">
    Wiarp creates a backdoor through which remote attackers can download files.
   </Example>
   <Example id="G0112" name="Windshift">
    Windshift has used tools to deploy additional payloads to compromised hosts.
   </Example>
   <Example id="S0430" name="Winnti for Linux">
    Winnti for Linux has the ability to deploy modules directly from command and control (C2) servers, possibly for remote command execution, file exfiltration, and socks5 proxying on the infected host.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    The Winnti for Windows dropper can place malicious payloads on targeted systems.
   </Example>
   <Example id="G0044" name="Winnti Group">
    Winnti Group has downloaded an auxiliary program named ff.exe to infected machines.
   </Example>
   <Example id="G0090" name="WIRTE">
    WIRTE has downloaded PowerShell code from the C2 server to be executed.
   </Example>
   <Example id="S0341" name="Xbash">
    Xbash can download additional malicious files from its C2 server.
   </Example>
   <Example id="S0653" name="xCaon">
    xCaon has a command to download files to the victim's machine.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET downloads browser specific AppleScript modules using a constructed URL with the curl command, https://" &amp; domain &amp; "/agent/scripts/" &amp; moduleName &amp; ".applescript.
   </Example>
   <Example id="S0388" name="YAHOYAH">
    YAHOYAH uses HTTP GET requests to download other files that are executed in memory.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy obtains additional code to execute on the victim's machine, including the downloading of a secondary payload.
   </Example>
   <Example id="S0230" name="ZeroT">
    ZeroT can download additional payloads onto the victim.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda can download additional malware plug-in modules and execute them on the victim’s machine.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has used tools to download malicious files to compromised hosts.
   </Example>
   <Example id="S0086" name="ZLib">
    ZLib has the ability to download files.
   </Example>
   <Example id="S0672" name="Zox">
    Zox can download files to a compromised machine.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell has a command to transfer files from a remote host.
   </Example>
   <Example id="S1013" name="ZxxZ">
    ZxxZ can download and execute additional files.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1490" name="Inhibit System Recovery">
  Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. This may deny access to available backups and recovery options.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Impact_Type>
   Availability
  </Impact_Type>
  <Examples>
   <Example id="S0640" name="Avaddon">
    Avaddon deletes backups and shadow copies using native system tools.
   </Example>
   <Example id="S0638" name="Babuk">
    Babuk has the ability to delete shadow volumes using vssadmin.exe delete shadows /all /quiet.
   </Example>
   <Example id="S0570" name="BitPaymer">
    BitPaymer attempts to remove the backup shadow files from the host using vssadmin.exe Delete Shadows /All /Quiet.
   </Example>
   <Example id="S0611" name="Clop">
    Clop can delete the shadow volumes with vssadmin Delete Shadows /all /quiet and can use bcdedit to disable recovery options.
   </Example>
   <Example id="S0608" name="Conficker">
    Conficker resets system restore points and deletes backup files.
   </Example>
   <Example id="S0575" name="Conti">
    Conti can delete Windows Volume Shadow Copies using vssadmin.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman can delete shadow volumes using vssadmin.exe.
   </Example>
   <Example id="S0616" name="DEATHRANSOM">
    DEATHRANSOM can delete volume shadow copies on compromised hosts.
   </Example>
   <Example id="S0659" name="Diavol">
    Diavol can delete shadow copies using the IVssBackupComponents COM object to call the DeleteSnapshots method.
   </Example>
   <Example id="S0605" name="EKANS">
    EKANS removes backups of Volume Shadow Copies to disable any restoration capabilities.
   </Example>
   <Example id="S0618" name="FIVEHANDS">
    FIVEHANDS has the ability to delete volume shadow copies on compromised hosts.
   </Example>
   <Example id="S0132" name="H1N1">
    H1N1 disable recovery options and deletes shadow copies from the victim.
   </Example>
   <Example id="S0617" name="HELLOKITTY">
    HELLOKITTY can delete volume shadow copies on compromised hosts.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper can disable the VSS service on a compromised host using the service control manager.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can can remove all system restore points.
   </Example>
   <Example id="S0389" name="JCry">
    JCry has been observed deleting shadow copies to ensure that data cannot be restored easily.
   </Example>
   <Example id="S0449" name="Maze">
    Maze has attempted to delete the shadow volumes of infected machines, once before and once after the encryption process.
   </Example>
   <Example id="S0576" name="MegaCortex">
    MegaCortex has deleted volume shadow copies using vssadmin.exe.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor can use bcdedit to delete different boot identifiers on a compromised host; it can also use vssadmin.exe delete shadows /all /quiet and C:\\Windows\\system32\\wbem\\wmic.exe shadowcopy delete.
   </Example>
   <Example id="S0457" name="Netwalker">
    Netwalker can delete the infected system's Shadow Volumes to prevent recovery.
   </Example>
   <Example id="S0365" name="Olympic Destroyer">
    Olympic Destroyer uses the native Windows utilities vssadmin, wbadmin, and bcdedit to delete and disable operating system recovery features such as the Windows backup catalog and Windows Automatic Repair.
   </Example>
   <Example id="S0654" name="ProLock">
    ProLock can use vssadmin.exe to remove volume shadow copies.
   </Example>
   <Example id="S0583" name="Pysa">
    Pysa has the functionality to delete shadow copies.
   </Example>
   <Example id="S0481" name="Ragnar Locker">
    Ragnar Locker can delete volume shadow copies using vssadmin delete shadows /all /quiet.
   </Example>
   <Example id="S0496" name="REvil">
    REvil can use vssadmin to delete volume shadow copies and bcdedit to disable recovery features.
   </Example>
   <Example id="S0400" name="RobbinHood">
    RobbinHood deletes shadow copies to ensure that all the data cannot be restored easily.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk has used vssadmin Delete Shadows /all /quiet to to delete volume shadow copies and vssadmin resize shadowstorage to force deletion of shadow copies created by third-party applications.
   </Example>
   <Example id="S0366" name="WannaCry">
    WannaCry uses vssadmin, wbadmin, bcdedit, and wmic to delete and disable operating system recovery features.
   </Example>
   <Example id="S0612" name="WastedLocker">
    WastedLocker can delete shadow volumes.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1053" name="Data Backup">
    Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Consider technical controls to prevent the disabling of services or deletion of files involved in system recovery.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Deletion
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Metadata
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1056" name="Input Capture">
  Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).
  <Tactics>
   Collection, Credential Access
  </Tactics>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User, root
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-569
  </CAPEC_ID>
  <Examples>
   <Example id="G0087" name="APT39">
    APT39 has utilized tools to capture mouse movements.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes has a module to perform any API hooking it desires.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy can collect mouse events.
   </Example>
   <Example id="S0641" name="Kobalos">
    Kobalos has used a compromised SSH client to capture the hostname, port, username and password used to establish an SSH connection from the compromised host.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0027" name="Driver">
    Driver Load
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation | Process Metadata
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1056.001" name="Input Capture: Keylogging">
  Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured.
  <Tactics>
   Collection, Credential Access
  </Tactics>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User, root
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-568
  </CAPEC_ID>
  <Examples>
   <Example id="S0045" name="ADVSTORESHELL">
    ADVSTORESHELL can perform keylogging.
   </Example>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla can log keystrokes on the victim’s machine.
   </Example>
   <Example id="G0130" name="Ajax Security Team">
    Ajax Security Team has used CWoolger and MPK, custom-developed malware, which recorded all keystrokes on an infected system.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed can use GetKeyState and GetKeyboardState to capture keystrokes on the victim’s machine.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has used tools to perform keylogging.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has used a keylogging tool that records keystrokes in encrypted files.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has abused the PasswordChangeNotify to monitor for and capture account password changes.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 used a Trojan called KEYLIME to capture keystrokes from the victim’s machine.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used tools for capturing keystrokes.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used a keylogger called GEARSHIFT on a target system.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth logs keystrokes from the victim's machine.
   </Example>
   <Example id="S0438" name="Attor">
    One of Attor's plugins can collect user credentials via capturing keystrokes and can capture keystrokes pressed within the window of the injected process.
   </Example>
   <Example id="S0414" name="BabyShark">
    BabyShark has a PowerShell-based remote administration ability that can implement a PowerShell or C# based keylogger.
   </Example>
   <Example id="S0128" name="BADNEWS">
    When it first starts, BADNEWS spawns a new thread to log keystrokes.
   </Example>
   <Example id="S0337" name="BadPatch">
    BadPatch has a keylogging capability.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook contains keylogging capabilities.
   </Example>
   <Example id="S0017" name="BISCUIT">
    BISCUIT can capture keystrokes.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    BlackEnergy has run a keylogger plug-in on a victim.
   </Example>
   <Example id="S0454" name="Cadelspy">
    Cadelspy has the ability to log keystrokes on the compromised host.
   </Example>
   <Example id="S0030" name="Carbanak">
    Carbanak logs key strokes for configured processes and sends them back to the C2 server.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT can log keystrokes.
   </Example>
   <Example id="S0261" name="Catchamas">
    Catchamas collects keystrokes from the victim’s machine.
   </Example>
   <Example id="S0023" name="CHOPSTICK">
    CHOPSTICK is capable of performing keylogging.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can capture keystrokes on a compromised host.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can track key presses with a keylogger module.
   </Example>
   <Example id="S0338" name="Cobian RAT">
    Cobian RAT has a feature to perform keylogging on the victim’s machine.
   </Example>
   <Example id="S0050" name="CosmicDuke">
    CosmicDuke uses a keylogger.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson can use a module to perform keylogging on compromised hosts.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba logs keystrokes via polling by using GetKeyState and VkKeyScan functions.
   </Example>
   <Example id="S0334" name="DarkComet">
    DarkComet has a keylogging capability.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel has used a keylogger.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman can track key presses with a keylogger module.
   </Example>
   <Example id="S0187" name="Daserf">
    Daserf can log keystrokes.
   </Example>
   <Example id="S0021" name="Derusbi">
    Derusbi is capable of logging keystrokes.
   </Example>
   <Example id="S0213" name="DOGCALL">
    DOGCALL is capable of logging keystrokes.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack’s dropper contains a keylogging executable.
   </Example>
   <Example id="S0038" name="Duqu">
    Duqu can track key presses with a keylogger module.
   </Example>
   <Example id="S0062" name="DustySky">
    DustySky contains a keylogger.
   </Example>
   <Example id="S0593" name="ECCENTRICBANDWAGON">
    ECCENTRICBANDWAGON can capture and store keystrokes.
   </Example>
   <Example id="S0363" name="Empire">
    Empire includes keylogging capabilities for Windows, Linux, and macOS systems.
   </Example>
   <Example id="S0152" name="EvilGrab">
    EvilGrab has the capability to capture keystrokes.
   </Example>
   <Example id="S0569" name="Explosive">
    Explosive has leveraged its keylogging capabilities to gain access to administrator accounts on target servers.
   </Example>
   <Example id="S0076" name="FakeM">
    FakeM contains a keylogger module.
   </Example>
   <Example id="G0085" name="FIN4">
    FIN4 has captured credentials via fake Outlook Web App (OWA) login pages and has also used a .NET based keylogger.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy can collect keyboard events.
   </Example>
   <Example id="S1044" name="FunnyDream">
    The FunnyDream Keyrecord component can capture keystrokes.
   </Example>
   <Example id="S0410" name="Fysbis">
    Fysbis can perform keylogging.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT has a keylogger.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can log keystrokes on the victim's machine.
   </Example>
   <Example id="S0342" name="GreyEnergy">
    GreyEnergy has a module to harvest pressed keystrokes.
   </Example>
   <Example id="G0043" name="Group5">
    Malware used by Group5 is capable of capturing keystrokes.
   </Example>
   <Example id="S0170" name="Helminth">
    The executable version of Helminth has a module to log keystrokes.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has used a PowerShell-based keylogger named kl.ps1.
   </Example>
   <Example id="S0070" name="HTTPBrowser">
    HTTPBrowser is capable of capturing keystrokes on victims.
   </Example>
   <Example id="S0434" name="Imminent Monitor">
    Imminent Monitor has a keylogging module.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can capture keystrokes on a compromised host.
   </Example>
   <Example id="S0201" name="JPIN">
    JPIN contains a custom keylogger.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT has the capability to log keystrokes from the victim’s machine, both offline and online.
   </Example>
   <Example id="S0088" name="Kasidet">
    Kasidet has the ability to initiate keylogging.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has used keyloggers.
   </Example>
   <Example id="S0387" name="KeyBoy">
    KeyBoy installs a keylogger for intercepting credentials and keystrokes.
   </Example>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY can perform keylogging by polling the GetAsyncKeyState() function.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used a PowerShell-based keylogger as well as a tool called MECHANICAL to log keystrokes.
   </Example>
   <Example id="S0437" name="Kivars">
    Kivars has the ability to initiate keylogging on the infected host.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has the capability to perform keylogging.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group malware KiloAlfa contains keylogging functionality.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has the ability to capture input on the compromised host via keylogging.
   </Example>
   <Example id="S0409" name="Machete">
    Machete logs keystrokes from the victim’s machine.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa can use Core Graphics Event Taps to intercept user keystrokes from any text input field and saves them to text files. Text input fields include Spotlight, Finder, Safari, Mail, Messages, and other apps that have text fields for passwords.
   </Example>
   <Example id="S0282" name="MacSpy">
    MacSpy captures keystrokes.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound malware is capable of keylogging.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can capture all keystrokes on a compromised host.
   </Example>
   <Example id="S0167" name="Matryoshka">
    Matryoshka is capable of keylogging.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used key loggers to steal usernames and passwords.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has a command to launch a keylogger and capture keystrokes on the victim’s machine.
   </Example>
   <Example id="S0339" name="Micropsia">
    Micropsia has keylogging capabilities.
   </Example>
   <Example id="S0149" name="MoonWind">
    MoonWind has a keylogger.
   </Example>
   <Example id="S0336" name="NanoCore">
    NanoCore can perform keylogging on the victim’s machine.
   </Example>
   <Example id="S0247" name="NavRAT">
    NavRAT logs the keystrokes on the targeted system.
   </Example>
   <Example id="S0033" name="NetTraveler">
    NetTraveler contains a keylogger.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can perform keylogging.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT is capable of logging keystrokes.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used keylogging tools called KEYPUNCH and LONGWATCH.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum was seen using a keylogger tool to capture keystrokes.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors obtained the password for the victim's password manager via a custom keylogger.
   </Example>
   <Example id="S0072" name="OwaAuth">
    OwaAuth captures and DES-encrypts credentials before writing the username and password to a log file, C:\log.txt.
   </Example>
   <Example id="S1050" name="PcShare">
    PcShare has the ability to capture keystrokes.
   </Example>
   <Example id="S0643" name="Peppy">
    Peppy can log keystrokes on compromised hosts.
   </Example>
   <Example id="G0068" name="PLATINUM">
    PLATINUM has used several different keyloggers.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX has a module for capturing keystrokes per process including window titles.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has used a Python tool named klog.exe for keylogging.
   </Example>
   <Example id="S0012" name="PoisonIvy">
    PoisonIvy contains a keylogger.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 has modules for keystroke logging and capturing credentials from spoofed Outlook authentication messages.
   </Example>
   <Example id="S1012" name="PowerLess">
    PowerLess can use a module to log keystrokes.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit's Get-Keystrokes Exfiltration module can log keystrokes.
   </Example>
   <Example id="S0113" name="Prikormka">
    Prikormka contains a keylogger module that collects keystrokes and the titles of foreground windows.
   </Example>
   <Example id="S0279" name="Proton">
    Proton uses a keylogger to capture keystrokes.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy uses a keylogger to capture keystrokes it then sends back to the server after it is stopped.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can capture keystrokes on a compromised host.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT has a built-in keylogger.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession has the ability to capture keystrokes on a compromised host.
   </Example>
   <Example id="S0019" name="Regin">
    Regin contains a keylogger.
   </Example>
   <Example id="S0332" name="Remcos">
    Remcos has a command for keylogging.
   </Example>
   <Example id="S0375" name="Remexi">
    Remexi gathers and exfiltrates keystrokes from the machine.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec contains a keylogger component.
   </Example>
   <Example id="S0379" name="Revenge RAT">
    Revenge RAT has a plugin for keylogging.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can use  SetWindowsHookEx and GetKeyNameText to capture keystrokes.
   </Example>
   <Example id="S0090" name="Rover">
    Rover has keylogging functionality.
   </Example>
   <Example id="S0148" name="RTM">
    RTM can record keystrokes from both the keyboard and virtual keyboard.
   </Example>
   <Example id="S0253" name="RunningRAT">
    RunningRAT captures keystrokes and sends them back to the C2 server.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used a keylogger to capture keystrokes by using the SetWindowsHookEx function.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY has a keylogging capability.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA has a keylogging capability.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM can continuously capture keystrokes.
   </Example>
   <Example id="G0054" name="Sowbug">
    Sowbug has used keylogging tools.
   </Example>
   <Example id="S0058" name="SslMM">
    SslMM creates a new thread implementing a keylogging facility using Windows Keyboard Accelerators.
   </Example>
   <Example id="S0018" name="Sykipot">
    Sykipot contains keylogging functionality to steal passwords.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to capture keystrokes on an infected host.
   </Example>
   <Example id="S0595" name="ThiefQuest">
    ThiefQuest uses the CGEventTap functions to perform keylogging.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 actors installed a credential logger on Microsoft Exchange servers. Threat Group-3390 also leveraged the reconnaissance framework, ScanBox, to capture keystrokes.
   </Example>
   <Example id="S0004" name="TinyZBot">
    TinyZBot contains keylogger functionality.
   </Example>
   <Example id="G0131" name="Tonto Team">
    Tonto Team has used keylogging tools in their operations.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can capture keystrokes on a compromised host.
   </Example>
   <Example id="S0130" name="Unknown Logger">
    Unknown Logger is capable of recording keystrokes.
   </Example>
   <Example id="S0257" name="VERMIN">
    VERMIN collects keystrokes from the victim machine.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT has the capability to install a live and offline keylogger, including through the use of the GetAsyncKeyState Windows API.
   </Example>
   <Example id="S0161" name="XAgentOSX">
    XAgentOSX contains keylogging functionality that will monitor for active application windows and write them to the log, it can handle special characters, and it will buffer by default 50 characters before sending them out over the C2 infrastructure.
   </Example>
   <Example id="S0248" name="yty">
    yty uses a keylogger plugin to gather keystrokes.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda can perform keylogging on the victim’s machine by hooking the functions TranslateMessage and WM_KEYDOWN.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell has a feature to capture a remote computer's keystrokes using a keylogger.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0027" name="Driver">
    Driver Load
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1056.002" name="Input Capture: GUI Input Capture">
  Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control).
  <Tactics>
   Collection, Credential Access
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-659
  </CAPEC_ID>
  <Examples>
   <Example id="S0482" name="Bundlore">
    Bundlore prompts the user for their credentials.
   </Example>
   <Example id="S0274" name="Calisto">
    Calisto presents an input prompt asking for the user's login and password.
   </Example>
   <Example id="S0281" name="Dok">
    Dok prompts the user for credentials.
   </Example>
   <Example id="G0085" name="FIN4">
    FIN4 has presented victims with spoofed Windows Authentication prompts to collect their credentials.
   </Example>
   <Example id="S0278" name="iKitten">
    iKitten prompts the user for their credentials.
   </Example>
   <Example id="S0276" name="Keydnap">
    Keydnap prompts the users for credentials.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has displayed fake forms on top of banking sites to intercept credentials from victims.
   </Example>
   <Example id="S0279" name="Proton">
    Proton prompts users for their credentials.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY's credphisher.py module can prompt a current user for their credentials.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET prompts the user to input credentials using a native macOS dialog box leveraging the system process /Applications/Safari.app/Contents/MacOS/SafariForWebKitDevelopment.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1017" name="User Training">
    Use user training as a way to bring awareness and raise suspicion for potentially malicious events and dialog boxes (ex: Office documents prompting for credentials).
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1056.003" name="Input Capture: Web Portal Capture">
  Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.
  <Tactics>
   Collection, Credential Access
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <System_Requirements>
   An externally facing login portal is configured.
  </System_Requirements>
  <CAPEC_ID>
   CAPEC-569
  </CAPEC_ID>
  <Examples>
   <Example id="S1022" name="IceApple">
    The IceApple OWA credential logger can monitor for OWA authentication requests and log the credentials.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1026" name="Privileged Account Management">
    Do not allow administrator accounts that have permissions to modify the Web content of organization login portals to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1056.004" name="Input Capture: Credential API Hooking">
  Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials. Unlike Keylogging,  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:
  <Tactics>
   Collection, Credential Access
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM
  </Permissions_Required>
  <Examples>
   <Example id="S0484" name="Carberp">
    Carberp has hooked several Windows API functions to steal credentials.
   </Example>
   <Example id="S0363" name="Empire">
    Empire contains some modules that leverage API hooking to carry out tasks, such as netripper.
   </Example>
   <Example id="S0182" name="FinFisher">
    FinFisher hooks processes by modifying IAT pointers to CreateWindowEx.
   </Example>
   <Example id="S0353" name="NOKKI">
    NOKKI uses the Windows call SetWindowsHookEx and begins injecting it into every GUI process running on the victim's machine.
   </Example>
   <Example id="G0068" name="PLATINUM">
    PLATINUM is capable of using Windows hook interfaces for information gathering such as credential access.
   </Example>
   <Example id="S0416" name="RDFSNIFFER">
    RDFSNIFFER hooks several Win32 API functions to hijack elements of the remote system management user-interface.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot has the ability to capture RDP credentials by capturing the CredEnumerateA API
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has hooked APIs to perform a wide variety of information theft, such as monitoring traffic from browsers.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy installs an application-defined Windows hook to get notified when a network drive has been attached, so it can then use the hook to call its RecordToFile file stealing method.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda hooks processes by leveraging its own IAT hooked functions.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell hooks several API functions to spawn system threads.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1559" name="Inter-Process Communication">
  Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User
  </Permissions_Required>
  <Supports_Remote>
   Yes
  </Supports_Remote>
  <Examples>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink has the ability to create a pipe to enable inter-process communication.
   </Example>
   <Example id="S0537" name="HyperStack">
    HyperStack can connect to the IPC$ share on remote machines.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1013" name="Application Developer Guidance">
    Enable the Hardened Runtime capability when developing applications. Do not include the com.apple.security.get-task-allow entitlement with the value set to any variation of true.
   </Mitigation>
   <Mitigation id="M1048" name="Application Isolation and Sandboxing">
    Ensure all COM alerts and Protected View are enabled.
   </Mitigation>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent DDE attacks and spawning of child processes from Office programs.
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Registry keys specific to Microsoft Office feature control security can be set to disable automatic DDE/OLE execution.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Modify Registry settings (directly or using Dcomcnfg.exe) in HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\AppID\\{AppID_GUID} associated with the process-wide security of individual COM applications.
   </Mitigation>
   <Mitigation id="M1054" name="Software Configuration">
    Consider disabling embedded files in Office programs, such as OneNote, that do not work with Protected View.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Access | Process Creation
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1559.001" name="Inter-Process Communication: Component Object Model">
  Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Supports_Remote>
   Yes
  </Supports_Remote>
  <Examples>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can use a COM object to execute queries to gather system information.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can use com objects identified with CLSID_ShellLink(IShellLink and IPersistFile) and WScript.Shell(RegWrite method) to enable persistence mechanisms.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group malware can insert malicious macros into documents using a Microsoft.Office.Interop object.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can use the IARPUinstallerStringLauncher COM interface are part of its UAC bypass process.
   </Example>
   <Example id="S0698" name="HermeticWizard">
    HermeticWizard can execute files on remote machines using DCOM.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can use the ITaskService, ITaskDefinition and ITaskSettings COM interfaces to schedule a task.
   </Example>
   <Example id="S1015" name="Milan">
    Milan can use a COM component to generate scheduled tasks.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used malware that has the capability to execute malicious code via COM, DCOM, and Outlook.
   </Example>
   <Example id="S0691" name="Neoichor">
    Neoichor can use the Internet Explorer (IE) COM interface to connect and receive commands from C2.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS can use DCOM (targeting the 127.0.0.1 loopback address) to execute additional payloads on compromised hosts.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can use the Windows COM API to schedule tasks and maintain persistence.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot used COM to setup scheduled task for persistence.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif droppers have used COM objects to execute the malware's full executable payload.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1048" name="Application Isolation and Sandboxing">
    Ensure all COM alerts and Protected View are enabled.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Modify Registry settings (directly or using Dcomcnfg.exe) in HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\AppID\\{AppID_GUID} associated with the process-wide security of individual COM applications.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1559.002" name="Inter-Process Communication: Dynamic Data Exchange">
  Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Supports_Remote>
   Yes
  </Supports_Remote>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has delivered JHUHUGIT and Koadic by executing PowerShell commands through DDE in Word documents.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 has used Windows DDE for execution of commands and a malicious VBS.
   </Example>
   <Example id="G1002" name="BITTER">
    BITTER has executed OLE objects using Microsoft Equation Editor to download and run malicious payloads.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has sent malicious Word OLE compound documents to victims.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 spear phishing campaigns have included malicious Word documents with DDE execution.
   </Example>
   <Example id="G0084" name="Gallmaker">
    Gallmaker attempted to exploit Microsoft’s DDE protocol in order to gain access to victim machines and for execution.
   </Example>
   <Example id="S0237" name="GravityRAT">
    GravityRAT has been delivered via Word documents using DDE for execution.
   </Example>
   <Example id="S0391" name="HAWKBALL">
    HAWKBALL has used an OLE object that uses Equation Editor to drop the embedded shellcode.
   </Example>
   <Example id="S0387" name="KeyBoy">
    KeyBoy uses the Dynamic Data Exchange (DDE) protocol to download remote payloads.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has utilized OLE as a method to insert malicious content inside various phishing documents.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used malware that can execute PowerShell scripts via DDE.
   </Example>
   <Example id="C0013" name="Operation Sharpshooter">
    During Operation Sharpshooter, threat actors sent malicious Word OLE documents to victims.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork leveraged the DDE protocol to deliver their malware.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT was delivered with documents using DDE to execute malicious code.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS can use DDE to execute additional payloads on compromised hosts.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay has been delivered using OLE objects in malicious documents.
   </Example>
   <Example id="S0148" name="RTM">
    RTM can search for specific strings within browser tabs using a Dynamic Data Exchange mechanism.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has used the ActiveXObject utility to create OLE objects to obtain execution through Internet Explorer.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has leveraged malicious Word documents that abused DDE.
   </Example>
   <Example id="S0476" name="Valak">
    Valak can execute tasks via OLE.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1048" name="Application Isolation and Sandboxing">
    Ensure Protected View is enabled.
   </Mitigation>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent DDE attacks and spawning of child processes from Office programs.
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Registry keys specific to Microsoft Office feature control security can be set to disable automatic DDE/OLE execution.
   </Mitigation>
   <Mitigation id="M1054" name="Software Configuration">
    Consider disabling embedded files in Office programs, such as OneNote, that do not work with Protected View.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1559.003" name="Inter-Process Communication: XPC Services">
  Adversaries can provide malicious content to an XPC service daemon for local code execution. macOS uses XPC services for basic inter-process communication between various processes, such as between the XPC Service daemon and third-party application privileged helper tools. Applications can send messages to the XPC Service daemon, which runs as root, using the low-level XPC Service C API or the high level NSXPCConnection API in order to handle tasks that require elevated privileges (such as network connections). Applications are responsible for providing the protocol definition which serves as a blueprint of the XPC services. Developers typically use XPC Services to provide applications stability and privilege separation between the application client and the daemon.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   macOS
  </Platforms>
  <Mitigations>
   <Mitigation id="M1013" name="Application Developer Guidance">
    Enable the Hardened Runtime capability when developing applications. Do not include the com.apple.security.get-task-allow entitlement with the value set to any variation of true.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0009" name="Process">
    Process Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1534" name="Internal Spearphishing">
  Adversaries may use internal spearphishing to gain access to additional information or exploit other users within the same organization after they already have access to accounts or systems within the environment. Internal spearphishing is multi-staged campaign where an email account is owned either by controlling the user's device with previously installed malware or by compromising the account credentials of the user. Adversaries attempt to take advantage of a trusted internal account to increase the likelihood of tricking the target into falling for the phish attempt.
  <Tactic>
   Lateral Movement
  </Tactic>
  <Platforms>
   Google Workspace, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has used an Outlook VBA module on infected systems to send phishing emails with malicious attachments to other employees within the organization.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has conducted internal spearphishing attacks against executives, HR, and IT personnel to gain information and access.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has sent internal spearphishing emails for lateral movement after stealing victim information.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has conducted internal spearphishing from within a compromised organization.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has conducted internal spearphishing within the victim's environment for lateral movement.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1570" name="Lateral Tool Transfer">
  Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e. Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB/Windows Admin Shares to connected network shares or with authenticated connections via Remote Desktop Protocol.
  <Tactic>
   Lateral Movement
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G1007" name="Aoqin Dragon">
    Aoqin Dragon has spread malware in target networks by copying modules to folders masquerading as removable devices.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has deployed tools after moving laterally using administrative accounts.
   </Example>
   <Example id="S0190" name="BITSAdmin">
    BITSAdmin can be used to create BITS Jobs to upload and/or download files from SMB file servers.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors used WMI to load Cobalt Strike onto additional hosts within a compromised network.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has copied tools between compromised hosts using SMB.
   </Example>
   <Example id="S0106" name="cmd">
    cmd can be used to copy files to/from a remotely connected internal system.
   </Example>
   <Example id="S0062" name="DustySky">
    DustySky searches for network drives and removable media and duplicates itself onto them.
   </Example>
   <Example id="S0404" name="esentutl">
    esentutl can be used to copy files to/from a remote share.
   </Example>
   <Example id="S0361" name="Expand">
    Expand can be used to download or upload a file over a network share.
   </Example>
   <Example id="G0051" name="FIN10">
    FIN10 has deployed Meterpreter stagers and SplinterRAT instances in the victim network after moving laterally.
   </Example>
   <Example id="S0095" name="ftp">
    ftp may be abused by adversaries to transfer tools or files between systems within a compromised environment.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM has used PsExec to move laterally between hosts in the target network.
   </Example>
   <Example id="S0698" name="HermeticWizard">
    HermeticWizard can copy files to other machines on a compromised network.
   </Example>
   <Example id="S0372" name="LockerGoga">
    LockerGoga has been observed moving around the victim network via SMB, indicating the actors behind this ransomware are manually copying files form computer to computer instead of self-propagating.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can use certutil for propagation on Windows hosts within intranets.
   </Example>
   <Example id="S0457" name="Netwalker">
    Operators deploying Netwalker have used psexec to copy the Netwalker payload across accessible systems.
   </Example>
   <Example id="S0365" name="Olympic Destroyer">
    Olympic Destroyer attempts to copy itself to remote machines on the network.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used SMB to copy files to and from target systems.
   </Example>
   <Example id="S0029" name="PsExec">
    PsExec can be used to download or upload a file over a network share.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used move to transfer files to a network share.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon attempts to copy itself to remote machines on the network.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet uses an RPC server that contains a file dropping routine and support for payload version updates for P2P communications within a victim network.
   </Example>
   <Example id="G0010" name="Turla">
    Turla RPC backdoors can be used to transfer files to/from victim machines on the local network.
   </Example>
   <Example id="S0366" name="WannaCry">
    WannaCry attempts to copy itself to remote computers after gaining access via an SMB exploit.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used stolen credentials to copy tools into the %TEMP% directory of domain controllers.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Consider using the host firewall to restrict file sharing communications such as SMB.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known tools and protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Metadata
   </Detection>
   <Detection id="DS0023" name="Named Pipe">
    Named Pipe Metadata
   </Detection>
   <Detection id="DS0033" name="Network Share">
    Network Share Access
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1036" name="Masquerading">
  Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Containers, Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Application Control
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-177
  </CAPEC_ID>
  <Examples>
   <Example id="S0622" name="AppleSeed">
    AppleSeed can disguise JavaScript files as PDFs.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has renamed the WinRAR utility to avoid detection.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has set the hostnames of its C2 infrastructure to match legitimate hostnames in the victim environment. They have also used IP addresses originating from the same country as the victim for their VPN infrastructure.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has disguised a Cobalt Strike beacon as a Flash Installer.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal dropped a decoy payload with a .jpg extension that contained a malicious Visual Basic script.
   </Example>
   <Example id="S0635" name="BoomBox">
    BoomBox has the ability to mask malicious data strings as PDF files.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has masked executables with document file icons including Word and Adobe PDF.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors named a binary file compareForfor.jpg to disguise it as a JPG file.
   </Example>
   <Example id="S0497" name="Dacls">
    The Dacls Mach-O binary has been disguised as a .nib file.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman has used an icon mimicking a text file to mask a malicious executable.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has created accounts disguised as legitimate backup and service accounts as well as an email administration account.
   </Example>
   <Example id="S0634" name="EnvyScout">
    EnvyScout has used folder icons for malicious files to lure victims into opening them.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke has attempted to mimic a compromised user's traffic by using the same user agent as the installed browser.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro can download malicious files with a .tmp extension and append them with .exe prior to execution.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb can masquerade the output of C2 commands as a fake, but legitimately formatted WebP file.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has disguised its C2 addresses as the websites of shopping malls, governments, universities, and others.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has disguised malicious template files as JPEG files to avoid detection.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter has used several different security software icons to disguise executables.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used esentutl to change file extensions to their true type that were masquerading as .txt files.
   </Example>
   <Example id="S1015" name="Milan">
    Milan has used an executable named companycatalogue to appear benign.
   </Example>
   <Example id="S0637" name="NativeZone">
    NativeZone has, upon execution, displayed a message box that appears to be related to a Ukrainian electronic document management system.
   </Example>
   <Example id="G0133" name="Nomadic Octopus">
    Nomadic Octopus attempted to make Octopus appear as a  Telegram Messenger with a Russian interface.
   </Example>
   <Example id="S0368" name="NotPetya">
    NotPetya drops PsExec with the filename dllhost.dat.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used .doc file extensions to mask malicious executables.
   </Example>
   <Example id="C0016" name="Operation Dust Storm">
    For Operation Dust Storm, the threat actors disguised some executables as JPG files.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, the threat actors modified the MaoCheng dropper so its icon appeared as a Word document.
   </Example>
   <Example id="G0068" name="PLATINUM">
    PLATINUM has renamed rar.exe to avoid detection.
   </Example>
   <Example id="S1046" name="PowGoop">
    PowGoop has disguised a PowerShell script as a .dat file (goopdate.dat).
   </Example>
   <Example id="S0650" name="QakBot">
    The QakBot payload has been disguised as a PNG file.
   </Example>
   <Example id="S0565" name="Raindrop">
    Raindrop was built to include a modified version of 7-Zip source code (including associated export names) and Far Manager source code.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay has masqueraded as a JPG image file.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession has used a file named English.rtf to appear benign on victim hosts.
   </Example>
   <Example id="S0148" name="RTM">
    RTM has been delivered as archived Windows executable files masquerading as PDF documents.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk can create .dll files that actually contain a Rich Text File format document.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has renamed malicious binaries as wallpaper.mp4 and slideshow.mp4 to avoid detection.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT can use a legitimate process name to hide itself.
   </Example>
   <Example id="G0127" name="TA551">
    TA551 has masked malware DLLs as dat and jpg files.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has disguised their scripts with docker-related file names.
   </Example>
   <Example id="S0682" name="TrailBlazer">
    TrailBlazer has used filenames that match the name of the compromised system in attempt to avoid detection.
   </Example>
   <Example id="S0266" name="TrickBot">
    The TrickBot downloader has used an icon to appear as a Microsoft Word document.
   </Example>
   <Example id="S0609" name="TRITON">
    TRITON attempts to write a dummy program into memory if it fails to reset the Triconex controller.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate has been disguised as a JPG extension to avoid detection as a malicious PE file.
   </Example>
   <Example id="G0112" name="Windshift">
    Windshift has used icons mimicking MS Office files to mask malicious executables.
   </Example>
   <Example id="S0466" name="WindTail">
    WindTail has used icons mimicking MS Office files to mask payloads.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET builds a malicious application bundle to resemble Safari through using the Safari icon and Info.plist.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has spoofed legitimate applications in phishing lures and changed file extensions to conceal  installation of malware.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1045" name="Code Signing">
    Require signed binaries.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Use tools that restrict program execution via application control by attributes other than file name for common operating system utilities that are needed.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Use file system access controls to protect folders such as C:\Windows\System32.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Metadata | File Modification
   </Detection>
   <Detection id="DS0007" name="Image">
    Image Metadata
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Metadata
   </Detection>
   <Detection id="DS0003" name="Scheduled Job">
    Scheduled Job Metadata | Scheduled Job Modification
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Creation | Service Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1036.001" name="Masquerading: Invalid Code Signature">
  Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0067" name="APT37">
    APT37 has signed its malware with an invalid digital certificates listed as "Tencent Technology (Shenzhen) Company Limited."
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS is sometimes signed with an invalid Authenticode certificate in an apparent effort to make it look more legitimate.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium has used unverified signatures on malicious DLLs.
   </Example>
   <Example id="S0198" name="NETWIRE">
    The NETWIRE client has been signed by fake and invalid digital certificates.
   </Example>
   <Example id="S1050" name="PcShare">
    PcShare has used an invalid certificate in attempt to appear legitimate.
   </Example>
   <Example id="S0019" name="Regin">
    Regin stage 1 modules for 64-bit systems have been found to be signed with fake certificates masquerading as originating from Microsoft Corporation and Broadcom Corporation.
   </Example>
   <Example id="G0112" name="Windshift">
    Windshift has used revoked certificates to sign malware.
   </Example>
   <Example id="S0466" name="WindTail">
    WindTail has been incompletely signed with revoked certificates.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1045" name="Code Signing">
    Require signed binaries.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1036.002" name="Masquerading: Right-to-Left Override">
  Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named March 25 \u202Excod.scr will display as March 25 rcs.docx. A JavaScript file named photo_high_re\u202Egnp.js will be displayed as photo_high_resj.png.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0098" name="BlackTech">
    BlackTech has used right-to-left-override to obfuscate the filenames of malicious e-mail attachments.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has used Right-to-Left Override to deceive victims into executing several strains of malware.
   </Example>
   <Example id="G0137" name="Ferocious Kitten">
    Ferocious Kitten has used right-to-left override to reverse executables’ names to make them appear to have different file extensions, rather than their real ones.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has used the right-to-left override character in spearphishing attachment names to trick targets into executing .scr and .exe files.
   </Example>
   <Example id="G0029" name="Scarlet Mimic">
    Scarlet Mimic has used the left-to-right override character in self-extracting RAR archive spearphishing attachment file names.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0022" name="File">
    File Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1036.003" name="Masquerading: Rename System Utilities">
  Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0050" name="APT32">
    APT32 has moved and renamed pubprn.vbs to a .txt file to avoid detection.
   </Example>
   <Example id="S0046" name="CozyCar">
    The CozyCar dropper has masqueraded a copy of the infected system's rundll32.exe executable that was moved to the malware's install directory and renamed according to a predefined configuration file.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM used a renamed cmd.exe file to evade detection.
   </Example>
   <Example id="S1020" name="Kevin">
    Kevin has renamed an image of cmd.exe with a random name followed by a .tmpl extension.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has renamed system utilities such as wscript.exe and mshta.exe.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has renamed certutil and moved it to a different location on the system to avoid detection based on use of the tool.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Use file system access controls to protect folders such as C:\Windows\System32.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Metadata | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1036.004" name="Masquerading: Masquerade Task or Service">
  Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User
  </Permissions_Required>
  <Examples>
   <Example id="G0099" name="APT-C-36">
    APT-C-36 has disguised its scheduled tasks as those used by Google.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 named tasks \Microsoft\Windows\SoftwareProtectionPlatform\EventCacheManager in order to appear legitimate.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has used hidden or non-printing characters to help masquerade service names, such as appending a Unicode no-break space character to a legitimate service name. APT32 has also impersonated the legitimate Flash installer file name "install_flashplayer.exe".
   </Example>
   <Example id="G0096" name="APT41">
    APT41 has created services to appear as benign system tools.
   </Example>
   <Example id="S0438" name="Attor">
    Attor's dispatcher disguises itself as a legitimate task (i.e., the task name and description appear legitimate).
   </Example>
   <Example id="G0135" name="BackdoorDiplomacy">
    BackdoorDiplomacy has disguised their backdoor droppers with naming conventions designed to blend into normal operations.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can create a task named to appear benign.
   </Example>
   <Example id="G1002" name="BITTER">
    BITTER has disguised malware as a Windows Security update service.
   </Example>
   <Example id="S0471" name="build_downer">
    build_downer has added itself to the Registry Run key as "NVIDIA" to appear legitimate.
   </Example>
   <Example id="G0008" name="Carbanak">
    Carbanak has copied legitimate service names to use for malicious services.
   </Example>
   <Example id="S0261" name="Catchamas">
    Catchamas adds a new service named NetAdapter in an apparent attempt to masquerade as a legitimate service.
   </Example>
   <Example id="S0126" name="ComRAT">
    ComRAT has used a task name associated with Windows SQM Consolidator.
   </Example>
   <Example id="S0538" name="Crutch">
    Crutch has established persistence with a scheduled task impersonating the Outlook item finder.
   </Example>
   <Example id="S0527" name="CSPY Downloader">
    CSPY Downloader has attempted to appear as a legitimate Windows service with a fake description claiming it is used to support packed applications.
   </Example>
   <Example id="S1033" name="DCSrv">
    DCSrv has masqueraded its service as a legitimate svchost.exe process.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor has masqueraded the svchost.exe process to exfiltrate data.
   </Example>
   <Example id="S0343" name="Exaramel for Windows">
    The Exaramel for Windows dropper creates and starts a Windows service named wsmprovav with the description "Windows Check AV" in an apparent attempt to masquerade as a legitimate service.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has renamed the "psexec" service name to "mstdc" to masquerade as a legitimate Windows service.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has created a scheduled task named "AdobeFlashSync" to establish persistence.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has named the task for a reverse proxy lpupdate to appear legitimate.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors named a malicious scheduled task "WinUpdate" for persistence.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream has used a service named WSearch for execution.
   </Example>
   <Example id="S0410" name="Fysbis">
    Fysbis has masqueraded as the rsyncd and dbus-inotifier services.
   </Example>
   <Example id="S0588" name="GoldMax">
    GoldMax has impersonated systems management software to avoid detection.
   </Example>
   <Example id="S0690" name="Green Lambert">
    Green Lambert has created a new executable named Software Update Check to appear legitimate.
   </Example>
   <Example id="S1027" name="Heyoka Backdoor">
    Heyoka Backdoor has been named srvdll.dll to appear as a legitimate service.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa named a shellcode loader binary svchast.exe to spoof the legitimate svchost.exe.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has disguised itself as a known Linux process.
   </Example>
   <Example id="S0259" name="InnaputRAT">
    InnaputRAT variants have attempted to appear legitimate by adding a new service named OfficeUpdateService.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole has attempted to disguise itself by registering under a seemingly legitimate service name.
   </Example>
   <Example id="S0581" name="IronNetInjector">
    IronNetInjector has been disguised as a legitimate service using the name PythonUpdateSrvc.
   </Example>
   <Example id="S0607" name="KillDisk">
    KillDisk registers as a service under the Plug-And-Play Support name.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has disguised services to appear as benign software or related to operating system functions.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has pretended to be the xmlProv Network Provisioning service.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs establishes persistence by adding a new service with the display name "WMI Performance Adapter Extension" in an attempt to masquerade as a legitimate WMI service.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used a scheduled task named SRCheck to mask the execution of a malicious .dll.
   </Example>
   <Example id="S0409" name="Machete">
    Machete renamed task names to masquerade as legitimate Google Chrome, Java, Dropbox, Adobe Reader and Python tasks.
   </Example>
   <Example id="S0449" name="Maze">
    Maze operators have created scheduled tasks masquerading as "Windows Update Security", "Windows Update Security Patches", and "Google Chrome Security Update" designed to launch the ransomware.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor has been disguised as the Windows Power Efficiency Diagnostics report tool.
   </Example>
   <Example id="G0019" name="Naikon">
    Naikon renamed a malicious service taskmgr to appear to be a legitimate version of Task Manager.
   </Example>
   <Example id="S0630" name="Nebulae">
    Nebulae has created a service named "Windows Update Agent1" to appear legitimate.
   </Example>
   <Example id="S0118" name="Nidiran">
    Nidiran can create a new service named msamger (Microsoft Security Accounts Manager), which mimics the legitimate Microsoft database by the same name.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum can establish persistence by adding a new service NtmsSvc with the display name Removable Storage to masquerade as a legitimate Removable Storage Manager.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    OSX_OCEANLOTUS.D has disguised its app bundle by adding special characters to the filename and using the icon for legitimate Word documents.
   </Example>
   <Example id="S1031" name="PingPull">
    PingPull can mimic the names and descriptions of legitimate services such as iphlpsvc, IP Helper,  and Onedrive to evade detection.
   </Example>
   <Example id="S0013" name="PlugX">
    In one instance, menuPass added PlugX as a service with a display name of "Corel Writing Tools Utility."
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS has created a scheduled task named "MicrosoftEdge" to establish persistence.
   </Example>
   <Example id="G0056" name="PROMETHIUM">
    PROMETHIUM has named services to appear legitimate.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay has named services and scheduled tasks to appear benign including "ChromeCheck" and "googleupdate."
   </Example>
   <Example id="S0169" name="RawPOS">
    New services created by RawPOS are made to appear like legitimate Windows services, with names such as "Windows Management Help Service", "Microsoft Support", and "Windows Advanced Task Manager".
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT has used Windows Video Service as a name for malicious services.
   </Example>
   <Example id="S0148" name="RTM">
    RTM has named the scheduled task it creates "Windows Update".
   </Example>
   <Example id="S0345" name="Seasalt">
    Seasalt has masqueraded as a service called "SaSaut" with a display name of "System Authorization Service" in an apparent attempt to masquerade as a legitimate service.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon creates a new service named "ntssrv" that attempts to appear legitimate; the service's display name is "Microsoft Network Realtime Inspection Service" and its description is "Helps guard against time change attempts targeting known and newly discovered vulnerabilities in network time protocols." Newer versions create the "MaintenaceSrv" service, which misspells the word "maintenance."
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat can impersonate Windows services and antivirus products to avoid detection on compromised systems.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA has named a service it establishes on victim machines as "TaskFrame" to hide its malicious purpose.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity has named services to appear legitimate.
   </Example>
   <Example id="S1042" name="SUGARDUMP">
    SUGARDUMP's scheduled task has been named MicrosoftInternetExplorerCrashRepoeterTaskMachineUA or MicrosoftEdgeCrashRepoeterTaskMachineUA, depending on the Windows OS version.
   </Example>
   <Example id="S1011" name="Tarrask">
    Tarrask creates a scheduled task called "WinUpdate" to re-establish any dropped  C2 connections.
   </Example>
   <Example id="S0668" name="TinyTurla">
    TinyTurla has mimicked an existing Windows service by being installed as Windows Time Service.
   </Example>
   <Example id="S0178" name="Truvasys">
    To establish persistence, Truvasys adds a Registry Run key with a value "TaskMgr" in an attempt to masquerade as the legitimate Windows Task Manager.
   </Example>
   <Example id="S0647" name="Turian">
    Turian can disguise as a legitimate service to blend into normal operations.
   </Example>
   <Example id="S0180" name="Volgmer">
    Some Volgmer variants add new services with display names generated by a list of hard-coded strings such as Application, Background, Security, and Windows, presumably as a way to masquerade as a legitimate service.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used scheduled tasks to install TrickBot, using task names to appear legitimate such as WinDotNet, GoogleTask, or Sysnetsf.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has created a run key named Dropbox Update Setup to mask a persistence mechanism for a malicious binary.
   </Example>
   <Example id="S1013" name="ZxxZ">
    ZxxZ has been disguised as a Windows security update service.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0003" name="Scheduled Job">
    Scheduled Job Metadata | Scheduled Job Modification
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Creation | Service Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1036.005" name="Masquerading: Match Legitimate Name or Location">
  Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Containers, Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Application Control
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-177
  </CAPEC_ID>
  <Examples>
   <Example id="G0018" name="admin@338">
    admin@338 actors used the following command to rename one of their tools to a benign file name: ren "%temp%\upload" audiodg.exe
   </Example>
   <Example id="G1007" name="Aoqin Dragon">
    Aoqin Dragon has used fake icons including antivirus and external drives to disguise malicious payloads.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed has the ability to rename its payload to ESTCommon.dll to masquerade as a DLL belonging to ESTsecurity.
   </Example>
   <Example id="G0006" name="APT1">
    The file name AcroRD32.exe, a legitimate process name for Adobe's Acrobat Reader, was used by APT1 as a name for malware.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has changed extensions on files containing exfiltrated data to make them appear benign, and renamed a web shell instance to appear as a legitimate OWA page.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 renamed software and DLL's with legitimate names to appear benign.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has renamed a NetCat binary to kb-10233.exe to masquerade as a Windows update. APT32 has also renamed a Cobalt Strike beacon payload to install_flashplayers.exe.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used malware disguised as Mozilla Firefox and a tool named mfevtpse.exe to proxy C2 communications, closely mimicking a legitimate McAfee file mfevtps.exe.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 attempted to masquerade their files as popular anti-virus software.
   </Example>
   <Example id="S0475" name="BackConfig">
    BackConfig has hidden malicious payloads in %USERPROFILE%\Adobe\Driver\dwg\ and mimicked the legitimate DHCP service binary.
   </Example>
   <Example id="G0135" name="BackdoorDiplomacy">
    BackdoorDiplomacy has dropped implants in folders named for legitimate software.
   </Example>
   <Example id="S0606" name="Bad Rabbit">
    Bad Rabbit has masqueraded as a Flash Player installer through the executable file install_flash_player.exe.
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS attempts to hide its payloads using legitimate filenames.
   </Example>
   <Example id="S0534" name="Bazar">
    The Bazar loader has named malicious shortcuts "adobe" and mimicked communications software.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has renamed malicious code to msacm32.dll to hide within a legitimate library; earlier versions were disguised as winhelp.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has attempted to hide its payload by using legitimate file names such as "iconcache.db".
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has masqueraded their XMRIG payload name by naming it wercplsupporte.dll after the legitimate wercplsupport.dll file.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has given malware the same name as an existing file on the file share server to cause users to unwittingly launch and install the malware on additional systems.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee has named component DLLs "RapportGP.dll" to match those used by the security company Trusteer.
   </Example>
   <Example id="S0482" name="Bundlore">
    Bundlore has disguised a malicious .app file as a Flash Player update.
   </Example>
   <Example id="S0274" name="Calisto">
    Calisto's installation file is an unsigned DMG image under the guise of Intego’s security solution for mac.
   </Example>
   <Example id="G0008" name="Carbanak">
    Carbanak has named malware "svchost.exe," which is the name of the Windows shared service host program.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp has masqueraded as Windows system file names, as well as "chkntfs.exe" and "syscron.exe".
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes has used an unsigned, crafted DLL module named hha.dll that was designed to look like a legitimate 32-bit Windows DLL.
   </Example>
   <Example id="S0144" name="ChChes">
    ChChes copies itself to an .exe file with a filename that is likely intended to imitate Norton Antivirus but has several letters reversed (e.g. notron.exe).
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has renamed malware to GoogleUpdate.exe and WinRAR to jucheck.exe, RecordedTV.ms, teredo.tmp, update.exe, and msadcs1.exe.
   </Example>
   <Example id="S1041" name="Chinoxy">
    Chinoxy has used the name eoffice.exe in attempt to appear as a legitimate file.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba has been disguised as legitimate 360 Total Security Antivirus and OpenVPN programs.
   </Example>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink can rename its running process to
   </Example>
   <Example id="S1014" name="DanBot">
    DanBot files have been named UltraVNC.exe and WINVNC.exe to appear as legitimate VNC tools.
   </Example>
   <Example id="S0334" name="DarkComet">
    DarkComet has dropped itself onto victim machines with file names such as WinDefender.Exe and winupdate.exe in an apparent attempt to masquerade as a legitimate file.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel has used malware that is disguised as a Secure Shell (SSH) tool.
   </Example>
   <Example id="S0187" name="Daserf">
    Daserf uses file and folder names related to legitimate programs in order to blend in, such as HP, Intel, Adobe, and perflogs.
   </Example>
   <Example id="S0600" name="Doki">
    Doki has disguised a file as a Linux kernel module.
   </Example>
   <Example id="S0694" name="DRATzarus">
    DRATzarus has been named Flash.exe, and its dropper has been named IExplorer.
   </Example>
   <Example id="S0567" name="Dtrack">
    One of Dtrack can hide in replicas of legitimate programs like OllyDbg, 7-Zip, and FileZilla.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca used the command move
   </Example>
   <Example id="S0605" name="EKANS">
    EKANS has been disguised as update.exe to appear as a valid executable.
   </Example>
   <Example id="S0081" name="Elise">
    If installing itself as a service fails, Elise instead writes itself as a file named svchost.exe saved in %APPDATA%\Microsoft\Network.
   </Example>
   <Example id="S0171" name="Felismus">
    Felismus has masqueraded as legitimate Adobe Content Management System files.
   </Example>
   <Example id="G0137" name="Ferocious Kitten">
    Ferocious Kitten has named malicious files update.exe and loaded them into the compromise host's "Public" folder.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has attempted to run Darkside ransomware with the filename sleep.exe.
   </Example>
   <Example id="S0182" name="FinFisher">
    FinFisher renames one of its .dll files to uxtheme.dll in an apparent attempt to masquerade as a legitimate file.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb can be disguised as a Visual Studio file such as Windows.Data.TimeZones.zh-PH.pri to evade detection. Also, FoggyWeb's loader can mimic a genuine dll file that carries out the same import functions as the legitimate Windows version.dll file.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has named binaries and configuration files svhost and dllhost respectively to appear legitimate.
   </Example>
   <Example id="S0410" name="Fysbis">
    Fysbis has masqueraded as trusted software rsyncd and dbus-inotifier.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has used legitimate process names to hide malware including svchosst.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium has named malicious binaries serv.exe, winprint.dll, and chrome_elf.dll and has set its persistence in the Registry with the key value Chrome Update to appear legitimate.
   </Example>
   <Example id="S0493" name="GoldenSpy">
    GoldenSpy's setup file installs initial executables under the folder %WinDir%\System32\PluginManager.
   </Example>
   <Example id="S0588" name="GoldMax">
    GoldMax has used filenames that matched the system name, and appeared as a scheduled task impersonating systems management software within the corresponding ProgramData subfolder.
   </Example>
   <Example id="S0477" name="Goopy">
    Goopy has impersonated the legitimate goopdate.dll, which was dropped on the target system with a legitimate GoogleUpdate.exe.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro has named malicious browser extensions and update files to appear legitimate.
   </Example>
   <Example id="S0690" name="Green Lambert">
    Green Lambert has been disguised as a Growl help file.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper has used the name postgressql.exe to mask a malicious payload.
   </Example>
   <Example id="S0698" name="HermeticWizard">
    HermeticWizard has been named exec_32.dll to mimic a legitimate MS Outlook .dll.
   </Example>
   <Example id="S0070" name="HTTPBrowser">
    HTTPBrowser's installer contains a malicious file named navlu.dll to decrypt and run the RAT. navlu.dll is also the name of a legitimate Symantec DLL.
   </Example>
   <Example id="S1022" name="IceApple">
    IceApple .NET assemblies have used App_Web_ in their file names to appear legitimate.
   </Example>
   <Example id="G0119" name="Indrik Spider">
    Indrik Spider used fake updates for FlashPlayer plugin and Google Chrome as initial infection vectors.
   </Example>
   <Example id="S0259" name="InnaputRAT">
    InnaputRAT variants have attempted to appear legitimate by using the file names SafeApp.exe and NeutralApp.exe.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole has disguised its droppers as legitimate software or documents, matching their original names and locations, and saved its files as mpr.dll in the Windows folder.
   </Example>
   <Example id="S0015" name="Ixeshe">
    Ixeshe has used registry values and file names associated with Adobe software, such as AcroRd32.exe.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has dropped their malware into legitimate installed software paths including: C:\ProgramFiles\Realtek\Audio\HDA\AERTSr.exe, C:\Program Files (x86)\Foxit Software\Foxit Reader\FoxitRdr64.exe, C:\Program Files (x86)\Adobe\Flash Player\AddIns\airappinstaller\airappinstall.exe, and C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd64.exe.
   </Example>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY has masqueraded as a legitimate Windows tool.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has renamed malware to legitimate names such as ESTCommon.dll or patch.dll.
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS has been disguised as legitimate software programs associated with the travel and airline industries.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has created a shortcut called "Anti virus service.lnk" in an apparent attempt to masquerade as a legitimate file.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has renamed malicious code to disguise it as Microsoft's narrator and other legitimate files.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron has used filenames associated with Exchange and Outlook for binary and configuration files, such as winmail.dat.
   </Example>
   <Example id="S0582" name="LookBack">
    LookBack has a C2 proxy tool that masquerades as GUP.exe, which is software used by Notepad++.
   </Example>
   <Example id="S0409" name="Machete">
    Machete renamed payloads to masquerade as legitimate Google Chrome, Java, Dropbox, Adobe Reader and Python executables.
   </Example>
   <Example id="G0095" name="Machete">
    Machete's Machete MSI installer has masqueraded as a legitimate Adobe Acrobat Reader installer.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has used the name dllhost.exe to mask a malicious tool used in C2.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can masquerade as update.exe and svehost.exe; it has also mimicked legitimate Telegram and Chrome files.
   </Example>
   <Example id="S0500" name="MCMD">
    MCMD has been named Readme.txt to appear legitimate.
   </Example>
   <Example id="S0459" name="MechaFlounder">
    MechaFlounder has been downloaded as a file named lsass.exe, which matches the legitimate Windows file.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has been seen changing malicious files to appear legitimate.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has disguised an MSI file as the Adobe Acrobat Reader Installer and has masqueraded payloads as OneDrive, WhatsApp, or Spotify, for example.
   </Example>
   <Example id="S0084" name="Mis-Type">
    Mis-Type saves itself as a file named msdtc.exe, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service binary.
   </Example>
   <Example id="S0083" name="Misdat">
    Misdat saves itself as a file named msdtc.exe, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service binary.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has disguised malicious executables and used filenames and Registry key names associated with Windows Defender.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has used names like adobeupdate.dat and PotPlayerDB.dat to disguise PlugX, and a file named OneDrive.exe to load a Cobalt Strike payload.
   </Example>
   <Example id="G0019" name="Naikon">
    Naikon has disguised malicious programs as Google Chrome, Adobe, and VMware executables.
   </Example>
   <Example id="S0630" name="Nebulae">
    Nebulae uses functions named StartUserModeBrowserInjection and StopUserModeBrowserInjection indicating that it's trying to imitate chrome_frame_helper.dll.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE has masqueraded as legitimate software including TeamViewer and macOS Finder.
   </Example>
   <Example id="S0353" name="NOKKI">
    NOKKI is written to %LOCALAPPDATA%\MicroSoft Updatea\svServiceUpdate.exe prior being executed in a new process in an apparent attempt to masquerade as a legitimate folder and file.
   </Example>
   <Example id="S0340" name="Octopus">
    Octopus has been disguised as legitimate programs, such as Java and Telegram Messenger.
   </Example>
   <Example id="S0138" name="OLDBAIT">
    OLDBAIT installs itself in %ALLUSERPROFILE%\Application Data\Microsoft\MediaPlayer\updatewindws.exe; the directory name is missing a space and the file name is missing the letter "o."
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors renamed a malicious executable to rundll32.exe to allow it to blend in with other Windows system files.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, the threat actors used a legitimate Windows executable and secure directory for their payloads to bypass UAC.
   </Example>
   <Example id="C0013" name="Operation Sharpshooter">
    During Operation Sharpshooter, threat actors installed Rising Sun in the Startup folder and disguised it as mssync.exe.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, the threat actors renamed some tools and executables to appear as legitimate programs.
   </Example>
   <Example id="S0402" name="OSX/Shlayer">
    OSX/Shlayer can masquerade as a Flash Player update.
   </Example>
   <Example id="S0072" name="OwaAuth">
    OwaAuth uses the filename owaauth.dll, which is a legitimate file that normally resides in %ProgramFiles%\Microsoft\Exchange Server\ClientAccess\Owa\Auth\; the malicious file by the same name is saved in %ProgramFiles%\Microsoft\Exchange Server\ClientAccess\Owa\bin\.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork installed its payload in the startup programs folder as "Baidu Software Update." The group also adds its second stage payload to the startup programs as "Net Monitor."
   </Example>
   <Example id="S1050" name="PcShare">
    PcShare has been named wuauclt.exe to appear as the legitimate Windows Update AutoUpdate Client.
   </Example>
   <Example id="S0587" name="Penquin">
    Penquin has mimicked the Cron binary to hide itself on compromised systems.
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon modules are stored on disk with seemingly benign names including use of a file extension associated with a popular word processor.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX has been disguised as legitimate Adobe and PotPlayer files.
   </Example>
   <Example id="S0453" name="Pony">
    Pony has used the Adobe Reader icon for the downloaded file to look more trustworthy.
   </Example>
   <Example id="G0033" name="Poseidon Group">
    Poseidon Group tools attempt to spoof anti-virus processes as a means of self-defense.
   </Example>
   <Example id="S1046" name="PowGoop">
    PowGoop has used a DLL named Goopdate.dll to impersonate a legitimate Google update file.
   </Example>
   <Example id="G0056" name="PROMETHIUM">
    PROMETHIUM has disguised malicious installer files by bundling them with legitimate software installers.
   </Example>
   <Example id="S0196" name="PUNCHBUGGY">
    PUNCHBUGGY mimics filenames from %SYSTEM%\System32 to hide DLLs in %WINDIR% and/or %TEMP%.
   </Example>
   <Example id="S1032" name="PyDCrypt">
    PyDCrypt has dropped DCSrv under the svchost.exe name to disk.
   </Example>
   <Example id="S0583" name="Pysa">
    Pysa has executed a malicious executable by naming it svchost.exe.
   </Example>
   <Example id="S0269" name="QUADAGENT">
    QUADAGENT used the PowerShell filenames Office365DCOMCheck.ps1 and SystemDiskClean.ps1.
   </Example>
   <Example id="S0565" name="Raindrop">
    Raindrop was installed under names that resembled legitimate Windows file and directory names.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay has used names to mimic legitimate software including "vmtoolsd.exe" to spoof Vmtools.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay has masqueraded as a 7zip installer.
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT has masqueraded as VMware.exe.
   </Example>
   <Example id="S0125" name="Remsec">
    The Remsec loader implements itself with the name Security Support Provider, a legitimate Windows function. Various Remsec .exe files mimic legitimate file names used by Microsoft, Symantec, Kaspersky, Hewlett-Packard, and VMWare. Remsec also disguised malicious modules using similar filenames as custom network encryption software on victims.
   </Example>
   <Example id="S0496" name="REvil">
    REvil can mimic the names of known executables.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has used shell scripts which download mining executables and saves them with the filename "java".
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk has constructed legitimate appearing installation folder paths by calling GetWindowsDirectoryW and then inserting a null byte at the fourth character of the path. For Windows Vista or higher, the path would appear as C:\Users\Public.
   </Example>
   <Example id="S0085" name="S-Type">
    S-Type may save itself as a file named msdtc.exe, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service binary.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has been disguised as a legitimate executable, including as Windows SDK.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has avoided detection by naming a malicious binary explorer.exe.
   </Example>
   <Example id="S1019" name="Shark">
    Shark binaries have been named audioddg.pdb and Winlangdb.pdb in order to appear legitimate.
   </Example>
   <Example id="S0445" name="ShimRatReporter">
    ShimRatReporter spoofed itself as AlphaZawgyl_font.exe, a specialized Unicode font.
   </Example>
   <Example id="S0589" name="Sibot">
    Sibot has downloaded a DLL to the C:\windows\system32\drivers\ folder and renamed it with a .sys extension.
   </Example>
   <Example id="G1008" name="SideCopy">
    SideCopy has used a legitimate DLL file name, Duser.dll to disguise a malicious remote access tool.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has named malicious files rekeywiz.exe to match the name of a legitimate Windows executable.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has named its backdoor "WINWORD.exe".
   </Example>
   <Example id="S0468" name="Skidmap">
    Skidmap has created a fake rm binary to replace the legitimate Linux binary.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA has mimicked the names of known executables, such as mediaplayer.exe.
   </Example>
   <Example id="S1035" name="Small Sieve">
    Small Sieve can use variations of Microsoft and Outlook spellings, such as "Microsift", in its file names to avoid detection.
   </Example>
   <Example id="G0054" name="Sowbug">
    Sowbug named its tools to masquerade as Windows or Adobe Reader software, such as by using the file name adobecms.exe and the directory CSIDL_APPDATA\microsoft\security.
   </Example>
   <Example id="S0058" name="SslMM">
    To establish persistence, SslMM identifies the Start Menu Startup directory and drops a link to its own executable disguised as an "Office Start," "Yahoo Talk," "MSN Gaming Z0ne," or "MSN Talk" shortcut.
   </Example>
   <Example id="S0188" name="Starloader">
    Starloader has masqueraded as legitimate software update packages such as Adobe Acrobat Reader and Intel.
   </Example>
   <Example id="S1034" name="StrifeWater">
    StrifeWater has been named calc.exe to appear as a legitimate calculator program.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity has been bundled with legitimate software installation files for disguise.
   </Example>
   <Example id="S1042" name="SUGARDUMP">
    SUGARDUMP has been named CrashReporter.exe to appear as a legitimate Mozilla executable.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST created VBScripts that were named after existing services or folders to blend into legitimate activities.
   </Example>
   <Example id="S0562" name="SUNSPOT">
    SUNSPOT was identified on disk with a filename of taskhostsvc.exe and it created an encrypted log file at C:\Windows\Temp\vmware-vmdmp.log.
   </Example>
   <Example id="S0578" name="SUPERNOVA">
    SUPERNOVA has masqueraded as a legitimate SolarWinds DLL.
   </Example>
   <Example id="S0586" name="TAINTEDSCRIBE">
    The TAINTEDSCRIBE main executable has disguised itself as Microsoft’s Narrator.
   </Example>
   <Example id="S1011" name="Tarrask">
    Tarrask has masqueraded as executable files such as winupdate.exe, date.exe, or win.exe.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has replaced .dockerd and .dockerenv with their own scripts and cryptocurrency mining software.
   </Example>
   <Example id="S0560" name="TEARDROP">
    TEARDROP files had names that resembled legitimate Window file and directory names.
   </Example>
   <Example id="G0088" name="TEMP.Veles">
    TEMP.Veles has renamed files to look like legitimate files, such as Windows update files or Schneider Electric application files.
   </Example>
   <Example id="S0595" name="ThiefQuest">
    ThiefQuest prepends a copy of itself to the beginning of an executable file while maintaining the name of the executable.
   </Example>
   <Example id="S0665" name="ThreatNeedle">
    ThreatNeedle chooses its payload creation path from a randomly selected service name from netsvc.
   </Example>
   <Example id="S0668" name="TinyTurla">
    TinyTurla has been deployed as w64time.dll to appear legitimate.
   </Example>
   <Example id="G0134" name="Transparent Tribe">
    Transparent Tribe can mimic legitimate Windows directories by using the same icons and names.
   </Example>
   <Example id="S0609" name="TRITON">
    TRITON disguised itself as the legitimate Triconex Trilog application.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has hidden payloads in Flash directories and fake installer files.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has used strings from legitimate system files and existing folders for its file, folder, and Registry entry names.
   </Example>
   <Example id="S0136" name="USBStealer">
    USBStealer mimics a legitimate Russian program called USB Disk Security.
   </Example>
   <Example id="G0107" name="Whitefly">
    Whitefly has named the malicious DLL the same name as DLLs belonging to legitimate software from various security vendors.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    A Winnti for Windows implant file was named ASPNET_FILTER.DLL, mimicking the legitimate ASP.NET ISAPI filter DLL with the same name.
   </Example>
   <Example id="G0090" name="WIRTE">
    WIRTE has named a first stage dropper Kaspersky Update Agent in order to appear legitimate.
   </Example>
   <Example id="S0086" name="ZLib">
    ZLib mimics the resource version information of legitimate Realtek Semiconductor, Nvidia, or Synaptics modules.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1045" name="Code Signing">
    Require signed binaries and images.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Use tools that restrict program execution via application control by attributes other than file name for common operating system utilities that are needed.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Use file system access controls to protect folders such as C:\Windows\System32.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Metadata
   </Detection>
   <Detection id="DS0007" name="Image">
    Image Metadata
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1036.006" name="Masquerading: Space after Filename">
  Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-649
  </CAPEC_ID>
  <Examples>
   <Example id="S0276" name="Keydnap">
    Keydnap puts a space after a false .jpg extension so that execution actually goes through the Terminal.app program.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0022" name="File">
    File Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1036.007" name="Masquerading: Double File Extension">
  Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed (ex: File.txt.exe may render in some views as just File.txt). However, the second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser (ex: explorer.exe), as well as in any software configured using or similar to the system’s policies.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Examples>
   <Example id="S0534" name="Bazar">
    The Bazar loader has used dual-extension executable files such as PreviewReport.DOC.exe.
   </Example>
   <Example id="S1015" name="Milan">
    Milan has used an executable named companycatalog.exe.config to appear benign.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has used an additional filename extension to hide the true file type.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1028" name="Operating System Configuration">
    Disable the default to "hide file extensions for known file types" in Windows OS.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Train users to look for double extensions in filenames, and in general use training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation | File Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1556" name="Modify Authentication Process">
  Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts.
  <Tactics>
   Credential Access, Defense Evasion, Persistence
  </Tactics>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Linux, Network, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0377" name="Ebury">
    Ebury can intercept private keys using a trojanized ssh-add function.
   </Example>
   <Example id="S0487" name="Kessel">
    Kessel has trojanized the ssh_login and user-auth_pubkey functions to steal plaintext credentials.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can create a backdoor in KeePass using a malicious config file and in TortoiseSVN using a registry hook.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Review authentication logs to ensure that mechanisms such as enforcement of MFA are functioning as intended.Periodically review the hybrid identity solution in use for any discrepancies. For example, review all Pass Through Authentication (PTA) agents in the Azure Management Portal to identify any unwanted or unapproved ones.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Integrating multi-factor authentication (MFA) as part of organizational policy can greatly reduce the risk of an adversary gaining control of valid credentials that may be used for additional tactics such as initial access, lateral movement, and collecting information. MFA can also be used to restrict access to cloud resources and APIs.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Ensure only valid password filters are registered. Filter DLLs must be present in Windows installation directory (C:\Windows\System32\ by default) of a domain controller and/or local computer with a corresponding entry in HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Notification Packages.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Ensure that AllowReversiblePasswordEncryption property is set to disabled unless there are application requirements.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Audit domain and local accounts as well as their permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account.
   </Mitigation>
   <Mitigation id="M1025" name="Privileged Process Integrity">
    Enabled features, such as Protected Process Light (PPL), for LSA.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Restrict write access to the /Library/Security/SecurityAgentPlugins directory.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Ensure that proper policies are implemented to dictate the the secure enrollment and deactivation of authentication mechanisms, such as MFA, for user accounts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Modification
   </Detection>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Access
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication | User Account Modification
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1556.001" name="Modify Authentication Process: Domain Controller Authentication">
  Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.
  <Tactics>
   Credential Access, Defense Evasion, Persistence
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Examples>
   <Example id="G0114" name="Chimera">
    Chimera's malware has altered the NTLM authentication program on domain controllers to allow Chimera to login without a valid credential.
   </Example>
   <Example id="S0007" name="Skeleton Key">
    Skeleton Key is used to patch an enterprise domain controller authentication process with a backdoor password. It allows adversaries to bypass the standard authentication system to use a defined password for all accounts authenticating to that domain controller.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Integrating multi-factor authentication (MFA) as part of organizational policy can greatly reduce the risk of an adversary gaining control of valid credentials that may be used for additional tactics such as initial access, lateral movement, and collecting information. MFA can also be used to restrict access to cloud resources and APIs.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Audit domain and local accounts as well as their permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account.
   </Mitigation>
   <Mitigation id="M1025" name="Privileged Process Integrity">
    Enabled features, such as Protected Process Light (PPL), for LSA.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1556.002" name="Modify Authentication Process: Password Filter DLL">
  Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated.
  <Tactics>
   Credential Access, Defense Evasion, Persistence
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM
  </Permissions_Required>
  <Examples>
   <Example id="S0125" name="Remsec">
    Remsec harvests plain-text credentials as a password filter registered on domain controllers.
   </Example>
   <Example id="G0041" name="Strider">
    Strider has registered its persistence module on domain controllers as a Windows LSA (Local System Authority) password filter to acquire credentials any time a domain, local user, or administrator logs in or changes a password.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1028" name="Operating System Configuration">
    Ensure only valid password filters are registered. Filter DLLs must be present in Windows installation directory (C:\Windows\System32\ by default) of a domain controller and/or local computer with a corresponding entry in HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Notification Packages.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1556.003" name="Modify Authentication Process: Pluggable Authentication Modules">
  Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is pam_unix.so, which retrieves, sets, and verifies account authentication information in /etc/passwd and /etc/shadow.
  <Tactics>
   Credential Access, Defense Evasion, Persistence
  </Tactics>
  <Platforms>
   Linux, macOS
  </Platforms>
  <Permissions_Required>
   root
  </Permissions_Required>
  <Examples>
   <Example id="S0377" name="Ebury">
    Ebury can deactivate PAM modules to tamper with the sshd configuration.
   </Example>
   <Example id="S0468" name="Skidmap">
    Skidmap has the ability to replace the pam_unix.so file on an infected machine with its own malicious version that accepts a specific backdoor password for all users.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Integrating multi-factor authentication (MFA) as part of organizational policy can greatly reduce the risk of an adversary gaining control of valid credentials that may be used for additional tactics such as initial access, lateral movement, and collecting information.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Limit access to the root account and prevent users from modifying PAM components through proper privilege separation (ex SELinux, grsecurity, AppArmor, etc.) and limiting Privilege Escalation opportunities.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1556.004" name="Modify Authentication Process: Network Device Authentication">
  Adversaries may use Patch System Image to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.
  <Tactics>
   Credential Access, Defense Evasion, Persistence
  </Tactics>
  <Platforms>
   Network
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Examples>
   <Example id="S0519" name="SYNful Knock">
    SYNful Knock has the capability to add its own custom backdoor password when it modifies the operating system of the affected network device.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication for user and privileged accounts. Most embedded network devices support TACACS+ and/or RADIUS.  Follow vendor prescribed best practices for hardening access control.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Restrict administrator accounts to as few individuals as possible, following least privilege principles.  Prevent credential overlap across systems of administrator and privileged accounts, particularly between network and non-network platforms, such as servers or endpoints.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1556.005" name="Modify Authentication Process: Reversible Encryption">
  An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The AllowReversiblePasswordEncryption property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.
  <Tactics>
   Credential Access, Defense Evasion, Persistence
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1027" name="Password Policies">
    Ensure that AllowReversiblePasswordEncryption property is set to disabled unless there are application requirements.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Audit domain and local accounts as well as their permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Modification
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1556.006" name="Modify Authentication Process: Multi-Factor Authentication">
  Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.
  <Tactics>
   Credential Access, Defense Evasion, Persistence
  </Tactics>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Multi-Factor Authentication
  </Defense_Bypassed>
  <Examples>
   <Example id="S0677" name="AADInternals">
    The AADInternals Set-AADIntUserMFA command can be used to disable MFA for a specified user.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Review MFA actions alongside authentication logs to ensure that MFA-based logins are functioning as intended.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Ensure that MFA and MFA policies and requirements are properly implemented for existing and deactivated or dormant accounts and devices. If possible, consider configuring MFA solutions to "fail closed" rather than grant access in case of serious errors.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Ensure that proper policies are implemented to dictate the secure enrollment and deactivation of MFA for user accounts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Modification
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication | User Account Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1556.007" name="Modify Authentication Process: Hybrid Identity">
  Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.
  <Tactics>
   Credential Access, Defense Evasion, Persistence
  </Tactics>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Office 365, SaaS, Windows
  </Platforms>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals can inject a malicious DLL (PTASpy) into the AzureADConnectAuthenticationAgentService to backdoor Azure AD Pass-Through Authentication.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has edited the Microsoft.IdentityServer.Servicehost.exe.config file to load a malicious DLL into the AD FS process, thereby enabling persistent access to any service federated with AD FS for a user with a specified User Principal Name.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Periodically review the hybrid identity solution in use for any discrepancies. For example, review all PTA agents in the Azure Management Portal to identify any unwanted or unapproved ones.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Integrating multi-factor authentication (MFA) as part of organizational policy can greatly reduce the risk of an adversary gaining control of valid credentials that may be used for additional tactics such as initial access, lateral movement, and collecting information. MFA can also be used to restrict access to cloud resources and APIs.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Limit on-premises accounts with access to the hybrid identity solution in place. For example, limit Azure AD Global Administrator accounts to only those required, and ensure that these are dedicated cloud-only accounts rather than hybrid ones.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1578" name="Modify Cloud Compute Infrastructure">
  An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   IaaS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Routinely monitor user permissions to ensure only the expected users have the capability to modify cloud compute infrastructure components.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit permissions for creating, deleting, and otherwise altering compute components in accordance with least privilege. Organizations should limit the number of users within the organization with an IAM role that has administrative privileges, strive to reduce all permanent privileged role assignments, and conduct periodic entitlement reviews on IAM users, roles and policies.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0030" name="Instance">
    Instance Creation | Instance Deletion | Instance Metadata | Instance Modification | Instance Start | Instance Stop
   </Detection>
   <Detection id="DS0020" name="Snapshot">
    Snapshot Creation | Snapshot Deletion | Snapshot Metadata | Snapshot Modification
   </Detection>
   <Detection id="DS0034" name="Volume">
    Volume Creation | Volume Deletion | Volume Metadata | Volume Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1578.001" name="Modify Cloud Compute Infrastructure: Create Snapshot">
  An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in Revert Cloud Instance where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   IaaS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Routinely check user permissions to ensure only the expected users have the capability to create snapshots and backups.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit permissions for creating snapshots or backups in accordance with least privilege. Organizations should limit the number of users within the organization with an IAM role that has administrative privileges, strive to reduce all permanent privileged role assignments, and conduct periodic entitlement reviews on IAM users, roles and policies.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0020" name="Snapshot">
    Snapshot Creation | Snapshot Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1578.002" name="Modify Cloud Compute Infrastructure: Create Cloud Instance">
  An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may Create Snapshot of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect Data from Local System or for Remote Data Staging.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   IaaS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has created new virtual machines within the target's cloud environment after leveraging credential access to cloud assets.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Routinely check user permissions to ensure only the expected users have the capability to create new instances.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit permissions for creating new instances in accordance with least privilege. Organizations should limit the number of users within the organization with an IAM role that has administrative privileges, strive to reduce all permanent privileged role assignments, and conduct periodic entitlement reviews on IAM users, roles and policies.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0030" name="Instance">
    Instance Creation | Instance Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1578.003" name="Modify Cloud Compute Infrastructure: Delete Cloud Instance">
  An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence.  Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   IaaS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has deleted the target's systems and resources in the cloud to trigger the organization's incident and crisis response process.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Routinely check user permissions to ensure only the expected users have the capability to delete new instances.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit permissions for deleting new instances in accordance with least privilege. Organizations should limit the number of users within the organization with an IAM role that has administrative privileges, strive to reduce all permanent privileged role assignments, and conduct periodic entitlement reviews on IAM users, roles and policies.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0030" name="Instance">
    Instance Deletion | Instance Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1578.004" name="Modify Cloud Compute Infrastructure: Revert Cloud Instance">
  An adversary may revert changes made to a cloud instance after they have performed malicious activities in attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be accomplished by restoring virtual machine (VM) or data storage snapshots through the cloud management dashboard or cloud APIs.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   IaaS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Mitigations/>
  <Detections>
   <Detection id="DS0030" name="Instance">
    Instance Metadata | Instance Modification | Instance Start | Instance Stop
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1112" name="Modify Registry">
  Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User
  </Permissions_Required>
  <Defense_Bypassed>
   Host forensic analysis
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-203
  </CAPEC_ID>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals can modify registry keys as part of setting a new pass-through authentication agent.
   </Example>
   <Example id="S0045" name="ADVSTORESHELL">
    ADVSTORESHELL is capable of setting and deleting Registry values.
   </Example>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla can achieve persistence by modifying Registry key entries.
   </Example>
   <Example id="S1025" name="Amadey">
    Amadey has overwritten registry keys for persistence.
   </Example>
   <Example id="G0073" name="APT19">
    APT19 uses a Port 22 malware variant to modify several Registry keys.
   </Example>
   <Example id="G0050" name="APT32">
    APT32's backdoor has modified the Windows Registry to store the backdoor's configuration.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 uses a tool called CLEANTOAD that has the capability to modify Registry keys.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used a malware variant called GOODLUCK to modify the registry in order to steal credentials.
   </Example>
   <Example id="S0438" name="Attor">
    Attor's dispatcher can modify the Run registry key.
   </Example>
   <Example id="S0640" name="Avaddon">
    Avaddon modifies several registry keys for persistence and UAC bypass.
   </Example>
   <Example id="S0031" name="BACKSPACE">
    BACKSPACE is capable of deleting Registry keys, sub-keys, and values on a victim system.
   </Example>
   <Example id="S0245" name="BADCALL">
    BADCALL modifies the firewall Registry key SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\StandardProfileGloballyOpenPorts\List.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot writes data into the Registry key HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Pniumj.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has deleted Registry keys to clean up its prior activity.
   </Example>
   <Example id="S0570" name="BitPaymer">
    BitPaymer can set values in the Registry to help in execution.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has used Windows Registry modifications to specify a DLL payload.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT sets HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows\Load to point to its executable.
   </Example>
   <Example id="S0261" name="Catchamas">
    Catchamas creates three Registry keys to establish persistence by adding a Windows Service.
   </Example>
   <Example id="S0572" name="Caterpillar WebShell">
    Caterpillar WebShell has a command to modify a Registry key.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes stored its instructions in a config file in the Registry.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower can remove persistence-related artifacts from the Registry.
   </Example>
   <Example id="S0023" name="CHOPSTICK">
    CHOPSTICK may store RC4 encrypted configuration information in the Windows Registry.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can set and delete Registry keys.
   </Example>
   <Example id="S0611" name="Clop">
    Clop can make modifications to Registry keys.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can modify Registry values within HKEY_CURRENT_USER\Software\Microsoft\Office\\Excel\Security\AccessVBOM\ to enable the execution of additional code.
   </Example>
   <Example id="S0126" name="ComRAT">
    ComRAT has encrypted and stored its orchestrator code in the Registry as well as a PowerShell script into the WsqmCons Registry key.
   </Example>
   <Example id="S0608" name="Conficker">
    Conficker adds keys to the Registry at HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services and various other Registry locations.
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can create a registry key using wdigest.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson can set a Registry key to determine how long it has been installed and possibly to indicate the version number.
   </Example>
   <Example id="S0527" name="CSPY Downloader">
    CSPY Downloader can write to the Registry under the %windir% variable to execute tasks.
   </Example>
   <Example id="S0334" name="DarkComet">
    DarkComet adds a Registry value for its installation routine to the Registry Key HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System Enable LUA="0" and HKEY_CURRENT_USER\Software\DC3_FEXEC.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman can store configuration strings, keylogger, and output of components in the Registry.
   </Example>
   <Example id="S1033" name="DCSrv">
    DCSrv has created Registry keys for persistence.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has modified the Registry to perform multiple techniques through the use of Reg.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca modified the registry using the command reg add "HKEY_CURRENT_USER\Environment" /v UserInitMprLogonScript /t REG_SZ /d "
   </Example>
   <Example id="G1003" name="Ember Bear">
    Ember Bear has used an open source batch script to modify Windows Defender registry keys.
   </Example>
   <Example id="S0568" name="EVILNUM">
    EVILNUM can make modifications to the Regsitry for persistence.
   </Example>
   <Example id="S0343" name="Exaramel for Windows">
    Exaramel for Windows adds the configuration to the Registry in XML format.
   </Example>
   <Example id="S0569" name="Explosive">
    Explosive has a function to write itself to Registry values.
   </Example>
   <Example id="S0267" name="FELIXROOT">
    FELIXROOT deletes the Registry key HKCU\Software\Classes\Applications\rundll32.exe\shell\open.
   </Example>
   <Example id="S0679" name="Ferocious">
    Ferocious has the ability to add a Class ID in the current user Registry hive to enable persistence mechanisms.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has deleted Registry keys during post compromise cleanup activities.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has removed security settings for VBA macro execution by changing registry values HKCU\Software\Microsoft\Office\&lt;version&gt;\&lt;product&gt;\Security\VBAWarnings and HKCU\Software\Microsoft\Office\&lt;version&gt;\&lt;product&gt;\Security\AccessVBOM.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium has the ability to store its components in the Registry.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT has altered the InstallTime subkey.
   </Example>
   <Example id="G0078" name="Gorgon Group">
    Gorgon Group malware can deactivate security mechanisms in Microsoft Office by editing several keys and values under HKCU\Software\Microsoft\Office\.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can store its configuration in the Registry at HKCU\Software\ under frequently changing names including %USERNAME% and ToolTech-RM.
   </Example>
   <Example id="S0342" name="GreyEnergy">
    GreyEnergy modifies conditions in the Registry and adds keys.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper has the ability to modify Registry keys to disable crash dumps, colors for compressed files, and pop-up information about folders and desktop items.
   </Example>
   <Example id="S0376" name="HOPLIGHT">
    HOPLIGHT has modified Managed Object Format (MOF) files within the Registry to run specific commands and create persistence on the system.
   </Example>
   <Example id="S0203" name="Hydraq">
    Hydraq creates a Registry subkey to register its created service, and can also uninstall itself later by deleting this value. Hydraq's backdoor also enables remote attackers to modify and delete subkeys.
   </Example>
   <Example id="S0537" name="HyperStack">
    HyperStack can add the name of its communication pipe to HKLM\SYSTEM\CurrentControlSet\Services\lanmanserver\parameters\NullSessionPipes.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole has a command to create, set, copy, or delete a specified Registry key or value.
   </Example>
   <Example id="S0271" name="KEYMARBLE">
    KEYMARBLE has a command to create Registry entries for storing data under HKEY_CURRENT_USER\SOFTWARE\Microsoft\WABE\DataPath.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has modified Registry settings for default file associations to enable all macros and for persistence.
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS has added and deleted keys from the Registry.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has modified registry keys of ComSysApp, Svchost, and xmlProv on the machine to gain persistence.
   </Example>
   <Example id="S0397" name="LoJax">
    LoJax has modified the Registry key ‘HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\BootExecute’ from ‘autocheck autochk ’ to ‘autocheck autoche ’.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has modified the Registry as part of its UAC bypass process.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has modified Registry settings for security tools.
   </Example>
   <Example id="S0576" name="MegaCortex">
    MegaCortex has added entries to the Registry for ransom contact information.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has written process names to the Registry, disabled IE browser features, deleted Registry keys, and changed the ExtendedUIHoverTime key.
   </Example>
   <Example id="S1047" name="Mori">
    Mori can write data to HKLM\Software\NFC\IPA and HKLM\Software\NFC\ and delete Registry values.
   </Example>
   <Example id="S0256" name="Mosquito">
    Mosquito stores configuration values under the Registry key HKCU\Software\Microsoft
   </Example>
   <Example id="S0205" name="Naid">
    Naid creates Registry entries that store information about a created service and point to a malicious DLL dropped to disk.
   </Example>
   <Example id="S0336" name="NanoCore">
    NanoCore has the capability to edit the Registry.
   </Example>
   <Example id="S0691" name="Neoichor">
    Neoichor has the ability to configure browser settings by modifying Registry entries under HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer.
   </Example>
   <Example id="S0210" name="Nerex">
    Nerex creates a Registry subkey that registers a new service.
   </Example>
   <Example id="S0457" name="Netwalker">
    Netwalker can add the following registry entry: HKEY_CURRENT_USER\SOFTWARE{8 random characters}.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE stores its configuration file within the Registry.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors used zwShell to establish full remote control of the connected machine and manipulate the Registry.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT can create, delete, or modify a specified Registry key or value.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, the threat actors used batch files that modified registry keys.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, the threat actors enabled Wdigest by changing the HKLM\SYSTEM\\ControlSet001\\Control\\SecurityProviders\\WDigest registry value from 0 (disabled) to 1 (enabled).
   </Example>
   <Example id="S0229" name="Orz">
    Orz can perform Registry operations.
   </Example>
   <Example id="S0664" name="Pandora">
    Pandora can write an encrypted token to the Registry to enable processing of remote commands.
   </Example>
   <Example id="G0040" name="Patchwork">
    A Patchwork payload deletes Resiliency Registry keys created by Microsoft Office applications in an apparent effort to trick users into thinking there were no issues during application runs.
   </Example>
   <Example id="S1050" name="PcShare">
    PcShare can delete its persistence mechanisms from the registry.
   </Example>
   <Example id="S0158" name="PHOREAL">
    PHOREAL is capable of manipulating the Registry.
   </Example>
   <Example id="S0517" name="Pillowmint">
    Pillowmint has stored its malicious payload in the registry key HKLM\SOFTWARE\Microsoft\DRM.
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon has stored its encrypted payload in the Registry.
   </Example>
   <Example id="S0254" name="PLAINTEE">
    PLAINTEE uses reg add to add a Registry Run key for persistence.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX has a module to create, delete, or modify Registry keys.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has made registry modifications to alter its behavior upon execution.
   </Example>
   <Example id="S0012" name="PoisonIvy">
    PoisonIvy creates a Registry subkey that registers a new system device.
   </Example>
   <Example id="S0518" name="PolyglotDuke">
    PolyglotDuke can write encrypted JSON configuration files to the Registry.
   </Example>
   <Example id="S0441" name="PowerShower">
    PowerShower has added a registry key so future powershell.exe instances are spawned off-screen by default, and has removed all registry entries that are left behind during the dropper process.
   </Example>
   <Example id="S0583" name="Pysa">
    Pysa has modified the registry key "SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" and added the ransom note.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can store its configuration information in a randomly named subkey under HKCU\Software\Microsoft.
   </Example>
   <Example id="S0269" name="QUADAGENT">
    QUADAGENT modifies an HKCU Registry key to store a session identifier unique to the compromised system as well as a pre-shared key used for encrypting and decrypting C2 communications.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT has a command to edit the Registry on the victim’s machine.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession can write its configuration file to the Registry.
   </Example>
   <Example id="S0075" name="Reg">
    Reg may be used to interact with and modify the Windows Registry of a local or remote system at the command-line interface.
   </Example>
   <Example id="S0511" name="RegDuke">
    RegDuke can store its encryption key in the Registry.
   </Example>
   <Example id="S0019" name="Regin">
    Regin appears to have functionality to modify remote Registry information.
   </Example>
   <Example id="S0332" name="Remcos">
    Remcos has full control of the Registry, including the ability to modify it.
   </Example>
   <Example id="S0496" name="REvil">
    REvil can save encryption parameters and system information to the Registry.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can modify the HKEY_CURRENT_USER\Software\Microsoft\Office\ registry key so it can bypass the VB object model (VBOM) on a compromised host.
   </Example>
   <Example id="S0090" name="Rover">
    Rover has functionality to remove Registry Run key persistence as a cleanup procedure.
   </Example>
   <Example id="S0148" name="RTM">
    RTM can delete all Registry entries created during its execution.
   </Example>
   <Example id="S0596" name="ShadowPad">
    ShadowPad maintains a configuration block and virtual file system in the Registry.
   </Example>
   <Example id="S0140" name="Shamoon">
    Once Shamoon has access to a network share, it enables the RemoteRegistry service on the target system. It will then connect to the system with RegConnectRegistryW and modify the Registry to disable UAC remote restrictions by setting SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\LocalAccountTokenFilterPolicy to 1.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat has registered two registry keys for shim databases.
   </Example>
   <Example id="S0589" name="Sibot">
    Sibot has installed a second-stage script in the HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\sibot registry key.
   </Example>
   <Example id="G0091" name="Silence">
    Silence can create, delete, or modify a specified Registry key or value.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can modify registry keys, including to enable or disable Remote Desktop Protocol (RDP).
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA can add, modify, and/or delete registry keys. It has changed the proxy configuration of a victim system by modifying the HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap registry.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM has modified registry keys for persistence, to enable credential caching for credential access, and to facilitate lateral movement via RDP.
   </Example>
   <Example id="S0157" name="SOUNDBITE">
    SOUNDBITE is capable of modifying the Registry.
   </Example>
   <Example id="S0142" name="StreamEx">
    StreamEx has the ability to modify the Registry.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet can create registry keys to load driver files.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST had commands that allow an attacker to write or delete registry keys, and was observed stopping services by setting their HKLM\SYSTEM\CurrentControlSet\services\
   </Example>
   <Example id="S0242" name="SynAck">
    SynAck can manipulate Registry keys.
   </Example>
   <Example id="S0663" name="SysUpdate">
    SysUpdate can write its configuration file to Software\Classes\scConfig in either HKEY_LOCAL_MACHINE or HKEY_CURRENT_USER.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used malware to disable Windows Defender through modification of the Registry.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor has the ability to modify the Registry on compromised hosts using RegDeleteValueA and RegCreateKeyExA.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal can set the KeepPrintedJobs attribute for configured printers in SOFTWARE\Microsoft\Windows NT\CurrentVersion\Print\Printers to enable document stealing.
   </Example>
   <Example id="S1011" name="Tarrask">
    Tarrask is able to delete the Security Descriptor (SD) registry subkey in order to "hide" scheduled tasks.
   </Example>
   <Example id="S0560" name="TEARDROP">
    TEARDROP modified the Registry to create a Windows service for itself on a compromised host.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    A Threat Group-3390 tool has created new Registry keys under HKEY_CURRENT_USER\Software\Classes\ and HKLM\SYSTEM\CurrentControlSet\services.
   </Example>
   <Example id="S0665" name="ThreatNeedle">
    ThreatNeedle can save its configuration data as the following RC4-encrypted Registry key: HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\GameCon.
   </Example>
   <Example id="S0668" name="TinyTurla">
    TinyTurla can set its configuration parameters in the Registry.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot can modify registry entries.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used the Registry to store encrypted payloads.
   </Example>
   <Example id="S0263" name="TYPEFRAME">
    TYPEFRAME can install encrypted configuration data under the Registry key HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\ShellCompatibility\Applications\laxhost.dll and HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\PrintConfigs.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has used Registry modifications as part of its installation routine.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has the ability to modify the Registry key HKCU\Software\ApplicationContainer\Appsw64 to store information regarding the C2 server and downloads.
   </Example>
   <Example id="S0180" name="Volgmer">
    Volgmer stores the encoded configuration file in the Registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\WMI\Security.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT can create HKCU\Software\Classes\Folder\shell\open\command as a new registry key during privilege escalation.
   </Example>
   <Example id="S0612" name="WastedLocker">
    WastedLocker can modify registry values within the Software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap registry key.
   </Example>
   <Example id="S0579" name="Waterbear">
    Waterbear has deleted certain values from the Registry to load a malicious DLL.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has modified the Registry key HKLM\System\CurrentControlSet\Control\SecurityProviders\WDigest by setting the UseLogonCredential registry value to 1 in order to force credentials to be stored in clear text in memory.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda modifies several Registry keys under HKCU\Software\Microsoft\Internet Explorer\ PhishingFilter\ to disable phishing filters.
   </Example>
   <Example id="S0350" name="zwShell">
    zwShell can modify the Registry.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell can create Registry entries to enable services to run.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1024" name="Restrict Registry Permissions">
    Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Creation | Windows Registry Key Deletion | Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1601" name="Modify System Image">
  Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves.  On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Network
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1046" name="Boot Integrity">
    Some vendors of embedded network devices provide cryptographic signing to ensure the integrity of operating system images at boot time.  Implement where available, following vendor guidelines.
   </Mitigation>
   <Mitigation id="M1045" name="Code Signing">
    Many vendors provide digitally signed operating system images to validate the integrity of the software used on their platform.  Make use of this feature where possible in order to prevent and/or detect attempts by adversaries to compromise the system image.
   </Mitigation>
   <Mitigation id="M1043" name="Credential Access Protection">
    Some embedded network devices are capable of storing passwords for local accounts in either plain-text or encrypted formats.  Ensure that, where available, local passwords are always encrypted, per vendor recommendations.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication for user and privileged accounts. Most embedded network devices support TACACS+ and/or RADIUS.  Follow vendor prescribed best practices for hardening access control.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Refer to NIST guidelines when creating password policies.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Restrict administrator accounts to as few individuals as possible, following least privilege principles.  Prevent credential overlap across systems of administrator and privileged accounts, particularly between network and non-network platforms, such as servers or endpoints.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1601.001" name="Modify System Image: Patch System Image">
  Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file.  Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Network
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Examples>
   <Example id="S0519" name="SYNful Knock">
    SYNful Knock is malware that is inserted into a network device by patching the operating system image.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1046" name="Boot Integrity">
    Some vendors of embedded network devices provide cryptographic signing to ensure the integrity of operating system images at boot time.  Implement where available, following vendor guidelines.
   </Mitigation>
   <Mitigation id="M1045" name="Code Signing">
    Many vendors provide digitally signed operating system images to validate the integrity of the software used on their platform.  Make use of this feature where possible in order to prevent and/or detect attempts by adversaries to compromise the system image.
   </Mitigation>
   <Mitigation id="M1043" name="Credential Access Protection">
    Some embedded network devices are capable of storing passwords for local accounts in either plain-text or encrypted formats.  Ensure that, where available, local passwords are always encrypted, per vendor recommendations.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication for user and privileged accounts. Most embedded network devices support TACACS+ and/or RADIUS.  Follow vendor prescribed best practices for hardening access control.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Refer to NIST guidelines when creating password policies.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Restrict administrator accounts to as few individuals as possible, following least privilege principles.  Prevent credential overlap across systems of administrator and privileged accounts, particularly between network and non-network platforms, such as servers or endpoints.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1601.002" name="Modify System Image: Downgrade System Image">
  Adversaries may install an older version of the operating system of a network device to weaken security.  Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Network
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1046" name="Boot Integrity">
    Some vendors of embedded network devices provide cryptographic signing to ensure the integrity of operating system images at boot time.  Implement where available, following vendor guidelines.
   </Mitigation>
   <Mitigation id="M1045" name="Code Signing">
    Many vendors provide digitally signed operating system images to validate the integrity of the software used on their platform.  Make use of this feature where possible in order to prevent and/or detect attempts by adversaries to compromise the system image.
   </Mitigation>
   <Mitigation id="M1043" name="Credential Access Protection">
    Some embedded network devices are capable of storing passwords for local accounts in either plain-text or encrypted formats.  Ensure that, where available, local passwords are always encrypted, per vendor recommendations.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication for user and privileged accounts. Most embedded network devices support TACACS+ and/or RADIUS.  Follow vendor prescribed best practices for hardening access control.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Refer to NIST guidelines when creating password policies.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Restrict administrator accounts to as few individuals as possible, following least privilege principles.  Prevent credential overlap across systems of administrator and privileged accounts, particularly between network and non-network platforms, such as servers or endpoints.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1111" name="Multi-Factor Authentication Interception">
  Adversaries may target multi-factor authentication (MFA) mechanisms, (I.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than user names and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <System_Requirements>
   Smart card Proxy: Use of smart cards for single or multifactor authentication to access to network resources. Attached smart card reader with card inserted; Out-of-band one-time code: Access to the device, service, or communications to intercept the one-time code; Hardware token: Access to the seed and algorithm of generating one-time codes.
  </System_Requirements>
  <Examples>
   <Example id="G0114" name="Chimera">
    Chimera has registered alternate phone numbers for compromised users to intercept 2FA codes sent via SMS.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used a proprietary tool to intercept one time passwords required for two-factor authentication.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has replayed stolen session token and passwords to trigger simple-approval MFA prompts in hope of the legitimate user will grant necessary approval.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used a custom collection method to intercept two-factor authentication soft tokens.
   </Example>
   <Example id="S0018" name="Sykipot">
    Sykipot is known to contain functionality that enables targeting of smart card technologies to proxy authentication for connections to restricted network resources using detected hardware tokens.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1017" name="User Training">
    Remove smart cards when not in use.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0027" name="Driver">
    Driver Load
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1621" name="Multi-Factor Authentication Request Generation">
  Adversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 has used repeated MFA requests to gain access to victim accounts.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has spammed target users with MFA prompts in the hope that the legitimate user will grant necessary approval.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1036" name="Account Use Policies">
    Enable account restrictions to prevent login attempts, and the subsequent 2FA/MFA service requests, from being initiated from suspicious locations or when the source of the login attempts do not match the location of the 2FA/MFA smart device.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Implement more secure 2FA/MFA mechanisms in replacement of simple push or one-click 2FA/MFA options. For example, having users enter a one-time code provided by the login screen into the 2FA/MFA application or utilizing other out-of-band 2FA/MFA mechanisms (such as rotating code-based hardware tokens providing rotating codes that need an accompanying user pin) may be more secure. Furthermore, change default configurations and implement limits upon the maximum number of 2FA/MFA request prompts that can be sent to users in period of time.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Train users to only accept 2FA/MFA requests from login attempts they initiated, to review source location of the login attempt prompting the 2FA/MFA requests, and to report suspicious/unsolicited prompts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation | Logon Session Metadata
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1104" name="Multi-Stage Channels">
  Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0022" name="APT3">
    An APT3 downloader first establishes a SOCKS5 connection to 192.157.198
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used the storescyncsvc.dll BEACON backdoor to download a secondary backdoor.
   </Example>
   <Example id="S0031" name="BACKSPACE">
    BACKSPACE attempts to avoid detection by checking a first stage command and control server to determine if it should connect to the second stage server, which performs "louder" interactions with the malware.
   </Example>
   <Example id="S0534" name="Bazar">
    The Bazar loader is used to download and execute the Bazar backdoor.
   </Example>
   <Example id="S0069" name="BLACKCOFFEE">
    BLACKCOFFEE uses Microsoft’s TechNet Web portal to obtain an encoded tag containing the IP address of a command and control server and then communicates separately with that IP address for C2. If the C2 server is discovered or shut down, the threat actors can update the encoded IP address on TechNet to maintain control of the victims’ machines.
   </Example>
   <Example id="S0220" name="Chaos">
    After initial compromise, Chaos will download a second stage to establish a more permanent presence on the affected system.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used multi-stage malware components that inject later stages into separate processes.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used one C2 to obtain enumeration scripts and monitor web logs, but a different C2 to send data back.
   </Example>
   <Example id="S0476" name="Valak">
    Valak can download additional modules and malware capable of using separate C2 channels.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1106" name="Native API">
  Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0045" name="ADVSTORESHELL">
    ADVSTORESHELL is capable of starting a process using CreateProcess.
   </Example>
   <Example id="S1025" name="Amadey">
    Amadey has used a variety of Windows API calls, including GetComputerNameA, GetUserNameA, and CreateProcessA.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed has the ability to use multiple dynamically resolved API calls.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 leverages the Windows API calls: VirtualAlloc(), WriteProcessMemory(), and CreateRemoteThread() for process injection.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has used the Windows API to execute code within a victim's system.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has the ability to launch files using ShellExecute.
   </Example>
   <Example id="S0438" name="Attor">
    Attor's dispatcher has used CreateProcessW API for execution.
   </Example>
   <Example id="S0640" name="Avaddon">
    Avaddon has used the Windows Crypto API to generate an AES key.
   </Example>
   <Example id="S0638" name="Babuk">
    Babuk can use multiple Windows API calls for actions on compromised hosts including discovery and execution.
   </Example>
   <Example id="S0475" name="BackConfig">
    BackConfig can leverage API functions such as ShellExecuteA and HttpOpenRequestA in the process of downloading and executing files.
   </Example>
   <Example id="S0606" name="Bad Rabbit">
    Bad Rabbit has used various Windows API calls.
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS has a command to download an .exe and execute it via CreateProcess API. It can also run with ShellExecute.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook has used the ShellExecuteW() function call.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot creates processes using the Windows API calls: CreateProcessA() and CreateProcessAsUserA().
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can use various APIs to allocate memory and facilitate code execution/injection.
   </Example>
   <Example id="S0470" name="BBK">
    BBK has the ability to use the CreatePipe API to add a sub-process for execution via cmd.
   </Example>
   <Example id="S0574" name="BendyBear">
    BendyBear can load and execute modules and Windows Application Programming (API) calls using standard shellcode API hashing.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has used the Windows API to communicate with the Service Control Manager to execute a thread.
   </Example>
   <Example id="S0570" name="BitPaymer">
    BitPaymer has used dynamic API resolution to avoid identifiable strings within the binary, including RegEnumKeyW.
   </Example>
   <Example id="G0098" name="BlackTech">
    BlackTech has used built-in API functions.
   </Example>
   <Example id="S0521" name="BloodHound">
    BloodHound can use .NET API calls in the SharpHound ingestor component to pull Active Directory data.
   </Example>
   <Example id="S0651" name="BoxCaon">
    BoxCaon has used Windows API calls to obtain information about the compromised host.
   </Example>
   <Example id="S0471" name="build_downer">
    build_downer has the ability to use the WinExec API to execute malware on a compromised host.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can use multiple Native APIs.
   </Example>
   <Example id="S0693" name="CaddyWiper">
    CaddyWiper has the ability to dynamically resolve and use APIs, including SeTakeOwnershipPrivilege.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp has used the NtQueryDirectoryFile and ZwQueryDirectoryFile functions to hide files and directories.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes used the CreateFileW() API function with read permissions to access downloaded payloads.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used direct Windows system calls by leveraging Dumpert.
   </Example>
   <Example id="S0667" name="Chrommme">
    Chrommme can use Windows API including WinExec for execution.
   </Example>
   <Example id="S0611" name="Clop">
    Clop has used built-in API functions such as WNetOpenEnumW(), WNetEnumResourceW(), WNetCloseEnum(), GetProcAddress(), and VirtualAlloc().
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike's Beacon payload is capable of running shell commands without cmd.exe and PowerShell commands without powershell.exe
   </Example>
   <Example id="S0126" name="ComRAT">
    ComRAT can load a PE file from memory or the file system and execute it with CreateProcessW.
   </Example>
   <Example id="S0575" name="Conti">
    Conti has used API calls during execution.
   </Example>
   <Example id="S0614" name="CostaBricks">
    CostaBricks has used a number of API calls, including VirtualAlloc, VirtualFree, LoadLibraryA, GetProcAddress, and ExitProcess.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba has used several built-in API functions for discovery like GetIpNetTable and NetShareEnum.
   </Example>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink can use various Linux API functions including those for execution and discovery.
   </Example>
   <Example id="S1033" name="DCSrv">
    DCSrv has used various Windows API functions, including DeviceIoControl, as part of its encryption process.
   </Example>
   <Example id="S0354" name="Denis">
    Denis used the IsDebuggerPresent, OutputDebugString, and SetLastError APIs to avoid debugging. Denis used GetProcAddress and LoadLibrary to dynamically resolve APIs. Denis also used the Wow64SetThreadContext API as part of a process hollowing process.
   </Example>
   <Example id="S0659" name="Diavol">
    Diavol has used several API calls like GetLogicalDriveStrings, SleepEx, SystemParametersInfoAPI, CryptEncrypt, and others to execute parts of its attack.
   </Example>
   <Example id="S0695" name="Donut">
    Donut code modules use various API functions to load and inject code.
   </Example>
   <Example id="S0694" name="DRATzarus">
    DRATzarus can use various API calls to see if it is running in a sandbox.
   </Example>
   <Example id="S0384" name="Dridex">
    Dridex has used the OutputDebugStringW function to avoid malware analysis as part of its anti-debugging technique.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor has used the Windows API to make detection more difficult.
   </Example>
   <Example id="S0363" name="Empire">
    Empire contains a variety of enumeration modules that have an option to use API calls to carry out tasks.
   </Example>
   <Example id="S0396" name="EvilBunny">
    EvilBunny has used various API calls as part of its checks to see if the malware is running in a sandbox.
   </Example>
   <Example id="S0569" name="Explosive">
    Explosive has a function to call the OpenClipboard wrapper.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke can call ShellExecuteW to open the default browser on the URL localhost.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro can use Native API to enable obfuscation including GetLastError and GetTickCount.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb's loader can use API functions to load the FoggyWeb backdoor into the same Application Domain within which the legitimate AD FS managed code is executed.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can use Native API for defense evasion, discovery, and collection.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group malware has used CreateProcess to launch additional malicious components.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium has the ability to use various Windows API functions to perform tasks.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT has used the InterlockedExchange, SeShutdownPrivilege, and ExitWindowsEx Windows API functions.
   </Example>
   <Example id="S0493" name="GoldenSpy">
    GoldenSpy can execute remote commands in the Windows command shell using the WinExec() API.
   </Example>
   <Example id="S0477" name="Goopy">
    Goopy has the ability to  enumerate the infected system's user name via GetUserNameW.
   </Example>
   <Example id="G0078" name="Gorgon Group">
    Gorgon Group malware can leverage the Windows API call, CreateProcessA(), for execution.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can execute through the WinExec API.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent can use Native API including GetProcAddress and ShellExecuteW.
   </Example>
   <Example id="S0561" name="GuLoader">
    GuLoader can use a number of different APIs for discovery and execution.
   </Example>
   <Example id="S0499" name="Hancitor">
    Hancitor has used CallWindowProc and EnumResourceTypesA to interpret and execute shellcode.
   </Example>
   <Example id="S0391" name="HAWKBALL">
    HAWKBALL has leveraged several Windows API calls to create processes, gather disk information, and detect debugger activity.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper can call multiple Windows API functions used for privilege escalation, service execution, and to overwrite random bites of data.
   </Example>
   <Example id="S0698" name="HermeticWizard">
    HermeticWizard can connect to remote shares using WNetAddConnection2W.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa has called various native OS APIs.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant can perform dynamic DLL importing and API lookups using LoadLibrary and GetProcAddress on obfuscated strings.
   </Example>
   <Example id="S0398" name="HyperBro">
    HyperBro has the ability to run an application (CreateProcessW) or script/file (ShellExecuteW) via API.
   </Example>
   <Example id="S0537" name="HyperStack">
    HyperStack can use Windows API's ConnectNamedPipe and WNetAddConnection2 to detect incoming connections and connect to remote shares.
   </Example>
   <Example id="S0483" name="IcedID">
    IcedID has called ZwWriteVirtualMemory, ZwProtectVirtualMemory, ZwQueueApcThread, and NtResumeThread to inject itself into a remote process.
   </Example>
   <Example id="S0434" name="Imminent Monitor">
    Imminent Monitor has leveraged CreateProcessW() call to execute the debugger.
   </Example>
   <Example id="S0259" name="InnaputRAT">
    InnaputRAT uses the API call ShellExecuteW for execution.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can use winapiexec tool for indirect execution of  ShellExecuteW and CreateProcessA.
   </Example>
   <Example id="S1020" name="Kevin">
    Kevin can use the ShowWindow API to avoid detection.
   </Example>
   <Example id="S0607" name="KillDisk">
    KillDisk has called the Windows API to retrieve the hard disk handle and shut down the machine.
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS can use the LoadResource and CreateProcessW APIs for execution.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has hardcoded API calls within its functions to use on the victim's machine.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used the Windows API ObtainUserAgentString to obtain the User-Agent from a compromised host to connect to a C2 server.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron is capable of starting a process using CreateProcess.
   </Example>
   <Example id="S0680" name="LitePower">
    LitePower can use various API calls.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar has used various Windows API functions on a victim's machine.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has used LoadLibrary(), GetProcAddress() and CreateRemoteThread() API functions to execute its shellcode.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa has used macOS API functions to perform tasks.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can run the ShellExecuteW API via the Windows Command Shell.
   </Example>
   <Example id="S0449" name="Maze">
    Maze has used several Windows API functions throughout the encryption process including IsDebuggerPresent, TerminateProcess, Process32FirstW, among others.
   </Example>
   <Example id="S0576" name="MegaCortex">
    After escalating privileges, MegaCortex calls TerminateProcess(), CreateRemoteThread, and other Win32 APIs.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used native APIs including GetModuleFileName, lstrcat, CreateFile, and ReadFile.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has used native WINAPI calls.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor can use WinAPI to remove a victim machine from an Active Directory domain.
   </Example>
   <Example id="S1015" name="Milan">
    Milan can use the API DnsQuery_A for DNS resolution.
   </Example>
   <Example id="S0084" name="Mis-Type">
    Mis-Type has used Windows API calls, including NetUserAdd and NetUserDel.
   </Example>
   <Example id="S0083" name="Misdat">
    Misdat has used Windows APIs, including ExitWindowsEx and GetKeyboardType.
   </Example>
   <Example id="S0256" name="Mosquito">
    Mosquito leverages the CreateProcess() and LoadLibrary() calls to execute files with the .dll and .exe extensions.
   </Example>
   <Example id="S0630" name="Nebulae">
    Nebulae has the ability to use CreateProcess to execute a process.
   </Example>
   <Example id="S0457" name="Netwalker">
    Netwalker can use Windows API functions to inject the ransomware DLL.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can use Native API including CreateProcess GetProcessById, and WriteProcessMemory.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT has used the ShellExecute() function within a script.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, the threat actors deployed malware that used API calls, including CreateProcessAsUser.
   </Example>
   <Example id="C0013" name="Operation Sharpshooter">
    During Operation Sharpshooter, the first stage downloader resolved various Windows libraries and APIs, including LoadLibraryA(), GetProcAddress(), and CreateProcessA().
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used the CreateProcessA and ShellExecute API functions to launch commands after being injected into a selected process.
   </Example>
   <Example id="S1050" name="PcShare">
    PcShare has used a variety of Windows API functions.
   </Example>
   <Example id="S0517" name="Pillowmint">
    Pillowmint has used multiple native Windows APIs to execute and conduct process injections.
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon's first stage has been executed by a call to CreateProcess with the decryption password in an argument. PipeMon has used a call to LoadLibrary to load its installer.
   </Example>
   <Example id="S0435" name="PLEAD">
    PLEAD can use ShellExecute to execute applications.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX can use the Windows API functions GetProcAddress, LoadLibrary, and CreateProcess to execute another process.
   </Example>
   <Example id="S0518" name="PolyglotDuke">
    PolyglotDuke can use LoadLibraryW and CreateProcess to load and execute code.
   </Example>
   <Example id="S0453" name="Pony">
    Pony has used several Windows functions for various purposes.
   </Example>
   <Example id="S0147" name="Pteranodon">
    Pteranodon has used various API calls.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can use GetProcAddress to help delete malicious strings from memory.
   </Example>
   <Example id="S0629" name="RainyDay">
    The file collection tool used by RainyDay can utilize native API including ReadDirectoryChangeW for folder monitoring.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can use Windows API functions such as WriteFile, CloseHandle, and GetCurrentHwProfile during its collection and file storage operations. Ramsay can execute its embedded components via CreateProcessA and ShellExecute.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession can use WinSock API for communication including WSASend and WSARecv.
   </Example>
   <Example id="S0416" name="RDFSNIFFER">
    RDFSNIFFER has used several Win32 API functions to interact with the victim machine.
   </Example>
   <Example id="S0496" name="REvil">
    REvil can use Native API for execution and to retrieve active services.
   </Example>
   <Example id="S0448" name="Rising Sun">
    Rising Sun used dynamic API resolutions to various Windows APIs by leveraging LoadLibrary() and GetProcAddress().
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can use a variety of API calls to execute shellcode.
   </Example>
   <Example id="S0148" name="RTM">
    RTM can use the FindNextUrlCacheEntryA and FindFirstUrlCacheEntryA functions to search for specific strings within browser history.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk has used multiple native APIs including ShellExecuteW to run executables,GetWindowsDirectoryW to create folders, and VirtualAlloc, WriteProcessMemory, and CreateRemoteThread for process injection.
   </Example>
   <Example id="S0085" name="S-Type">
    S-Type has used Windows APIs, including GetKeyboardType, NetUserAdd, and NetUserDel.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has used different API calls, including GetProcAddress, VirtualAllocEx, WriteProcessMemory, CreateProcessA, and SetThreadContext.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat has used Windows API functions to install the service and shim.
   </Example>
   <Example id="S0445" name="ShimRatReporter">
    ShimRatReporter used several Windows API functions to gather information from the infected system.
   </Example>
   <Example id="G1008" name="SideCopy">
    SideCopy has executed malware by calling the API function CreateProcessW.
   </Example>
   <Example id="S0610" name="SideTwist">
    SideTwist can use GetUserNameW, GetComputerNameW, and GetComputerNameExW to gather information.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has leveraged the Windows API, including using CreateProcess() or ShellExecute(), to perform a variety of tasks.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY has the ability to leverage API including GetProcAddress and LoadLibrary.
   </Example>
   <Example id="S0623" name="Siloscape">
    Siloscape makes various native API calls.
   </Example>
   <Example id="S0627" name="SodaMaster">
    SodaMaster can use RegOpenKeyW to access the Registry.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT has the ability to respawn itself using ShellExecuteW and CreateProcessW.
   </Example>
   <Example id="S1034" name="StrifeWater">
    StrifeWater can use a variety of APIs for execution.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet uses the SetSecurityDescriptorDacl API to reduce object integrity levels.
   </Example>
   <Example id="S0562" name="SUNSPOT">
    SUNSPOT used Windows API functions such as MoveFileEx and NtQueryInformationProcess as part of the SUNBURST injection process.
   </Example>
   <Example id="S0242" name="SynAck">
    SynAck parses the export tables of system DLLs to locate and call various Windows API functions.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has deployed payloads that use Windows API calls on a compromised host.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor has the ability to use native APIs for execution including GetProcessHeap, GetProcAddress, and LoadLibrary.
   </Example>
   <Example id="S0595" name="ThiefQuest">
    ThiefQuest uses various API to perform behaviors such as executing payloads and performing local enumeration.
   </Example>
   <Example id="S0668" name="TinyTurla">
    TinyTurla has used WinHTTP, CreateProcess, and other APIs for C2 communications and other functions.
   </Example>
   <Example id="S0678" name="Torisma">
    Torisma has used various Windows API calls.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot uses the Windows API call, CreateProcessW(), to manage execution flow.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has used multiple Windows APIs including HttpInitialize, HttpCreateHttpHandle, and HttpAddUrl.
   </Example>
   <Example id="G0010" name="Turla">
    Turla and its RPC backdoors have used APIs calls for various tasks related to subverting AMSI and accessing then executing commands through RPC and/or named pipes.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has used CreateProcessW to create child processes.
   </Example>
   <Example id="S0180" name="Volgmer">
    Volgmer executes payloads using the Windows API call CreateProcessW().
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT can use a variety of API calls on a compromised host.
   </Example>
   <Example id="S0612" name="WastedLocker">
    WastedLocker's custom crypter, CryptOne, leveraged the VirtualAlloc() API function to help execute the payload.
   </Example>
   <Example id="S0579" name="Waterbear">
    Waterbear can leverage API functions for execution.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate has used the ExitWindowsEx API to flush file buffers to disk and stop running processes.
   </Example>
   <Example id="S0466" name="WindTail">
    WindTail can invoke Apple APIs contentsOfDirectoryAtPath, pathExtension, and (string) compare.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    Winnti for Windows can use Native API to create a new process and to start services.
   </Example>
   <Example id="S0161" name="XAgentOSX">
    XAgentOSX contains the execFile function to execute a specified file on the system using the NSTask:launch method.
   </Example>
   <Example id="S0653" name="xCaon">
    xCaon has leveraged native OS function calls to retrieve  victim's network adapter's  information using GetAdapterInfo() API.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell can leverage native API including RegisterServiceCtrlHandler  to register a service.RegisterServiceCtrlHandler
   </Example>
   <Example id="S1013" name="ZxxZ">
    ZxxZ has used API functions such as Process32First, Process32Next, and ShellExecuteA.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office VBA macros from calling Win32 APIs.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Identify and block potentially malicious software executed that may be executed through this technique by using application control
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1599" name="Network Boundary Bridging">
  Adversaries may bridge network boundaries by compromising perimeter network devices or internal devices responsible for network segmentation. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Network
  </Platforms>
  <Defense_Bypassed>
   Firewall, System Access Controls
  </Defense_Bypassed>
  <Mitigations>
   <Mitigation id="M1043" name="Credential Access Protection">
    Some embedded network devices are capable of storing passwords for local accounts in either plain-text or encrypted formats.  Ensure that, where available, local passwords are always encrypted, per vendor recommendations.
   </Mitigation>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Upon identifying a compromised network device being used to bridge a network boundary, block the malicious packets using an unaffected network device in path, such as a firewall or a router that has not been compromised.  Continue to monitor for additional activity and to ensure that the blocks are indeed effective.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication for user and privileged accounts. Most embedded network devices support TACACS+ and/or RADIUS.  Follow vendor prescribed best practices for hardening access control.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Refer to NIST guidelines when creating password policies.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Restrict administrator accounts to as few individuals as possible, following least privilege principles.  Prevent credential overlap across systems of administrator and privileged accounts, particularly between network and non-network platforms, such as servers or endpoints.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1599.001" name="Network Boundary Bridging: Network Address Translation Traversal">
  Adversaries may bridge network boundaries by modifying a network device’s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Network
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1043" name="Credential Access Protection">
    Some embedded network devices are capable of storing passwords for local accounts in either plain-text or encrypted formats.  Ensure that, where available, local passwords are always encrypted, per vendor recommendations.
   </Mitigation>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Block Traffic   Upon identifying a compromised network device being used to bridge a network boundary, block the malicious packets using an unaffected network device in path, such as a firewall or a router that has not been compromised.  Continue to monitor for additional activity and to ensure that the blocks are indeed effective.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication for user and privileged accounts. Most embedded network devices support TACACS+ and/or RADIUS.  Follow vendor prescribed best practices for hardening access control.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Refer to NIST guidelines when creating password policies.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Restrict administrator accounts to as few individuals as possible, following least privilege principles.  Prevent credential overlap across systems of administrator and privileged accounts, particularly between network and non-network platforms, such as servers or endpoints.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1498" name="Network Denial of Service">
  Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Azure AD, Containers, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Impact_Type>
   Availability
  </Impact_Type>
  <Examples>
   <Example id="G0007" name="APT28">
    In 2016, APT28 conducted a distributed denial of service (DDoS) attack against the World Anti-Doping Agency.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can execute TCP, UDP,  and HTTP denial of service (DoS) attacks.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Flow
   </Detection>
   <Detection id="DS0013" name="Sensor Health">
    Host Status
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1498.001" name="Network Denial of Service: Direct Network Flood">
  Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. Direct Network Floods are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Impact_Type>
   Availability
  </Impact_Type>
  <CAPEC_ID>
   CAPEC-125, CAPEC-486
  </CAPEC_ID>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Flow
   </Detection>
   <Detection id="DS0013" name="Sensor Health">
    Host Status
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1498.002" name="Network Denial of Service: Reflection Amplification">
  Adversaries may attempt to cause a denial of service (DoS) by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflectors may be used to focus traffic on the target. This Network DoS attack may also reduce the availability and functionality of the targeted system(s) and network.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Impact_Type>
   Availability
  </Impact_Type>
  <CAPEC_ID>
   CAPEC-490
  </CAPEC_ID>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Flow
   </Detection>
   <Detection id="DS0013" name="Sensor Health">
    Host Status
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1046" name="Network Service Discovery">
  Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Containers, IaaS, Linux, Network, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-300
  </CAPEC_ID>
  <Examples>
   <Example id="G0050" name="APT32">
    APT32 performed network scanning on the network to search for open ports, services, OS finger-printing, and other vulnerabilities.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used CrackMapExec and a custom port scanner known as BLUETORCH for network scanning.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used a malware variant called WIDETONE to conduct port scans on specified subnets.
   </Example>
   <Example id="S0093" name="Backdoor.Oldrea">
    Backdoor.Oldrea can use a network scanning module to identify ICS-related ports.
   </Example>
   <Example id="G0135" name="BackdoorDiplomacy">
    BackdoorDiplomacy has used SMBTouch, a vulnerability scanner, to determine whether a target is vulnerable to EternalBlue malware.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    BlackEnergy has conducted port scans on a host.
   </Example>
   <Example id="G0098" name="BlackTech">
    BlackTech has used the SNScan tool to find other potential targets on victim networks.
   </Example>
   <Example id="S0572" name="Caterpillar WebShell">
    Caterpillar WebShell has a module to use a port scanner on a system.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used the get -b  -e  -p command for network scanning as well as a custom Python tool  packed into a Windows executable named Get.exe to scan IP ranges for HTTP.
   </Example>
   <Example id="S0020" name="China Chopper">
    China Chopper's server component can spider authentication portals.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group leveraged an open-source tool called SoftPerfect Network Scanner to perform network scanning.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can perform port scans from an infected host.
   </Example>
   <Example id="S0608" name="Conficker">
    Conficker scans for other machines to infect.
   </Example>
   <Example id="C0004" name="CostaRicto">
    During CostaRicto, the threat actors employed nmap and pscan to scan target environments.
   </Example>
   <Example id="G0105" name="DarkVishnya">
    DarkVishnya performed port scanning to obtain the list of active services.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can perform port scans from an infected host.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 used publicly available tools (including Microsoft's built-in SQL querying tool, osql.exe) to map the internal network and conduct reconnaissance against Active Directory, Structured Query Language (SQL) servers, and NetBIOS.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used tools including NMAP to conduct broad scanning to identify open ports.
   </Example>
   <Example id="S0061" name="HDoor">
    HDoor scans to identify open ports on the victim.
   </Example>
   <Example id="S0698" name="HermeticWizard">
    HermeticWizard has the ability to scan ports on a compromised network.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has used masscan to look for kubelets in the internal Kubernetes network.
   </Example>
   <Example id="S0604" name="Industroyer">
    Industroyer uses a custom port scanner to map out a network.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can scan the network for open ports and vulnerable instances of RDP and SMB protocols.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can scan for open TCP ports on the target network.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used nmap from a router VM to scan ports on systems within the restricted segment of an enterprise network.
   </Example>
   <Example id="G0077" name="Leafminer">
    Leafminer scanned network services to search for vulnerabilities in the victim system.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can scan for open ports including TCP ports 135 and 1433.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used tcping.exe, similar to Ping, to probe port status on systems of interest.
   </Example>
   <Example id="S0233" name="MURKYTOP">
    MURKYTOP has the capability to scan for open ports on hosts in a connected network.
   </Example>
   <Example id="G0019" name="Naikon">
    Naikon has used the LadonGo scanner to scan target networks.
   </Example>
   <Example id="S0590" name="NBTscan">
    NBTscan can be used to scan IP networks.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used the publicly available tool SoftPerfect Network Scanner as well as a custom tool called GOLDIRONY to conduct network scanning.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors scanned for open ports and used nbtscan to find NETBIOS nameservers.
   </Example>
   <Example id="S0598" name="P.A.S. Webshell">
    P.A.S. Webshell can scan networks for open ports and listening services.
   </Example>
   <Example id="S0683" name="Peirates">
    Peirates can initiate a port scan against a given IP address.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 can perform port scans from an infected host.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy has a built-in module for port scanning.
   </Example>
   <Example id="S0583" name="Pysa">
    Pysa can perform network reconnaissance using the Advanced Port Scanner tool.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can scan for systems that are vulnerable to the EternalBlue exploit.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec has a plugin that can perform ARP scanning as well as port scanning.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke conducted scanning for exposed TCP port 7001 as well as SSH and Redis servers.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can scan for open ports on a compromised machine.
   </Example>
   <Example id="S0374" name="SpeakUp">
    SpeakUp checks for availability of specific ports on servers.
   </Example>
   <Example id="G0039" name="Suckfly">
    Suckfly the victim's internal network for hosts with ports 8080, 5900, and 40 open.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has used masscan to search for open Docker API ports and Kubernetes clusters.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 actors use the Hunter tool to conduct network service discovery for vulnerable systems.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper used pr and an openly available tool to scan for open ports on target systems.
   </Example>
   <Example id="S0341" name="Xbash">
    Xbash can perform port scanning of TCP and UDP ports.
   </Example>
   <Example id="S0117" name="XTunnel">
    XTunnel is capable of probing the network for open ports.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell can launch port scans.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Ensure that unnecessary ports and services are closed to prevent risk of discovery and potential exploitation.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Use network intrusion detection/prevention systems to detect and prevent remote service scans.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Ensure proper network segmentation is followed to protect critical servers and devices.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0025" name="Cloud Service">
    Cloud Service Enumeration
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1135" name="Network Share Discovery">
  Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-643
  </CAPEC_ID>
  <Examples>
   <Example id="G0006" name="APT1">
    APT1 listed connected network shares.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 used the net view command to show all shares available, including the administrative shares such as C$ and ADMIN$.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has enumerated network shares on a compromised host.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used the post exploitation tool CrackMapExec to enumerate network shares.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used the net share command as part of network reconnaissance.
   </Example>
   <Example id="S0640" name="Avaddon">
    Avaddon has enumerated shared folders and mapped volumes.
   </Example>
   <Example id="S0638" name="Babuk">
    Babuk has the ability to enumerate network shares.
   </Example>
   <Example id="S0606" name="Bad Rabbit">
    Bad Rabbit enumerates open SMB shares on internal victim networks.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can enumerate shared drives on the domain.
   </Example>
   <Example id="S0570" name="BitPaymer">
    BitPaymer can search for network shares on the domain or workgroup using net view .
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors executed the PowerView ShareFinder module to identify open shares.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used net share and net view to identify network shares of interest.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling has the ability to enumerate network shares.
   </Example>
   <Example id="S0611" name="Clop">
    Clop can enumerate network shares.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can query shared drives on the local system.
   </Example>
   <Example id="S0575" name="Conti">
    Conti can enumerate remote open SMB network shares using NetShareEnum().
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can enumerate the shared folders and associated permissions for a targeted network.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba can discover shared resources using the NetShareEnum API call.
   </Example>
   <Example id="G0105" name="DarkVishnya">
    DarkVishnya scanned the network for public shared folders.
   </Example>
   <Example id="S0616" name="DEATHRANSOM">
    DEATHRANSOM has the ability to use loop operations to enumerate network resources.
   </Example>
   <Example id="S0659" name="Diavol">
    Diavol has a ENMDSKS command to enumerates available network shares.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has identified and browsed file servers in the victim network, sometimes , viewing files pertaining to ICS or Supervisory Control and Data Acquisition (SCADA) systems.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can find shared drives on the local system.
   </Example>
   <Example id="S0618" name="FIVEHANDS">
    FIVEHANDS can enumerate network shares and mounted drives on a network.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro has been used to execute net view to discover mapped network shares.
   </Example>
   <Example id="S0617" name="HELLOKITTY">
    HELLOKITTY has the ability to enumerate network resources.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can gather network share information.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can scan local network for open SMB.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs collects a list of network shares with the command net share.
   </Example>
   <Example id="S0233" name="MURKYTOP">
    MURKYTOP has the capability to retrieve information about shares on remote hosts.
   </Example>
   <Example id="S0039" name="Net">
    The net view \remotesystem and net share commands in Net can be used to find shared drives and directories on remote and local systems respectively.
   </Example>
   <Example id="S0365" name="Olympic Destroyer">
    Olympic Destroyer will attempt to enumerate mapped network shares to later attempt to wipe all files on those shares.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used the net share command as part of their advanced reconnaissance.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors discovered network disks mounted to the system using netstat.
   </Example>
   <Example id="S0165" name="OSInfo">
    OSInfo discovers shares on the network
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX has a module to enumerate network shares.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can list local and remote shared drives and folders over SMB.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can use net share to identify network shares for use in lateral movement.
   </Example>
   <Example id="S0686" name="QuietSieve">
    QuietSieve can identify and search networked drives for specific file name extensions.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can scan for network drives which may contain documents for collection.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat can enumerate connected drives for infected host machines.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can enumerate shares on a compromised host.
   </Example>
   <Example id="G0054" name="Sowbug">
    Sowbug listed remote shared drives that were accessible from a victim.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet enumerates the directories of a network resource.
   </Example>
   <Example id="G0131" name="Tonto Team">
    Tonto Team has used tools such as NBTscan to enumerate network shares.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot module shareDll/mshareDll discovers network shares via the WNetOpenEnumA API.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper used netview to scan target systems for shared resources.
   </Example>
   <Example id="S0612" name="WastedLocker">
    WastedLocker can identify network adjacent and accessible drives.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can enumerate connected remote logical drives.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used the "net view" command to locate mapped network shares.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy identifies network drives when they are added to victim systems.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1028" name="Operating System Configuration">
    Enable Windows Group Policy "Do Not Allow Anonymous Enumeration of SAM Accounts and Shares" security setting to limit users who can enumerate network shares.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1040" name="Network Sniffing">
  Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.
  <Tactics>
   Credential Access, Discovery
  </Tactics>
  <Platforms>
   IaaS, Linux, Network, Windows, macOS
  </Platforms>
  <System_Requirements>
   Network interface access and packet capture driver
  </System_Requirements>
  <CAPEC_ID>
   CAPEC-158
  </CAPEC_ID>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 deployed the open source tool Responder to conduct NetBIOS Name Service poisoning, which captured usernames and hashed passwords that allowed access to legitimate credentials.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has used SniffPass to collect credentials by sniffing network traffic.
   </Example>
   <Example id="G0105" name="DarkVishnya">
    DarkVishnya used network sniffing to obtain login data.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has been observed to hook network APIs to monitor network traffic.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can be used to conduct packet captures on target hosts.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb can configure custom listeners to passively monitor all incoming HTTP GET and POST requests sent to the AD FS server from the intranet/internet and intercept HTTP requests that match the custom URI patterns defined by the actor.
   </Example>
   <Example id="S0357" name="Impacket">
    Impacket can be used to sniff network traffic via an interface or raw socket.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used the Nirsoft SniffPass network sniffer to obtain passwords sent over non-secure protocols.
   </Example>
   <Example id="S0443" name="MESSAGETAP">
    MESSAGETAP uses the libpcap library to listen to all traffic and parses network protocols starting with Ethernet and IP layers. It continues parsing protocol layers including SCTP, SCCP, and TCAP and finally extracts SMS message data and routing metadata.
   </Example>
   <Example id="S0590" name="NBTscan">
    NBTscan can dump and print whole packet content.
   </Example>
   <Example id="S0587" name="Penquin">
    Penquin can sniff network traffic to look for packets matching specific conditions.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 contains a module for taking packet captures on compromised hosts.
   </Example>
   <Example id="S0019" name="Regin">
    Regin appears to have functionality to sniff for credentials passed over HTTP, SMTP, and SMB.
   </Example>
   <Example id="S0174" name="Responder">
    Responder captures hashes and credentials that are sent to the system after the name services have been poisoned.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used intercepter-NG to sniff passwords in network traffic.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Ensure that all wired and/or wireless traffic is encrypted appropriately. Use best practices for authentication protocols, such as Kerberos, and ensure web traffic that may contain credentials is protected by SSL/TLS.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication wherever possible.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    In cloud environments, ensure that users are not granted permissions to create or modify traffic mirrors unless this is explicitly required.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1095" name="Non-Application Layer Protocol">
  Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0504" name="Anchor">
    Anchor has used ICMP in C2 communications.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used TCP for C2 communications.
   </Example>
   <Example id="G0022" name="APT3">
    An APT3 downloader establishes SOCKS5 connections for its initial C2.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has used TCP in C2 communications.
   </Example>
   <Example id="S1029" name="AuTo Stealer">
    AuTo Stealer can use TCP to communicate with command and control servers.
   </Example>
   <Example id="G0135" name="BackdoorDiplomacy">
    BackdoorDiplomacy has used EarthWorm for network tunneling with a SOCKS5 server and port transfer functionalities.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook has a command built in to use a raw TCP socket.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has used raw sockets for network communication.
   </Example>
   <Example id="G1002" name="BITTER">
    BITTER has used TCP for C2 communications.
   </Example>
   <Example id="S0043" name="BUBBLEWRAP">
    BUBBLEWRAP can communicate using SOCKS.
   </Example>
   <Example id="S0335" name="Carbon">
    Carbon uses TCP and UDP for C2.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling has the ability to use TCP and UDP for communication.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can be configured to use TCP, ICMP, and UDP for C2 communications.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson uses a custom TCP protocol for C2.
   </Example>
   <Example id="S0498" name="Cryptoistic">
    Cryptoistic can use TCP in communications with C2.
   </Example>
   <Example id="S0021" name="Derusbi">
    Derusbi binds to a raw socket on a random source port between 31800 and 31900 for C2.
   </Example>
   <Example id="S0502" name="Drovorub">
    Drovorub can use TCP to communicate between its agent and client modules.
   </Example>
   <Example id="S0076" name="FakeM">
    Some variants of FakeM use SSL to communicate with C2 servers.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used Metasploit Bind and Reverse TCP stagers.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can communicate with C2 over TCP and UDP.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium has the ability to use TCP and UDP in C2 communications.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT has used an encrypted protocol within TCP segments to communicate with the C2.
   </Example>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has used TCP for C2.
   </Example>
   <Example id="S0394" name="HiddenWasp">
    HiddenWasp communicates with a simple network protocol over TCP.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole has used TCP to download additional modules.
   </Example>
   <Example id="S0582" name="LookBack">
    LookBack uses a custom binary protocol over sockets for C2 communications.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa has used a custom JSON-based protocol for its C&amp;C communications.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has used raw TCP for C2.
   </Example>
   <Example id="S0084" name="Mis-Type">
    Mis-Type network traffic can communicate over a raw socket.
   </Example>
   <Example id="S0083" name="Misdat">
    Misdat network traffic communicates over a raw socket.
   </Example>
   <Example id="S0149" name="MoonWind">
    MoonWind completes network communication via raw sockets.
   </Example>
   <Example id="S0699" name="Mythic">
    Mythic supports WebSocket and TCP-based C2 profiles.
   </Example>
   <Example id="S0630" name="Nebulae">
    Nebulae can use TCP in C2 communications.
   </Example>
   <Example id="S0034" name="NETEAGLE">
    If NETEAGLE does not detect a proxy configured on the infected machine, it will send beacons via UDP/6000. Also, after retrieving a C2 IP address and Port Number, NETEAGLE will initiate a TCP connection to this socket. The ensuing connection is a plaintext C2 channel in which commands are specified by DWORDs.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can use TCP in C2 communications.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used a custom protocol for command and control.
   </Example>
   <Example id="S0556" name="Pay2Key">
    Pay2Key has sent its public key to the C2 server over TCP.
   </Example>
   <Example id="S0587" name="Penquin">
    The Penquin C2 mechanism is based on TCP and UDP packets.
   </Example>
   <Example id="S0158" name="PHOREAL">
    PHOREAL communicates via ICMP for C2.
   </Example>
   <Example id="S1031" name="PingPull">
    PingPull variants have the ability to communicate with C2 servers using ICMP or TCP.
   </Example>
   <Example id="S0501" name="PipeMon">
    The PipeMon communication module can use a custom protocol based on TLS over TCP.
   </Example>
   <Example id="G0068" name="PLATINUM">
    PLATINUM has used the Intel® Active Management Technology (AMT) Serial-over-LAN (SOL) channel for command and control.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX can be configured to use raw TCP or UDP for command and control.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot has the ability use TCP to send or receive C2 packets.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT can use TCP for C2 communication.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay can use TCP in C2 communications.
   </Example>
   <Example id="S0055" name="RARSTONE">
    RARSTONE uses SSL to encrypt its communication with its C2 server.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession has the ability to use TCP and UDP in C2 communications.
   </Example>
   <Example id="S0172" name="Reaver">
    Some Reaver variants use raw TCP for C2.
   </Example>
   <Example id="S0019" name="Regin">
    The Regin malware platform can use ICMP to communicate between infected computers.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec is capable of using ICMP, TCP, and UDP for C2.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has the ability to communicate with C2 with TCP over port 443.
   </Example>
   <Example id="S0596" name="ShadowPad">
    ShadowPad has used UDP for C2 communications.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT has the ability to use TCP sockets to send data and ICMP to ping the C2 server.
   </Example>
   <Example id="S1049" name="SUGARUSH">
    SUGARUSH has used TCP for C2.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor can use TCP for C2 communications.
   </Example>
   <Example id="S0436" name="TSCookie">
    TSCookie can use ICMP to receive information on the destination server.
   </Example>
   <Example id="S0221" name="Umbreon">
    Umbreon provides access to the system via SSH or any other protocol that uses PAM to authenticate.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT can communicate with its C2 server via TCP over port 5200.
   </Example>
   <Example id="S0515" name="WellMail">
    WellMail can use TCP for C2 communications.
   </Example>
   <Example id="S0155" name="WINDSHIELD">
    WINDSHIELD C2 traffic can communicate via TCP raw sockets.
   </Example>
   <Example id="S0430" name="Winnti for Linux">
    Winnti for Linux has used ICMP, custom TCP, and UDP in outbound communications.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    Winnti for Windows can communicate using custom TCP.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Filter network traffic to prevent use of protocols across the network boundary that are unnecessary.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1571" name="Non-Standard Port">
  Adversaries may communicate using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0099" name="APT-C-36">
    APT-C-36 has used port 4050 for C2 communications.
   </Example>
   <Example id="G0050" name="APT32">
    An APT32 backdoor can use HTTP over a non-standard TCP port (e.g 14146) which is specified in the backdoor configuration.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has used HTTP over TCP ports 808 and 880 for command and control.
   </Example>
   <Example id="S0245" name="BADCALL">
    BADCALL communicates on ports 443 and 8000 with a FakeTLS method.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot binds and listens on port 1058 for HTTP traffic while also utilizing a FakeTLS method.
   </Example>
   <Example id="S0574" name="BendyBear">
    BendyBear has used a custom RC4 and XOR encrypted protocol over port 443 for C2.
   </Example>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink can use non-standard ports for C2 not typically associated with HTTP or HTTPS traffic.
   </Example>
   <Example id="G0105" name="DarkVishnya">
    DarkVishnya used ports 5190 and 7900 for shellcode listeners, and 4444, 4445, 31337 for shellcode C2.
   </Example>
   <Example id="S0021" name="Derusbi">
    Derusbi has used unencrypted HTTP on port 443 for C2.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has used HTTP over ports such as 20, 22, 7080, and 50000, in addition to using ports commonly associated with HTTP/S.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has used port-protocol mismatches on ports such as 53, 80, 443, and 8080 during C2.
   </Example>
   <Example id="S0493" name="GoldenSpy">
    GoldenSpy has used HTTP over ports 9005 and 9006 for network traffic, 9002 for C2 requests, 33666 as a WebSocket, and 8090 to download files.
   </Example>
   <Example id="S0237" name="GravityRAT">
    GravityRAT has used HTTP over a non-standard port, such as TCP port 46769.
   </Example>
   <Example id="S0246" name="HARDRAIN">
    HARDRAIN binds and listens on port 443 with a FakeTLS method.
   </Example>
   <Example id="S0376" name="HOPLIGHT">
    HOPLIGHT has connected outbound over TCP port 443 with a FakeTLS method.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Some Lazarus Group malware uses a list of ordered port numbers to choose a port for C2 traffic, creating port-protocol mismatches.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa has used TCP port 5633 for C2 Communication.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound malware has communicated with its C2 server over TCP port 4443 using HTTP.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has communicated with hosts over raw TCP on port 9999.
   </Example>
   <Example id="S0149" name="MoonWind">
    MoonWind communicates over ports 80, 443, 53, and 8080 via raw sockets instead of the protocols usually associated with the ports.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT has used port 1177 for HTTP C2 communications.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, the threat actors used uncommon high ports for its backdoor C2, including ports 25667 and 470000.
   </Example>
   <Example id="S1031" name="PingPull">
    PingPull can use HTTPS over port 8080 for C2.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT used TLS to encrypt communications over port 143
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT can use port 4782 on the compromised host for TCP callbacks.
   </Example>
   <Example id="S0153" name="RedLeaves">
    RedLeaves can use HTTP over non-standard ports, such as 995, for C2.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke's miner connects to a C2 server using port 51640.
   </Example>
   <Example id="S0148" name="RTM">
    RTM used Port 44443 for its VNC module.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used port 6789 to accept connections on the group's SSH server.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has used port 444 when sending data about the system from the client to the server.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity has used HTTPS over port 1402 in C2 communication.
   </Example>
   <Example id="S1049" name="SUGARUSH">
    SUGARUSH has used port 4585 for a TCP connection to its C2.
   </Example>
   <Example id="G0088" name="TEMP.Veles">
    TEMP.Veles has used port-protocol mismatches on ports such as 443, 4444, 8531, and 50501 during C2.
   </Example>
   <Example id="S0266" name="TrickBot">
    Some TrickBot samples have used HTTP over ports 447 and 8082 for C2.
   </Example>
   <Example id="S0263" name="TYPEFRAME">
    TYPEFRAME has used ports 443, 8080, and 8443 with a FakeTLS method.
   </Example>
   <Example id="S0515" name="WellMail">
    WellMail has been observed using TCP port 25, without using SMTP, to leverage an open port for secure command and control communications.
   </Example>
   <Example id="G0090" name="WIRTE">
    WIRTE has used HTTPS over ports 2083 and 2087 for C2.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell can use ports 1985 and 1986 in HTTP/S communication.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports for that particular network segment.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1027" name="Obfuscated Files or Information">
  Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Application Control, Host Forensic Analysis, Host Intrusion Prevention Systems, Log Analysis, Signature-based Detection
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-267
  </CAPEC_ID>
  <Examples>
   <Example id="S1028" name="Action RAT">
    Action RAT's commands, strings, and domains can be Base64 encoded within the payload.
   </Example>
   <Example id="S0045" name="ADVSTORESHELL">
    Most of the strings in ADVSTORESHELL are encrypted with an XOR-based algorithm; some strings are also encrypted with 3DES and reversed. API function names are also reversed, presumably to avoid detection in memory.
   </Example>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla has had its code obfuscated in an apparent attempt to make analysis difficult.
   </Example>
   <Example id="S1025" name="Amadey">
    Amadey has obfuscated strings such as antivirus vendor names, domains, files, and others.
   </Example>
   <Example id="S0504" name="Anchor">
    Anchor has obfuscated code with stack strings and string encryption.
   </Example>
   <Example id="S0584" name="AppleJeus">
    AppleJeus has XOR-encrypted collected system information prior to sending to a C2. AppleJeus has also used the open source ADVObfuscation library for its components.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed has the ability to Base64 encode its payload and custom encrypt API calls.
   </Example>
   <Example id="G0099" name="APT-C-36">
    APT-C-36 has used ConfuserEx to obfuscate its variant of Imminent Monitor, compressed payload and RAT packages, and password protected encrypted email attachments to avoid detection.
   </Example>
   <Example id="G0026" name="APT18">
    APT18 obfuscates strings in the payload.
   </Example>
   <Example id="G0073" name="APT19">
    APT19 used Base64 to obfuscate commands and the payload.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 encrypted a .dll payload using RTL and a custom encryption algorithm. APT28 has also obfuscated payloads with base64, XOR, and RC4.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used encoded PowerShell commands.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 obfuscates files or information to help evade defensive measures.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 uses the Invoke-Obfuscation framework to obfuscate their PowerShell and also performs other code obfuscation. APT32 has also encoded payloads using Base64 and a framework called "Dont-Kill-My-Cat (DKMC). APT32 also encrypts the library used for network exfiltration with AES-256 in CBC mode in their macOS backdoor.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has used base64 to encode payloads.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 obfuscates strings and payloads.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used malware to drop encrypted CAB files.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used VMProtected binaries in multiple intrusions.
   </Example>
   <Example id="G0143" name="Aquatic Panda">
    Aquatic Panda has encoded commands in Base64.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has used an encrypted configuration file for its loader.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth obfuscates its JScript code, and has used an XOR-based algorithm to encrypt payloads twice with different keys.
   </Example>
   <Example id="S0438" name="Attor">
    Strings in Attor's components are encrypted with a XOR cipher, using a hardcoded key and the configuration data, log files and plugins are encrypted using a hybrid encryption scheme of Blowfish-OFB combined with RSA.
   </Example>
   <Example id="S0347" name="AuditCred">
    AuditCred encrypts the configuration.
   </Example>
   <Example id="S0640" name="Avaddon">
    Avaddon has used encrypted strings.
   </Example>
   <Example id="S0473" name="Avenger">
    Avenger has the ability to XOR encrypt files to be sent to C2.
   </Example>
   <Example id="S0475" name="BackConfig">
    BackConfig has used compressed and decimal encoded VBS scripts.
   </Example>
   <Example id="G0135" name="BackdoorDiplomacy">
    BackdoorDiplomacy has obfuscated tools and malware it uses with VMProtect.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar has used XOR, RSA2, and RC4 encrypted files.
   </Example>
   <Example id="S0574" name="BendyBear">
    BendyBear has encrypted payloads using RC4 and XOR.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal's DLL file and non-malicious decoy file are encrypted with RC4 and some function name strings are obfuscated.
   </Example>
   <Example id="S0570" name="BitPaymer">
    BitPaymer has used RC4-encrypted strings and string hashes to avoid identifiable strings within the binary.
   </Example>
   <Example id="G1002" name="BITTER">
    BITTER has used a RAR SFX dropper to deliver malware.
   </Example>
   <Example id="G0063" name="BlackOasis">
    BlackOasis's first stage shellcode contains a NOP sled with alternative instructions that was likely designed to bypass antivirus tools.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has obfuscated code using Base64 encoding.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has obfuscated the wallet address in the payload binary.
   </Example>
   <Example id="S0657" name="BLUELIGHT">
    BLUELIGHT has a XOR-encoded payload.
   </Example>
   <Example id="S0635" name="BoomBox">
    BoomBox can encrypt data using AES prior to exfiltration.
   </Example>
   <Example id="S0415" name="BOOSTWRITE">
    BOOSTWRITE has encoded its payloads using a ChaCha stream cipher with a 256-bit key and 64-bit Initialization vector (IV) to evade detection.
   </Example>
   <Example id="S0651" name="BoxCaon">
    BoxCaon used the "StackStrings" obfuscation technique to hide malicious functionalities.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee has been delivered as password-protected zipped ISO files and used control-flow-flattening to obfuscate the flow of functions.
   </Example>
   <Example id="S0482" name="Bundlore">
    Bundlore has obfuscated data with base64, AES, RC4, and bz2.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors used Base64-encoded strings.
   </Example>
   <Example id="S0030" name="Carbanak">
    Carbanak encrypts strings to make analysis more difficult.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp has used XOR-based encryption to mask C2 server locations within the trojan.
   </Example>
   <Example id="S0335" name="Carbon">
    Carbon encrypts configuration files and tasks for the malware to complete using CAST-128 algorithm.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT encodes many of its artifacts and is encrypted (AES-128) when downloaded.
   </Example>
   <Example id="S0465" name="CARROTBALL">
    CARROTBALL has used a custom base64 alphabet to decode files.
   </Example>
   <Example id="S0462" name="CARROTBAT">
    CARROTBAT has the ability to download a base64 encoded payload and execute obfuscated commands on the infected host.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has encoded PowerShell commands.
   </Example>
   <Example id="S1041" name="Chinoxy">
    Chinoxy has encrypted its configuration file.
   </Example>
   <Example id="S0667" name="Chrommme">
    Chrommme can encrypt sections of its code to evade detection.
   </Example>
   <Example id="S0660" name="Clambling">
    The Clambling executable has been obfuscated when dropped on a compromised host.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group obfuscated several scriptlets and code used on the victim’s machine, including through use of XOR and RC4.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can hash functions to obfuscate calls to the Windows API and use a public/private key pair to encrypt Beacon session metadata.
   </Example>
   <Example id="S0369" name="CoinTicker">
    CoinTicker initially downloads a hidden encoded file.
   </Example>
   <Example id="S0244" name="Comnie">
    Comnie uses RC4 and Base64 to obfuscate strings.
   </Example>
   <Example id="S0126" name="ComRAT">
    ComRAT has used encryption and base64 to obfuscate its orchestrator code in the Registry. ComRAT has encrypted its virtual file system using AES-256 in XTS mode and has encoded PowerShell scripts.
   </Example>
   <Example id="S0608" name="Conficker">
    Conficker has obfuscated its code to prevent its removal from host machines.
   </Example>
   <Example id="S0575" name="Conti">
    Conti can use compiler-based obfuscation for its code, encrypt DLLs, and hide Windows API calls.
   </Example>
   <Example id="S0492" name="CookieMiner">
    CookieMiner has used base64 encoding to obfuscate scripts on the system.
   </Example>
   <Example id="S0137" name="CORESHELL">
    CORESHELL obfuscates strings using a custom stream cipher.
   </Example>
   <Example id="S0046" name="CozyCar">
    The payload of CozyCar is encrypted with simple XOR with a rotating key. The CozyCar configuration file has been encrypted with RC4 keys.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba has used multiple layers of obfuscation to avoid analysis, including its Base64 encoded payload.
   </Example>
   <Example id="S0497" name="Dacls">
    Dacls can encrypt its configuration file with AES CBC.
   </Example>
   <Example id="S1014" name="DanBot">
    DanBot can Base64 encode its payload.
   </Example>
   <Example id="G0070" name="Dark Caracal">
    Dark Caracal has obfuscated strings in Bandook by base64 encoding, and then encrypting them.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel has obfuscated code using RC4, XOR, and RSA.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman has used Base64 to encode PowerShell commands. DarkWatchman has been delivered as compressed RAR payloads in ZIP files to victims.
   </Example>
   <Example id="S0187" name="Daserf">
    Daserf uses encrypted Windows APIs and also encrypts data using the alternative base64+RC4 or the Caesar cipher.
   </Example>
   <Example id="S1033" name="DCSrv">
    DCSrv's configuration is encrypted.
   </Example>
   <Example id="S0354" name="Denis">
    Denis obfuscates its code and encrypts the API names. Denis also encodes its payload in Base64.
   </Example>
   <Example id="S0659" name="Diavol">
    Diavol has Base64 encoded the RSA public key used for encrypting files.
   </Example>
   <Example id="S0213" name="DOGCALL">
    DOGCALL is encrypted using single-byte XOR.
   </Example>
   <Example id="S0695" name="Donut">
    Donut can generate encrypted, compressed/encoded, or otherwise obfuscated code modules.
   </Example>
   <Example id="S0694" name="DRATzarus">
    DRATzarus can be partly encrypted with XOR.
   </Example>
   <Example id="S0384" name="Dridex">
    Dridex's strings are obfuscated using RC4.
   </Example>
   <Example id="S0502" name="Drovorub">
    Drovorub has used XOR encrypted payloads in WebSocket client to server messages.
   </Example>
   <Example id="S0062" name="DustySky">
    The DustySky dropper uses a function to obfuscate the name of functions and other parts of the malware.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca used Base64 to encode strings.
   </Example>
   <Example id="S0377" name="Ebury">
    Ebury has obfuscated its strings with a simple XOR encryption with a static key.
   </Example>
   <Example id="S0593" name="ECCENTRICBANDWAGON">
    ECCENTRICBANDWAGON has encrypted strings with RC4.
   </Example>
   <Example id="S0624" name="Ecipekac">
    Ecipekac can use XOR, AES, and DES to encrypt loader shellcode.
   </Example>
   <Example id="S0605" name="EKANS">
    EKANS uses encoded strings in its process kill list.
   </Example>
   <Example id="G0066" name="Elderwood">
    Elderwood has encrypted documents and malicious executables.
   </Example>
   <Example id="S0081" name="Elise">
    Elise encrypts several of its files, including configuration files.
   </Example>
   <Example id="G1003" name="Ember Bear">
    Ember Bear has obfuscated malware and malicious scripts to help avoid detection.
   </Example>
   <Example id="S0082" name="Emissary">
    Variants of Emissary encrypt payloads using various XOR ciphers, as well as a custom algorithm that uses the "srand" and "rand" functions.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has obfuscated macros within malicious documents to hide the URLs hosting the malware,  CMD.exe arguments, and PowerShell scripts.
   </Example>
   <Example id="S0363" name="Empire">
    Empire has the ability to obfuscate commands using Invoke-Obfuscation.
   </Example>
   <Example id="S0634" name="EnvyScout">
    EnvyScout can Base64 encode payloads.
   </Example>
   <Example id="S0091" name="Epic">
    Epic heavily obfuscates its code to make analysis more difficult.
   </Example>
   <Example id="S0401" name="Exaramel for Linux">
    Exaramel for Linux uses RC4 for encrypting the configuration.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke can use base64 encoding, string stacking, and opaque predicates for obfuscation.
   </Example>
   <Example id="S0267" name="FELIXROOT">
    FELIXROOT encrypts strings in the backdoor using a custom XOR algorithm.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used encoded PowerShell commands.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has used fragmented strings, environment variables, standard input (stdin), and native character-replacement functionalities to obfuscate commands.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has used environment variables and standard input (stdin) to obfuscate command-line arguments. FIN8 also obfuscates malicious macros delivered as payloads.
   </Example>
   <Example id="S0355" name="Final1stspy">
    Final1stspy obfuscates strings with base64 encoding.
   </Example>
   <Example id="S0182" name="FinFisher">
    FinFisher is heavily obfuscated in many ways, including through the use of spaghetti code in its functions in an effort to confuse disassembly programs. It also uses a custom XOR algorithm to obfuscate code.
   </Example>
   <Example id="S0618" name="FIVEHANDS">
    The FIVEHANDS payload is encrypted with AES-128.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro has been delivered within ZIP or RAR password-protected archived files.
   </Example>
   <Example id="S0383" name="FlawedGrace">
    FlawedGrace encrypts its C2 configuration files with AES in CBC mode.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb has been XOR-encoded.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has base64 encoded scripts and payloads to avoid detection.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors ran encoded commands from the command line.
   </Example>
   <Example id="S0277" name="FruitFly">
    FruitFly executes and stores obfuscated Perl scripts.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can Base64 encode its C2 address stored in a template binary with the xyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvw_- orxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvw_= character sets.
   </Example>
   <Example id="S0410" name="Fysbis">
    Fysbis has been encrypted using XOR and RC4.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM used a modified version of HTRAN in which they obfuscated strings such as debug messages in an apparent attempt to evade detection.
   </Example>
   <Example id="G0084" name="Gallmaker">
    Gallmaker obfuscated shellcode used during execution.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has delivered self-extracting 7z archive files within malicious document attachments, and used obfuscated or encrypted scripts.
   </Example>
   <Example id="S0168" name="Gazer">
    Gazer logs its actions into files that are encrypted with 3DES. It also uses RSA to encrypt resources.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium has the ability to compress its components.
   </Example>
   <Example id="G0115" name="GOLD SOUTHFIELD">
    GOLD SOUTHFIELD has executed base64 encoded PowerShell scripts on compromised hosts.
   </Example>
   <Example id="S0493" name="GoldenSpy">
    GoldenSpy's uninstaller has base64-encoded its variables.
   </Example>
   <Example id="S0588" name="GoldMax">
    GoldMax has written AES-encrypted and Base64-encoded configuration files to disk.
   </Example>
   <Example id="S0477" name="Goopy">
    Goopy's decrypter have been inflated with junk code in between legitimate API functions, and also included infinite loops to avoid analysis.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    The Grandoreiro payload has been delivered encrypted with a custom XOR-based algorithm and also as a base64-encoded ZIP file.
   </Example>
   <Example id="S0237" name="GravityRAT">
    GravityRAT supports file encryption (AES with the key "lolomycin2017").
   </Example>
   <Example id="S0690" name="Green Lambert">
    Green Lambert has encrypted strings.
   </Example>
   <Example id="S0342" name="GreyEnergy">
    GreyEnergy encrypts its configuration files with AES-256 and also encrypts its strings.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent has used Rotate on Right (RoR) and Rotate on Left (RoL) functionality to encrypt strings.
   </Example>
   <Example id="G0043" name="Group5">
    Group5 disguised its malicious binaries with several layers of obfuscation, including encrypting the files.
   </Example>
   <Example id="S0132" name="H1N1">
    H1N1 uses multiple techniques to obfuscate strings, including XOR.
   </Example>
   <Example id="S0499" name="Hancitor">
    Hancitor has used Base64 to encode malicious links. Hancitor has also delivered compressed payloads in ZIP files to victims.
   </Example>
   <Example id="S0391" name="HAWKBALL">
    HAWKBALL has encrypted the payload with an XOR-based algorithm.
   </Example>
   <Example id="S0170" name="Helminth">
    The Helminth config file is encrypted with RC4.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper can compress 32-bit and 64-bit driver files with the Lempel-Ziv algorithm.
   </Example>
   <Example id="S0698" name="HermeticWizard">
    HermeticWizard has the ability to encrypt PE files with a reverse XOR loop.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has used Base64-encoded scripts.
   </Example>
   <Example id="S1027" name="Heyoka Backdoor">
    Heyoka Backdoor can encrypt its payload.
   </Example>
   <Example id="S0087" name="Hi-Zor">
    Hi-Zor uses various XOR techniques to obfuscate its components.
   </Example>
   <Example id="S0394" name="HiddenWasp">
    HiddenWasp encrypts its configuration and payload.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa used Base64 encoded compressed payloads.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has encrypted an ELF file.
   </Example>
   <Example id="S0232" name="HOMEFRY">
    Some strings in HOMEFRY are obfuscated with XOR x56.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant has encrypted strings with single-byte XOR and base64 encoded RC4.
   </Example>
   <Example id="S0070" name="HTTPBrowser">
    HTTPBrowser's code may be obfuscated through structured exception handling and return-oriented programming.
   </Example>
   <Example id="S0203" name="Hydraq">
    Hydraq uses basic obfuscation in the form of spaghetti code.
   </Example>
   <Example id="S0398" name="HyperBro">
    HyperBro can be delivered encrypted to a compromised host.
   </Example>
   <Example id="S1022" name="IceApple">
    IceApple can use Base64 and "junk" JavaScript code to obfuscate information.
   </Example>
   <Example id="S0483" name="IcedID">
    IcedID has utilzed encrypted binaries and base64 encoded strings.
   </Example>
   <Example id="S0434" name="Imminent Monitor">
    Imminent Monitor has encrypted the spearphish attachments to avoid detection from email gateways; the debugger also encrypts information before sending to the C2.
   </Example>
   <Example id="G0100" name="Inception">
    Inception has encrypted malware payloads dropped on victim machines with AES and RC4 encryption.
   </Example>
   <Example id="S0604" name="Industroyer">
    Industroyer uses heavily obfuscated code in its Windows Notepad backdoor.
   </Example>
   <Example id="S0259" name="InnaputRAT">
    InnaputRAT uses an 8-byte XOR key to obfuscate API names and other strings contained in the payload.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole avoids analysis by encrypting all strings, internal files, configuration data and by using a custom executable format.
   </Example>
   <Example id="S0581" name="IronNetInjector">
    IronNetInjector can obfuscate variable names, encrypt strings, as well as base64 encode and Rijndael encrypt payloads.
   </Example>
   <Example id="S0189" name="ISMInjector">
    ISMInjector is obfuscated with the off-the-shelf SmartAssembly .NET obfuscator created by red-gate.com.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    Many strings in JHUHUGIT are obfuscated with a XOR algorithm.
   </Example>
   <Example id="S0201" name="JPIN">
    A JPIN uses a encrypted and compressed payload that is disguised as a bitmap within the resource section of the installer.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT’s Java payload is encrypted with AES.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar is obfuscated using the open source ConfuserEx protector. Kazuar also obfuscates the name of created files/folders/mutexes and encrypts debug messages written to log files using the Rijndael cipher.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has used Base64-encoded shellcode strings.
   </Example>
   <Example id="S0585" name="Kerrdown">
    Kerrdown can encrypt, encode, and compress multiple layers of shellcode.
   </Example>
   <Example id="S0487" name="Kessel">
    Kessel's configuration is hardcoded and RC4 encrypted within the binary.
   </Example>
   <Example id="S1020" name="Kevin">
    Kevin has Base64-encoded its configuration file.
   </Example>
   <Example id="S0387" name="KeyBoy">
    In one version of KeyBoy, string obfuscation routines were used to hide many of the critical values referenced in the malware.
   </Example>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY has used encrypted strings in its installer.
   </Example>
   <Example id="S0607" name="KillDisk">
    KillDisk uses VMProtect to make reverse engineering the malware more difficult.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has obfuscated binary strings including the use of XOR encryption and Base64 encoding.
   </Example>
   <Example id="S0641" name="Kobalos">
    Kobalos encrypts all strings using RC4 and bundles all functionality into a single function call.
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS has obfuscated scripts with the BatchEncryption tool.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI is heavily obfuscated and includes encrypted configuration files.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs downloads additional files that are base64-encoded and encrypted with another cipher.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used multiple types of encryption and encoding for their payloads, including AES, Caracachs, RC4, XOR, Base64, and other tricks such as creating aliases in code for Native API function names.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter has leveraged the BatchEncryption tool to perform advanced batch obfuscation and encoding techniques.
   </Example>
   <Example id="G0077" name="Leafminer">
    Leafminer obfuscated scripts that were used on victim machines.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has obfuscated code using base64 and gzip compression.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron encrypts its configuration files with AES-256.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has obfuscated strings with base64 encoding.
   </Example>
   <Example id="S0451" name="LoudMiner">
    LoudMiner has obfuscated various scripts and encrypted DMG files.
   </Example>
   <Example id="S0409" name="Machete">
    Machete has used pyobfuscate, zlib compression, and base64 encoding for obfuscation. Machete has also used some visual obfuscation techniques by naming variables as combinations of letters to hinder analysis.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound malware has used base64-encoded commands and files, and has also encrypted embedded strings with AES.
   </Example>
   <Example id="S0167" name="Matryoshka">
    Matryoshka obfuscates API function names using a substitute cipher combined with Base64 encoding.
   </Example>
   <Example id="S0449" name="Maze">
    Maze has decrypted strings and other important information during the encryption process. Maze also calls certain functions dynamically to hinder analysis.
   </Example>
   <Example id="S0500" name="MCMD">
    MCMD can Base64 encode output strings prior to sending to C2.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has encoded strings in its malware with base64 as well as with a simple, single-byte XOR obfuscation using key 0x40.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has encrypted payloads and strings.
   </Example>
   <Example id="S0339" name="Micropsia">
    Micropsia obfuscates the configuration with a custom Base64 and XOR.
   </Example>
   <Example id="S1015" name="Milan">
    Milan can encode files containing information about the targeted system.
   </Example>
   <Example id="S0051" name="MiniDuke">
    MiniDuke can use control flow flattening to obscure code.
   </Example>
   <Example id="G0103" name="Mofang">
    Mofang has compressed the ShimRat executable within malicious email attachments. Mofang has also encrypted payloads before they are downloaded to victims.
   </Example>
   <Example id="G0021" name="Molerats">
    Molerats has delivered compressed executables within ZIP files to victims.
   </Example>
   <Example id="S0284" name="More_eggs">
    More_eggs's payload has been encrypted with a key that has the hostname and processor family information appended to the end.
   </Example>
   <Example id="G1009" name="Moses Staff">
    Moses Staff has used obfuscated web shells in their operations.
   </Example>
   <Example id="S0256" name="Mosquito">
    Mosquito’s installer is obfuscated with a custom crypter to obfuscate the installer.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used Daniel Bohannon’s Invoke-Obfuscation framework and obfuscated PowerShell scripts.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has delivered initial payloads hidden using archives and encoding measures.
   </Example>
   <Example id="S0228" name="NanHaiShu">
    NanHaiShu encodes files in Base64.
   </Example>
   <Example id="S0336" name="NanoCore">
    NanoCore’s plugins were obfuscated with Eazfuscater.NET 3.3.
   </Example>
   <Example id="S0457" name="Netwalker">
    Netwalker's PowerShell script has been obfuscated with multiple layers including base64 and hexadecimal encoding and XOR-encryption, as well as obfuscated PowerShell functions and variables. Netwalker's DLL has also been embedded within the PowerShell script in hex format.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE has used a custom obfuscation algorithm to hide strings including Registry keys, APIs, and DLL names.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors used a DLL that included an XOR-encoded section.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT has included a base64 encoded executable.
   </Example>
   <Example id="S0353" name="NOKKI">
    NOKKI uses Base64 encoding for strings.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has encrypted and encoded data in its malware, including by using base64.
   </Example>
   <Example id="S0138" name="OLDBAIT">
    OLDBAIT obfuscates internal strings and unpacks them at startup.
   </Example>
   <Example id="S0264" name="OopsIE">
    OopsIE uses the Confuser protector to obfuscate an embedded .Net Framework assembly used for C2. OopsIE also encodes collected data in hexadecimal format before writing to files on disk and obfuscates strings.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors executed an encoded VBScript file.
   </Example>
   <Example id="C0016" name="Operation Dust Storm">
    During Operation Dust Storm, the threat actors encoded some payloads with a single-byte XOR, both skipping the key itself and zeroing in an attempt to avoid exposing the key; other payloads were Base64-encoded.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, the threat actors used Base64 to encode files with a custom key.
   </Example>
   <Example id="C0005" name="Operation Spalax">
    For Operation Spalax, the threat actors used XOR-encrypted payloads.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors executed PowerShell commands which were encoded or compressed using Base64, zlib, and XOR.
   </Example>
   <Example id="S0229" name="Orz">
    Some Orz strings are base64 encoded, such as the embedded DLL known as MockDll.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    OSX_OCEANLOTUS.D encrypts its strings in RSA256 and encodes them in a custom base64 scheme and XOR.
   </Example>
   <Example id="S0594" name="Out1">
    Out1 has the ability to encode data.
   </Example>
   <Example id="S0598" name="P.A.S. Webshell">
    P.A.S. Webshell can use encryption and base64 encoding to hide strings and to enforce access control once deployed.
   </Example>
   <Example id="S0664" name="Pandora">
    Pandora has the ability to compress stings with QuickLZ.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork has obfuscated a script with Crypto Obfuscator.
   </Example>
   <Example id="S1050" name="PcShare">
    PcShare has been encrypted with XOR using different 32-long Base16 strings and compressed with LZW algorithm.
   </Example>
   <Example id="S0587" name="Penquin">
    Penquin has encrypted strings in the binary for obfuscation.
   </Example>
   <Example id="S0517" name="Pillowmint">
    Pillowmint has been compressed and stored within a registry key. Pillowmint has also obfuscated the AES key used for encryption.
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon modules are stored encrypted on disk.
   </Example>
   <Example id="S0124" name="Pisloader">
    Pisloader obfuscates files by splitting strings into smaller sub-strings and including "garbage" strings that are never used. The malware also uses return-oriented programming (ROP) technique and single-byte XOR to obfuscate data.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX can use API hashing and modify the names of strings to evade detection.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has used a custom encryption scheme for communication between scripts and pyminifier to obfuscate scripts.
   </Example>
   <Example id="S0012" name="PoisonIvy">
    PoisonIvy hides any strings related to its own indicators of compromise.
   </Example>
   <Example id="S0518" name="PolyglotDuke">
    PolyglotDuke can custom encrypt strings.
   </Example>
   <Example id="S0453" name="Pony">
    Pony attachments have been delivered via compressed archive files. Pony also obfuscates the memory flow by adding junk instructions when executing to make analysis more difficult.
   </Example>
   <Example id="S0150" name="POSHSPY">
    POSHSPY appends a file signature header (randomly selected from six file types) to encrypted data prior to upload or download.
   </Example>
   <Example id="S0685" name="PowerPunch">
    PowerPunch can use Base64-encoded scripts.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit contains a collection of ScriptModification modules that compress and encode scripts and payloads.
   </Example>
   <Example id="S0393" name="PowerStallion">
    PowerStallion uses a XOR cipher to encrypt command output written to its OneDrive C2 server.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS uses character replacement, PowerShell environment variables, and XOR encoding to obfuscate code. POWERSTATS's backdoor code is a multi-layer obfuscated, encoded, and compressed blob.
   </Example>
   <Example id="S0113" name="Prikormka">
    Some resources in Prikormka are encrypted with a simple XOR operation or encoded with Base64.
   </Example>
   <Example id="S0613" name="PS1">
    PS1 is distributed as a set of encrypted files and scripts.
   </Example>
   <Example id="S0196" name="PUNCHBUGGY">
    PUNCHBUGGY has hashed most its code's functions and encrypted payloads with base64 and XOR.
   </Example>
   <Example id="S0197" name="PUNCHTRACK">
    PUNCHTRACK is loaded and executed by a highly obfuscated launcher.
   </Example>
   <Example id="G0024" name="Putter Panda">
    Droppers used by Putter Panda use RC4 or a 16-byte XOR key consisting of the bytes 0xA0 – 0xAF to obfuscate payloads.
   </Example>
   <Example id="S1032" name="PyDCrypt">
    PyDCrypt has been compiled and encrypted with PyInstaller, specifically using the --key flag during the build phase.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can use obfuscated and encoded scripts; it has also hidden code within Excel spreadsheets by turning the font color to white and splitting it across multiple cells.
   </Example>
   <Example id="S0269" name="QUADAGENT">
    QUADAGENT was likely obfuscated using Invoke-Obfuscation.
   </Example>
   <Example id="S0565" name="Raindrop">
    Raindrop encrypted its payload using a simple XOR algorithm with a single-byte key.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay has downloaded as a XOR-encrypted payload.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay has base64-encoded its portable executable and hidden itself under a JPG header. Ramsay can also embed information within document footers.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession can compress and obfuscate its strings to evade detection on a compromised host.
   </Example>
   <Example id="S0172" name="Reaver">
    Reaver encrypts some of its files with XOR.
   </Example>
   <Example id="S0153" name="RedLeaves">
    A RedLeaves configuration file is encrypted with a simple XOR key, 0x53.
   </Example>
   <Example id="S0511" name="RegDuke">
    RegDuke can use control-flow flattening or the commercially available .NET Reactor for obfuscation.
   </Example>
   <Example id="S0332" name="Remcos">
    Remcos uses RC4 and base64 to obfuscate data, including Registry entries and file paths.
   </Example>
   <Example id="S0375" name="Remexi">
    Remexi obfuscates its configuration data with XOR.
   </Example>
   <Example id="S0125" name="Remsec">
    Some data in Remsec is encrypted using RC5 in CBC mode, AES-CBC with a hardcoded key, RC4, or Salsa20. Some data is also base64-encoded.
   </Example>
   <Example id="S0496" name="REvil">
    REvil has used encrypted strings and configuration files.
   </Example>
   <Example id="S0433" name="Rifdoor">
    Rifdoor has encrypted strings with a single byte XOR algorithm.
   </Example>
   <Example id="S0448" name="Rising Sun">
    Configuration data used by Rising Sun has been encrypted using an RC4 stream algorithm.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has modified UPX headers after packing files to break unpackers.
   </Example>
   <Example id="S0270" name="RogueRobin">
    The PowerShell script with the RogueRobin payload was obfuscated using the COMPRESS technique in Invoke-Obfuscation.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can encrypt data prior to exfiltration by using an RSA public key.
   </Example>
   <Example id="S0148" name="RTM">
    RTM strings, network data, configuration, and modules are encrypted with a modified RC4 algorithm. RTM has also been delivered to targets as various archive files including ZIP, 7-ZIP, and RAR.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk can use anti-disassembly and code transformation obfuscation techniques.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has been obfuscated to help avoid detection.
   </Example>
   <Example id="S0074" name="Sakula">
    Sakula uses single-byte XOR obfuscation to obfuscate many of its files.
   </Example>
   <Example id="S0370" name="SamSam">
    SamSam has been seen using AES or DES to encrypt payloads and payload components.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used Base64 encoding within malware variants. Sandworm Team has also used ROT13 encoding, AES encryption and compression with the zlib library for their Python-based backdoor.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has the ability to XOR the strings for its installer component with a hardcoded 128 byte key.
   </Example>
   <Example id="S0345" name="Seasalt">
    Seasalt obfuscates configuration data.
   </Example>
   <Example id="S0596" name="ShadowPad">
    ShadowPad has encrypted its payload, a virtual file system, and various files.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon contains base64-encoded strings.
   </Example>
   <Example id="S1019" name="Shark">
    Shark can use encrypted and encoded files for C2 configuration.
   </Example>
   <Example id="S0450" name="SHARPSTATS">
    SHARPSTATS has used base64 encoding and XOR to obfuscate PowerShell scripts.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat has been delivered as a package that includes compressed DLL and shellcode payloads within a .dat file.
   </Example>
   <Example id="S0445" name="ShimRatReporter">
    ShimRatReporter encrypted gathered information with a combination of shifting and XOR using a static key.
   </Example>
   <Example id="S0063" name="SHOTPUT">
    SHOTPUT is obscured using XOR encoding and appended to a valid GIF file.
   </Example>
   <Example id="S0589" name="Sibot">
    Sibot has obfuscated scripts used in execution.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has used base64 encoding and ECDH-P256 encryption for scripts and files.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has used environment variable string substitution for obfuscation.
   </Example>
   <Example id="S0623" name="Siloscape">
    Siloscape itself is obfuscated and uses obfuscated API calls.
   </Example>
   <Example id="S0468" name="Skidmap">
    Skidmap has encrypted it's main payload using 3DES.
   </Example>
   <Example id="S0633" name="Sliver">
    Sliver can encrypt strings at compile time.
   </Example>
   <Example id="S1035" name="Small Sieve">
    Small Sieve has the ability to use a custom hex byte swapping encoding scheme combined with an obfuscated Base64 function to protect program strings and Telegram credentials.
   </Example>
   <Example id="S0226" name="Smoke Loader">
    Smoke Loader uses a simple one-byte XOR method to obfuscate values in the malware.
   </Example>
   <Example id="S0627" name="SodaMaster">
    SodaMaster can use "stackstrings" for obfuscation.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT can encrypt strings with XOR-based routines and use a custom AES storage format for plugins, configuration, C2 domains, and harvested data.
   </Example>
   <Example id="S0516" name="SoreFang">
    SoreFang has the ability to encode and RC6 encrypt data sent to C2.
   </Example>
   <Example id="S0374" name="SpeakUp">
    SpeakUp encodes its second-stage payload with Base64.
   </Example>
   <Example id="S0390" name="SQLRat">
    SQLRat has used a character insertion obfuscation technique, making the script appear to contain Chinese characters.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has been obfuscated with a XOR-based algorithm.
   </Example>
   <Example id="S1037" name="STARWHALE">
    STARWHALE has been obfuscated with hex-encoded strings.
   </Example>
   <Example id="S0380" name="StoneDrill">
    StoneDrill has obfuscated its module with an alphabet-based table or XOR encryption.
   </Example>
   <Example id="S0142" name="StreamEx">
    StreamEx obfuscates some commands by using statically programmed fragments of strings when starting a DLL. It also uses a one-byte xor against 0x91 to encode configuration data.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity has used encrypted strings in its dropper component.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet uses encrypted configuration blocks and writes encrypted files to disk.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST strings were compressed and encoded in Base64.
   </Example>
   <Example id="S0562" name="SUNSPOT">
    SUNSPOT encrypted log entries it collected with the stream cipher RC4 using a hard-coded key. It also uses AES128-CBC encrypted blobs for SUNBURST source code and data extracted from the SolarWinds Orion &lt;MsBuild.exe process.
   </Example>
   <Example id="S0578" name="SUPERNOVA">
    SUPERNOVA contained Base64-encoded strings.
   </Example>
   <Example id="S0242" name="SynAck">
    SynAck payloads are obfuscated prior to compilation to inhibit analysis and/or reverse engineering.
   </Example>
   <Example id="S0663" name="SysUpdate">
    SysUpdate can encrypt and encode its configuration file.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has password-protected malicious Word documents and used base64 encoded PowerShell commands.
   </Example>
   <Example id="G0127" name="TA551">
    TA551 has used obfuscated variable names in a JavaScript configuration file.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor can use encrypted string blocks for obfuscation.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has used an encrypted Virtual File System to store plugins.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has encrypted its binaries via AES and encoded files using Base64.
   </Example>
   <Example id="S0560" name="TEARDROP">
    TEARDROP created and read from a file with a fake JPG header, and its payload was encrypted with a simple rotating XOR cipher.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    A Threat Group-3390 tool can encrypt payloads using XOR. Threat Group-3390 malware is also obfuscated using Metasploit’s shikata_ga_nai encoder as well as compressed with LZNT1 compression.
   </Example>
   <Example id="S0665" name="ThreatNeedle">
    ThreatNeedle has been compressed and obfuscated using RC4, AES, or XOR.
   </Example>
   <Example id="S0131" name="TINYTYPHON">
    TINYTYPHON has used XOR with 0x90 to obfuscate its configuration file.
   </Example>
   <Example id="S0678" name="Torisma">
    Torisma has been Base64 encoded and AES encrypted.
   </Example>
   <Example id="G0134" name="Transparent Tribe">
    Transparent Tribe has dropped encoded executables on compromised hosts.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot uses non-descriptive names to hide functionality and uses an AES CBC (256 bits) encryption algorithm for its loader and configuration files.
   </Example>
   <Example id="S0609" name="TRITON">
    TRITON encoded the two inject.bin and imain.bin payloads.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can base64 encode and AES-128-CBC encrypt data prior to transmission.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has encrypted configuration files.
   </Example>
   <Example id="S0647" name="Turian">
    Turian can use VMProtect for obfuscation.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used encryption (including salted 3DES via PowerSploit's Out-EncryptedScript.ps1), random variable names, and base64 encoding to obfuscate PowerShell commands and payloads.
   </Example>
   <Example id="S0263" name="TYPEFRAME">
    APIs and strings in some TYPEFRAME variants are RC4 encrypted. Another variant is encoded with XOR.
   </Example>
   <Example id="S0333" name="UBoatRAT">
    UBoatRAT encrypts instructions in the payload using a simple XOR cipher.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has used an XOR-based algorithm to encrypt Tor clients dropped to disk.
   </Example>
   <Example id="S0136" name="USBStealer">
    Most strings in USBStealer are encrypted using 3DES and XOR and reversed.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has the ability to base64 encode and XOR encrypt strings.
   </Example>
   <Example id="S0257" name="VERMIN">
    VERMIN is obfuscated using the obfuscation tool called ConfuserEx.
   </Example>
   <Example id="S0180" name="Volgmer">
    A Volgmer variant is encoded using a simple XOR cipher.
   </Example>
   <Example id="S0612" name="WastedLocker">
    The WastedLocker payload includes encrypted strings stored within the .bss section of the binary file.
   </Example>
   <Example id="S0579" name="Waterbear">
    Waterbear has used RC4 encrypted shellcode and encrypted functions.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can Base64 encode strings, store downloaded files in reverse byte order,  and use the Eazfuscator tool to obfuscate its third stage.
   </Example>
   <Example id="G0107" name="Whitefly">
    Whitefly has encrypted the payload used for C2.
   </Example>
   <Example id="G0112" name="Windshift">
    Windshift has used string encoding with floating point calculations.
   </Example>
   <Example id="S0466" name="WindTail">
    WindTail can be delivered as a compressed, encrypted, and encoded payload.
   </Example>
   <Example id="S0430" name="Winnti for Linux">
    Winnti for Linux can encode its configuration file with single-byte XOR encoding.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    Winnti for Windows has the ability to encrypt and compress its payload.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider used Base64 encoding to obfuscate an Empire service and PowerShell commands.
   </Example>
   <Example id="S0117" name="XTunnel">
    A version of XTunnel introduced in July 2015 obfuscated the binary using opaque predicates and other techniques in a likely attempt to obfuscate it and bypass security products.
   </Example>
   <Example id="S0388" name="YAHOYAH">
    YAHOYAH encrypts its configuration file using a simple algorithm.
   </Example>
   <Example id="S0230" name="ZeroT">
    ZeroT has encrypted its payload with RC4.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda encrypts strings with XOR and obfuscates the macro code from the initial payload. Zeus Panda also encrypts all configuration and settings in AES and RC4.
   </Example>
   <Example id="S0672" name="Zox">
    Zox has been encoded with Base64.
   </Example>
   <Example id="S1013" name="ZxxZ">
    ZxxZ has been encoded to avoid detection from static analysis tools.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1049" name="Antivirus/Antimalware">
    Anti-virus can be used to automatically detect and quarantine suspicious files. Consider utilizing the Antimalware Scan Interface (AMSI) on Windows 10 to analyze commands after being processed/interpreted.
   </Mitigation>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent execution of potentially obfuscated payloads.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Metadata
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1027.001" name="Obfuscated Files or Information: Binary Padding">
  Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Signature-based detection
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-572, CAPEC-655
  </CAPEC_ID>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 has used large file sizes to avoid detection.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 includes garbage code to mislead anti-malware software and researchers.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has appended random binary data to the end of itself to generate a large binary.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER downloader code has included "0" characters at the end of the file to inflate the file size in a likely attempt to evade anti-virus detection.
   </Example>
   <Example id="S0244" name="Comnie">
    Comnie appends a total of 64MB of garbage data to a file to deter any security products in place that may be scanning files on disk.
   </Example>
   <Example id="S0137" name="CORESHELL">
    CORESHELL contains unused machine instructions in a likely attempt to hinder analysis.
   </Example>
   <Example id="S0614" name="CostaBricks">
    CostaBricks has added the entire unobfuscated code of the legitimate open source application Blink to its code.
   </Example>
   <Example id="G1003" name="Ember Bear">
    Ember Bear has added extra spaces between JavaScript code characters to increase the overall file size.
   </Example>
   <Example id="S0082" name="Emissary">
    A variant of Emissary appends junk data to the end of its DLL file to create a large file that may exceed the maximum size that anti-virus programs can scan.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke has been packed with junk code and strings.
   </Example>
   <Example id="S0182" name="FinFisher">
    FinFisher contains junk code in its functions in an effort to confuse disassembly programs.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has obfuscated .NET executables by inserting junk code.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can use junk code to hide functions and evade detection.
   </Example>
   <Example id="S0477" name="Goopy">
    Goopy has had null characters padded in its malicious DLL payload.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro has added BMP images to the resources section of its Portable Executable (PE) file increasing each binary to at least 300MB in size.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent has the ability to add bytes to change the file hash.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa performed padding with null bytes before calculating its hash.
   </Example>
   <Example id="S0528" name="Javali">
    Javali can use large obfuscated libraries to hinder detection and analysis.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Before writing to disk, Kwampirs inserts a randomly generated string into the middle of the decrypted payload in an attempt to evade hash-based detections.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has inserted garbage characters into code, presumably to avoid anti-virus detection.
   </Example>
   <Example id="S0449" name="Maze">
    Maze has inserted large blocks of junk code, including some components to decrypt strings and other important information for later in the encryption process.
   </Example>
   <Example id="G0002" name="Moafee">
    Moafee has been known to employ binary padding.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has used junk code within their DLL files to hinder analysis.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork apparently altered NDiskMonitor samples by adding four bytes of random letters in a likely attempt to change the file hashes.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS has used useless code blocks to counter analysis.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can use large file sizes to evade detection.
   </Example>
   <Example id="S0433" name="Rifdoor">
    Rifdoor has added four additional bytes of data upon launching, then saved the changed version as C:\ProgramData\Initech\Initech.exe.
   </Example>
   <Example id="S0370" name="SamSam">
    SamSam has used garbage code to pad some of its malware components.
   </Example>
   <Example id="S0586" name="TAINTEDSCRIBE">
    TAINTEDSCRIBE can execute FileRecvWriteRand to append random bytes to the end of a file received from C2.
   </Example>
   <Example id="S0612" name="WastedLocker">
    WastedLocker contains junk code to increase its entropy and hide the actual code.
   </Example>
   <Example id="S0117" name="XTunnel">
    A version of XTunnel introduced in July 2015 inserted junk code into the binary in a likely attempt to obfuscate it and bypass security products.
   </Example>
   <Example id="S0248" name="yty">
    yty contains junk code in its binary, likely to confuse malware analysts.
   </Example>
   <Example id="S0230" name="ZeroT">
    ZeroT has obfuscated DLLs and functions using dummy API calls inserted between real instructions.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0022" name="File">
    File Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1027.002" name="Obfuscated Files or Information: Software Packing">
  Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Heuristic detection, Signature-based detection
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-570
  </CAPEC_ID>
  <Examples>
   <Example id="S0504" name="Anchor">
    Anchor has come with a packed payload.
   </Example>
   <Example id="G1007" name="Aoqin Dragon">
    Aoqin Dragon has used the Themida packer to obfuscate malicious payloads.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed has used UPX packers for its payload DLL.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 used UPX to pack files.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has been known to pack their tools.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has used several code packing methods such as Themida, Enigma, VMProtect, and Obsidium, to pack their implants.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has packed tools with UPX, and has repacked a modified version of Mimikatz to thwart anti-virus detection.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth uses a software packer called Pe123\RPolyCryptor.
   </Example>
   <Example id="S0638" name="Babuk">
    Versions of Babuk have been packed.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar has a variant with a packed payload.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has used the MPRESS packer and similar tools for obfuscation.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has been packed with the UPX packer.
   </Example>
   <Example id="S0020" name="China Chopper">
    China Chopper's client component is packed with UPX.
   </Example>
   <Example id="S0611" name="Clop">
    Clop has been packed to help avoid detection.
   </Example>
   <Example id="S0614" name="CostaBricks">
    CostaBricks can implement a custom-built virtual machine mechanism to obfuscate its code.
   </Example>
   <Example id="S0527" name="CSPY Downloader">
    CSPY Downloader has been packed with UPX.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba has a packed payload when delivered.
   </Example>
   <Example id="G0070" name="Dark Caracal">
    Dark Caracal has used UPX to pack Bandook.
   </Example>
   <Example id="S0334" name="DarkComet">
    DarkComet has the option to compress its payload using UPX or MPRESS.
   </Example>
   <Example id="S0187" name="Daserf">
    A version of Daserf uses the MPRESS packer.
   </Example>
   <Example id="S0281" name="Dok">
    Dok is packed with an UPX executable packer.
   </Example>
   <Example id="S0695" name="Donut">
    Donut can generate packed code modules.
   </Example>
   <Example id="S0694" name="DRATzarus">
    DRATzarus's dropper can be packed with UPX.
   </Example>
   <Example id="S0024" name="Dyre">
    Dyre has been delivered with encrypted resources and must be unpacked for execution.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor's payloads are custom-packed, archived and encrypted to prevent analysis.
   </Example>
   <Example id="G0066" name="Elderwood">
    Elderwood has packed malware payloads before delivery to victims.
   </Example>
   <Example id="G1003" name="Ember Bear">
    Ember Bear has packed malware to help avoid detection.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has used custom packers to protect its payloads.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke has been regularly repacked by its operators to create large binaries and evade detection.
   </Example>
   <Example id="S0182" name="FinFisher">
    A FinFisher variant uses a custom packer.
   </Example>
   <Example id="S0628" name="FYAnti">
    FYAnti has used ConfuserEx to pack its .NET module.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM packed some payloads using different types of packers, both known and custom.
   </Example>
   <Example id="S0588" name="GoldMax">
    GoldMax has been packed for obfuscation.
   </Example>
   <Example id="S0342" name="GreyEnergy">
    GreyEnergy is packed for obfuscation.
   </Example>
   <Example id="S0132" name="H1N1">
    H1N1 uses a custom packing algorithm.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has packed ELF files into other binaries.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant has used the open source UPX executable packer.
   </Example>
   <Example id="S0398" name="HyperBro">
    HyperBro has the ability to pack its payload.
   </Example>
   <Example id="S0483" name="IcedID">
    IcedID has packed and encrypted its loader module.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT payloads have been packed.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has packed malware with UPX.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has been packed for obfuscation.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used Themida to pack malicious DLLs and other files.
   </Example>
   <Example id="S0513" name="LiteDuke">
    LiteDuke has been packed with multiple layers of encryption.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has used several packing methods for obfuscation.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer has used UPX packed binaries.
   </Example>
   <Example id="S0409" name="Machete">
    Machete has been packed with NSIS.
   </Example>
   <Example id="S0530" name="Melcoz">
    Melcoz has been packed with VMProtect and Themida.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has used VMProtect to pack and protect files.
   </Example>
   <Example id="S0083" name="Misdat">
    Misdat was typically packed using UPX.
   </Example>
   <Example id="S1026" name="Mongall">
    Mongall has been packed with Themida.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE has used .NET packer tools to evade detection.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors used software packing in its tools.
   </Example>
   <Example id="S0264" name="OopsIE">
    OopsIE uses the SmartAssembly obfuscator to pack an embedded .Net Framework assembly used for C2.
   </Example>
   <Example id="C0016" name="Operation Dust Storm">
    For Operation Dust Storm, the threat actors used UPX to pack some payloads.
   </Example>
   <Example id="C0005" name="Operation Spalax">
    For Operation Spalax, the threat actors used a variety of packers, including CyaX, to obfuscate malicious executables.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    OSX_OCEANLOTUS.D has a variant that is packed with UPX.
   </Example>
   <Example id="G0040" name="Patchwork">
    A Patchwork payload was packed with UPX.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can encrypt and pack malicious payloads.
   </Example>
   <Example id="S0565" name="Raindrop">
    Raindrop used a custom packer for its Cobalt Strike payload, which was compressed using the LZMA algorithm.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke's miner has created UPX-packed files in the Windows Start Menu Folder.
   </Example>
   <Example id="S0085" name="S-Type">
    Some S-Type samples have been packed with UPX.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has been packed using a dark market crypter.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team used UPX to pack a copy of Mimikatz.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has used a packed installer file.
   </Example>
   <Example id="S0053" name="SeaDuke">
    SeaDuke has been packed with the UPX packer.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat's loader has been packed with the compressed ShimRat core DLL and the legitimate DLL for it to hijack.
   </Example>
   <Example id="S0543" name="Spark">
    Spark has been packed with Enigma Protector to obfuscate its contents.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has been packed with a custom packer to hide payloads.
   </Example>
   <Example id="S0663" name="SysUpdate">
    SysUpdate can use packed binaries.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used UPX to obscure malicious code.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has used UPX and Ezuri packer to pack its binaries.
   </Example>
   <Example id="G0089" name="The White Company">
    The White Company has obfuscated their payloads through packing.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has packed malware and tools.
   </Example>
   <Example id="S0671" name="Tomiris">
    Tomiris has been packed with UPX.
   </Example>
   <Example id="S0678" name="Torisma">
    Torisma has been packed with Iz4 compression.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot leverages a custom packer to obfuscate its functionality.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany samples sometimes use common binary packers such as UPX and Aspack on top of a custom Delphi binary packer.
   </Example>
   <Example id="S0022" name="Uroburos">
    Uroburos uses a custom packer.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has used packed DLL payloads.
   </Example>
   <Example id="S0257" name="VERMIN">
    VERMIN is initially packed.
   </Example>
   <Example id="S0248" name="yty">
    yty packs a plugin with UPX.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy's Delphi variant was packed with UPX.
   </Example>
   <Example id="S0230" name="ZeroT">
    Some ZeroT DLL files have been packed with UPX.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has used multi-stage packers for exploit code.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1049" name="Antivirus/Antimalware">
    Employ heuristic-based malware detection. Ensure updated virus definitions and create custom signatures for observed malware.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1027.003" name="Obfuscated Files or Information: Steganography">
  Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-636
  </CAPEC_ID>
  <Examples>
   <Example id="S0469" name="ABK">
    ABK can extract a malicious Portable Executable (PE) from a photo.
   </Example>
   <Example id="G0138" name="Andariel">
    Andariel has hidden malicious executables within PNG files.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 uses steganography to send images to users that are embedded with shellcode.
   </Example>
   <Example id="S0473" name="Avenger">
    Avenger can extract backdoor malware from downloaded images.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook has used .PNG images within a zip file to build the executable.
   </Example>
   <Example id="S0470" name="BBK">
    BBK can extract a malicious Portable Executable (PE) from a photo.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has used steganography in multiple operations to conceal malicious payloads.
   </Example>
   <Example id="S0471" name="build_downer">
    build_downer can extract malware from a downloaded JPEG.
   </Example>
   <Example id="S0659" name="Diavol">
    Diavol has obfuscated its main code routines within bitmap images as part of its anti-analysis techniques.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has used steganography to hide shellcode in a BMP image file.
   </Example>
   <Example id="S0483" name="IcedID">
    IcedID has embedded binaries within RC4 encrypted .png files.
   </Example>
   <Example id="S0231" name="Invoke-PSImage">
    Invoke-PSImage can be used to embed a PowerShell script within the pixels of a PNG file.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has used steganography to hide stolen data inside other files stored on Github.
   </Example>
   <Example id="S0513" name="LiteDuke">
    LiteDuke has used image files to hide its loader component.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has stored obfuscated JavaScript code in an image file named temp.jpg.
   </Example>
   <Example id="S0644" name="ObliqueRAT">
    ObliqueRAT can hide its payload in BMP images hosted on compromised websites.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum's payload is encrypted and embedded within its loader, or within a legitimate PNG file.
   </Example>
   <Example id="C0005" name="Operation Spalax">
    For Operation Spalax, the threat actors used packers that read pixel data from images contained in PE files' resource sections and build the next layer of execution from the data.
   </Example>
   <Example id="S0518" name="PolyglotDuke">
    PolyglotDuke can use steganography to hide C2 information in images.
   </Example>
   <Example id="S0139" name="PowerDuke">
    PowerDuke uses steganography to hide backdoors in PNG files, which are also encrypted using the Tiny Encryption Algorithm (TEA).
   </Example>
   <Example id="S0654" name="ProLock">
    ProLock can use .jpg and .bmp files to store its payload.
   </Example>
   <Example id="S0565" name="Raindrop">
    Raindrop used steganography to locate the start of its encoded payload within legitimate 7-Zip code.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay has PE data embedded within JPEG files contained within Word documents.
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT can also embed data within a BMP image prior to exfiltration.
   </Example>
   <Example id="S0511" name="RegDuke">
    RegDuke can hide data in images, including use of the Least Significant Bit (LSB).
   </Example>
   <Example id="G0127" name="TA551">
    TA551 has hidden encoded data for malware DLLs in a PNG.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has used JPG files with encrypted payloads to mask their backdoor routines and evade detection.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0022" name="File">
    File Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1027.004" name="Obfuscated Files or Information: Compile After Delivery">
  Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <System_Requirements>
   Compiler software (either native to the system or delivered by the adversary)
  </System_Requirements>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Defense_Bypassed>
   Anti-virus, Binary Analysis, Host intrusion prevention systems, Signature-based detection, Static File Analysis
  </Defense_Bypassed>
  <Examples>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT and its watchdog component are compiled and executed after being delivered to victims as embedded, uncompiled source code.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman has used the csc.exe tool to compile a C# executable.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb can compile and execute source code sent to the compromised AD FS server via a specific HTTP POST.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has compiled the source code for a downloader directly on the infected system using the built-in Microsoft.CSharp.CSharpCodeProvider class.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used the .NET csc.exe tool to compile executables from downloaded C# code.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT has used AutoIt to compile the payload and main script into a single executable after delivery.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has compiled malware, delivered to victims as .c files, with the GNU Compiler Collection (GCC).
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Metadata
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1027.005" name="Obfuscated Files or Information: Indicator Removal from Tools">
  Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Host intrusion prevention systems, Log analysis, Signature-based detection
  </Defense_Bypassed>
  <Examples>
   <Example id="G0022" name="APT3">
    APT3 has been known to remove indicators of compromise from tools.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike includes a capability to modify the Beacon payload to eliminate known signatures or unpacking methods.
   </Example>
   <Example id="S0187" name="Daserf">
    Analysis of Daserf has shown that it regularly undergoes technical improvements to evade anti-virus detection.
   </Example>
   <Example id="G0009" name="Deep Panda">
    Deep Panda has updated and modified its malware, resulting in different hash values that evade detection.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM ensured each payload had a unique hash, including by using different types of packers.
   </Example>
   <Example id="S0237" name="GravityRAT">
    The author of GravityRAT submitted samples to VirusTotal for testing, showing that the author modified the code to try to hide the DDE object in a different part of the document.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole has undergone regular technical improvements in an attempt to evade detection.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has tested malware samples to determine AV detection and subsequently modified the samples to ensure AV evasion.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors edited variable names within the Impacket suite to avoid automated detection.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork apparently altered NDiskMonitor samples by adding four bytes of random letters in a likely attempt to change the file hashes.
   </Example>
   <Example id="S0587" name="Penquin">
    Penquin can remove strings from binaries.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit's Find-AVSignature AntivirusBypass module can be used to locate single byte anti-virus signatures.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can make small changes to itself in order to change its checksum and hash value.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST source code used generic variable names and pre-obfuscated strings, and was likely sanitized of developer comments before being added to SUNSPOT.
   </Example>
   <Example id="G0088" name="TEMP.Veles">
    TEMP.Veles has modified files based on the open-source project cryptcat in an apparent attempt to decrease AV detection rates.
   </Example>
   <Example id="G0010" name="Turla">
    Based on comparison of Gazer versions, Turla made an effort to obfuscate strings in the malware that could be used as IoCs, including the mutex name and named pipe.
   </Example>
   <Example id="S0579" name="Waterbear">
    Waterbear can scramble functions not to be executed again with random values.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1027.006" name="Obfuscated Files or Information: HTML Smuggling">
  Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Static File Analysis, Web Content Filters
  </Defense_Bypassed>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 has embedded an ISO file within an HTML attachment that contained JavaScript code to initiate malware execution.
   </Example>
   <Example id="S0634" name="EnvyScout">
    EnvyScout contains JavaScript code that can extract an encoded blob from its HTML body and write it to disk.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1027.007" name="Obfuscated Files or Information: Dynamic API Resolution">
  Adversaries may obfuscate then dynamically resolve API functions called by their malware in order to conceal malicious functionalities and impair defensive analysis. Malware commonly uses various Native API functions provided by the OS to perform various tasks such as those involving processes, files, and other system artifacts.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Examples>
   <Example id="S0534" name="Bazar">
    Bazar can hash then resolve API calls at runtime.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used a custom hashing method to resolve APIs used in shellcode.
   </Example>
   <Example id="S0147" name="Pteranodon">
    Pteranodon can use a dynamic Windows hashing algorithm to map API components.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0022" name="File">
    File Metadata
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1027.008" name="Obfuscated Files or Information: Stripped Payloads">
  Adversaries may attempt to make a payload difficult to analyze by removing symbols, strings, and other human readable information. Scripts and executables may contain variables names and other strings that help developers document code functionality. Symbols are often created by an operating system’s linker when executable payloads are compiled. Reverse engineers use these symbols and strings to analyze code and to identify functionality in payloads.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S1048" name="macOS.OSAMiner">
    macOS.OSAMiner has used run-only Applescripts, a compiled and stripped version of AppleScript, to remove human readable indicators to evade detection.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0022" name="File">
    File Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1027.009" name="Obfuscated Files or Information: Embedded Payloads">
  Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries to Subvert Trust Controls by not impacting execution controls such as digital signatures and notarization tickets.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <System_Requirements>
   User
  </System_Requirements>
  <Examples>
   <Example id="S0126" name="ComRAT">
    ComRAT has embedded a XOR encrypted communications module inside the orchestrator module.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack has used a dropper that embeds an encrypted payload as extra data.
   </Example>
   <Example id="S0231" name="Invoke-PSImage">
    Invoke-PSImage can be used to embed payload data within a new image file.
   </Example>
   <Example id="S1048" name="macOS.OSAMiner">
    macOS.OSAMiner has embedded Stripped Payloads within another run-only Stripped Payloads.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    The SMOKEDHAM source code is embedded in the dropper as an encrypted string.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1049" name="Antivirus/Antimalware">
    Anti-virus can be used to automatically detect and quarantine suspicious files.
   </Mitigation>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent execution of potentially obfuscated scripts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation | File Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1588" name="Obtain Capabilities">
  Adversaries may buy and/or steal capabilities that can be used during targeting. Rather than developing their own capabilities in-house, adversaries may purchase, freely download, or steal them. Activities may include the acquisition of malware, software (including licenses), exploits, certificates, and information relating to vulnerabilities. Adversaries may obtain capabilities to support their operations throughout numerous phases of the adversary lifecycle.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0037" name="Certificate">
    Certificate Registration
   </Detection>
   <Detection id="DS0035" name="Internet Scan">
    Response Content
   </Detection>
   <Detection id="DS0004" name="Malware Repository">
    Malware Content | Malware Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1588.001" name="Obtain Capabilities: Malware">
  Adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0138" name="Andariel">
    Andariel has used a variety of publicly-available remote access Trojans (RATs) for its operations.
   </Example>
   <Example id="G0006" name="APT1">
    APT1 used publicly available malware for privilege escalation.
   </Example>
   <Example id="G0143" name="Aquatic Panda">
    Aquatic Panda has acquired and used njRAT in its operations.
   </Example>
   <Example id="G0135" name="BackdoorDiplomacy">
    BackdoorDiplomacy has obtained and used leaked malware, including DoublePulsar, EternalBlue, EternalRocks, and EternalSynergy, in its operations.
   </Example>
   <Example id="C0015" name="C0015">
    For C0015, the threat actors used Cobalt Strike and Conti ransomware.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has acquired and used a variety of malware, including Cobalt Strike.
   </Example>
   <Example id="C0007" name="FunnyDream">
    For FunnyDream, the threat actors used a new backdoor named FunnyDream.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ acquired and used the Redline password stealer in their operations.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter has used a variety of open-source remote access Trojans for its operations.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors used Trojans from underground hacker websites.
   </Example>
   <Example id="C0005" name="Operation Spalax">
    For Operation Spalax, the threat actors obtained malware, including Remcos, njRAT, and AsyncRAT.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used malware such as Azorult and Cobalt Strike in their operations.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used malware obtained after compromising other threat actors, such as OilRig.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0004" name="Malware Repository">
    Malware Content | Malware Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1588.002" name="Obtain Capabilities: Tool">
  Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G1007" name="Aoqin Dragon">
    Aoqin Dragon obtained the Heyoka open source exfiltration tool and subsequently modified it for their operations.
   </Example>
   <Example id="G0099" name="APT-C-36">
    APT-C-36 obtained and used a modified variant of Imminent Monitor.
   </Example>
   <Example id="G0006" name="APT1">
    APT1 has used various open-source tools for privilege escalation purposes.
   </Example>
   <Example id="G0073" name="APT19">
    APT19 has obtained and used publicly-available tools like Empire.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has obtained and used open-source tools like Koadic, Mimikatz, and Responder.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has obtained and used a variety of tools including Mimikatz, SDelete, Tor, meek, and Cobalt Strike.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has obtained and used tools such as Mimikatz and Cobalt Strike, and a variety of other open-source tools from GitHub.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has obtained and leveraged publicly-available tools for early intrusion activities.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has obtained and used open-source tools such as Mimikatz.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has modified and used customized versions of publicly-available tools like PLINK and Mimikatz.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 has obtained and used tools such as Mimikatz, pwdump, PowerSploit, and Windows Credential Editor.
   </Example>
   <Example id="G0143" name="Aquatic Panda">
    Aquatic Panda has acquired and used Cobalt Strike in its operations.
   </Example>
   <Example id="G0135" name="BackdoorDiplomacy">
    BackdoorDiplomacy has obtained a variety of open-source reconnaissance and red team tools for discovery and lateral movement.
   </Example>
   <Example id="G1002" name="BITTER">
    BITTER has obtained tools such as PuTTY for use in their operations.
   </Example>
   <Example id="G0098" name="BlackTech">
    BlackTech has obtained and used tools such as Putty, SNScan, and PsExec for its operations.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has obtained and used tools such as Mimikatz.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has obtained and used open-source tools such as Mimikatz, gsecdump, and Windows Credential Editor.
   </Example>
   <Example id="C0010" name="C0010">
    For C0010, UNC3890 actors obtained multiple publicly-available tools, including METASPLOIT, UNICORN, and NorthStar C2.
   </Example>
   <Example id="C0015" name="C0015">
    For C0015, the threat actors obtained a variety of tools, including AdFind,  AnyDesk, and Process Hacker.
   </Example>
   <Example id="G0008" name="Carbanak">
    Carbanak has obtained and used open-source tools such as PsExec and Mimikatz.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has obtained and used tools such as BloodHound, Cobalt Strike, Mimikatz, and PsExec.
   </Example>
   <Example id="G0003" name="Cleaver">
    Cleaver has obtained and used open-source tools such as PsExec, Windows Credential Editor, and Mimikatz.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has obtained and used a variety of tools including Mimikatz, PsExec, Cobalt Strike, and SDelete.
   </Example>
   <Example id="G0052" name="CopyKittens">
    CopyKittens has used Metasploit, Empire, and AirVPN for post-exploitation activities.
   </Example>
   <Example id="C0004" name="CostaRicto">
    During CostaRicto, the threat actors obtained open source tools to use in their operations.
   </Example>
   <Example id="G0079" name="DarkHydrus">
    DarkHydrus has obtained and used tools such as Mimikatz, Empire, and Cobalt Strike.
   </Example>
   <Example id="G0105" name="DarkVishnya">
    DarkVishnya has obtained and used tools such as Impacket, Winexe, and PsExec.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has obtained and used tools such as Mimikatz, CrackMapExec, and PsExec.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has acquired and used a variety of open source tools.
   </Example>
   <Example id="G1003" name="Ember Bear">
    Ember Bear has obtained and used open source scripts from GitHub.
   </Example>
   <Example id="G0137" name="Ferocious Kitten">
    Ferocious Kitten has obtained open source tools for its operations, including JsonCPP and Psiphon.
   </Example>
   <Example id="G0051" name="FIN10">
    FIN10 has relied on publicly-available software to gain footholds and establish persistence in victim environments.
   </Example>
   <Example id="G0053" name="FIN5">
    FIN5 has obtained and used a customized version of PsExec, as well as use other tools such as pwdump, SDelete, and Windows Credential Editor.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has obtained and used tools such as Mimikatz, Cobalt Strike, and AdFind.
   </Example>
   <Example id="C0001" name="Frankenstein">
    For Frankenstein, the threat actors obtained and used Empire.
   </Example>
   <Example id="C0007" name="FunnyDream">
    For FunnyDream, the threat actors used a modified version of the open source PcShare remote administration tool.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM has used a variety of widely-available tools, which in some cases they modified to add functionality and/or subvert antimalware solutions.
   </Example>
   <Example id="G0078" name="Gorgon Group">
    Gorgon Group has obtained and used tools such as QuasarRAT and Remcos.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has acquired, and sometimes customized, open source tools such as Mimikatz, Empire, VNC remote access software, and DIG.net.
   </Example>
   <Example id="G0100" name="Inception">
    Inception has obtained and used open-source tools such as LaZagne.
   </Example>
   <Example id="G0136" name="IndigoZebra">
    IndigoZebra has acquired open source tools such as NBTscan and Meterpreter for their operations.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has obtained and used tools such as Mimikatz.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has obtained and used tools such as Nirsoft WebBrowserPassVIew, Mimikatz, and PsExec.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has obtained tools such as AD Explorer inspection software for their operations.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has obtained a variety of tools for their operations, including Responder, PuTTy PSCP, Wake-On-Lan, ChromePass, and dbxcli.
   </Example>
   <Example id="G0077" name="Leafminer">
    Leafminer has obtained and used tools such as LaZagne, Mimikatz, PsExec, and MailSniper.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has obtained and used open-source penetration testing tools like Havij, sqlmap, Metasploit, and Mimikatz.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used and modified open-source tools like Impacket, Mimikatz, and pwdump.
   </Example>
   <Example id="G1009" name="Moses Staff">
    Moses Staff has used the commercial tool DiskCryptor.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has made use of legitimate tools ConnectWise and Remote Utilities to gain access to target environment.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors obtained and used tools such as gsecdump.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    For Operation CuckooBees, the threat actors obtained publicly-available JSP code that was used to deploy a webshell onto a compromised server.
   </Example>
   <Example id="C0005" name="Operation Spalax">
    For Operation Spalax, the threat actors obtained packers such as CyaX.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    For Operation Wocao, the threat actors obtained a variety of open source tools, including JexBoss, KeeThief, and BloodHound.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork has obtained and used open-source tools such as QuasarRAT.
   </Example>
   <Example id="G0011" name="PittyTiger">
    PittyTiger has obtained and used tools such as Mimikatz and gsecdump.
   </Example>
   <Example id="G1005" name="POLONIUM">
    POLONIUM has obtained and used tools such as AirVPN and plink in their operations.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has acquired open-source tools for some of it's operations; for example it acquired Invoke-PSImage to establish an encrypted channel from a compromised host to Sandworm Team's C2 server as part of its preparation for the 2018 Winter Olympics attack.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has obtained and modified versions of publicly-available tools like Empire and PsExec.
   </Example>
   <Example id="G0122" name="Silent Librarian">
    Silent Librarian has obtained free and publicly available tools including SingleFile and HTTrack to copy login pages of targeted organizations.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used a variety of tools in their operations, including AdFind, BloodHound, Mimikatz, and PowerSploit.
   </Example>
   <Example id="G0088" name="TEMP.Veles">
    TEMP.Veles has obtained and used tools such as Mimikatz and PsExec.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has obtained and used tools such as Impacket, pwdump, Mimikatz, gsecdump, NBTscan, and Windows Credential Editor.
   </Example>
   <Example id="G0076" name="Thrip">
    Thrip has obtained and used tools such as Mimikatz and PsExec.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has obtained and customized publicly-available tools like Mimikatz.
   </Example>
   <Example id="G0107" name="Whitefly">
    Whitefly has obtained and used tools such as Mimikatz.
   </Example>
   <Example id="G0090" name="WIRTE">
    WIRTE has obtained and used Empire for post-exploitation activities.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has obtained and used publicly-available post-exploitation frameworks and tools like Metasploit, Empire, Mimikatz.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0004" name="Malware Repository">
    Malware Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1588.003" name="Obtain Capabilities: Code Signing Certificates">
  Adversaries may buy and/or steal code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with. Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0098" name="BlackTech">
    BlackTech has used stolen code-signing certificates for its malicious payloads.
   </Example>
   <Example id="G1003" name="Ember Bear">
    Ember Bear has stolen legitimate certificates to sign malicious payloads.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used code signing certificates issued by Sectigo RSA for some of its malware and tools.
   </Example>
   <Example id="S0576" name="MegaCortex">
    MegaCortex has used code signing certificates issued to fake companies to bypass security controls.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider obtained a code signing certificate signed by Digicert for some of its malware.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0004" name="Malware Repository">
    Malware Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1588.004" name="Obtain Capabilities: Digital Certificates">
  Adversaries may buy and/or steal SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0098" name="BlackTech">
    BlackTech has used valid, stolen digital certificates for some of their malware and tools.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has obtained SSL certificates for their C2 domains.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    For Operation Honeybee, the threat actors stole a digital signature from Adobe Systems to use with their MaoCheng dropper.
   </Example>
   <Example id="G0122" name="Silent Librarian">
    Silent Librarian has obtained free Let's Encrypt SSL certificates for use on their phishing pages.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0037" name="Certificate">
    Certificate Registration
   </Detection>
   <Detection id="DS0035" name="Internet Scan">
    Response Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1588.005" name="Obtain Capabilities: Exploits">
  Adversaries may buy, steal, or download exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than developing their own exploits, an adversary may find/modify exploits from online or purchase them from exploit vendors.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has obtained exploit code for various CVEs.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the use of exploits (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).
  </Detections>
 </Technique>
 <Technique id="T1588.006" name="Obtain Capabilities: Vulnerabilities">
  Adversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0034" name="Sandworm Team">
    In 2017, Sandworm Team conducted technical research related to vulnerabilities associated with websites used by the Korean Sport and Olympic Committee, a Korean power company, and a Korean airport.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the potential use of exploits for vulnerabilities (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).
  </Detections>
 </Technique>
 <Technique id="T1137" name="Office Application Startup">
  Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Office 365, Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Examples>
   <Example id="G0050" name="APT32">
    APT32 have replaced Microsoft Outlook's VbaProject.OTM file to install a backdoor macro for persistence.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has inserted malicious macros into existing documents, providing persistence when they are reopened. Gamaredon Group has loaded the group's previously delivered VBA project by relaunching Microsoft Outlook with the /altvba option, once the Application.Startup event is received.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office applications from creating child processes and from writing potentially malicious executable content to disk.
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Follow Office macro security best practices suitable for your environment. Disable Office VBA macros from executing.Disable Office add-ins. If they are required, follow best practices for securing them by requiring them to be signed and disabling user notification for allowing add-ins. For some add-ins types (WLL, VBA) additional mitigation is likely required as disabling add-ins in the Office Trust Center does not disable WLL nor does it prevent VBA code from executing.
   </Mitigation>
   <Mitigation id="M1054" name="Software Configuration">
    For the Office Test method, create the Registry key used to execute it and set the permissions to "Read Control" to prevent easy access to the key without administrator permissions or requiring Privilege Escalation.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    For the Outlook methods, blocking macros may be ineffective as the Visual Basic engine used for these features is separate from the macro scripting engine.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Creation | Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1137.001" name="Office Application Startup: Office Template Macros">
  Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Office 365, Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Examples>
   <Example id="S0475" name="BackConfig">
    BackConfig has the ability to use hidden columns in Excel spreadsheets to store executable files or commands for VBA macros.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike has the ability to use an Excel Workbook to execute additional code by enabling Office to trust macros and execute code without user permission.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used a Word Template, Normal.dotm, for persistence.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office applications from creating child processes and from writing potentially malicious executable content to disk.
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Follow Office macro security best practices suitable for your environment. Disable Office VBA macros from executing.Disable Office add-ins. If they are required, follow best practices for securing them by requiring them to be signed and disabling user notification for allowing add-ins. For some add-ins types (WLL, VBA) additional mitigation is likely required as disabling add-ins in the Office Trust Center does not disable WLL nor does it prevent VBA code from executing.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Creation | Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1137.002" name="Office Application Startup: Office Test">
  Adversaries may abuse the Microsoft Office "Office Test" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Office 365, Windows
  </Platforms>
  <System_Requirements>
   Office 2007, 2010, 2013, and 2016
  </System_Requirements>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has used the Office Test persistence mechanism within Microsoft Office by adding the Registry key HKCU\Software\Microsoft\Office test\Special\Perf to execute code.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office applications from creating child processes and from writing potentially malicious executable content to disk.
   </Mitigation>
   <Mitigation id="M1054" name="Software Configuration">
    Create the Registry key used to execute it and set the permissions to "Read Control" to prevent easy access to the key without administrator permissions or requiring Privilege Escalation.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Creation | Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1137.003" name="Office Application Startup: Outlook Forms">
  Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Office 365, Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Examples>
   <Example id="S0358" name="Ruler">
    Ruler can be used to automate the abuse of Outlook Forms to establish persistence.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office applications from creating child processes and from writing potentially malicious executable content to disk.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    For the Outlook methods, blocking macros may be ineffective as the Visual Basic engine used for these features is separate from the macro scripting engine.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1137.004" name="Office Application Startup: Outlook Home Page">
  Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Office 365, Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Examples>
   <Example id="G0049" name="OilRig">
    OilRig has abused the Outlook Home Page feature for persistence. OilRig has also used CVE-2017-11774 to roll back the initial patch designed to protect against Home Page abuse.
   </Example>
   <Example id="S0358" name="Ruler">
    Ruler can be used to automate the abuse of Outlook Home Pages to establish persistence.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office applications from creating child processes and from writing potentially malicious executable content to disk.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    For the Outlook methods, blocking macros may be ineffective as the Visual Basic engine used for these features is separate from the macro scripting engine.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1137.005" name="Office Application Startup: Outlook Rules">
  Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Office 365, Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Examples>
   <Example id="S0358" name="Ruler">
    Ruler can be used to automate the abuse of Outlook Rules to establish persistence.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office applications from creating child processes and from writing potentially malicious executable content to disk.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    For the Outlook methods, blocking macros may be ineffective as the Visual Basic engine used for these features is separate from the macro scripting engine.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1137.006" name="Office Application Startup: Add-ins">
  Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Office 365, Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Examples>
   <Example id="S0268" name="Bisonal">
    Bisonal has been loaded through a .wll extension added to the %APPDATA%\microsoft\word\startup\ repository.
   </Example>
   <Example id="G0019" name="Naikon">
    Naikon has used the RoyalRoad exploit builder to drop a second stage loader, intel.wll, into the Word Startup folder on the compromised host.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office applications from creating child processes and from writing potentially malicious executable content to disk.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Creation | Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1003" name="OS Credential Dumping">
  Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform Lateral Movement and access restricted information.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, root
  </Permissions_Required>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 regularly deploys both publicly available (ex: Mimikatz) and custom password retrieval tools on victims.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 used GetPassword_x64 to harvest credentials.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used different versions of Mimikatz to obtain credentials.
   </Example>
   <Example id="G0001" name="Axiom">
    Axiom has been known to dump credentials.
   </Example>
   <Example id="S0030" name="Carbanak">
    Carbanak obtains Windows logon password details.
   </Example>
   <Example id="S0232" name="HOMEFRY">
    HOMEFRY can perform credential dumping.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has used publicly available tools to dump password hashes, including HOMEFRY.
   </Example>
   <Example id="S0052" name="OnionDuke">
    OnionDuke steals credentials from its victims.
   </Example>
   <Example id="S0048" name="PinchDuke">
    PinchDuke steals credentials from compromised hosts. PinchDuke's credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by PinchDuke include ones associated many sources such as WinInet Credential Cache, and Lightweight Directory Access Protocol (LDAP).
   </Example>
   <Example id="G0033" name="Poseidon Group">
    Poseidon Group conducts credential dumping on victims, with a focus on obtaining credentials belonging to domain and database servers.
   </Example>
   <Example id="S0379" name="Revenge RAT">
    Revenge RAT has a plugin for credential harvesting.
   </Example>
   <Example id="G0054" name="Sowbug">
    Sowbug has used credential dumping tools.
   </Example>
   <Example id="G0039" name="Suckfly">
    Suckfly used a signed credential-dumping tool to obtain victim account credentials.
   </Example>
   <Example id="G0131" name="Tonto Team">
    Tonto Team has used a variety of credential dumping tools.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can dump passwords and save them into \ProgramData\Mail\MailAg\pwds.txt.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1015" name="Active Directory Configuration">
    Manage the access control list for "Replicating Directory Changes" and other permissions associated with domain controller replication.
   </Mitigation>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to secure LSASS and prevent credential stealing.
   </Mitigation>
   <Mitigation id="M1043" name="Credential Access Protection">
    With Windows 10, Microsoft implemented new protections called Credential Guard to protect the LSA secrets that can be used to obtain credentials through forms of credential dumping. It is not configured by default and has hardware and firmware system requirements.
   </Mitigation>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Ensure Domain Controller backups are properly secured.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Consider disabling or restricting NTLM.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Ensure that local administrator accounts have complex, unique passwords across all systems on the network.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Windows:Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled, as this is often equivalent to having a local administrator account with the same password on all systems. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers.Linux:Scraping the passwords from memory requires root privileges. Follow best practices in restricting access to privileged accounts to avoid hostile programs from accessing such sensitive regions of memory.
   </Mitigation>
   <Mitigation id="M1025" name="Privileged Process Integrity">
    On Windows 8.1 and Windows Server 2012 R2, enable Protected Process Light for LSA.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Access
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Access | Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1003.001" name="OS Credential Dumping: LSASS Memory">
  Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Examples>
   <Example id="G0006" name="APT1">
    APT1 has been known to use credential dumping using Mimikatz.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 regularly deploys both publicly available (ex: Mimikatz) and custom password retrieval tools on victims.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has used a tool to dump credentials by injecting itself into lsass.exe and triggering with the argument "dig."
   </Example>
   <Example id="G0050" name="APT32">
    APT32 used Mimikatz and customized versions of Windows Credential Dumper to harvest credentials.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has used a variety of publicly available tools like LaZagne, Mimikatz, and ProcDump to dump credentials.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used Mimikatz, Windows Credential Editor and ProcDump to dump credentials.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 has used hashdump, Mimikatz, and the Windows Credential Editor to dump password hashes from memory and authenticate to other user accounts.
   </Example>
   <Example id="G0143" name="Aquatic Panda">
    Aquatic Panda has attempted to harvest credentials through LSASS memory dumping.
   </Example>
   <Example id="S0606" name="Bad Rabbit">
    Bad Rabbit has used Mimikatz to harvest credentials from the victim's machine.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has used Mimikatz to retrieve credentials from LSASS memory.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has used various tools (such as Mimikatz and WCE) to perform credential dumping.
   </Example>
   <Example id="G0003" name="Cleaver">
    Cleaver has been known to dump credentials using Mimikatz and Windows Credential Editor.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can spawn a job to inject into LSASS memory and dump password hashes.
   </Example>
   <Example id="S0046" name="CozyCar">
    CozyCar has executed Mimikatz to harvest stored credentials from the victim and further victim penetration.
   </Example>
   <Example id="S0187" name="Daserf">
    Daserf leverages Mimikatz and Windows Credential Editor to steal credentials.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has used ProcDump to obtain the hashes of credentials by dumping the memory of the LSASS process.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has been observed dropping password grabber modules including Mimikatz.
   </Example>
   <Example id="S0363" name="Empire">
    Empire contains an implementation of Mimikatz to gather credentials from memory.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used Windows Credential Editor for credential dumping.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 harvests credentials using Invoke-Mimikatz or Windows Credentials Editor (WCE).
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used prodump to dump credentials from LSASS.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM used a modified version of Mimikatz along with a PowerShell-based Mimikatz to dump credentials on the victim machines.
   </Example>
   <Example id="S0342" name="GreyEnergy">
    GreyEnergy has a module for Mimikatz to collect Windows credentials from the victim’s machine.
   </Example>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has used procdump to dump the LSASS process memory.
   </Example>
   <Example id="S0357" name="Impacket">
    SecretsDump and Mimikatz modules within Impacket can perform credential dumping to obtain account and password information.
   </Example>
   <Example id="G0119" name="Indrik Spider">
    Indrik Spider used Cobalt Strike to carry out credential dumping using ProcDump.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has dumped credentials, including by using Mimikatz.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has gathered credentials using Mimikatz and ProcDump.
   </Example>
   <Example id="S0349" name="LaZagne">
    LaZagne can perform credential dumping from memory to obtain account and password information.
   </Example>
   <Example id="G0077" name="Leafminer">
    Leafminer used several tools for retrieving login and password information, including LaZagne and Mimikatz.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has used publicly available tools to dump password hashes, including ProcDump and WCE.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar can run Mimikatz to harvest credentials.
   </Example>
   <Example id="S0121" name="Lslsass">
    Lslsass can dump active logon session password hashes from the lsass process.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has stolen domain credentials by dumping LSASS process memory with comsvcs.dll and from a Microsoft Active Directory Domain Controller using Mimikatz.
   </Example>
   <Example id="S0002" name="Mimikatz">
    Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the LSASS Memory.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has performed credential dumping with Mimikatz and procdump64.exe.
   </Example>
   <Example id="S0056" name="Net Crawler">
    Net Crawler uses credential dumpers such as Mimikatz and Windows Credential Editor to extract cached credentials from Windows systems.
   </Example>
   <Example id="S0368" name="NotPetya">
    NotPetya contains a modified version of Mimikatz to help gather credentials that are later used for lateral movement.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used credential dumping tools such as Mimikatz to steal credentials to accounts logged into the compromised system and to Outlook Web Access.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum was seen using MimikatzLite to perform credential dumping.
   </Example>
   <Example id="S0365" name="Olympic Destroyer">
    Olympic Destroyer contains a module that tries to obtain credentials from LSASS, similar to Mimikatz. These credentials are used with PsExec and Windows Management Instrumentation to help the malware propagate itself across a network.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used ProcDump to dump credentials from memory.
   </Example>
   <Example id="G0068" name="PLATINUM">
    PLATINUM has used keyloggers that are also capable of dumping credentials.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT used voStro.exe, a compiled pypykatz (Python version of Mimikatz), to steal credentials.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 contains an implementation of Mimikatz to gather credentials from memory.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit contains a collection of Exfiltration modules that can harvest credentials using Mimikatz.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can execute Lazagne as well as Mimikatz using PowerShell.
   </Example>
   <Example id="S0583" name="Pysa">
    Pysa can perform OS credential dumping using Mimikatz.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team's plainpwd tool is a modified version of Mimikatz and dumps Windows credentials from system memory.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has used the Farse6.1 utility (based on Mimikatz) to extract credentials from lsass.exe.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can create a memory dump of LSASS via the MiniDumpWriteDump Win32 API call.
   </Example>
   <Example id="G0088" name="TEMP.Veles">
    TEMP.Veles has used Mimikatz and a custom tool, SecHack, to harvest credentials.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 actors have used a modified version of Mimikatz called Wrapikatz to dump credentials. They have also dumped credentials from domain controllers.
   </Example>
   <Example id="G0107" name="Whitefly">
    Whitefly has used Mimikatz to obtain credentials.
   </Example>
   <Example id="S0005" name="Windows Credential Editor">
    Windows Credential Editor can dump credentials.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to secure LSASS and prevent credential stealing.
   </Mitigation>
   <Mitigation id="M1043" name="Credential Access Protection">
    With Windows 10, Microsoft implemented new protections called Credential Guard to protect the LSA secrets that can be used to obtain credentials through forms of credential dumping. It is not configured by default and has hardware and firmware system requirements. It also does not protect against all forms of credential dumping.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Consider disabling or restricting NTLM.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Ensure that local administrator accounts have complex, unique passwords across all systems on the network.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled, as this is often equivalent to having a local administrator account with the same password on all systems. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers.
   </Mitigation>
   <Mitigation id="M1025" name="Privileged Process Integrity">
    On Windows 8.1 and Windows Server 2012 R2, enable Protected Process Light for LSA.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Access | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1003.002" name="OS Credential Dumping: Security Account Manager">
  Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the net user command. Enumerating the SAM database requires SYSTEM level access.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Examples>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can recover hashed passwords.
   </Example>
   <Example id="S0050" name="CosmicDuke">
    CosmicDuke collects Windows account hashes.
   </Example>
   <Example id="S0046" name="CozyCar">
    Password stealer and NTLM stealer modules in CozyCar harvest stored credentials from the victim, including credentials used as part of Windows NTLM user authentication.
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can dump usernames and hashed passwords from the SAM.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has dropped and executed SecretsDump to dump password hashes.
   </Example>
   <Example id="S0120" name="Fgdump">
    Fgdump can dump Windows password hashes.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM used reg commands to dump specific hives from the Windows Registry, such as the SAM hive, and obtain password hashes.
   </Example>
   <Example id="S0008" name="gsecdump">
    gsecdump can dump Windows password hashes from the SAM.
   </Example>
   <Example id="S0376" name="HOPLIGHT">
    HOPLIGHT has the capability to harvest credentials and passwords from the SAM database.
   </Example>
   <Example id="S1022" name="IceApple">
    IceApple's Credential Dumper module can dump encrypted password hashes from SAM registry keys, including HKLM\SAM\SAM\Domains\Account\F and HKLM\SAM\SAM\Domains\Account\Users\*\V.
   </Example>
   <Example id="S0357" name="Impacket">
    SecretsDump and Mimikatz modules within Impacket can perform credential dumping to obtain account and password information.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has dumped credentials, including by using gsecdump.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can gather hashed passwords by dumping SAM/SECURITY hive.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used a modified version of pentesting tools wmiexec.vbs and secretsdump.py to dump credentials.
   </Example>
   <Example id="S0002" name="Mimikatz">
    Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the SAM table.
   </Example>
   <Example id="S0080" name="Mivast">
    Mivast has the capability to gather NTLM password information.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors dumped account hashes using gsecdump.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors leveraged a custom tool to dump OS credentials and used following commands: reg save HKLM\\SYSTEM system.hiv, reg save HKLM\\SAM sam.hiv, and reg save HKLM\\SECURITY security.hiv, to dump SAM, SYSTEM and SECURITY hives.
   </Example>
   <Example id="S0371" name="POWERTON">
    POWERTON has the ability to dump password hashes.
   </Example>
   <Example id="S0006" name="pwdump">
    pwdump can be used to dump credentials from the SAM.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec can dump the SAM database.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 actors have used gsecdump to dump credentials. They have also dumped credentials from domain controllers.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has acquired credentials from the SAM/SECURITY registry hives.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1028" name="Operating System Configuration">
    Consider disabling or restricting NTLM.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Ensure that local administrator accounts have complex, unique passwords across all systems on the network.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled, as this is often equivalent to having a local administrator account with the same password on all systems. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1003.003" name="OS Credential Dumping: NTDS">
  Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in %SystemRoot%\NTDS\Ntds.dit of a domain controller.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <System_Requirements>
   Access to Domain Controller or backup
  </System_Requirements>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has used the ntdsutil.exe utility to export the Active Directory database for credential access.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has gathered the SYSTEM registry and ntds.dit files from target systems.
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can dump hashed passwords associated with Active Directory using Windows' Directory Replication Services API (DRSUAPI), or Volume Shadow Copy.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has dropped and executed SecretsDump to dump password hashes. They also obtained ntds.dit from domain controllers.
   </Example>
   <Example id="S0404" name="esentutl">
    esentutl can use Volume Shadow Copy to copy locked files such as ntds.dit.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used Metasploit’s PsExec NTDSGRAB module to obtain a copy of the victim's Active Directory database.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used Volume Shadow Copy to access credential information from NTDS.
   </Example>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has stolen copies of the Active Directory database (NTDS.DIT).
   </Example>
   <Example id="S0357" name="Impacket">
    SecretsDump and Mimikatz modules within Impacket can perform credential dumping to obtain account and password information from NTDS.dit.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has used NTDSDump and other password dumping tools to gather credentials.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can gather hashed passwords by gathering domain controller hashes from NTDS.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has used Windows built-in tool ntdsutil to extract the Active Directory (AD) database.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used Ntdsutil to dump credentials.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has used vssadmin to create a volume shadow copy and retrieve the NTDS.dit file. Mustang Panda has also used reg save on the SYSTEM file Registry location to help extract the NTDS.dit file.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has gained access to credentials via exported copies of the ntds.dit Active Directory database.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Ensure Domain Controller backups are properly secured.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Ensure that local administrator accounts have complex, unique passwords across all systems on the network.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled, as this is often equivalent to having a local administrator account with the same password on all systems. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1003.004" name="OS Credential Dumping: LSA Secrets">
  Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   SYSTEM
  </Permissions_Required>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals can dump secrets from the Local Security Authority.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has used a variety of publicly available tools like LaZagne to gather credentials.
   </Example>
   <Example id="S0050" name="CosmicDuke">
    CosmicDuke collects LSA secrets.
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can dump hashed passwords from LSA secrets for the targeted system.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has dropped and executed SecretsDump to dump password hashes.
   </Example>
   <Example id="S0008" name="gsecdump">
    gsecdump can dump LSA secrets.
   </Example>
   <Example id="S1022" name="IceApple">
    IceApple's Credential Dumper module can dump LSA secrets from registry keys, including: HKLM\SECURITY\Policy\PolEKList\default, HKLM\SECURITY\Policy\Secrets\*\CurrVal, and HKLM\SECURITY\Policy\Secrets\*\OldVal.
   </Example>
   <Example id="S0357" name="Impacket">
    SecretsDump and Mimikatz modules within Impacket can perform credential dumping to obtain account and password information.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has dumped credentials, including by using gsecdump.
   </Example>
   <Example id="S0349" name="LaZagne">
    LaZagne can perform credential dumping from LSA secrets to obtain account and password information.
   </Example>
   <Example id="G0077" name="Leafminer">
    Leafminer used several tools for retrieving login and password information, including LaZagne.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used a modified version of pentesting tools wmiexec.vbs and secretsdump.py to dump credentials.
   </Example>
   <Example id="S0002" name="Mimikatz">
    Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the LSA.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has performed credential dumping with LaZagne.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can use Lazagne for harvesting credentials.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 actors have used gsecdump to dump credentials. They have also dumped credentials from domain controllers.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1027" name="Password Policies">
    Ensure that local administrator accounts have complex, unique passwords across all systems on the network.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1003.005" name="OS Credential Dumping: Cached Domain Credentials">
  Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   SYSTEM
  </Permissions_Required>
  <Examples>
   <Example id="G0064" name="APT33">
    APT33 has used a variety of publicly available tools like LaZagne to gather credentials.
   </Example>
   <Example id="S0119" name="Cachedump">
    Cachedump can extract cached password hashes from cache entry information.
   </Example>
   <Example id="S0349" name="LaZagne">
    LaZagne can perform credential dumping from MSCache to obtain account and password information.
   </Example>
   <Example id="G0077" name="Leafminer">
    Leafminer used several tools for retrieving login and password information, including LaZagne.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has performed credential dumping with LaZagne.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum was seen using modified Quarks PwDump to perform credential dumping.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can use Lazagne for harvesting credentials.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1015" name="Active Directory Configuration">
    Consider adding users to the "Protected Users" Active Directory security group. This can help limit the caching of users' plaintext credentials.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Consider limiting the number of cached credentials (HKLM\SOFTWARE\Microsoft\Windows NT\Current Version\Winlogon\cachedlogonscountvalue)
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Ensure that local administrator accounts have complex, unique passwords across all systems on the network.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled, as this is often equivalent to having a local administrator account with the same password on all systems. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1003.006" name="OS Credential Dumping: DCSync">
  Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API) to simulate the replication process from a remote domain controller using a technique called DCSync.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 leveraged privileged accounts to replicate directory service data with domain controllers.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has used a DCSync command with Mimikatz to retrieve credentials from an exploited controller.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has used DCSync attacks to gather credentials for privilege escalation routines.
   </Example>
   <Example id="S0002" name="Mimikatz">
    Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from DCSync/NetSync.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used Mimikatz's DCSync to dump credentials from the memory of the targeted system.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1015" name="Active Directory Configuration">
    Manage the access control list for "Replicating Directory Changes" and other permissions associated with domain controller replication.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Ensure that local administrator accounts have complex, unique passwords across all systems on the network.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled, as this is often equivalent to having a local administrator account with the same password on all systems. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Access
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1003.007" name="OS Credential Dumping: Proc Filesystem">
  Adversaries may gather credentials from information stored in the Proc filesystem or /proc. The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Linux
  </Platforms>
  <Permissions_Required>
   root
  </Permissions_Required>
  <Examples>
   <Example id="S0349" name="LaZagne">
    LaZagne can obtain credential information running Linux processes.
   </Example>
   <Example id="S0179" name="MimiPenguin">
    MimiPenguin can dump process memory and extract clear-text credentials.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1027" name="Password Policies">
    Ensure that root accounts have complex, unique passwords across all systems on the network.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Follow best practices in restricting access to privileged accounts to avoid hostile programs from accessing sensitive information.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1003.008" name="OS Credential Dumping: /etc/passwd and /etc/shadow">
  Adversaries may attempt to dump the contents of /etc/passwd and /etc/shadow to enable offline password cracking. Most modern Linux operating systems use a combination of /etc/passwd and /etc/shadow to store user account information including password hashes in /etc/shadow. By default, /etc/shadow is only readable by the root user.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Linux
  </Platforms>
  <Permissions_Required>
   root
  </Permissions_Required>
  <Examples>
   <Example id="S0349" name="LaZagne">
    LaZagne can obtain credential information from /etc/shadow using the shadow.py module.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1027" name="Password Policies">
    Ensure that root accounts have complex, unique passwords across all systems on the network.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Follow best practices in restricting access to privileged accounts to avoid hostile programs from accessing such sensitive information.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1201" name="Password Policy Discovery">
  Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through Brute Force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   IaaS, Linux, Network, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0521" name="BloodHound">
    BloodHound can collect password policy information on the target environment.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used the NtdsAudit utility to collect information related to accounts and passwords.
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can discover the password policies applied to the target system.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs collects password policy information with the command net accounts.
   </Example>
   <Example id="S0039" name="Net">
    The net accounts and net accounts /domain commands with Net can be used to obtain password policy information.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used net.exe in a script with net accounts /domain to find the password policy of a domain.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used the net accounts command as part of their advanced reconnaissance.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 can use Get-PassPol to enumerate the domain password policy.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used net accounts and net accounts /domain to acquire password policy information.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1027" name="Password Policies">
    Ensure only valid password filters are registered. Filter DLLs must be present in Windows installation directory (C:\Windows\System32\ by default) of a domain controller and/or local computer with a corresponding entry in HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Notification Packages.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1120" name="Peripheral Device Discovery">
  Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-646
  </CAPEC_ID>
  <Examples>
   <Example id="S0045" name="ADVSTORESHELL">
    ADVSTORESHELL can list connected devices.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 uses a module to receive a notification every time a USB mass storage device is inserted into a victim.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 has a Bluetooth device harvester, which uses Windows Bluetooth APIs to find information on connected Bluetooth devices.
   </Example>
   <Example id="S0438" name="Attor">
    Attor has a plugin that collects information about inserted storage devices, modems, and phone devices.
   </Example>
   <Example id="G0135" name="BackdoorDiplomacy">
    BackdoorDiplomacy has used an executable to detect removable media, such as USB flash drives.
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS checks for new hard drives on the victim, such as USB devices, by listening for the WM_DEVICECHANGE window message.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook can detect USB devices.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    BlackEnergy can gather very specific information about attached USB devices, to include device instance ID and drive geometry.
   </Example>
   <Example id="S0454" name="Cadelspy">
    Cadelspy has the ability to steal information about printers and the documents sent to printers.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson has the ability to discover pluggable/removable drives to extract files from.
   </Example>
   <Example id="S0538" name="Crutch">
    Crutch can monitor for removable drives being plugged into the compromised machine.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman can list signed PnP drivers for smartcard readers.
   </Example>
   <Example id="S0062" name="DustySky">
    DustySky can detect connected USB devices.
   </Example>
   <Example id="G0020" name="Equation">
    Equation has used tools with the functionality to search for specific information about the attached hard drive that could be used to identify and overwrite the firmware.
   </Example>
   <Example id="S0679" name="Ferocious">
    Ferocious can run GET.WORKSPACE in Microsoft Excel to check if a mouse is present.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy will attempt to detect if a usable smart card is current inserted into a card reader.
   </Example>
   <Example id="S1044" name="FunnyDream">
    The FunnyDream FilepakMonitor component can detect removable drive insertion.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group tools have contained an application to check performance of USB flash drives. Gamaredon Group has also used malware to scan for removable drives.
   </Example>
   <Example id="S1027" name="Heyoka Backdoor">
    Heyoka Backdoor can identify removable media attached to victim's machines.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT can map UPnP ports.
   </Example>
   <Example id="S0409" name="Machete">
    Machete detects the insertion of new devices by listening for the WM_DEVICECHANGE window message.
   </Example>
   <Example id="S1026" name="Mongall">
    Mongall can identify removable media attached to compromised hosts.
   </Example>
   <Example id="S0149" name="MoonWind">
    MoonWind obtains the number of removable drives from the victim.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT will attempt to detect if the victim system has a camera during the initial infection. njRAT can also detect any removable drives connected to the system.
   </Example>
   <Example id="S0644" name="ObliqueRAT">
    ObliqueRAT can discover pluggable/removable drives to extract files from.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used tools to identify if a mouse is connected to a targeted system.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used the fsutil fsinfo drives command as part of their advanced reconnaissance.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors discovered removable disks attached to a system.
   </Example>
   <Example id="S0113" name="Prikormka">
    A module in Prikormka collects information on available printers and disk drives.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can identify peripheral devices on targeted systems.
   </Example>
   <Example id="S0686" name="QuietSieve">
    QuietSieve can identify and search removable drives for specific file name extensions.
   </Example>
   <Example id="S0481" name="Ragnar Locker">
    Ragnar Locker may attempt to connect to removable drives and mapped network drives.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can scan for removable media which may contain documents for collection.
   </Example>
   <Example id="S0148" name="RTM">
    RTM can obtain a list of smart card readers attached to the victim.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet enumerates removable drives for infection.
   </Example>
   <Example id="S0098" name="T9000">
    T9000 searches through connected drives for removable storage devices.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to identify connected Apple devices.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has searched for attached VGA devices using lspci.
   </Example>
   <Example id="S0647" name="Turian">
    Turian can scan for removable media to collect data.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used fsutil fsinfo drives to list connected drives.
   </Example>
   <Example id="S0452" name="USBferry">
    USBferry can check for connected USB devices.
   </Example>
   <Example id="S0136" name="USBStealer">
    USBStealer monitors victims for insertion of removable drives. When dropped onto a second victim, it also enumerates drives connected to the system.
   </Example>
   <Example id="S0366" name="WannaCry">
    WannaCry contains a thread that will attempt to scan for new attached drives every few seconds. If one is identified, it will encrypt the files on the attached device.
   </Example>
   <Example id="S0612" name="WastedLocker">
    WastedLocker can enumerate removable drives prior to the encryption process.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy enumerates information about connected storage devices.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1069" name="Permission Groups Discovery">
  Adversaries may attempt to find group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Azure AD, Containers, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-576
  </CAPEC_ID>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 used the Get-ManagementRoleAssignment PowerShell cmdlet to enumerate Exchange management role assignments through an Exchange Management Shell.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has a tool that can enumerate the permissions associated with Windows groups.
   </Example>
   <Example id="S0335" name="Carbon">
    Carbon uses the net group command.
   </Example>
   <Example id="S0483" name="IcedID">
    IcedID has the ability to identify Workgroup membership.
   </Example>
   <Example id="S0233" name="MURKYTOP">
    MURKYTOP has the capability to retrieve information about groups.
   </Example>
   <Example id="S0445" name="ShimRatReporter">
    ShimRatReporter gathered the local privileges for the infected host.
   </Example>
   <Example id="S0623" name="Siloscape">
    Siloscape checks for Kubernetes node permissions.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used TinyMet to enumerate members of privileged groups.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot can identify the groups the user on a compromised host belongs to.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0036" name="Group">
    Group Enumeration | Group Metadata
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1069.001" name="Permission Groups Discovery: Local Groups">
  Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0018" name="admin@338">
    admin@338 actors used the following command following exploitation of a machine with LOWBALL malware to list local groups: net localgroup administrator &gt;&gt; %temp%\download
   </Example>
   <Example id="S0521" name="BloodHound">
    BloodHound can collect information about local groups and members.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors used the command net localgroup "adminstrator" to identify accounts with local administrator rights.
   </Example>
   <Example id="S0572" name="Caterpillar WebShell">
    Caterpillar WebShell can obtain a list of local groups of users from a system.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used net localgroup administrators to identify  accounts with local administrative rights.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can use net localgroup to list local groups on a system.
   </Example>
   <Example id="S0082" name="Emissary">
    Emissary has the capability to execute the command net localgroup administrators.
   </Example>
   <Example id="S0091" name="Epic">
    Epic gathers information on local group names.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro has been used to execute the net localgroup administrators command on a targeted system.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy enumerates the privilege level of the victim during the initial infection.
   </Example>
   <Example id="S0170" name="Helminth">
    Helminth has checked the local administrators group.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has run net localgroup to enumerate local groups.
   </Example>
   <Example id="S0201" name="JPIN">
    JPIN can obtain the permissions of the victim user.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar gathers information about local groups and members.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs collects a list of users belonging to the local users and administrators groups with the commands net localgroup administrators and net localgroup users.
   </Example>
   <Example id="S0039" name="Net">
    Commands such as net group and net localgroup can be used in Net to gather information about and manipulate groups.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used net localgroup administrators to find local administrators on compromised systems.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used the net group command as part of their advanced reconnaissance.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used the command net localgroup administrators to list all administrators part of a local group.
   </Example>
   <Example id="S0165" name="OSInfo">
    OSInfo has enumerated the local administrators group.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 contains modules, such as Get-LocAdm for enumerating permission groups.
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER may collect local group information by running net localgroup administrators or a series of other commands on a victim.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can use net localgroup to enable discovery of local groups.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can obtain a list of local groups and members.
   </Example>
   <Example id="S0060" name="Sys10">
    Sys10 collects the group name of the logged-in user and sends it to the C2.
   </Example>
   <Example id="G0131" name="Tonto Team">
    Tonto Team has used the ShowLocalGroupDetails command to identify administrator, user, and guest accounts on a compromised host.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used net localgroup and net localgroup Administrators to enumerate group information, including members of the local administrators group.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0036" name="Group">
    Group Enumeration
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1069.002" name="Permission Groups Discovery: Domain Groups">
  Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0552" name="AdFind">
    AdFind can enumerate domain groups.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used AdFind to enumerate domain groups.
   </Example>
   <Example id="S0521" name="BloodHound">
    BloodHound can collect information about domain groups and members.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors use the command net group "domain admins" /dom to enumerate domain groups.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can identify targets by querying account groups on a domain contoller.
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can gather the user accounts within domain groups.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has used batch scripts to enumerate administrators and users in the domain.
   </Example>
   <Example id="S0105" name="dsquery">
    dsquery can be used to gather information on permission groups within a domain.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor can conduct Active Directory reconnaissance using tools such as Sharphound or AdFind.
   </Example>
   <Example id="S0417" name="GRIFFON">
    GRIFFON has used a reconnaissance module that can be used to retrieve Windows domain membership information.
   </Example>
   <Example id="S0170" name="Helminth">
    Helminth has checked for the domain admin group and Exchange Trusted Subsystem groups using the commands net group Exchange Trusted Subsystem /domain and net group domain admins /domain.
   </Example>
   <Example id="G0100" name="Inception">
    Inception has used specific malware modules to gather domain membership.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang performs discovery of permission groups net group /domain.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs collects a list of domain groups with the command net localgroup /domain.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has used the AD Explorer tool to enumerate groups on a victim's network.
   </Example>
   <Example id="S0039" name="Net">
    Commands such as net group /domain can be used in Net to gather information about and manipulate groups.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used net group /domain, net group "domain admins" /domain, and net group "Exchange Trusted Subsystem" /domain to find domain group permission settings.
   </Example>
   <Example id="S0165" name="OSInfo">
    OSInfo specifically looks for Domain Admins and power users within the domain.
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER may collect domain group information by running net group /domain or a series of other commands on a victim.
   </Example>
   <Example id="S0496" name="REvil">
    REvil can identify the domain membership of a compromised host.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can use System.DirectoryServices namespace to retrieve domain group information.
   </Example>
   <Example id="S0516" name="SoreFang">
    SoreFang can enumerate domain groups by executing net.exe group /domain.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used net group "Domain Admins" /domain to identify domain administrators.
   </Example>
   <Example id="S0514" name="WellMess">
    WellMess can identify domain group membership for the current user.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0036" name="Group">
    Group Enumeration
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1069.003" name="Permission Groups Discovery: Cloud Groups">
  Adversaries may attempt to find cloud groups and permission settings. The knowledge of cloud permission groups can help adversaries determine the particular roles of users and groups within an environment, as well as which users are associated with a particular group.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Office 365, SaaS
  </Platforms>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals can enumerate Azure AD groups.
   </Example>
   <Example id="S0684" name="ROADTools">
    ROADTools can enumerate Azure AD groups.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0036" name="Group">
    Group Enumeration | Group Metadata
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1566" name="Phishing">
  Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.
  <Tactic>
   Initial Access
  </Tactic>
  <Platforms>
   Google Workspace, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-98
  </CAPEC_ID>
  <Examples>
   <Example id="G0001" name="Axiom">
    Axiom has used spear phishing to initially compromise victims.
   </Example>
   <Example id="G0115" name="GOLD SOUTHFIELD">
    GOLD SOUTHFIELD has conducted malicious spam (malspam) campaigns to gain access to victim's machines.
   </Example>
   <Example id="S0009" name="Hikit">
    Hikit has been spread through spear phishing.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1049" name="Antivirus/Antimalware">
    Anti-virus can automatically quarantine suspicious files.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion prevention systems and systems designed to scan and remove malicious email attachments or links can be used to block activity.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    Determine if certain websites or attachment types (ex: .scr, .exe, .pif, .cpl, etc.) that can be used for phishing are necessary for business operations and consider blocking access if activity cannot be monitored well or if it poses a significant risk.
   </Mitigation>
   <Mitigation id="M1054" name="Software Configuration">
    Use anti-spoofing and email authentication mechanisms to filter messages based on validity checks of the sender domain (using SPF) and integrity of messages (using DKIM). Enabling these mechanisms within an organization (through policies such as DMARC) may enable recipients (intra-org and cross domain) to perform similar message filtering and validation.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Users can be trained to identify social engineering techniques and phishing emails.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1566.001" name="Phishing: Spearphishing Attachment">
  Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.
  <Tactic>
   Initial Access
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-163
  </CAPEC_ID>
  <Examples>
   <Example id="G0018" name="admin@338">
    admin@338 has sent emails with malicious Microsoft Office documents attached.
   </Example>
   <Example id="S0331" name="Agent Tesla">
    The primary delivered mechaism for Agent Tesla is through email phishing messages.
   </Example>
   <Example id="G0130" name="Ajax Security Team">
    Ajax Security Team has used personalized spearphishing attachments.
   </Example>
   <Example id="G0138" name="Andariel">
    Andariel has conducted spearphishing campaigns that included malicious Word or Excel attachments.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed has been distributed to victims through malicious e-mail attachments.
   </Example>
   <Example id="G0099" name="APT-C-36">
    APT-C-36 has used spearphishing emails with password protected RAR attachment to avoid being detected by the email gateway.
   </Example>
   <Example id="G0006" name="APT1">
    APT1 has sent spearphishing emails containing malicious attachments.
   </Example>
   <Example id="G0005" name="APT12">
    APT12 has sent emails with malicious Microsoft Office documents and PDFs attached.
   </Example>
   <Example id="G0073" name="APT19">
    APT19 sent spearphishing emails with malicious attachments in RTF and XLSM formats to deliver initial exploits.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 sent spearphishing emails containing malicious Microsoft Office and RAR attachments.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used spearphishing emails with an attachment to deliver files with exploits to initial victims.
   </Example>
   <Example id="G0013" name="APT30">
    APT30 has used spearphishing emails with malicious DOC attachments.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has sent spearphishing emails with a malicious executable disguised as a document or spreadsheet.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has sent spearphishing e-mails with archive attachments.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 delivers malware using spearphishing emails with malicious HWP attachments.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has conducted spearphishing campaigns using malicious email attachments.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 leveraged spearphishing emails with malicious attachments to initially compromise victims.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 sent spearphishing emails with attachments such as compiled HTML (.chm) files to initially compromise their victims.
   </Example>
   <Example id="S0642" name="BADFLICK">
    BADFLICK has been distributed via spearphishing campaigns containing malicious Microsoft Word documents.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook is delivered via a malicious Word document inside a zip file.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has been delivered as malicious email attachments.
   </Example>
   <Example id="G1002" name="BITTER">
    BITTER has sent spearphishing emails with a malicious RTF document or Excel spreadsheet.
   </Example>
   <Example id="G0098" name="BlackTech">
    BlackTech has used spearphishing e-mails with malicious password-protected archived files (ZIP or RAR) to deliver malware.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has been delivered by phishing emails containing malicious Microsoft Office documents.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER used spearphishing emails with malicious Microsoft Word attachments to infect victims.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee has gained execution through luring users into opening malicious attachments.
   </Example>
   <Example id="C0011" name="C0011">
    During C0011, Transparent Tribe sent malicious attachments via email to student targets in India.
   </Example>
   <Example id="C0015" name="C0015">
    For C0015, security researchers assessed the threat actors likely used a phishing campaign to distribute a weaponized attachment to victims.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes has been delivered by sending victims a phishing email containing a malicious .docx file.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling has been delivered to victim's machines through malicious e-mail attachments.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has sent spearphishing emails with various attachment types to corporate and personal email accounts of victim organizations. Attachment types have included .rtf, .doc, .xls, archives containing LNK files, and password protected archives containing .exe and .scr executables.
   </Example>
   <Example id="G0142" name="Confucius">
    Confucius has crafted and sent victims malicious attachments to gain initial access.
   </Example>
   <Example id="S1014" name="DanBot">
    DanBot has been distributed within a malicious Excel attachment via spearphishing emails.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel has sent spearphishing emails with malicious RAR and .LNK attachments.
   </Example>
   <Example id="G0079" name="DarkHydrus">
    DarkHydrus has sent spearphishing emails with password-protected RAR archives containing malicious Excel Web Query files (.iqy). The group has also sent spearphishing emails that contained malicious Microsoft Office documents that use the "attachedTemplate" technique to load a template from a remote server.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman has been delivered via spearphishing emails that contain a malicious zip file.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has sent emails with malicious attachments to gain initial access.
   </Example>
   <Example id="G0066" name="Elderwood">
    Elderwood has delivered zero-day exploits and malware to victims via targeted emails containing malicious attachments.
   </Example>
   <Example id="G1003" name="Ember Bear">
    Ember Bear has sent spearphishing emails containing malicious attachments in the form of PDFs, Word documents, JavaScript files, and Control Panel File (CPL) executables.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has been delivered by phishing emails containing attachments.
   </Example>
   <Example id="S0634" name="EnvyScout">
    EnvyScout has been distributed via spearphishing as an email attachment.
   </Example>
   <Example id="G1011" name="EXOTIC LILY">
    EXOTIC LILY conducted an e-mail thread-hijacking campaign with malicious ISO attachments.
   </Example>
   <Example id="G0137" name="Ferocious Kitten">
    Ferocious Kitten has conducted spearphishing campaigns containing malicious documents to lure victims to open the attachments.
   </Example>
   <Example id="G0085" name="FIN4">
    FIN4 has used spearphishing emails containing attachments (which are often stolen, legitimate documents sent from compromised accounts) with embedded malicious macros.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has targeted victims with e-mails containing malicious attachments.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 sent spearphishing emails with either malicious Microsoft Documents or RTF files attached.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has distributed targeted emails containing Word documents with embedded malicious macros.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro has been distributed via spearphishing as an email attachment.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors likely used spearphishing emails to send malicious Microsoft Word documents.
   </Example>
   <Example id="G0084" name="Gallmaker">
    Gallmaker sent emails with malicious Microsoft Office documents attached.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has delivered spearphishing emails with malicious attachments to targets.
   </Example>
   <Example id="G0078" name="Gorgon Group">
    Gorgon Group sent emails to victims with malicious Microsoft Office documents attached.
   </Example>
   <Example id="S0499" name="Hancitor">
    Hancitor has been delivered via phishing emails with malicious attachments.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa has sent spearphishing emails containing malicious attachments.
   </Example>
   <Example id="S0483" name="IcedID">
    IcedID has been delivered via phishing e-mails with malicious attachments.
   </Example>
   <Example id="G0100" name="Inception">
    Inception has used weaponized documents attached to spearphishing emails for reconnaissance and initial compromise.
   </Example>
   <Example id="G0136" name="IndigoZebra">
    IndigoZebra sent spearphishing emails containing malicious password-protected RAR attachments.
   </Example>
   <Example id="S0528" name="Javali">
    Javali has been delivered as malicious e-mail attachments.
   </Example>
   <Example id="S0648" name="JSS Loader">
    JSS Loader has been delivered by phishing emails containing malicious Microsoft Excel attachments.
   </Example>
   <Example id="S0585" name="Kerrdown">
    Kerrdown has been distributed through malicious e-mail attachments.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used emails containing Word, Excel and/or HWP (Hangul Word Processor) documents in their spearphishing campaigns.
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS has been distributed via spearphishing emails with malicious attachments.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has been delivered via spearphishing campaigns through a malicious Word document.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has targeted victims with spearphishing emails containing malicious Microsoft Word documents.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter has used spam emails weaponized with archive or document files as its initial infection vector.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has sent spearphishing emails with malicious attachments, including .rtf, .doc, and .xls files.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot is delivered via a malicious XLS attachment contained within a spearhpishing email.
   </Example>
   <Example id="G0095" name="Machete">
    Machete has delivered spearphishing emails that contain a zipped file with malicious contents.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has sent malicious Office documents via email as part of spearphishing campaigns as well as executables disguised as documents.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has been delivered to victims via emails with malicious HTML attachments.
   </Example>
   <Example id="G0103" name="Mofang">
    Mofang delivered spearphishing emails with malicious documents, PDFs, or Excel files attached.
   </Example>
   <Example id="G0021" name="Molerats">
    Molerats has sent phishing emails with malicious Microsoft Word and PDF attachments.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has compromised third parties and used compromised accounts to send spearphishing emails with targeted attachments to recipients.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has used spearphishing attachments to deliver initial access payloads.
   </Example>
   <Example id="G0019" name="Naikon">
    Naikon has used malicious e-mail attachments to deliver malware.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE has been spread via e-mail campaigns utilizing malicious attachments.
   </Example>
   <Example id="G0133" name="Nomadic Octopus">
    Nomadic Octopus has targeted victims with spearphishing emails containing malicious attachments.
   </Example>
   <Example id="S0346" name="OceanSalt">
    OceanSalt has been delivered via spearphishing emails with Microsoft Office attachments.
   </Example>
   <Example id="S0340" name="Octopus">
    Octopus has been delivered via spearsphishing emails.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has sent spearphising emails with malicious attachments to potential victims using compromised and/or spoofed email accounts.
   </Example>
   <Example id="C0016" name="Operation Dust Storm">
    During Operation Dust Storm, the threat actors sent spearphishing emails that contained a malicious Microsoft Word document.
   </Example>
   <Example id="C0005" name="Operation Spalax">
    During Operation Spalax, the threat actors sent phishing emails that included a PDF document that in some cases led to the download and execution of malware.
   </Example>
   <Example id="S1017" name="OutSteel">
    OutSteel has been distributed as a malicious attachment within a spearphishing email.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork has used spearphishing with an attachment to deliver files with exploits to initial victims.
   </Example>
   <Example id="G0068" name="PLATINUM">
    PLATINUM has sent spearphishing emails with attachments to victims as its primary initial access vector.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT was distributed via malicious Word documents.
   </Example>
   <Example id="S0453" name="Pony">
    Pony has been delivered via spearphishing attachments.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot has spread through emails with malicious attachments.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay has been distributed through spearphishing emails with malicious attachments.
   </Example>
   <Example id="G0075" name="Rancor">
    Rancor has attached a malicious document to an email to gain initial access.
   </Example>
   <Example id="S0496" name="REvil">
    REvil has been distributed via malicious e-mail attachments including MS Word Documents.
   </Example>
   <Example id="S0433" name="Rifdoor">
    Rifdoor has been distributed in e-mails with malicious Excel or Word documents.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT has been delivered via spearphishing emails that contain a malicious Hangul Office or Microsoft Word document.
   </Example>
   <Example id="S0148" name="RTM">
    RTM has been delivered via spearphishing attachments disguised as PDF documents.
   </Example>
   <Example id="G0048" name="RTM">
    RTM has used spearphishing attachments to distribute its malware.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has been distributed as malicious attachments within spearphishing emails.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has delivered malicious Microsoft Office attachments via spearphishing emails.
   </Example>
   <Example id="G1008" name="SideCopy">
    SideCopy has sent spearphishing emails with malicious hta file attachments.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has sent e-mails with malicious attachments often crafted for specific targets.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has sent emails with malicious DOCX, CHM, LNK and ZIP attachments.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has been distributed via malicious Microsoft Office documents within spam emails.
   </Example>
   <Example id="G0062" name="TA459">
    TA459 has targeted victims using spearphishing emails with malicious Microsoft Word attachments.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used spearphishing emails with malicious attachments to initially compromise victims.
   </Example>
   <Example id="G0127" name="TA551">
    TA551 has sent spearphishing attachments with password protected ZIP files.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor has been delivered through spearphishing emails.
   </Example>
   <Example id="G0089" name="The White Company">
    The White Company has sent phishing emails with malicious Microsoft Word attachments to victims.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has used e-mail to deliver malicious attachments to victims.
   </Example>
   <Example id="S0665" name="ThreatNeedle">
    ThreatNeedle has been distributed via a malicious Word document within a spearphishing email.
   </Example>
   <Example id="G0131" name="Tonto Team">
    Tonto Team has delivered payloads via spearphishing attachments.
   </Example>
   <Example id="G0134" name="Transparent Tribe">
    Transparent Tribe has sent spearphishing e-mails with attachments to deliver malicious payloads.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot has used an email with an Excel sheet containing a malicious macro to deploy the malware
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper sent spearphishing emails that contained malicious Microsoft Office and fake installer file attachments.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has been delivered via spearphishing e-mails with password protected ZIP files.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT has been distributed as a malicious attachment within an email.
   </Example>
   <Example id="G0112" name="Windshift">
    Windshift has sent spearphishing emails with attachment to harvest credentials and deliver malware.
   </Example>
   <Example id="G0090" name="WIRTE">
    WIRTE has sent emails to intended victims with malicious MS Word and Excel attachments.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used spearphishing attachments to deliver Microsoft documents containing macros or PDFs containing malicious links to download either Emotet, Bokbot, TrickBot, or Bazar.
   </Example>
   <Example id="S1013" name="ZxxZ">
    ZxxZ has been distributed via spearphishing emails, usually containing a malicious RTF or Excel attachment.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1049" name="Antivirus/Antimalware">
    Anti-virus can also automatically quarantine suspicious files.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion prevention systems and systems designed to scan and remove malicious email attachments can be used to block activity.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    Block unknown or unused attachments by default that should not be transmitted over email as a best practice to prevent some vectors, such as .scr, .exe, .pif, .cpl, etc. Some email scanning devices can open and analyze compressed and encrypted formats, such as zip and rar that may be used to conceal malicious attachments.
   </Mitigation>
   <Mitigation id="M1054" name="Software Configuration">
    Use anti-spoofing and email authentication mechanisms to filter messages based on validity checks of the sender domain (using SPF) and integrity of messages (using DKIM). Enabling these mechanisms within an organization (through policies such as DMARC) may enable recipients (intra-org and cross domain) to perform similar message filtering and validation.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Users can be trained to identify social engineering techniques and spearphishing emails.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1566.002" name="Phishing: Spearphishing Link">
  Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.
  <Tactic>
   Initial Access
  </Tactic>
  <Platforms>
   Google Workspace, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-163
  </CAPEC_ID>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals can send "consent phishing" emails containing malicious links designed to steal users’ access tokens.
   </Example>
   <Example id="S0584" name="AppleJeus">
    AppleJeus has been distributed via spearphishing link.
   </Example>
   <Example id="G0006" name="APT1">
    APT1 has sent spearphishing emails containing hyperlinks to malicious files.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 sent spearphishing emails which used a URL-shortener service to masquerade as a legitimate service and to redirect targets to credential harvesting sites.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used spearphishing with a link to trick victims into clicking on a link to a zip file containing malicious files.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has sent spearphishing emails containing malicious links.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has sent spearphishing emails containing malicious links.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has sent spearphishing emails containing links to .hta files.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 leveraged spearphishing emails with malicious links to initially compromise victims.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar has been spread via emails with embedded malicious links.
   </Example>
   <Example id="G0098" name="BlackTech">
    BlackTech has used spearphishing e-mails with links to cloud services to deliver malware.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee has been spread through e-mail campaigns with malicious links.
   </Example>
   <Example id="C0011" name="C0011">
    During C0011, Transparent Tribe sent emails containing a malicious link to student targets in India.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has sent emails with URLs pointing to malicious documents.
   </Example>
   <Example id="G0142" name="Confucius">
    Confucius has sent malicious links to victims through email campaigns.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has sent spearphishing emails to potential targets that contained a malicious link.
   </Example>
   <Example id="G0066" name="Elderwood">
    Elderwood has delivered zero-day exploits and malware to victims via targeted emails containing a link to malicious content hosted on an uncommon Web server.
   </Example>
   <Example id="G1003" name="Ember Bear">
    Ember Bear has sent spearphishing emails containing malicious links.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has been delivered by phishing emails containing links.
   </Example>
   <Example id="G0120" name="Evilnum">
    Evilnum has sent spearphishing emails containing a link to a zip file hosted on Google Drive.
   </Example>
   <Example id="G1011" name="EXOTIC LILY">
    EXOTIC LILY has relied on victims to open malicious links in e-mails for execution.
   </Example>
   <Example id="G0085" name="FIN4">
    FIN4 has used spearphishing emails (often sent from compromised accounts) containing malicious links.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has conducted broad phishing campaigns using malicious links.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has distributed targeted emails containing links to malicious documents with embedded macros.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro has been spread via malicious links embedded in e-mails.
   </Example>
   <Example id="S0561" name="GuLoader">
    GuLoader has been spread in phishing campaigns using malicious web links.
   </Example>
   <Example id="S0499" name="Hancitor">
    Hancitor has been delivered via phishing emails which contained malicious links.
   </Example>
   <Example id="S0528" name="Javali">
    Javali has been delivered via malicious links embedded in e-mails.
   </Example>
   <Example id="S0585" name="Kerrdown">
    Kerrdown has been distributed via e-mails containing a malicious link.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has sent spearphishing emails containing a link to a document that contained malicious macros or took the victim to an actor-controlled domain.
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS has been distributed as a malicious link within an email.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has sent malicious links to victims via email.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter has used spam emails that contain a link that redirects the victim to download a malicious document.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has sent spearphishing emails with links, often using a fraudulent lookalike domain and stolen branding.
   </Example>
   <Example id="G0095" name="Machete">
    Machete has sent phishing emails that contain a link to an external server with ZIP and RAR archives.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has sent malicious URL links through email to victims. In some cases the URLs were shortened or linked to Word documents with malicious macros that executed PowerShells scripts to download Pupy.
   </Example>
   <Example id="S0530" name="Melcoz">
    Melcoz has been spread through malicious links embedded in e-mails.
   </Example>
   <Example id="G0103" name="Mofang">
    Mofang delivered spearphishing emails with malicious links included.
   </Example>
   <Example id="G0021" name="Molerats">
    Molerats has sent phishing emails with malicious links included.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has sent targeted spearphishing e-mails with malicious links.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has delivered web bugs and malicious links to their intended targets.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE has been spread via e-mail campaigns utilizing malicious links.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors sent spearphishing emails containing links to compromised websites where malware was downloaded.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has sent spearphising emails with malicious links to potential victims.
   </Example>
   <Example id="C0016" name="Operation Dust Storm">
    During Operation Dust Storm, the threat actors sent spearphishing emails containing a malicious link.
   </Example>
   <Example id="C0005" name="Operation Spalax">
    During Operation Spalax, the threat actors sent phishing emails to victims that contained a malicious link.
   </Example>
   <Example id="S1017" name="OutSteel">
    OutSteel has been distributed through malicious links contained within spearphishing emails.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork has used spearphishing with links to deliver files with exploits to initial victims. The group has also used embedded image tags (known as web bugs) with unique, per-recipient tracking links in their emails for the purpose of identifying which recipients opened messages.
   </Example>
   <Example id="S0453" name="Pony">
    Pony has been delivered via spearphishing emails which contained malicious links.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot has spread through emails with malicious links.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has been distributed through malicious links contained within spearphishing emails.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has crafted phishing emails containing malicious hyperlinks.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has sent e-mails with malicious links often crafted for specific targets.
   </Example>
   <Example id="S0646" name="SpicyOmelette">
    SpicyOmelette has been distributed via emails containing a malicious link that appears to be a PDF document.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has been distributed through phishing emails containing a malicious URL.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has sent spearphishing emails containing malicious links.
   </Example>
   <Example id="G0134" name="Transparent Tribe">
    Transparent Tribe has embedded links to malicious downloads in e-mails.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot has been delivered via malicious links in phishing e-mails.
   </Example>
   <Example id="G0010" name="Turla">
    Turla attempted to trick targets into clicking on a link featuring a seemingly legitimate domain from Adobe.com to download their malware and gain initial access.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has been delivered via malicious links in e-mail.
   </Example>
   <Example id="G0112" name="Windshift">
    Windshift has sent spearphishing emails with links to harvest credentials and deliver malware.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has sent phishing emails containing a link to an actor-controlled Google Drive document or other free online file hosting services.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has used malicious links and web beacons in e-mails for malware download and to track hits to attacker-controlled URL's.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Audit applications and their permissions to ensure access to data and resources are limited based upon necessity and principle of least privilege.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    Determine if certain websites that can be used for spearphishing are necessary for business operations and consider blocking access if activity cannot be monitored well or if it poses a significant risk.
   </Mitigation>
   <Mitigation id="M1054" name="Software Configuration">
    Use anti-spoofing and email authentication mechanisms to filter messages based on validity checks of the sender domain (using SPF) and integrity of messages (using DKIM). Enabling these mechanisms within an organization (through policies such as DMARC) may enable recipients (intra-org and cross domain) to perform similar message filtering and validation..Furthermore, policies may enforce / install browser extensions that protect against IDN and homograph attacks.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Azure AD Administrators apply limitations upon the ability for users to grant consent to unfamiliar or unverified third-party applications.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Users can be trained to identify social engineering techniques and spearphishing emails with malicious links which includes phishing for consent with OAuth 2.0. Additionally, users may perform visual checks of the domains they visit; however, homographs in ASCII and in IDN domains may render manual checks difficult. Phishing training and other cybersecurity training may raise awareness to check URLs before visiting the sites.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1566.003" name="Phishing: Spearphishing via Service">
  Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels.
  <Tactic>
   Initial Access
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-163
  </CAPEC_ID>
  <Examples>
   <Example id="G0130" name="Ajax Security Team">
    Ajax Security Team has used various social media channels to spearphish victims.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used the legitimate mailing service Constant Contact to send phishing e-mails.
   </Example>
   <Example id="G0070" name="Dark Caracal">
    Dark Caracal spearphished victims via Facebook and Whatsapp.
   </Example>
   <Example id="G1011" name="EXOTIC LILY">
    EXOTIC LILY has used the e-mail notification features of legitimate file sharing services for spearphishing.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used fake job advertisements sent via LinkedIn to spearphish targets.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used social media platforms, including LinkedIn and Twitter, to send spearphishing messages.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound used various social media channels (such as LinkedIn) as well as messaging services (such as WhatsApp) to spearphish victims.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used LinkedIn to send spearphishing links.
   </Example>
   <Example id="G0112" name="Windshift">
    Windshift has used fake personas on social media to engage and target victims.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1049" name="Antivirus/Antimalware">
    Anti-virus can also automatically quarantine suspicious files.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    Determine if certain social media sites, personal webmail services, or other service that can be used for spearphishing is necessary for business operations and consider blocking access if activity cannot be monitored well or if it poses a significant risk.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Users can be trained to identify social engineering techniques and spearphishing messages with malicious links.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1598" name="Phishing for Information">
  Adversaries may send phishing messages to elicit sensitive information that can be used during targeting. Phishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Phishing for information is different from Phishing in that the objective is gathering data from the victim rather than executing malicious code.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has used spearphishing to compromise credentials.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM targeted presidential campaign staffers with credential phishing e-mails.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1054" name="Software Configuration">
    Use anti-spoofing and email authentication mechanisms to filter messages based on validity checks of the sender domain (using SPF) and integrity of messages (using DKIM). Enabling these mechanisms within an organization (through policies such as DMARC) may enable recipients (intra-org and cross domain) to perform similar message filtering and validation.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Users can be trained to identify social engineering techniques and spearphishing attempts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1598.001" name="Phishing for Information: Spearphishing Service">
  Adversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1017" name="User Training">
    Users can be trained to identify social engineering techniques and spearphishing attempts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1598.002" name="Phishing for Information: Spearphishing Attachment">
  Adversaries may send spearphishing messages with a malicious attachment to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="S0373" name="Astaroth">
    Astaroth has been delivered via malicious e-mail attachments.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has used spearphishing with Microsoft Office attachments to enable harvesting of user credentials.
   </Example>
   <Example id="G1008" name="SideCopy">
    SideCopy has crafted generic lures for spam campaigns to collect emails and credentials for targeting efforts.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has sent e-mails with malicious attachments that lead victims to credential harvesting websites.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1054" name="Software Configuration">
    Use anti-spoofing and email authentication mechanisms to filter messages based on validity checks of the sender domain (using SPF) and integrity of messages (using DKIM). Enabling these mechanisms within an organization (through policies such as DMARC) may enable recipients (intra-org and cross domain) to perform similar message filtering and validation.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Users can be trained to identify social engineering techniques and spearphishing attempts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1598.003" name="Phishing for Information: Spearphishing Link">
  Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals can send phishing emails containing malicious links designed to collect users’ credentials.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has conducted credential phishing campaigns with embedded links to attacker-controlled domains.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has used malicious links to direct users to web pages designed to harvest credentials.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has used spearphishing with PDF attachments containing malicious links that redirected to credential harvesting websites.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used links in e-mail to steal account information.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has used SMS and email messages with links designed to steal credentials.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has crafted spearphishing emails with hyperlinks designed to trick unwitting recipients into revealing their account credentials.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has sent e-mails with malicious links to credential harvesting websites.
   </Example>
   <Example id="G0122" name="Silent Librarian">
    Silent Librarian has used links in e-mails to direct victims to credential harvesting websites designed to appear like the targeted organization's login page.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM has been delivered via malicious links in phishing emails.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1054" name="Software Configuration">
    Use anti-spoofing and email authentication mechanisms to filter messages based on validity checks of the sender domain (using SPF) and integrity of messages (using DKIM). Enabling these mechanisms within an organization (through policies such as DMARC) may enable recipients (intra-org and cross domain) to perform similar message filtering and validation.Furthermore, policies may enforce / install browser extensions that protect against IDN and homograph attacks. Browser password managers may also be configured to only populate credential fields when the URL matches that of the original, legitimate site.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Users can be trained to identify social engineering techniques and spearphishing attempts. Additionally, users may perform visual checks of the domains they visit; however, homographs in ASCII and in IDN domains may render manual checks difficult. Phishing training and other cybersecurity training may raise awareness to check URLs before visiting the sites.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1647" name="Plist File Modification">
  Adversaries may modify property list files (plist files) to enable other malicious activity, while also potentially evading and bypassing system defenses. macOS applications use plist files, such as the info.plist file, to store properties and configuration settings that inform the operating system how to handle the application at runtime. Plist files are structured metadata in key-value pairs formatted in XML based on Apple's Core Foundation DTD. Plist files can be saved in text or binary format.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   macOS
  </Platforms>
  <Examples>
   <Example id="S0658" name="XCSSET">
    XCSSET uses the plutil command to modify the LSUIElement, DFBundleDisplayName, and CFBundleIdentifier keys in the /Contents/Info.plist file to change how XCSSET is visible on the system.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1013" name="Application Developer Guidance">
    Ensure applications are using Apple's developer guidance which enables hardened runtime.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1542" name="Pre-OS Boot">
  Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.
  <Tactics>
   Defense Evasion, Persistence
  </Tactics>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, File monitoring, Host intrusion prevention systems
  </Defense_Bypassed>
  <Mitigations>
   <Mitigation id="M1046" name="Boot Integrity">
    Use Trusted Platform Module technology and a secure or trusted boot process to prevent system integrity from being compromised. Check the integrity of the existing BIOS or EFI to determine if it is vulnerable to modification.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Ensure proper permissions are in place to help prevent adversary access to privileged accounts necessary to perform these actions
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Patch the BIOS and EFI as necessary.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0016" name="Drive">
    Drive Modification
   </Detection>
   <Detection id="DS0027" name="Driver">
    Driver Metadata
   </Detection>
   <Detection id="DS0001" name="Firmware">
    Firmware Modification
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1542.001" name="Pre-OS Boot: System Firmware">
  Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.
  <Tactics>
   Persistence, Defense Evasion
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM
  </Permissions_Required>
  <Defense_Bypassed>
   Anti-virus, File monitoring, Host intrusion prevention systems
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-532
  </CAPEC_ID>
  <Examples>
   <Example id="S0047" name="Hacking Team UEFI Rootkit">
    Hacking Team UEFI Rootkit is a UEFI BIOS rootkit developed by the company Hacking Team to persist remote access software on some targeted systems.
   </Example>
   <Example id="S0397" name="LoJax">
    LoJax is a UEFI BIOS rootkit deployed to persist remote access software on some targeted systems.
   </Example>
   <Example id="S0001" name="Trojan.Mebromi">
    Trojan.Mebromi performs BIOS modification and can download and execute a file as well as protect itself from removal.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1046" name="Boot Integrity">
    Check the integrity of the existing BIOS or EFI to determine if it is vulnerable to modification. Use Trusted Platform Module technology.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Prevent adversary access to privileged accounts or access necessary to perform this technique.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Patch the BIOS and EFI as necessary.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0001" name="Firmware">
    Firmware Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1542.002" name="Pre-OS Boot: Component Firmware">
  Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components/devices that may not have the same capability or level of integrity checking.
  <Tactics>
   Persistence, Defense Evasion
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <System_Requirements>
   Ability to update component device firmware from the host operating system.
  </System_Requirements>
  <Permissions_Required>
   SYSTEM
  </Permissions_Required>
  <Defense_Bypassed>
   Anti-virus, File monitoring, Host intrusion prevention systems
  </Defense_Bypassed>
  <Examples>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink has maintained persistence by patching legitimate device firmware when it is downloaded, including that of WatchGuard devices.
   </Example>
   <Example id="G0020" name="Equation">
    Equation is known to have the capability to overwrite the firmware on hard drives from some manufacturers.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1051" name="Update Software">
    Perform regular firmware updates to mitigate risks of exploitation and/or abuse.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0027" name="Driver">
    Driver Metadata
   </Detection>
   <Detection id="DS0001" name="Firmware">
    Firmware Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1542.003" name="Pre-OS Boot: Bootkit">
  Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.
  <Tactics>
   Persistence, Defense Evasion
  </Tactics>
  <Platforms>
   Linux, Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM
  </Permissions_Required>
  <Defense_Bypassed>
   Anti-virus, File monitoring, Host intrusion prevention systems
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-552
  </CAPEC_ID>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has deployed a bootkit along with Downdelph to ensure its persistence on the victim. The bootkit shares code with some variants of BlackEnergy.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 deployed Master Boot Record bootkits on Windows systems to hide their malware and maintain persistence on victim systems.
   </Example>
   <Example id="S0114" name="BOOTRASH">
    BOOTRASH is a Volume Boot Record (VBR) bootkit that uses the VBR to maintain persistence.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp has installed a bootkit on the system to maintain persistence.
   </Example>
   <Example id="S0182" name="FinFisher">
    Some FinFisher variants incorporate an MBR rootkit.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group malware WhiskeyAlfa-Three modifies sector 0 of the Master Boot Record (MBR) to ensure that the malware will persist even if a victim machine shuts down.
   </Example>
   <Example id="S0112" name="ROCKBOOT">
    ROCKBOOT is a Master Boot Record (MBR) bootkit that uses the MBR to establish persistence.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot can implant malicious code into a compromised device's firmware.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate overwrites the MBR with a bootloader component that performs destructive wiping operations on hard drives and displays a fake ransom note when the host boots.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1046" name="Boot Integrity">
    Use Trusted Platform Module technology and a secure or trusted boot process to prevent system integrity from being compromised.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Ensure proper permissions are in place to help prevent adversary access to privileged accounts necessary to install a bootkit.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0016" name="Drive">
    Drive Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1542.004" name="Pre-OS Boot: ROMMONkit">
  Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect.
  <Tactics>
   Defense Evasion, Persistence
  </Tactics>
  <Platforms>
   Network
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Periodically check the integrity of system image to ensure it has not been modified.
   </Mitigation>
   <Mitigation id="M1046" name="Boot Integrity">
    Enable secure boot features to validate the digital signature of the boot environment and system image using a special purpose hardware device. If the validation check fails, the device will fail to boot preventing loading of unauthorized software.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific protocols, such as TFTP, can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific technique used by a particular adversary or tool, and will likely be different across various network configurations.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0001" name="Firmware">
    Firmware Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1542.005" name="Pre-OS Boot: TFTP Boot">
  Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.
  <Tactics>
   Defense Evasion, Persistence
  </Tactics>
  <Platforms>
   Network
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Periodically check the integrity of the running configuration and system image to ensure they have not been modified.
   </Mitigation>
   <Mitigation id="M1046" name="Boot Integrity">
    Enable secure boot features to validate the digital signature of the boot environment and system image using a special purpose hardware device. If the validation check fails, the device will fail to boot preventing loading of unauthorized software.
   </Mitigation>
   <Mitigation id="M1035" name="Limit Access to Resource Over Network">
    Restrict use of protocols without encryption or authentication mechanisms. Limit access to administrative and management interfaces from untrusted network sources.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific protocols, such as TFTP, can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific technique used by a particular adversary or tool, and will likely be different across various network configurations.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Follow vendor device hardening best practices to disable unnecessary and unused features and services, avoid using default configurations and passwords, and introduce logging and auditing for detection.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Use of Authentication, Authorization, and Accounting (AAA) systems will limit actions administrators can perform and provide a history of user actions to detect unauthorized use and abuse. TACACS+ can keep control over which commands administrators are permitted to use through the configuration of authentication and command authorization.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0001" name="Firmware">
    Firmware Modification
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1057" name="Process Discovery">
  Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <System_Requirements>
   Administrator, SYSTEM may provide better process ownership details
  </System_Requirements>
  <Permissions_Required>
   Administrator, SYSTEM, User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-573
  </CAPEC_ID>
  <Examples>
   <Example id="S0065" name="4H RAT">
    4H RAT has the capability to obtain a listing of running processes (including loaded modules).
   </Example>
   <Example id="S0045" name="ADVSTORESHELL">
    ADVSTORESHELL can list running processes.
   </Example>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla can list the current running processes on the system.
   </Example>
   <Example id="G0138" name="Andariel">
    Andariel has used tasklist to enumerate processes and find a specific string.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed can enumerate the current process on a compromised host.
   </Example>
   <Example id="G0006" name="APT1">
    APT1 gathered a list of running processes on the system using tasklist /v.
   </Example>
   <Example id="G0007" name="APT28">
    An APT28 loader Trojan will enumerate the victim's processes searching for explorer.exe if its current process does not have necessary permissions.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used multiple command-line utilities to enumerate running processes.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has a tool that can list out currently running processes.
   </Example>
   <Example id="G0067" name="APT37">
    APT37's Freenki malware lists running processes using the Microsoft Windows API.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 leveraged Sysmon to understand the processes, services in the organization.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has the ability to enumerate loaded modules for a process..
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth searches for different processes on the system.
   </Example>
   <Example id="S0640" name="Avaddon">
    Avaddon has collected information about running processes.
   </Example>
   <Example id="S0473" name="Avenger">
    Avenger has the ability to use Tasklist to identify running processes.
   </Example>
   <Example id="S0344" name="Azorult">
    Azorult can collect a list of running processes by calling CreateToolhelp32Snapshot.
   </Example>
   <Example id="S0638" name="Babuk">
    Babuk has the ability to check running processes on a targeted system.
   </Example>
   <Example id="S0414" name="BabyShark">
    BabyShark has executed the tasklist command.
   </Example>
   <Example id="S0093" name="Backdoor.Oldrea">
    Backdoor.Oldrea collects information about running processes.
   </Example>
   <Example id="S0031" name="BACKSPACE">
    BACKSPACE may collect information about running processes.
   </Example>
   <Example id="S0606" name="Bad Rabbit">
    Bad Rabbit can enumerate all running processes to compare hashes.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot identifies processes and collects the process ids.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can identity the current process on a compromised host.
   </Example>
   <Example id="S0127" name="BBSRAT">
    BBSRAT can list running processes.
   </Example>
   <Example id="S0017" name="BISCUIT">
    BISCUIT has a command to enumerate running processes and identify their owners.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal can obtain a list of running processes on the victim’s machine.
   </Example>
   <Example id="S0069" name="BLACKCOFFEE">
    BLACKCOFFEE has the capability to discover processes.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    BlackEnergy has gathered a process list by using Tasklist.exe.
   </Example>
   <Example id="S0657" name="BLUELIGHT">
    BLUELIGHT can collect process filenames and SID authority level.
   </Example>
   <Example id="S0486" name="Bonadan">
    Bonadan can use the ps command to discover other cryptocurrency miners active on the system.
   </Example>
   <Example id="S0252" name="Brave Prince">
    Brave Prince lists the running processes.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can identify processes associated with analytical tools.
   </Example>
   <Example id="S0482" name="Bundlore">
    Bundlore has used the ps command to list processes.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors used the tasklist /s command as well as taskmanager to obtain a list of running processes.
   </Example>
   <Example id="S0693" name="CaddyWiper">
    CaddyWiper can obtain a list of current processes.
   </Example>
   <Example id="S0351" name="Cannon">
    Cannon can obtain a list of processes running on the system.
   </Example>
   <Example id="S0030" name="Carbanak">
    Carbanak lists running processes.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp has collected a list of running processes.
   </Example>
   <Example id="S0335" name="Carbon">
    Carbon can list the processes on the victim’s machine.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT contains watchdog functionality that ensures its process is always running, else spawns a new instance.
   </Example>
   <Example id="S0572" name="Caterpillar WebShell">
    Caterpillar WebShell can gather a list of processes running on the machine.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower has the ability to list running processes through the use of tasklist.
   </Example>
   <Example id="S0144" name="ChChes">
    ChChes collects its process identifier (PID) on the victim.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used tasklist to enumerate processes.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can enumerate processes on a targeted system.
   </Example>
   <Example id="S0611" name="Clop">
    Clop can enumerate all processes on the victim's machine.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike's Beacon payload can collect information on process details.
   </Example>
   <Example id="S0244" name="Comnie">
    Comnie uses the tasklist to view running processes on the victim’s machine.
   </Example>
   <Example id="S0575" name="Conti">
    Conti can enumerate through all open processes to search for any that have the string "sql" in their process name.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson contains a command to list processes.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba can enumerate processes running on a victim's machine.
   </Example>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink can enumerate the process it is currently running under.
   </Example>
   <Example id="S0497" name="Dacls">
    Dacls can collect data on running and parent processes.
   </Example>
   <Example id="S0334" name="DarkComet">
    DarkComet can list active processes running on the victim’s machine.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel malware can collect a list of running processes on a system.
   </Example>
   <Example id="G0009" name="Deep Panda">
    Deep Panda uses the Microsoft Tasklist utility to list processes running on systems.
   </Example>
   <Example id="S0021" name="Derusbi">
    Derusbi collects current and parent process IDs.
   </Example>
   <Example id="S0659" name="Diavol">
    Diavol has used CreateToolhelp32Snapshot, Process32First, and Process32Next API calls to enumerate the running processes in the system.
   </Example>
   <Example id="S0600" name="Doki">
    Doki has searched for the current process’s PID.
   </Example>
   <Example id="S0695" name="Donut">
    Donut includes subprojects that enumerate and identify information about Process Injection candidates.
   </Example>
   <Example id="S0472" name="down_new">
    down_new has the ability to list running processes on a compromised host.
   </Example>
   <Example id="S0694" name="DRATzarus">
    DRATzarus can enumerate and examine running processes to determine if a debugger is present.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack’s dropper can list all running processes.
   </Example>
   <Example id="S0038" name="Duqu">
    The discovery modules used with Duqu can collect information on process details.
   </Example>
   <Example id="S0062" name="DustySky">
    DustySky collects information about running processes from victims.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has used Tasklist to obtain information from a compromised host.
   </Example>
   <Example id="S0605" name="EKANS">
    EKANS looks for processes from a hard-coded list.
   </Example>
   <Example id="S0081" name="Elise">
    Elise enumerates processes via the tasklist command.
   </Example>
   <Example id="S0064" name="ELMER">
    ELMER is capable of performing process listings.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has been observed enumerating local processes.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can find information about processes running on local and remote systems.
   </Example>
   <Example id="S0091" name="Epic">
    Epic uses the tasklist /v command to obtain a list of processes.
   </Example>
   <Example id="S0396" name="EvilBunny">
    EvilBunny has used EnumProcesses() to identify how many process are running in the environment.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke can list running processes on the localhost.
   </Example>
   <Example id="S0267" name="FELIXROOT">
    FELIXROOT collects a list of running processes.
   </Example>
   <Example id="S0355" name="Final1stspy">
    Final1stspy obtains a list of running processes.
   </Example>
   <Example id="S0182" name="FinFisher">
    FinFisher checks its parent process for indications that it is running in a sandbox setup.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro has been used to run the tasklist command on a compromised system.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb's loader can enumerate all Common Language Runtimes (CLRs) and running Application Domains in the compromised AD FS server's Microsoft.IdentityServer.ServiceHost.exe process.
   </Example>
   <Example id="S0503" name="FrameworkPOS">
    FrameworkPOS can enumerate and exclude selected processes on a compromised host to speed execution of memory scraping.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors used Empire to obtain a list of all running processes.
   </Example>
   <Example id="S0277" name="FruitFly">
    FruitFly has the ability to list processes on the system.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream has the ability to discover processes, including Bka.exe and BkavUtil.exe.
   </Example>
   <Example id="C0007" name="FunnyDream">
    During FunnyDream, the threat actors used Tasklist on targeted systems.
   </Example>
   <Example id="S0410" name="Fysbis">
    Fysbis can collect information about running processes.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has used tools to enumerate processes on target hosts including Process Explorer.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can enumerate running processes.
   </Example>
   <Example id="S0049" name="GeminiDuke">
    GeminiDuke collects information on running processes and environment variables from the victim.
   </Example>
   <Example id="S0460" name="Get2">
    Get2 has the ability to identify running processes on an infected host.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT has the capability to list processes.
   </Example>
   <Example id="S0249" name="Gold Dragon">
    Gold Dragon checks the running processes on the victim’s machine.
   </Example>
   <Example id="S0477" name="Goopy">
    Goopy has checked for the Google Updater process to ensure Goopy was loaded properly.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can identify installed security tools based on process names.
   </Example>
   <Example id="S0237" name="GravityRAT">
    GravityRAT lists the running processes on the system.
   </Example>
   <Example id="S0151" name="HALFBAKED">
    HALFBAKED can obtain information about running processes on the victim.
   </Example>
   <Example id="S0617" name="HELLOKITTY">
    HELLOKITTY can search for specific processes to terminate.
   </Example>
   <Example id="S0170" name="Helminth">
    Helminth has used Tasklist to get information on processes.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has enumerated processes on targeted systems.
   </Example>
   <Example id="S1027" name="Heyoka Backdoor">
    Heyoka Backdoor can gather process information.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa’s shellcode attempted to find the process ID of the current process.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant has the ability to list running processes on the infected host.
   </Example>
   <Example id="S0203" name="Hydraq">
    Hydraq creates a backdoor through which remote attackers can monitor processes.
   </Example>
   <Example id="S0278" name="iKitten">
    iKitten lists the current processes running.
   </Example>
   <Example id="S0434" name="Imminent Monitor">
    Imminent Monitor has a "Process Watcher" feature to monitor processes in case the client ever crashes or gets closed.
   </Example>
   <Example id="G0100" name="Inception">
    Inception has used a reconnaissance module to identify active processes and other associated loaded modules.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can obtain a list of running processes.
   </Example>
   <Example id="S0581" name="IronNetInjector">
    IronNetInjector can identify processes via C# methods such as GetProcessesByName and running Tasklist with the Python os.popen function.
   </Example>
   <Example id="S0015" name="Ixeshe">
    Ixeshe can list running processes.
   </Example>
   <Example id="S0528" name="Javali">
    Javali can monitor processes for open browsers and custom banking applications.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    JHUHUGIT obtains a list of running processes on the victim.
   </Example>
   <Example id="S0201" name="JPIN">
    JPIN can list running processes.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT can query and kill system processes.
   </Example>
   <Example id="S0088" name="Kasidet">
    Kasidet has the ability to search for a given process name in processes currently running in the system.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar obtains a list of running processes through WMI querying and the ps command.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang performs process discovery using tasklist commands.
   </Example>
   <Example id="S0271" name="KEYMARBLE">
    KEYMARBLE can obtain a list of running processes on the system.
   </Example>
   <Example id="S0607" name="KillDisk">
    KillDisk has called GetCurrentProcess.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky can gather a list of all processes running on a victim's machine.
   </Example>
   <Example id="S0599" name="Kinsing">
    Kinsing has used ps to list processes.
   </Example>
   <Example id="S0162" name="Komplex">
    The OsInfo function in Komplex collects a running process list.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has used the command cmd /c tasklist to get a snapshot of the current processes on the target machine.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs collects a list of running services with the command tasklist /v.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Several Lazarus Group malware families gather a list of running processes on a victim system and send it to their C2 server. A Destover-like variant used by Lazarus Group also gathers process times.
   </Example>
   <Example id="S0211" name="Linfo">
    Linfo creates a backdoor through which remote attackers can retrieve a list of running processes.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar has a plugin designed to obtain a list of processes.
   </Example>
   <Example id="S0582" name="LookBack">
    LookBack can list running processes.
   </Example>
   <Example id="S0451" name="LoudMiner">
    LoudMiner used the ps command to monitor the running processes on the system.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can identify the process that owns remote connections.
   </Example>
   <Example id="S0409" name="Machete">
    Machete has a component to check for running processes to look for web browsers.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa can enumerate running processes.
   </Example>
   <Example id="S1048" name="macOS.OSAMiner">
    macOS.OSAMiner has used ps ax | grep &lt;name&gt; | grep -v grep | ... and ps ax | grep -E... to conduct process discovery.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound malware can list running processes.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can search for different processes on a system.
   </Example>
   <Example id="S0449" name="Maze">
    Maze has gathered all of the running system processes.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has performed process name checks and has monitored applications.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor can check if a specific process is running, such as Kaspersky's avp.exe.
   </Example>
   <Example id="S0079" name="MobileOrder">
    MobileOrder has a command to upload information about all running processes to its C2 server.
   </Example>
   <Example id="G0021" name="Molerats">
    Molerats actors obtained a list of active processes on the victim and sent them to C2 servers.
   </Example>
   <Example id="S0149" name="MoonWind">
    MoonWind has a command to return a list of running processes.
   </Example>
   <Example id="S0256" name="Mosquito">
    Mosquito runs tasklist to obtain running processes.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used malware to obtain a list of running processes on the system.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has used tasklist /v to determine active process information.
   </Example>
   <Example id="S0247" name="NavRAT">
    NavRAT uses tasklist /v to check running processes.
   </Example>
   <Example id="S0630" name="Nebulae">
    Nebulae can enumerate processes on a target system.
   </Example>
   <Example id="S0034" name="NETEAGLE">
    NETEAGLE can send process listings over the C2 channel.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can discover processes on compromised hosts.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT can search a list of running processes for Tr.exe.
   </Example>
   <Example id="S0644" name="ObliqueRAT">
    ObliqueRAT can check for blocklisted process names on a compromised host.
   </Example>
   <Example id="S0346" name="OceanSalt">
    OceanSalt can collect the name and ID for every process running on the system.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has run tasklist on a victim's machine.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used the tasklist command as part of their advanced reconnaissance.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, the threat actors obtained a list of running processes on a victim machine using cmd /c tasklist &gt; %temp%\temp.ini.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, the threat actors used tasklist to collect a list of running processes on an infected system.
   </Example>
   <Example id="S0229" name="Orz">
    Orz can gather a process list from the victim.
   </Example>
   <Example id="S1017" name="OutSteel">
    OutSteel can identify running processes on a compromised host.
   </Example>
   <Example id="S0626" name="P8RAT">
    P8RAT can check for specific processes associated with virtual environments.
   </Example>
   <Example id="S0664" name="Pandora">
    Pandora can monitor processes on a compromised host.
   </Example>
   <Example id="S0208" name="Pasam">
    Pasam creates a backdoor through which remote attackers can retrieve lists of running processes.
   </Example>
   <Example id="S1050" name="PcShare">
    PcShare can obtain a list of running processes on a compromised host.
   </Example>
   <Example id="S0517" name="Pillowmint">
    Pillowmint can iterate through running processes every six seconds collecting a list of processes to capture from later.
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon can iterate over the running processes to find a suitable injection target.
   </Example>
   <Example id="S0254" name="PLAINTEE">
    PLAINTEE performs the tasklist command to list running processes.
   </Example>
   <Example id="S0435" name="PLEAD">
    PLEAD has the ability to list processes on the compromised host.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX has a module to list the processes running on a machine.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has the ability to list all running processes.
   </Example>
   <Example id="S0216" name="POORAIM">
    POORAIM can enumerate processes.
   </Example>
   <Example id="G0033" name="Poseidon Group">
    After compromising a victim, Poseidon Group lists all running processes.
   </Example>
   <Example id="S0139" name="PowerDuke">
    PowerDuke has a command to list the victim's processes.
   </Example>
   <Example id="S0441" name="PowerShower">
    PowerShower has the ability to deploy a reconnaissance module to retrieve a list of the active processes.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit's Get-ProcessTokenPrivilege Privesc-PowerUp module can enumerate privileges for a given process.
   </Example>
   <Example id="S0393" name="PowerStallion">
    PowerStallion has been used to monitor process lists.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS has used get_tasklist to discover processes on the compromised host.
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER may collect process information by running tasklist on a victim.
   </Example>
   <Example id="S0238" name="Proxysvc">
    Proxysvc lists processes running on the system.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can list the running processes and get the process ID and parent process’s ID.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot has the ability to check running processes.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay can enumerate processes on a target system.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can gather a list of running processes by using Tasklist.
   </Example>
   <Example id="S0241" name="RATANKBA">
    RATANKBA lists the system’s processes.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession can identify processes based on PID.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec can obtain a process list from the victim.
   </Example>
   <Example id="S0448" name="Rising Sun">
    Rising Sun can enumerate all running processes and process information on an infected machine.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke can detect a running process's PID on the infected machine.
   </Example>
   <Example id="S0270" name="RogueRobin">
    RogueRobin checks the running processes for evidence it may be running in a sandbox environment. It specifically enumerates processes for Wireshark and Sysinternals.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can list the current running processes on the system.
   </Example>
   <Example id="S0148" name="RTM">
    RTM can obtain information about process integrity levels.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk has called CreateToolhelp32Snapshot to enumerate all running processes.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has enumerated running processes on a compromised host to determine if it is running under the process name dfrgui.exe.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot can enumerate a list of running processes on a compromised machine.
   </Example>
   <Example id="S0345" name="Seasalt">
    Seasalt has a command to perform a process listing.
   </Example>
   <Example id="S0596" name="ShadowPad">
    ShadowPad has collected the PID of a malicious process.
   </Example>
   <Example id="S0445" name="ShimRatReporter">
    ShimRatReporter listed all running processes on the machine.
   </Example>
   <Example id="S0063" name="SHOTPUT">
    SHOTPUT has a command to obtain a process listing.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has used tools to identify running processes on the victim's machine.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can enumerate processes, including properties to determine if they have the Common Language Runtime (CLR) loaded.
   </Example>
   <Example id="S0468" name="Skidmap">
    Skidmap has monitored critical processes to ensure resiliency.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA has enumerated processes by ID, name, or privileges.
   </Example>
   <Example id="S0273" name="Socksbot">
    Socksbot can list all running processes.
   </Example>
   <Example id="S0627" name="SodaMaster">
    SodaMaster can search a list of running processes.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT can use the getprocesslist command to enumerate processes on a compromised host.
   </Example>
   <Example id="S0516" name="SoreFang">
    SoreFang can enumerate processes on a victim machine through use of Tasklist.
   </Example>
   <Example id="G0038" name="Stealth Falcon">
    Stealth Falcon malware gathers a list of running processes.
   </Example>
   <Example id="S0142" name="StreamEx">
    StreamEx has the ability to enumerate processes.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity can determine if a user is logged in by checking to see if explorer.exe is running.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST collected a list of process names that were hashed using a FNV-1a + XOR algorithm to check against similarly-hashed hardcoded blocklists.
   </Example>
   <Example id="S0562" name="SUNSPOT">
    SUNSPOT monitored running processes for instances of MsBuild.exe by hashing the name of each running process and comparing it to the corresponding value 0x53D525. It also extracted command-line arguments and individual arguments from the running MsBuild.exe process to identify the directory path of the Orion software Visual Studio solution.
   </Example>
   <Example id="S0018" name="Sykipot">
    Sykipot may gather a list of running processes by running tasklist /v.
   </Example>
   <Example id="S0242" name="SynAck">
    SynAck enumerates all running processes.
   </Example>
   <Example id="S0464" name="SYSCON">
    SYSCON has the ability to use Tasklist to list running processes.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor can use GetCurrentProcessId for process discovery.
   </Example>
   <Example id="S0586" name="TAINTEDSCRIBE">
    TAINTEDSCRIBE can execute ProcessList for process discovery.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to identify running processes and associated plugins on an infected host.
   </Example>
   <Example id="S0057" name="Tasklist">
    Tasklist can be used to discover processes running on a system.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has searched for rival malware and removes it if found.
   </Example>
   <Example id="S0595" name="ThiefQuest">
    ThiefQuest obtains a list of running processes using the function kill_unwanted.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot uses module networkDll for process list discovery.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can use Tasklist to collect a list of running tasks.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper is capable of enumerating the running processes on the system using pslist.
   </Example>
   <Example id="S0436" name="TSCookie">
    TSCookie has the ability to list processes on the infected host.
   </Example>
   <Example id="G0010" name="Turla">
    Turla surveys a system upon check-in to discover running processes using the tasklist /v command.
   </Example>
   <Example id="S0333" name="UBoatRAT">
    UBoatRAT can list running processes on the system.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has gathered information about running processes.
   </Example>
   <Example id="S0452" name="USBferry">
    USBferry can use tasklist to gather information about the process running on the infected system.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has the ability to enumerate running processes on a compromised host.
   </Example>
   <Example id="S0257" name="VERMIN">
    VERMIN can get a list of the processes and running tasks on the system.
   </Example>
   <Example id="S0180" name="Volgmer">
    Volgmer can gather a list of processes.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT can obtain a list of processes on a compromised host.
   </Example>
   <Example id="S0579" name="Waterbear">
    Waterbear can identify the process for a specific security product.
   </Example>
   <Example id="G0112" name="Windshift">
    Windshift has used malware to enumerate active processes.
   </Example>
   <Example id="S0219" name="WINERACK">
    WINERACK can enumerate processes.
   </Example>
   <Example id="S0059" name="WinMM">
    WinMM sets a WH_CBT Windows hook to collect information on process creation.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    Winnti for Windows can check if the explorer.exe process is responsible for calling its install function.
   </Example>
   <Example id="G0044" name="Winnti Group">
    Winnti Group looked for a specific process running on infected servers.
   </Example>
   <Example id="S0161" name="XAgentOSX">
    XAgentOSX contains the getProcessList function to run ps aux to get running processes.
   </Example>
   <Example id="S0248" name="yty">
    yty gets an output of running processes using the tasklist command.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy uses the tasklist and wmic process get Capture, ExecutablePath commands to gather the processes running on the system.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda checks for running processes on the victim’s machine.
   </Example>
   <Example id="S0672" name="Zox">
    Zox has the ability to list processes.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell has a command, ps, to obtain a listing of processes on the system.
   </Example>
   <Example id="S1013" name="ZxxZ">
    ZxxZ has created a snapshot of running processes using CreateToolhelp32Snapshot.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1055" name="Process Injection">
  Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Application control
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-640
  </CAPEC_ID>
  <Examples>
   <Example id="S0469" name="ABK">
    ABK has the ability to inject shellcode into svchost.exe.
   </Example>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla can inject into known, vulnerable binaries on targeted hosts.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 malware has injected a Cobalt Strike beacon into Rundll32.exe.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 injects its malware variant, ROKRAT, into the cmd.exe process.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 malware TIDYELF loaded the main WINTERLOVE component by injecting it into the iexplore.exe process.
   </Example>
   <Example id="S0438" name="Attor">
    Attor's dispatcher can inject itself into running processes to gain higher privileges and to evade detection.
   </Example>
   <Example id="S0347" name="AuditCred">
    AuditCred can inject code from files to other running processes.
   </Example>
   <Example id="S0473" name="Avenger">
    Avenger has the ability to inject shellcode into svchost.exe.
   </Example>
   <Example id="S0093" name="Backdoor.Oldrea">
    Backdoor.Oldrea injects itself into explorer.exe.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can inject code through calling VirtualAllocExNuma.
   </Example>
   <Example id="S0470" name="BBK">
    BBK has the ability to inject shellcode into svchost.exe.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can inject code into multiple processes on infected endpoints.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT injects into a newly spawned process created from a native Windows executable.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can inject into the svchost.exe process for execution.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has injected code into trusted processes.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can inject a variety of payloads into processes dynamically chosen by the adversary.
   </Example>
   <Example id="S0614" name="CostaBricks">
    CostaBricks can inject a payload into the memory of a compromised host.
   </Example>
   <Example id="S0695" name="Donut">
    Donut includes a subproject DonutTest to inject shellcode into a target process.
   </Example>
   <Example id="S0024" name="Dyre">
    Dyre has the ability to directly inject its code into the web browser process.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor can inject its payload into iexplore.exe process.
   </Example>
   <Example id="S0363" name="Empire">
    Empire contains multiple modules for injecting into processes, such as Invoke-PSInject.
   </Example>
   <Example id="S0168" name="Gazer">
    Gazer injects its communication module into an Internet accessible process through which it performs C2.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT can inject malicious code into process created by the "Command_Create&amp;Inject" function.
   </Example>
   <Example id="S0561" name="GuLoader">
    GuLoader has the ability to inject shellcode into a donor processes that is started in a suspended state. GuLoader has previously used RegAsm as a donor process.
   </Example>
   <Example id="S0376" name="HOPLIGHT">
    HOPLIGHT has injected into running processes.
   </Example>
   <Example id="S0040" name="HTRAN">
    HTRAN can inject into into running processes.
   </Example>
   <Example id="S0398" name="HyperBro">
    HyperBro can run shellcode it injects into a newly created process.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can inject itself into another process to avoid detection including use of a technique called ListPlanting that customizes the sorting algorithm in a ListView structure.
   </Example>
   <Example id="S0581" name="IronNetInjector">
    IronNetInjector can use an IronPython scripts to load a .NET injector to inject a payload into its own or a remote process.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    JHUHUGIT performs code injection injecting its own functions to browser processes.
   </Example>
   <Example id="S0201" name="JPIN">
    JPIN can inject content into lsass.exe to load a module.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used Win7Elevate to inject malicious code into explorer.exe.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar can migrate the loader into another process.
   </Example>
   <Example id="S0084" name="Mis-Type">
    Mis-Type has been injected directly into a running process, including explorer.exe.
   </Example>
   <Example id="S0247" name="NavRAT">
    NavRAT copies itself into a running Internet Explorer process to evade detection.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can inject code into system processes including notepad.exe, svchost.exe, and vbc.exe.
   </Example>
   <Example id="C0013" name="Operation Sharpshooter">
    During Operation Sharpshooter, threat actors leveraged embedded shellcode to inject a downloader into the memory of Word.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors injected code into a selected process, which in turn launches a command as a child process of the original.
   </Example>
   <Example id="S0664" name="Pandora">
    Pandora can start and inject code into a new svchost process.
   </Example>
   <Example id="S1050" name="PcShare">
    The PcShare payload has been injected into the logagent.exe and rdpclip.exe processes.
   </Example>
   <Example id="G0068" name="PLATINUM">
    PLATINUM has used various methods of process injection including hot patching.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 contains multiple modules for injecting into processes, such as Invoke-PSInject.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can inject itself into processes including explore.exe, Iexplore.exe, and Mobsync.exe.
   </Example>
   <Example id="S0332" name="Remcos">
    Remcos has a command to hide itself through injecting into another process.
   </Example>
   <Example id="S0496" name="REvil">
    REvil can inject itself into running processes on a compromised host.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can use VirtualAlloc, WriteProcessMemory, and then CreateRemoteThread to execute shellcode within the address space of Notepad.exe.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk has injected itself into remote processes to encrypt files using a combination of VirtualAlloc, WriteProcessMemory, and CreateRemoteThread.
   </Example>
   <Example id="S0596" name="ShadowPad">
    ShadowPad has injected an install module into a newly created process.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has injected a DLL library containing a Trojan into the fwmain32.exe process.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can inject shellcode directly into Excel.exe or a specific process.
   </Example>
   <Example id="S0633" name="Sliver">
    Sliver can inject code into local and remote processes.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA can inject into running processes on a compromised host.
   </Example>
   <Example id="S0226" name="Smoke Loader">
    Smoke Loader injects into the Internet Explorer process.
   </Example>
   <Example id="S0380" name="StoneDrill">
    StoneDrill has relied on injecting its payload directly into the process memory of the victim's preferred browser.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot has used Nt* Native API functions to inject code into legitimate processes such as wermgr.exe.
   </Example>
   <Example id="S0436" name="TSCookie">
    TSCookie has the ability to inject code into the svchost.exe, iexplorer.exe, explorer.exe, and default browser processes.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has also used PowerSploit's Invoke-ReflectivePEInjection.ps1 to reflectively load a PowerShell payload into a random process on the victim system.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT has the ability to inject malicious DLLs into a specific process for privilege escalation.
   </Example>
   <Example id="S0579" name="Waterbear">
    Waterbear can inject decrypted shellcode into the LanmanServer service.
   </Example>
   <Example id="S0206" name="Wiarp">
    Wiarp creates a backdoor through which remote attackers can inject files into running processes.
   </Example>
   <Example id="S0176" name="Wingbird">
    Wingbird performs multiple process injections to hijack system processes and execute malicious code.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process. For example, on Windows 10, Attack Surface Reduction (ASR) rules may prevent Office applications from code injection.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Metadata | File Modification
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Access | Process Metadata | Process Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1055.001" name="Process Injection: Dynamic-link Library Injection">
  Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Defense_Bypassed>
   Anti-virus, Application control
  </Defense_Bypassed>
  <Examples>
   <Example id="S0456" name="Aria-body">
    Aria-body has the ability to inject itself into another process such as rundll32.exe and dllhost.exe.
   </Example>
   <Example id="G0135" name="BackdoorDiplomacy">
    BackdoorDiplomacy has dropped legitimate software onto a compromised host and used it to execute malicious DLLs.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    BlackEnergy injects its DLL component into svchost.exe.
   </Example>
   <Example id="S1039" name="Bumblebee">
    The Bumblebee loader can support the Dij command which gives it the ability to inject DLLs into the memory of other processes.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors used a DLL named D8B3.dll that was injected into the Winlogon process.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp's bootkit can inject a malicious DLL into the address space of running processes.
   </Example>
   <Example id="S0335" name="Carbon">
    Carbon has a command to inject code into a process.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike has the ability to load DLLs via reflective injection.
   </Example>
   <Example id="S0126" name="ComRAT">
    ComRAT has injected its orchestrator DLL into explorer.exe. ComRAT has also injected its communications module into the victim's default browser to make C2 connections appear less suspicious as all network connections will be initiated by the browser process.
   </Example>
   <Example id="S0575" name="Conti">
    Conti has loaded an encrypted DLL into memory and then executes it.
   </Example>
   <Example id="S0021" name="Derusbi">
    Derusbi injects itself into the secure shell (SSH) process.
   </Example>
   <Example id="S0038" name="Duqu">
    Duqu will inject itself into different processes to evade detection. The selection of the target process is influenced by the security software that is installed on the system (Duqu will inject into different processes depending on which security suite is installed on the infected host).
   </Example>
   <Example id="S0024" name="Dyre">
    Dyre injects into other processes to load modules.
   </Example>
   <Example id="S0081" name="Elise">
    Elise injects DLL files into iexplore.exe.
   </Example>
   <Example id="S0082" name="Emissary">
    Emissary injects its DLL file into a newly spawned Internet Explorer process.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has been observed injecting in to Explorer.exe and other processes.
   </Example>
   <Example id="S0182" name="FinFisher">
    FinFisher injects itself into various processes depending on whether it is low integrity or high integrity.
   </Example>
   <Example id="S1044" name="FunnyDream">
    The FunnyDream FilepakMonitor component can inject into the Bka.exe process using the VirtualAllocEx, WriteProcessMemory and CreateRemoteThread APIs to load the DLL component.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium has the ability to inject DLLs into specific processes.
   </Example>
   <Example id="S0460" name="Get2">
    Get2 has the ability to inject DLLs into processes.
   </Example>
   <Example id="S1027" name="Heyoka Backdoor">
    Heyoka Backdoor can inject a DLL into rundll32.exe for execution.
   </Example>
   <Example id="S0135" name="HIDEDRV">
    HIDEDRV injects a DLL for Downdelph into the explorer.exe process.
   </Example>
   <Example id="S0581" name="IronNetInjector">
    IronNetInjector has the ability to inject a DLL into running processes, including the IronNetInjector DLL into explorer.exe.
   </Example>
   <Example id="S0265" name="Kazuar">
    If running in a Windows environment, Kazuar saves a DLL to disk that is injected into the explorer.exe process to execute the payload. Kazuar can also be configured to inject and execute within specific processes.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can perform process injection by using a reflective DLL.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    A Lazarus Group malware sample performs reflective DLL injection.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has utilized techniques like reflective DLL loading to write a DLL into memory and load a shell that provides backdoor access to the victim.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar has used the PowerKatz plugin that can be loaded into the address space of a PowerShell process through reflective DLL loading.
   </Example>
   <Example id="S0167" name="Matryoshka">
    Matryoshka uses reflective DLL injection to inject the malicious library and execute the RAT.
   </Example>
   <Example id="S0449" name="Maze">
    Maze has injected the malware DLL into a target process.
   </Example>
   <Example id="S0576" name="MegaCortex">
    MegaCortex loads injecthelper.dll into a newly created rundll32.exe process.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has injected a malicious DLL into the Windows Media Player process (wmplayer.exe).
   </Example>
   <Example id="S1026" name="Mongall">
    Mongall can inject a DLL into rundll32.exe for execution.
   </Example>
   <Example id="S0457" name="Netwalker">
    The Netwalker DLL has been injected reflectively into the memory of a legitimate running process.
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon can inject its modules into various processes using reflective DLL loading.
   </Example>
   <Example id="S0012" name="PoisonIvy">
    PoisonIvy can inject a malicious DLL into a process.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit contains a collection of CodeExecution modules that inject code (DLL, shellcode) into a process.
   </Example>
   <Example id="S0613" name="PS1">
    PS1 can inject its payload DLL Into memory.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can migrate into another process using reflective DLL injection.
   </Example>
   <Example id="G0024" name="Putter Panda">
    An executable dropped onto victims by Putter Panda aims to inject the specified DLL into a process that would normally be accessing the network, including Outlook Express (msinm.exe), Outlook (outlook.exe), Internet Explorer (iexplore.exe), and Firefox (firefox.exe).
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can use ImprovedReflectiveDLLInjection to deploy components.
   </Example>
   <Example id="S0055" name="RARSTONE">
    After decrypting itself in memory, RARSTONE downloads a DLL file from its C2 server and loads it in the memory space of a hidden Internet Explorer process. This "downloaded" file is actually not dropped onto the system.
   </Example>
   <Example id="S0241" name="RATANKBA">
    RATANKBA performs a reflective DLL injection using a given pid.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec can perform DLL injection.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has injected its DLL component into EhStorAurhn.exe.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has the ability to inject a downloaded DLL into a newly created rundll32.exe process.
   </Example>
   <Example id="S0596" name="ShadowPad">
    ShadowPad has injected a DLL into svchost.exe.
   </Example>
   <Example id="S0273" name="Socksbot">
    Socksbot creates a suspended svchost process and injects its DLL into it.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT can execute loadfromfile, loadfromstorage, and loadfrommem to inject a DLL  from disk, storage, or memory respectively.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet injects an entire DLL into an existing, newly created, or preselected trusted process.
   </Example>
   <Example id="S0018" name="Sykipot">
    Sykipot injects itself into running instances of outlook.exe, iexplore.exe, or firefox.exe.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has been seen injecting a DLL into winword.exe.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor can perform DLL loading.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to inject DLLs for malicious plugins into running processes.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has injected a DLL backdoor into dllhost.exe and svchost.exe.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used Metasploit to perform reflective DLL injection in order to escalate privileges.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has injected malicious DLLs into memory with read, write, and execute permissions.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell is injected into a shared SVCHOST process.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Access | Process Metadata | Process Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1055.002" name="Process Injection: Portable Executable Injection">
  Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Defense_Bypassed>
   Anti-virus, Application control
  </Defense_Bypassed>
  <Examples>
   <Example id="S0030" name="Carbanak">
    Carbanak downloads an executable and injects it directly into a new process.
   </Example>
   <Example id="G0078" name="Gorgon Group">
    Gorgon Group malware can download a remote access tool, ShiftyBug, and inject into another process.
   </Example>
   <Example id="S0342" name="GreyEnergy">
    GreyEnergy has a module to inject a PE binary into a remote process.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can inject its backdoor as a portable executable into a target process.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar can execute PE files in the address space of the specified process.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke's miner, "TermsHost.exe", evaded defenses by injecting itself into Windows processes, including Notepad.exe.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda checks processes on the system and if they meet the necessary requirements, it injects into that process.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Access | Process Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1055.003" name="Process Injection: Thread Execution Hijacking">
  Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Defense_Bypassed>
   Anti-virus, Application control
  </Defense_Bypassed>
  <Examples>
   <Example id="S0168" name="Gazer">
    Gazer performs thread execution hijacking to inject its orchestrator into a running thread from a remote process.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can inject a suspended thread of its own process into a new process and initiate via the ResumeThread API.
   </Example>
   <Example id="S0579" name="Waterbear">
    Waterbear can use thread injection to inject shellcode into the process of security software.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Access | Process Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1055.004" name="Process Injection: Asynchronous Procedure Call">
  Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Application control
  </Defense_Bypassed>
  <Examples>
   <Example id="S0438" name="Attor">
    Attor performs the injection by attaching its code into the APC queue using NtQueueApcThread API.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can use asynchronous procedure call (APC) injection to execute commands received from C2.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp has queued an APC routine to explorer.exe by calling ZwQueueApcThread.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has injected malicious code into a new svchost.exe process.
   </Example>
   <Example id="S0483" name="IcedID">
    IcedID has used ZwQueueApcThread to inject itself into remote processes.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can inject its code into a trusted process via the APC queue.
   </Example>
   <Example id="S0517" name="Pillowmint">
    Pillowmint has used the NtQueueApcThread syscall to inject code into svchost.exe.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has written its payload into a newly-created EhStorAuthn.exe process using ZwWriteVirtualMemory and executed it using NtQueueApcThread and ZwAlertResumeThread.
   </Example>
   <Example id="S0199" name="TURNEDUP">
    TURNEDUP is capable of injecting code into the APC queue of a created Rundll32 process as part of an "Early Bird injection."
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Access | Process Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1055.005" name="Process Injection: Thread Local Storage">
  Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Application control
  </Defense_Bypassed>
  <Examples>
   <Example id="S0386" name="Ursnif">
    Ursnif has injected code into target processes via thread local storage callbacks.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Access | Process Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1055.008" name="Process Injection: Ptrace System Calls">
  Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Linux
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Application control
  </Defense_Bypassed>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Access | Process Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1055.009" name="Process Injection: Proc Memory">
  Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Linux
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Application control
  </Defense_Bypassed>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Restrict the permissions on sensitive files such as /proc//mem.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1055.011" name="Process Injection: Extra Window Memory Injection">
  Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Application control
  </Defense_Bypassed>
  <Examples>
   <Example id="S0091" name="Epic">
    Epic has overwritten the function pointer in the extra window memory of Explorer's Shell_TrayWnd in order to execute malicious code in the context of the explorer.exe process.
   </Example>
   <Example id="S0177" name="Power Loader">
    Power Loader overwrites Explorer’s Shell_TrayWnd extra window memory to redirect execution to a NTDLL function that is abused to assemble and execute a return-oriented programming (ROP) chain and create a malicious thread within Explorer.exe.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1055.012" name="Process Injection: Process Hollowing">
  Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Defense_Bypassed>
   Anti-virus, Application control
  </Defense_Bypassed>
  <Examples>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla has used process hollowing to create and manipulate processes through sections of unmapped memory by reallocating that space with its malicious code.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth can create a new process in a suspended state from a targeted legitimate process in order to unmap its memory and replace it with malicious code.
   </Example>
   <Example id="S0344" name="Azorult">
    Azorult can decrypt the payload into memory, create a new suspended process of itself, then inject a decrypted payload to the new process and resume new process execution.
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS has a command to download an .exe and use process hollowing to inject it into a new process.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook has been launched by starting iexplore.exe and replacing it with Bandook's payload.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can inject into a target process including Svchost, Explorer, and cmd using process hollowing.
   </Example>
   <Example id="S0127" name="BBSRAT">
    BBSRAT has been seen loaded into msiexec.exe through process hollowing to hide its execution.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can execute binaries through process hollowing.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can use process hollowing for execution.
   </Example>
   <Example id="S0354" name="Denis">
    Denis performed process hollowing through the API calls CreateRemoteThread, ResumeThread, and Wow64SetThreadContext.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack has used process hollowing shellcode to target a predefined list of processes from %SYSTEM32%.
   </Example>
   <Example id="S0038" name="Duqu">
    Duqu is capable of loading executable code via process hollowing.
   </Example>
   <Example id="G0078" name="Gorgon Group">
    Gorgon Group malware can use process hollowing to inject one of its trojans into another process.
   </Example>
   <Example id="S0189" name="ISMInjector">
    ISMInjector hollows out a newly created process RegASM.exe and injects its payload into the hollowed process.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used a file injector DLL to spawn a benign process on the victim's system and inject the malicious payload into it via process hollowing.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has used process hollowing to inject itself into legitimate Windows process.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used process hollowing in iexplore.exe to load the RedLeaves implant.
   </Example>
   <Example id="S0198" name="NETWIRE">
    The NETWIRE payload has been injected into benign Microsoft executables via process hollowing.
   </Example>
   <Example id="S0229" name="Orz">
    Some Orz versions have an embedded DLL known as MockDll that uses process hollowing and Regsvr32 to execute another payload.
   </Example>
   <Example id="G0040" name="Patchwork">
    A Patchwork payload uses process hollowing to hide the UAC bypass vulnerability exploitation inside svchost.exe.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can use process hollowing to execute its main payload.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession can launch itself from a hollowed svchost.exe process.
   </Example>
   <Example id="S1018" name="Saint Bot">
    The Saint Bot loader has used API calls to spawn MSBuild.exe in a suspended state before injecting the decrypted Saint Bot binary into it.
   </Example>
   <Example id="S0226" name="Smoke Loader">
    Smoke Loader spawns a new copy of c:\windows\syswow64\explorer.exe and then replaces the executable code in memory with malware.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    A Threat Group-3390 tool can spawn svchost.exe and inject the payload into that process.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot injects into the svchost.exe process.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has used process hollowing to inject into child processes.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate has the ability to inject its fourth stage into a suspended process created by the legitimate Windows utility InstallUtil.exe.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Access | Process Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1055.013" name="Process Injection: Process Doppelgänging">
  Adversaries may inject malicious code into process via process doppelgänging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgänging is a method of executing arbitrary code in the address space of a separate live process.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User
  </Permissions_Required>
  <Defense_Bypassed>
   Anti-virus, Application control
  </Defense_Bypassed>
  <Examples>
   <Example id="S0534" name="Bazar">
    Bazar can inject into a target process using process doppelgänging.
   </Example>
   <Example id="G0077" name="Leafminer">
    Leafminer has used Process Doppelgänging to evade security software while deploying tools on compromised systems.
   </Example>
   <Example id="S0242" name="SynAck">
    SynAck abuses NTFS transactions to launch and conceal malicious processes.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Metadata
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1055.014" name="Process Injection: VDSO Hijacking">
  Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Linux
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Application control
  </Defense_Bypassed>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1055.015" name="Process Injection: ListPlanting">
  Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.
  <Tactics>
   Defense Evasion, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0260" name="InvisiMole">
    InvisiMole has used ListPlanting to inject code into a trusted process.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1572" name="Protocol Tunneling">
  Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0114" name="Chimera">
    Chimera has encapsulated Cobalt Strike's C2 protocol in DNS and HTTPS.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has used the Plink utility to create SSH tunnels.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike uses a custom command and control protocol that is encapsulated in HTTP, HTTPS, or DNS. In addition, it conducts peer-to-peer communication over Windows named pipes encapsulated in the SMB protocol. All protocols use their standard assigned ports.
   </Example>
   <Example id="C0004" name="CostaRicto">
    During CostaRicto, the threat actors set up remote SSH tunneling into the victim's environment from a malicious domain.
   </Example>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink can use DNS over HTTPS (DoH) to resolve C2 nodes.
   </Example>
   <Example id="S0038" name="Duqu">
    Duqu uses a custom command and control protocol that communicates over commonly used ports, and is frequently encapsulated by application layer protocols.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 used the Plink command-line utility to create SSH tunnels to C2 servers.
   </Example>
   <Example id="S0173" name="FLIPSIDE">
    FLIPSIDE uses RDP to tunnel traffic from a victim environment.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used protocol tunneling for communication and RDP activity on compromised hosts through the use of open source tools such as Ngrok and custom tool SSHMinion.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can connect to HTTP proxies via TCP to create a tunnel to C2.
   </Example>
   <Example id="S1027" name="Heyoka Backdoor">
    Heyoka Backdoor can use spoofed DNS requests to create a bidirectional tunnel between a compromised host and its C2 servers.
   </Example>
   <Example id="S0604" name="Industroyer">
    Industroyer attempts to perform an HTTP CONNECT via an internal proxy to establish a tunnel.
   </Example>
   <Example id="S1020" name="Kevin">
    Kevin can use a custom protocol tunneled through DNS or HTTP.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has used protocol tunneling to further conceal C2 communications and infrastructure.
   </Example>
   <Example id="S1015" name="Milan">
    Milan can use a custom protocol tunneled through DNS or HTTP.
   </Example>
   <Example id="S0699" name="Mythic">
    Mythic can use SOCKS proxies to tunnel traffic through another protocol.
   </Example>
   <Example id="S0508" name="Ngrok">
    Ngrok can tunnel RDP and other services securely over internet connections.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used the Plink utility and other tools to create tunnels to C2 servers.
   </Example>
   <Example id="S0650" name="QakBot">
    The QakBot proxy module can encapsulate SOCKS5 protocol within its own proxy protocol.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Consider filtering network traffic to untrusted or known bad domains and resources.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1090" name="Proxy">
  Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0096" name="APT41">
    APT41 used a tool called CLASSFON to covertly proxy network communications.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has the ability to use a reverse SOCKS proxy module.
   </Example>
   <Example id="S0347" name="AuditCred">
    AuditCred can utilize proxy for communications.
   </Example>
   <Example id="S0245" name="BADCALL">
    BADCALL functions as a proxy server between the victim and C2 server.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has supported use of a proxy server.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has used frp, ssf, and Venom to establish SOCKS proxy connections.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT can act as a reverse proxy.
   </Example>
   <Example id="G0052" name="CopyKittens">
    CopyKittens has used the AirVPN service for operational activity.
   </Example>
   <Example id="S0384" name="Dridex">
    Dridex contains a backconnect module for tunneling network traffic through a victim's computer. Infected computers become part of a P2P botnet that can relay C2 traffic to other infected peers.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca adopted Cloudflare as a proxy for compromised servers.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used the open source reverse proxy tools including FRPC and Go Proxy to establish connections from C2 to local servers.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can identify and use configured proxies in a compromised network for C2 communication.
   </Example>
   <Example id="S0690" name="Green Lambert">
    Green Lambert can use proxies for C2 traffic.
   </Example>
   <Example id="S0246" name="HARDRAIN">
    HARDRAIN uses the command cmd.exe /c netsh firewall add portopening TCP 443 "adp" and makes the victim machine function as a proxy server.
   </Example>
   <Example id="S0376" name="HOPLIGHT">
    HOPLIGHT has multiple proxy options that mask traffic between the malware and the remote operators.
   </Example>
   <Example id="S0040" name="HTRAN">
    HTRAN can proxy TCP socket connections to obfuscate command and control infrastructure.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT can serve as a SOCKS proxy server.
   </Example>
   <Example id="S0487" name="Kessel">
    Kessel can use a proxy during exfiltration if set in the configuration.
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS has deployed a modified version of Invoke-Ngrok to expose open local ports to the Internet.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has leverage NordVPN for its egress points when targeting intended victims.
   </Example>
   <Example id="S0108" name="netsh">
    netsh can be used to set up a proxy tunnel to allow remote host access to an infected host.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can implement use of proxies to pivot traffic.
   </Example>
   <Example id="S0508" name="Ngrok">
    Ngrok can be used to proxy connections to machines located behind NAT or firewalls.
   </Example>
   <Example id="C0013" name="Operation Sharpshooter">
    For Operation Sharpshooter, the threat actors used the ExpressVPN service to hide their location.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used a custom proxy tool called "Agent" which has support for multiple hops.
   </Example>
   <Example id="S0435" name="PLEAD">
    PLEAD has the ability to proxy network communications.
   </Example>
   <Example id="G1005" name="POLONIUM">
    POLONIUM has used the AirVPN service for operational activity.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 contains modules that allow for use of proxies in command and control.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT can communicate over a reverse proxy using SOCKS5.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay can use proxy tools including boost_proxy_client for reverse proxy functionality.
   </Example>
   <Example id="S0332" name="Remcos">
    Remcos uses the infected hosts as SOCKS5 proxies to allow for tunneling and proxying.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team's BCS-server tool can create an internal proxy server to redirect traffic from the adversary-controlled C2 to internal servers which may not be connected to the internet, but are interconnected locally.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has the ability to use port forwarding to establish a proxy between a target host and C2.
   </Example>
   <Example id="S0273" name="Socksbot">
    Socksbot can start SOCKS proxy threads.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT has the ability to use an embedded SOCKS proxy in C2 communications.
   </Example>
   <Example id="S0436" name="TSCookie">
    TSCookie has the ability to proxy communications with command and control (C2) servers.
   </Example>
   <Example id="G0010" name="Turla">
    Turla RPC backdoors have included local UPnP RPC proxies.
   </Example>
   <Example id="S0263" name="TYPEFRAME">
    A TYPEFRAME variant can force the compromised system to function as a proxy server.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has used a peer-to-peer (P2P) network for C2.
   </Example>
   <Example id="S0207" name="Vasport">
    Vasport is capable of tunneling though a proxy.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT has the capability to act as a reverse proxy.
   </Example>
   <Example id="G0124" name="Windigo">
    Windigo has delivered a generic Windows proxy Win32/Glubteta.M. Windigo has also used multiple reverse proxy chains as part of their C2 infrastructure.
   </Example>
   <Example id="S0117" name="XTunnel">
    XTunnel relays traffic between a C2 server and a victim.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell can set up an HTTP or SOCKS proxy.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Traffic to known anonymity networks and C2 infrastructure can be blocked through the use of network allow and block lists. It should be noted that this kind of blocking may be circumvented by other techniques like Domain Fronting.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific C2 protocol used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools.
   </Mitigation>
   <Mitigation id="M1020" name="SSL/TLS Inspection">
    If it is possible to inspect HTTPS traffic, the captures can be analyzed for connections that appear to be domain fronting.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1090.001" name="Proxy: Internal Proxy">
  Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 has used SSH port forwarding capabilities on public-facing systems, and configured at least one instance of Cobalt Strike to use a network pipe over SMB during the 2020 SolarWinds intrusion.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 used custom tools to create SOCK5 and custom protocol proxies between infected hosts.
   </Example>
   <Example id="S0031" name="BACKSPACE">
    The "ZJ" variant of BACKSPACE allows "ZJ link" infections with Internet access to relay traffic from "ZJ listen" to a command server.
   </Example>
   <Example id="S0023" name="CHOPSTICK">
    CHOPSTICK used a proxy server between victims and the C2 server.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can be configured to have commands relayed over a peer-to-peer network of infected hosts. This can be used to limit the number of egress points, or provide access to a host without direct internet access.
   </Example>
   <Example id="S0502" name="Drovorub">
    Drovorub can use a port forwarding rule on its agent module to relay network traffic through the client module to a remote host on the same network.
   </Example>
   <Example id="S0038" name="Duqu">
    Duqu can be configured to have commands relayed over a peer-to-peer network of infected hosts if some of the hosts do not have Internet access.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke can used pipes to connect machines with restricted internet access to remote machines via other infected hosts.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa discovered system proxy settings and used them if available.
   </Example>
   <Example id="S0009" name="Hikit">
    Hikit supports peer connections.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can function as a proxy to create a server that relays communication between the client and C&amp;C server, or between two clients.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar has used internal nodes on the compromised network for C2 communications.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used a compromised router to serve as a proxy between a victim network's corporate and restricted segments.
   </Example>
   <Example id="S0051" name="MiniDuke">
    MiniDuke can can use a named pipe to forward communications from one compromised machine with internet access to other compromised machines.
   </Example>
   <Example id="S0699" name="Mythic">
    Mythic can leverage a peer-to-peer C2 profile between agents.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors proxied traffic through multiple infected systems.
   </Example>
   <Example id="S0556" name="Pay2Key">
    Pay2Key has designated machines in the compromised network to serve as reverse proxy pivot points to channel communications with C2.
   </Example>
   <Example id="G0041" name="Strider">
    Strider has used local servers with both local network and Internet access to act as internal proxy nodes to exfiltrate data from other parts of the network without direct Internet access.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet installs an RPC server for P2P communications.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has compromised internal network systems to act as a proxy to forward traffic to C2.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    The Winnti for Windows HTTP/S C2 mode can make use of a local proxy.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific C2 protocol used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1090.002" name="Proxy: External Proxy">
  Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 used other victims as proxies to relay command traffic, for instance using a compromised Georgian military email server as a hop point to NATO victims. The group has also used a tool that acts as a proxy to allow C2 even if the victim is behind a router. APT28 has also used a machine to relay and obscure communications between CHOPSTICK and their server.
   </Example>
   <Example id="G0022" name="APT3">
    An APT3 downloader establishes SOCKS5 connections for its initial C2.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used various tools to proxy C2 communications.
   </Example>
   <Example id="G0053" name="FIN5">
    FIN5 maintains access to victim environments by using FLIPSIDE to create a proxy for a backup RDP tunnel.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM used a modified version of HTRAN to redirect connections between networks.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole InvisiMole can identify proxy servers used by the victim and use them for C2 communication.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used multiple proxies to obfuscate network traffic from victims.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used a global service provider's IP as a proxy for C2 traffic from a victim.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has controlled POWERSTATS from behind a proxy network to obfuscate the C2 location.
   </Example>
   <Example id="S0699" name="Mythic">
    Mythic can leverage a modified SOCKS5 proxy to tunnel egress C2 traffic.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum can identify proxy servers configured and used by the victim, and use it to make HTTP requests to C2 its server.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS has connected to C2 servers through proxies.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot has a module that can proxy C2 communications.
   </Example>
   <Example id="S0019" name="Regin">
    Regin leveraged several compromised universities as proxies to obscure its origin.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat can use pre-configured HTTP proxies.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has used ProxyBot, which allows the attacker to redirect traffic from the current node to the backconnect server via Sock4\Socks5.
   </Example>
   <Example id="G0131" name="Tonto Team">
    Tonto Team has routed their traffic through an external server in order to obfuscate their location.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot has been known to reach a command and control server via one of nine proxy IP addresses.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    The Winnti for Windows HTTP/S C2 mode can make use of an external proxy.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific C2 protocol used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1090.003" name="Proxy: Multi-hop Proxy">
  To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source. A particular variant of this behavior is to use onion routing networks, such as the publicly available TOR network.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has routed traffic over Tor and VPN servers to obfuscate their activities.
   </Example>
   <Example id="G0016" name="APT29">
    A backdoor used by APT29 created a Tor hidden service to forward traffic from the Tor client to local ports 3389 (RDP), 139 (Netbios), and 445 (SMB) enabling full remote access from outside the network and has also used TOR.
   </Example>
   <Example id="S0438" name="Attor">
    Attor has used Tor for C2 communication.
   </Example>
   <Example id="C0004" name="CostaRicto">
    During CostaRicto, the threat actors used a layer of proxies to manage C2 communications.
   </Example>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink has used Tor nodes for C2 traffic.
   </Example>
   <Example id="S0281" name="Dok">
    Dok downloads and installs Tor via homebrew.
   </Example>
   <Example id="S0384" name="Dridex">
    Dridex can use multiple layers of proxy servers to hide terminal nodes in its infrastructure.
   </Example>
   <Example id="G0085" name="FIN4">
    FIN4 has used Tor to log in to victims' email accounts.
   </Example>
   <Example id="S0342" name="GreyEnergy">
    GreyEnergy has used Tor relays for Command and Control servers.
   </Example>
   <Example id="G0100" name="Inception">
    Inception used chains of compromised routers to proxy C2 communications between them and cloud service providers.
   </Example>
   <Example id="S0604" name="Industroyer">
    Industroyer used Tor nodes for C2.
   </Example>
   <Example id="S0276" name="Keydnap">
    Keydnap uses a copy of tor2web proxy for HTTPS communications.
   </Example>
   <Example id="S0641" name="Kobalos">
    Kobalos can chain together multiple compromised machines as proxies to reach their final targets.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has used multi-hop proxies to disguise the source of their malicious traffic.
   </Example>
   <Example id="S0282" name="MacSpy">
    MacSpy uses Tor for command and control.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors executed commands through the installed web shell via Tor exit nodes.
   </Example>
   <Example id="S0623" name="Siloscape">
    Siloscape uses Tor to communicate with C2.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity can use multiple layers of proxy servers to hide terminal nodes in its infrastructure.
   </Example>
   <Example id="S0183" name="Tor">
    Traffic traversing the Tor network will be forwarded to multiple nodes before exiting the Tor network and continuing on to its intended destination.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has used Tor for C2.
   </Example>
   <Example id="S0366" name="WannaCry">
    WannaCry uses Tor for command and control traffic.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Traffic to known anonymity networks and C2 infrastructure can be blocked through the use of network allow and block lists. It should be noted that this kind of blocking may be circumvented by other techniques like Domain Fronting.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1090.004" name="Proxy: Domain Fronting">
  Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS.  Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, "domainless" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-481
  </CAPEC_ID>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 has used the meek domain fronting plugin for Tor to hide the destination of C2 traffic.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike has the ability to accept a value for HTTP Host Header to enable domain fronting.
   </Example>
   <Example id="S0175" name="meek">
    meek uses Domain Fronting to disguise the destination of network traffic as another server that is hosted in the same Content Delivery Network (CDN) as the intended destination.
   </Example>
   <Example id="S0699" name="Mythic">
    Mythic supports domain fronting via custom request headers.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM has used a fronted domain to obfuscate its hard-coded C2 server domain.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1020" name="SSL/TLS Inspection">
    If it is possible to inspect HTTPS traffic, the captures can be analyzed for connections that appear to be domain fronting.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1012" name="Query Registry">
  Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-647
  </CAPEC_ID>
  <Examples>
   <Example id="S0045" name="ADVSTORESHELL">
    ADVSTORESHELL can enumerate registry keys.
   </Example>
   <Example id="G0050" name="APT32">
    APT32's backdoor can query the Windows Registry to gather system information.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used various strains of malware to query the Registry.
   </Example>
   <Example id="S0438" name="Attor">
    Attor has opened the registry and performed query searches.
   </Example>
   <Example id="S0344" name="Azorult">
    Azorult can check for installed software on the system under the Registry key Software\Microsoft\Windows\CurrentVersion\Uninstall.
   </Example>
   <Example id="S0414" name="BabyShark">
    BabyShark has executed the reg query command for HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default.
   </Example>
   <Example id="S0031" name="BACKSPACE">
    BACKSPACE is capable of enumerating and making modifications to an infected system's Registry.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot searches for certain Registry keys to be configured before executing the payload.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can query Windows\CurrentVersion\Uninstall for installed applications.
   </Example>
   <Example id="S0574" name="BendyBear">
    BendyBear can query the host's Registry key at HKEY_CURRENT_USER\Console\QuickEdit to retrieve data.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has used the RegQueryValueExA function to retrieve proxy information in the Registry.
   </Example>
   <Example id="S0570" name="BitPaymer">
    BitPaymer can use the RegEnumKeyW to iterate through Registry keys.
   </Example>
   <Example id="S0252" name="Brave Prince">
    Brave Prince gathers information about the Registry.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can check the Registry for specific keys.
   </Example>
   <Example id="S0030" name="Carbanak">
    Carbanak checks the Registry key HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings for proxy configurations information.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp has searched the Image File Execution Options registry key for "Debugger" within every subkey.
   </Example>
   <Example id="S0335" name="Carbon">
    Carbon enumerates values in the Registry.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT contains watchdog functionality that periodically ensures HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows\Load is set to point to its executable.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower has the ability to enumerate Uninstall registry values.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has queried Registry keys using reg query \\HKU\\SOFTWARE\Microsoft\Terminal Server Client\Servers and reg query \\HKU\\Software\Microsoft\Windows\CurrentVersion\Internet Settings.
   </Example>
   <Example id="S0023" name="CHOPSTICK">
    CHOPSTICK provides access to the Windows Registry, which can be used to gather information.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling has the ability to enumerate Registry keys, including KEY_CURRENT_USER\Software\Bitcoin\Bitcoin-Qt\strDataDir to search for a bitcoin wallet.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can query HKEY_CURRENT_USER\Software\Microsoft\Office\\Excel\Security\AccessVBOM\  to determine if the security setting for restricting default programmatic access is enabled.
   </Example>
   <Example id="S0126" name="ComRAT">
    ComRAT can check the default browser by querying HKCR\http\shell\open\command.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson can check the Registry for the presence of HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\last_edate to determine how long it has been installed on a host.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman can query the Registry to determine if it has already been installed on the system.
   </Example>
   <Example id="S0354" name="Denis">
    Denis queries the Registry for keys and values.
   </Example>
   <Example id="S0021" name="Derusbi">
    Derusbi is capable of enumerating Registry keys and values.
   </Example>
   <Example id="S0186" name="DownPaper">
    DownPaper searches and reads the value of the Windows Update Registry Run key.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has queried the Registry to identify victim information.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack can collect the RegisteredOwner, RegisteredOrganization, and InstallDate registry values.
   </Example>
   <Example id="S0091" name="Epic">
    Epic uses the rem reg query command to obtain values from Registry keys.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke can get user agent strings for the default browser from HKCU\Software\Classes\http\shell\open\command.
   </Example>
   <Example id="S0267" name="FELIXROOT">
    FELIXROOT queries the Registry for specific keys for potential privilege escalation and proxy information. FELIXROOT has also used WMI to query the Windows Registry.
   </Example>
   <Example id="S0182" name="FinFisher">
    FinFisher queries Registry values as part of its anti-sandbox checks.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has accessed Registry hives ntuser.dat and UserClass.dat.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can check Software\Microsoft\Windows\CurrentVersion\Internet Settings to extract the ProxyServer string.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can open random files and Registry keys to obscure malware behavior from sandbox analysis.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT has checked for the existence of a Service key to determine if it has already been installed on the system.
   </Example>
   <Example id="S0249" name="Gold Dragon">
    Gold Dragon enumerates registry keys with the command regkeyenum and obtains information for the Registry key HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run.
   </Example>
   <Example id="S0376" name="HOPLIGHT">
    A variant of HOPLIGHT hooks lsass.exe, and lsass.exe then checks the Registry for the data value 'rdpproto' under the key SYSTEM\CurrentControlSet\Control\Lsa Name.
   </Example>
   <Example id="S0203" name="Hydraq">
    Hydraq creates a backdoor through which remote attackers can retrieve system information, such as CPU speed, from Registry keys.
   </Example>
   <Example id="S0604" name="Industroyer">
    Industroyer has a data wiper component that enumerates keys in the Registry HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can enumerate Registry values, keys, and data.
   </Example>
   <Example id="S0201" name="JPIN">
    JPIN can enumerate Registry keys.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has obtained specific Registry keys and values on a compromised host.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group malware IndiaIndia checks Registry keys within HKCU and HKLM to determine if certain applications are present, including SecureCRT, Terminal Services, RealVNC, TightVNC, UltraVNC, Radmin, mRemote, TeamViewer, FileZilla, pcAnyware, and Remote Desktop. Another Lazarus Group malware sample checks for the presence of the following Registry key:HKEY_CURRENT_USER\Software\Bitcoin\Bitcoin-Qt.
   </Example>
   <Example id="S0513" name="LiteDuke">
    LiteDuke can query the Registry to check for the presence of HKCU\Software\KasperskyLab.
   </Example>
   <Example id="S0680" name="LitePower">
    LitePower can query the Registry for keys added to execute COM hijacking.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can check for existing stratum cryptomining information in HKLM\Software\Microsoft\Windows\CurrentVersion\spreadCpuXmr – %stratum info%.
   </Example>
   <Example id="S1015" name="Milan">
    Milan can query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography MachineGuid to retrieve the machine GUID.
   </Example>
   <Example id="S1047" name="Mori">
    Mori can read data from the Registry including from HKLM\Software\NFC\IPA andHKLM\Software\NFC\.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT can read specific registry values.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used reg query "HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default" on a victim to query the Registry.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, the threat actors executed /c cd /d c:\windows\temp\ &amp; reg query HKEY_CURRENT_USER\Software\&lt;username&gt;\PuTTY\Sessions\ to detect recent PuTTY sessions, likely to further lateral movement.
   </Example>
   <Example id="S0165" name="OSInfo">
    OSInfo queries the registry to look for information about Terminal Services.
   </Example>
   <Example id="S1050" name="PcShare">
    PcShare can search the registry files of a compromised host.
   </Example>
   <Example id="S0517" name="Pillowmint">
    Pillowmint has used shellcode which reads code stored in the registry keys \REGISTRY\SOFTWARE\Microsoft\DRM using the native Windows API as well as read HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Tcpip\Parameters\Interfaces as part of its C2.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX can enumerate and query for information contained within the Windows Registry.
   </Example>
   <Example id="S0145" name="POWERSOURCE">
    POWERSOURCE queries Registry keys in preparation for setting Run keys to achieve persistence.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit contains a collection of Privesc-PowerUp modules that can query Registry keys for potential opportunities.
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER may query the Registry by running reg query on a victim.
   </Example>
   <Example id="S0238" name="Proxysvc">
    Proxysvc gathers product names from the Registry key: HKLM\Software\Microsoft\Windows NT\CurrentVersion ProductName and the processor description from the Registry key HKLM\HARDWARE\DESCRIPTION\System\CentralProcessor\0 ProcessorNameString.
   </Example>
   <Example id="S0269" name="QUADAGENT">
    QUADAGENT checks if a value exists within a Registry key in the HKCU hive whose name is the same as the scheduled task it has created.
   </Example>
   <Example id="S0241" name="RATANKBA">
    RATANKBA uses the command reg query "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\InternetSettings".
   </Example>
   <Example id="S0172" name="Reaver">
    Reaver queries the Registry to determine the correct Startup path to use for persistence.
   </Example>
   <Example id="S0075" name="Reg">
    Reg may be used to gather details from the Windows Registry of a local or remote system at the command-line interface.
   </Example>
   <Example id="S0496" name="REvil">
    REvil can query the Registry to get random file extensions to append to encrypted files.
   </Example>
   <Example id="S0448" name="Rising Sun">
    Rising Sun has identified the OS product name from a compromised host by searching the registry for SOFTWARE\MICROSOFT\Windows NT\ CurrentVersion | ProductName.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can access the HKLM\System\CurrentControlSet\Services\mssmbios\Data\SMBiosData Registry key to obtain the System manufacturer value to identify the machine type.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has used check_registry_keys as part of its environmental checks.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon queries several Registry keys to identify hard disk partitions to overwrite.
   </Example>
   <Example id="S1019" name="Shark">
    Shark can query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography MachineGuid to retrieve the machine GUID.
   </Example>
   <Example id="S0589" name="Sibot">
    Sibot has queried the registry for proxy server information.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can use the GetRegValue function to check Registry keys within HKCU\Software\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated and HKLM\Software\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated. It also contains additional modules that can check software AutoRun values and use the Win32 namespace to get values from HKCU, HKLM, HKCR, and HKCC hives.
   </Example>
   <Example id="S0627" name="SodaMaster">
    SodaMaster has the ability to query the Registry to detect a key specific to VMware.
   </Example>
   <Example id="G0038" name="Stealth Falcon">
    Stealth Falcon malware attempts to determine the installed version of .NET by querying the Registry.
   </Example>
   <Example id="S0380" name="StoneDrill">
    StoneDrill has looked in the registry to find the default browser path.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet searches the Registry for indicators of security programs.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST collected the registry value HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\MachineGuid from compromised hosts.
   </Example>
   <Example id="S0242" name="SynAck">
    SynAck enumerates Registry keys associated with event logs.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor can query the Registry on compromised hosts using RegQueryValueExA.
   </Example>
   <Example id="S0560" name="TEARDROP">
    TEARDROP checked that HKU\SOFTWARE\Microsoft\CTF existed before decoding its embedded payload.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    A Threat Group-3390 tool can read and decrypt stored Registry values.
   </Example>
   <Example id="S0668" name="TinyTurla">
    TinyTurla can query the Registry for its configuration information.
   </Example>
   <Example id="G0010" name="Turla">
    Turla surveys a system upon check-in to discover information in the Windows Registry with the reg query command.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has used Reg to query the Registry for installed programs.
   </Example>
   <Example id="S0476" name="Valak">
    Valak can use the Registry for code updates and to collect credentials.
   </Example>
   <Example id="S0180" name="Volgmer">
    Volgmer checks the system for certain Registry keys.
   </Example>
   <Example id="S0612" name="WastedLocker">
    WastedLocker checks for specific registry keys related to the UCOMIEnumConnections and IActiveScriptParseProcedure32 interfaces.
   </Example>
   <Example id="S0579" name="Waterbear">
    Waterbear can query the Registry key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\MSDTC\MTxOCI" to see if the value OracleOcilib exists.
   </Example>
   <Example id="S0155" name="WINDSHIELD">
    WINDSHIELD can gather Registry values.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy executes the reg query command to obtain information in the Registry.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda checks for the existence of a Registry key and if it contains certain values.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has used a tool to query the Registry for proxy settings.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell can query the netsvc group value data located in the svchost group Registry key.
   </Example>
   <Example id="S1013" name="ZxxZ">
    ZxxZ can search the registry of a compromised host.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1620" name="Reflective Code Loading">
  Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk. Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Application control
  </Defense_Bypassed>
  <Examples>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike's execute-assembly command can run a .NET executable within the memory of a sacrificial process by loading the CLR.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba loaded the payload into memory using PowerShell.
   </Example>
   <Example id="S0695" name="Donut">
    Donut can generate code modules that enable in-memory execution of VBScript, JScript, EXE, DLL, and dotNET payloads.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb's loader has reflectively loaded .NET-based assembly/payloads into memory.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can use custom shellcode to map embedded DLLs into memory.
   </Example>
   <Example id="S1022" name="IceApple">
    IceApple can use reflective code loading to load .NET assemblies into MSExchangeOWAAppPool on targeted Exchange servers.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has changed memory protection permissions then overwritten in memory DLL function code with shellcode, which was later executed via KernelCallbackTable hijacking. Lazarus Group has also used shellcode within macros to decrypt and manually map DLLs into memory at runtime.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has reflectively loaded the decoded DLL into memory.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit reflectively loads a Windows PE file into a process.
   </Example>
   <Example id="S0595" name="ThiefQuest">
    ThiefQuest uses various API functions such as NSCreateObjectFileImageFromMemory to load and link in-memory payloads.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1219" name="Remote Access Software">
  An adversary may use legitimate desktop support and remote access software, such as Team Viewer, AnyDesk, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors installed the AnyDesk remote desktop application onto the compromised network.
   </Example>
   <Example id="S0030" name="Carbanak">
    Carbanak has a plugin for VNC and Ammyy Admin Tool.
   </Example>
   <Example id="G0008" name="Carbanak">
    Carbanak used legitimate programs such as AmmyyAdmin and Team Viewer for remote interactive C2 to target systems.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group used the Ammyy Admin tool as well as TeamViewer for remote access, including to preserve remote access if a Cobalt Strike module was lost.
   </Example>
   <Example id="G0105" name="DarkVishnya">
    DarkVishnya used DameWare Mini Remote Control for lateral movement.
   </Example>
   <Example id="S0384" name="Dridex">
    Dridex contains a module for VNC.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor has checked for the LogMein event log in an attempt to encrypt files in remote machines.
   </Example>
   <Example id="G0120" name="Evilnum">
    EVILNUM has used the malware variant, TerraTV, to run a legitimate TeamViewer application to connect to compromrised machines.
   </Example>
   <Example id="G0115" name="GOLD SOUTHFIELD">
    GOLD SOUTHFIELD has used the cloud-based remote management and monitoring tool "ConnectWise Control" to deploy REvil.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has established tmate sessions for C2 communications.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used a modified TeamViewer client as a command and control channel.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used a legitimate application, ScreenConnect, to manage systems remotely and move laterally.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has installed TeamViewer on targeted systems.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors used several remote administration tools as persistent infiltration channels.
   </Example>
   <Example id="S0148" name="RTM">
    RTM has the capability to download a VNC module from command and control (C2).
   </Example>
   <Example id="G0048" name="RTM">
    RTM has used a modified version of TeamViewer and Remote Utilities for remote access.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used remote administration tools or remote industrial control system client software to maliciously release electricity breakers.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has established tmate sessions for C2 communications.
   </Example>
   <Example id="G0076" name="Thrip">
    Thrip used a cloud-based remote access software called LogMeIn for their attacks.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot uses vncDll module to remote control the victim machine.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    Use application control to mitigate installation and use of unapproved software that can be used for remote access.
   </Mitigation>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Properly configure firewalls, application firewalls, and proxies to limit outgoing traffic to sites and services used by remote access tools.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures may be able to prevent traffic to remote access services.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1563" name="Remote Service Session Hijacking">
  Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.
  <Tactic>
   Lateral Movement
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   SYSTEM, root
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Disable the remote service (ex: SSH, RDP, etc.) if it is unnecessary.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Enable firewall rules to block unnecessary traffic between network security zones within a network.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Do not allow remote access to services as a privileged account unless necessary.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit remote user permissions if remote access is necessary.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1563.001" name="Remote Service Session Hijacking: SSH Hijacking">
  Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.
  <Tactic>
   Lateral Movement
  </Tactic>
  <Platforms>
   Linux, macOS
  </Platforms>
  <System_Requirements>
   SSH service enabled, trust relationships configured, established connections
  </System_Requirements>
  <Permissions_Required>
   root
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Ensure that agent forwarding is disabled on systems that do not explicitly require this feature to prevent misuse.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Ensure SSH key pairs have strong passwords and refrain from using key-store technologies such as ssh-agent unless they are properly protected.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Do not allow remote access via SSH as root or other privileged accounts.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Ensure proper file permissions are set and harden system to prevent root privilege escalation opportunities.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1563.002" name="Remote Service Session Hijacking: RDP Hijacking">
  Adversaries may hijack a legitimate user’s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).
  <Tactic>
   Lateral Movement
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   SYSTEM
  </Permissions_Required>
  <Examples>
   <Example id="G0001" name="Axiom">
    Axiom has targeted victims with remote administration tools including RDP.
   </Example>
   <Example id="S0366" name="WannaCry">
    WannaCry enumerates current remote desktop sessions and tries to execute the malware on each session.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Audit the Remote Desktop Users group membership regularly. Remove unnecessary accounts and groups from Remote Desktop Users groups.
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Disable the RDP service if it is unnecessary.
   </Mitigation>
   <Mitigation id="M1035" name="Limit Access to Resource Over Network">
    Use remote desktop gateways.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Enable firewall rules to block RDP traffic between network security zones within a network.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Change GPOs to define shorter timeouts sessions and maximum amount of time any single session can be active. Change GPOs to specify the maximum amount of time that a disconnected session stays active on the RD session host server.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Consider removing the local Administrators group from the list of groups allowed to log in through RDP.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit remote user permissions if remote access is necessary.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1021" name="Remote Services">
  Adversaries may use Valid Accounts to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.
  <Tactic>
   Lateral Movement
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <System_Requirements>
   Active remote service accepting connections and valid credentials
  </System_Requirements>
  <CAPEC_ID>
   CAPEC-555
  </CAPEC_ID>
  <Examples>
   <Example id="S0437" name="Kivars">
    Kivars has the ability to remotely trigger keyboard input and mouse clicks.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa can manage remote screen sessions.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet can propagate via peer-to-peer communication and updates using RPC.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication on remote service logons where possible.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit the accounts that may use remote services. Limit the permissions for accounts that are at higher risk of compromise; for example, configure SSH so users can only run specific programs.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0033" name="Network Share">
    Network Share Access
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Flow
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1021.001" name="Remote Services: Remote Desktop Protocol">
  Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.
  <Tactic>
   Lateral Movement
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <System_Requirements>
   RDP service enabled, account in the Remote Desktop Users group
  </System_Requirements>
  <Permissions_Required>
   Remote Desktop Users, User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-555
  </CAPEC_ID>
  <Examples>
   <Example id="G0006" name="APT1">
    The APT1 group is known to have used RDP during operations.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used RDP sessions from public-facing systems to internal servers.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 enables the Remote Desktop Protocol for persistence.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has been seen using RDP for lateral movement and persistence, in some cases employing the rdpwinst tool for mangement of multiple sessions.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used RDP for lateral movement.
   </Example>
   <Example id="G0001" name="Axiom">
    Axiom has used RDP during operations.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has used Remote Desktop to log on to servers interactively and manually copy files to remote hosts.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors used RDP to access specific network hosts of interest.
   </Example>
   <Example id="S0030" name="Carbanak">
    Carbanak enables concurrent Remote Desktop Protocol (RDP) sessions.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used RDP to access targeted systems.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has used Remote Desktop Protocol to conduct lateral movement.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can start a VNC-based remote desktop server and tunnel the connection through the already established C2 channel.
   </Example>
   <Example id="S0334" name="DarkComet">
    DarkComet can open an active screen of the victim’s machine and take control of the mouse and keyboard.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has moved laterally via RDP.
   </Example>
   <Example id="G0051" name="FIN10">
    FIN10 has used RDP to move laterally to systems in the victim environment.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 used RDP to move laterally in victim networks.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has used RDP to move laterally in victim environments.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has used RDP for lateral movement.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used RDP to log in and move laterally in the target environment.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has used remote desktop sessions for lateral movement.
   </Example>
   <Example id="S0434" name="Imminent Monitor">
    Imminent Monitor has a module for performing remote desktop access.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT can support RDP control.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used RDP for direct remote point-and-click access.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can enable remote desktop on the victim's machine.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group malware SierraCharlie uses RDP for propagation.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has targeted RDP credentials and used it to move through the victim environment.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has used Remote Desktop Services on targeted systems.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used RDP connections to move across the victim network.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT has a module for performing remote desktop access.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used Remote Desktop Protocol for lateral movement. The group has also used tunneling tools to tunnel RDP into the environment.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork attempted to use RDP to move laterally.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can enable/disable RDP connection and can start a remote desktop session using a browser web socket client.
   </Example>
   <Example id="S0583" name="Pysa">
    Pysa has laterally moved using RDP connections.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT has a module for performing remote desktop access.
   </Example>
   <Example id="S0379" name="Revenge RAT">
    Revenge RAT has a plugin to perform RDP access.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has the ability to use RDP to connect to victim's machines.
   </Example>
   <Example id="S0382" name="ServHelper">
    ServHelper has commands for adding a remote desktop user and sending RDP traffic to the attacker through a reverse SSH tunnel.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has used RDP for lateral movement.
   </Example>
   <Example id="G0088" name="TEMP.Veles">
    TEMP.Veles utilized RDP throughout an operation.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT has the ability to control an infected PC using RDP.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used RDP for lateral movement.
   </Example>
   <Example id="S0350" name="zwShell">
    zwShell has used RDP for lateral movement.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell has remote desktop functionality.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Audit the Remote Desktop Users group membership regularly. Remove unnecessary accounts and groups from Remote Desktop Users groups.
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Disable the RDP service if it is unnecessary.
   </Mitigation>
   <Mitigation id="M1035" name="Limit Access to Resource Over Network">
    Use remote desktop gateways.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication for remote logins.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Do not leave RDP accessible from the internet. Enable firewall rules to block RDP traffic between network security zones within a network.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Change GPOs to define shorter timeouts sessions and maximum amount of time any single session can be active. Change GPOs to specify the maximum amount of time that a disconnected session stays active on the RD session host server.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Consider removing the local Administrators group from the list of groups allowed to log in through RDP.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit remote user permissions if remote access is necessary.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Flow
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1021.002" name="Remote Services: SMB/Windows Admin Shares">
  Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.
  <Tactic>
   Lateral Movement
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <System_Requirements>
   SMB enabled; Host/network firewalls not blocking SMB ports between source and destination; Use of domain account in administrator group on remote system or default system admin account.
  </System_Requirements>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-561
  </CAPEC_ID>
  <Examples>
   <Example id="S0504" name="Anchor">
    Anchor can support windows execution via SMB shares.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has mapped network drives using Net and administrator credentials.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used administrative accounts to connect over SMB to targeted users.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 will copy files over to Windows Admin Shares (like ADMIN$) as part of lateral movement.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 used Net to use Windows' hidden network shares to copy their tools to remote machines for execution.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used SMB for lateral movement.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 has transferred implant files using Windows Admin Shares.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    BlackEnergy has run a plug-in on a victim to spread through the local network by using PsExec and accessing admin shares.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has used Windows Explorer to manually copy malicious files to remote hosts over SMB.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used Windows admin shares to move laterally.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can use Window admin shares (C$ and ADMIN$) for lateral movement.
   </Example>
   <Example id="S0608" name="Conficker">
    Conficker variants spread through NetBIOS share propagation.
   </Example>
   <Example id="S0575" name="Conti">
    Conti can spread via SMB and encrypts files on different hosts, potentially compromising an entire network.
   </Example>
   <Example id="G0009" name="Deep Panda">
    Deep Panda uses net.exe to connect to network shares using net use commands with compromised credentials.
   </Example>
   <Example id="S0659" name="Diavol">
    Diavol can spread throughout a network via SMB prior to encryption.
   </Example>
   <Example id="S0038" name="Duqu">
    Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet leverages the Admin$ share for lateral movement once the local admin password has been brute forced.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has attempted to map to C$ on enumerated hosts to test the scope of their current credentials/context.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used valid accounts to access SMB shares.
   </Example>
   <Example id="S0698" name="HermeticWizard">
    HermeticWizard can use a list of hardcoded credentials to to authenticate via NTLMSSP to the SMB shares on remote systems.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang actors have been known to copy files to the network shares of other computers to move laterally.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs copies itself over network shares to move laterally on a victim network.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group malware SierraAlfa accesses the ADMIN$ share via SMB to conduct lateral movement.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can infect victims by brute forcing SMB.
   </Example>
   <Example id="G1009" name="Moses Staff">
    Moses Staff has used batch scripts that can enable SMB on a compromised host.
   </Example>
   <Example id="S0039" name="Net">
    Lateral movement can be done with Net through net use commands to connect to the on remote systems.
   </Example>
   <Example id="S0056" name="Net Crawler">
    Net Crawler uses Windows admin shares to establish authenticated sessions to remote systems over SMB as part of lateral movement.
   </Example>
   <Example id="S0368" name="NotPetya">
    NotPetya can use PsExec, which interacts with the ADMIN$ network share to execute commands on remote systems.
   </Example>
   <Example id="S0365" name="Olympic Destroyer">
    Olympic Destroyer uses PsExec to interact with the ADMIN$ network share to execute commands on remote systems.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used Impacket's smbexec.py as well as accessing the C$ and IPC$ shares to move laterally.
   </Example>
   <Example id="G0071" name="Orangeworm">
    Orangeworm has copied its backdoor across open network shares, including ADMIN$, C$WINDOWS, D$WINDOWS, and E$WINDOWS.
   </Example>
   <Example id="S0029" name="PsExec">
    PsExec, a tool that has been used by adversaries, writes programs to the ADMIN$ network share to execute commands on remote systems.
   </Example>
   <Example id="S0019" name="Regin">
    The Regin malware platform can use Windows admin shares to move laterally.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk has used the C$ network share for lateral movement.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has run net use to connect to network shares.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon accesses network share(s), enables share access to the target device, copies an executable payload to the target system, and uses a Scheduled Task/Job to execute the malware.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet propagates to available network shares.
   </Example>
   <Example id="G0028" name="Threat Group-1314">
    Threat Group-1314 actors mapped network drives using net use.
   </Example>
   <Example id="G0010" name="Turla">
    Turla used net use commands to connect to lateral systems within a network.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used SMB to drop Cobalt Strike Beacon on a domain controller for lateral movement.
   </Example>
   <Example id="S0672" name="Zox">
    Zox has the ability to use SMB for communication.
   </Example>
   <Example id="S0350" name="zwShell">
    zwShell has been copied over network shares to move laterally.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Consider using the host firewall to restrict file sharing communications such as SMB.
   </Mitigation>
   <Mitigation id="M1035" name="Limit Access to Resource Over Network">
    Consider disabling Windows administrative shares.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Do not reuse local administrator account passwords across systems. Ensure password complexity and uniqueness such that the passwords cannot be cracked or guessed.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Deny remote use of local admin credentials to log into systems. Do not allow domain user accounts to be in the local Administrators group multiple systems.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0033" name="Network Share">
    Network Share Access
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1021.003" name="Remote Services: Distributed Component Object Model">
  Adversaries may use Valid Accounts to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.
  <Tactic>
   Lateral Movement
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM
  </Permissions_Required>
  <Examples>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can deliver Beacon payloads for lateral movement by leveraging remote COM execution.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can utilize Invoke-DCOM to leverage remote COM execution for lateral movement.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can use System namespace methods to execute lateral movement using DCOM.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1048" name="Application Isolation and Sandboxing">
    Ensure all COM alerts and Protected View are enabled.
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Consider disabling DCOM through Dcomcnfg.exe.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Enable Windows firewall, which prevents DCOM instantiation by default.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Modify Registry settings (directly or using Dcomcnfg.exe) in HKEY_LOCAL_MACHINE\SOFTWARE\Classes\AppID\{{AppID_GUID}} associated with the process-wide security of individual COM applications.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1021.004" name="Remote Services: SSH">
  Adversaries may use Valid Accounts to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.
  <Tactic>
   Lateral Movement
  </Tactic>
  <Platforms>
   Linux, macOS
  </Platforms>
  <System_Requirements>
   An SSH server is configured and running.
  </System_Requirements>
  <CAPEC_ID>
   CAPEC-555
  </CAPEC_ID>
  <Examples>
   <Example id="G0087" name="APT39">
    APT39 used secure shell (SSH) to move laterally among their targets.
   </Example>
   <Example id="G0098" name="BlackTech">
    BlackTech has used Putty for remote access.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can SSH to a remote service.
   </Example>
   <Example id="S0363" name="Empire">
    Empire contains modules for executing commands over SSH as well as in-memory VNC agent injection.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has used SSH to move laterally through victim environments.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used the PuTTY and Plink tools for lateral movement.
   </Example>
   <Example id="G0036" name="GCMAN">
    GCMAN uses Putty for lateral movement.
   </Example>
   <Example id="S0599" name="Kinsing">
    Kinsing has used SSH for lateral movement.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group used SSH and the PuTTy PSCP utility to gain access to a restricted segment of a compromised network.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan used ssh for internal reconnaissance.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used Putty Secure Copy Client (PSCP) to transfer data.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used Putty to access compromised systems.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has spread its coinminer via SSH.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has used SSH to connect back to victim machines.
   </Example>
   <Example id="G0088" name="TEMP.Veles">
    TEMP.Veles has relied on encrypted SSH-based tunnels to transfer tools and for remote command/program execution.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Disable the SSH daemon on systems that do not require it. For macOS ensure Remote Login is disabled under Sharing Preferences.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Require multi-factor authentication for SSH connections wherever possible, such as password protected SSH keys.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit which user accounts are allowed to login via SSH.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1021.005" name="Remote Services: VNC">
  Adversaries may use Valid Accounts to remotely control machines using Virtual Network Computing (VNC).  VNC is a platform-independent desktop sharing system that uses the RFB ("remote framebuffer") protocol to enable users to remotely control another computer’s display by relaying the screen, mouse, and keyboard inputs over the network.
  <Tactic>
   Lateral Movement
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <System_Requirements>
   VNC server installed and listening for connections.
  </System_Requirements>
  <CAPEC_ID>
   CAPEC-555
  </CAPEC_ID>
  <Examples>
   <Example id="S0484" name="Carberp">
    Carberp can start a remote VNC session by downloading a new plugin.
   </Example>
   <Example id="S1014" name="DanBot">
    DanBot can use VNC for remote access to targeted systems.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has used TightVNC to control compromised hosts.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has installed TightVNC server and client on compromised servers and endpoints for lateral movement.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has used VNC tools, including UltraVNC, to remotely interact with compromised hosts.
   </Example>
   <Example id="G0036" name="GCMAN">
    GCMAN uses VNC for lateral movement.
   </Example>
   <Example id="S0279" name="Proton">
    Proton uses VNC to connect into systems.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot has used a VNC module to monitor the victim and collect information to pivot to valuable systems on the network
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT has the ability of performing remote desktop access via a VNC console.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell supports functionality for VNC sessions.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Inventory workstations for unauthorized VNC server software.
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Uninstall any VNC server software where not required.
   </Mitigation>
   <Mitigation id="M1037" name="Filter Network Traffic">
    VNC defaults to TCP ports 5900 for the server, 5800 for browser access, and 5500 for a viewer in listening mode. Filtering or blocking these ports will inhibit VNC traffic utilizing default ports.
   </Mitigation>
   <Mitigation id="M1033" name="Limit Software Installation">
    Restrict software installation to user groups that require it. A VNC server must be manually installed by the user or adversary.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1021.006" name="Remote Services: Windows Remote Management">
  Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.
  <Tactic>
   Lateral Movement
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 has used WinRM via PowerShell to execute command and payloads on remote hosts.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used WinRM for lateral movement.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can use WinRM to execute a payload on a remote host.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY tracks TrustedHosts and can move laterally to these targets via WinRM.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has used WinRM to enable remote execution.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used Window Remote Management to move laterally through a victim network.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Disable the WinRM service.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    If the service is necessary, lock down critical enclaves with separate WinRM infrastructure and follow WinRM best practices on use of host firewalls to restrict WinRM access to allow communication only to/from specific devices.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    If the service is necessary, lock down critical enclaves with separate WinRM accounts and permissions.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1018" name="Remote System Discovery">
  Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-292
  </CAPEC_ID>
  <Examples>
   <Example id="S0552" name="AdFind">
    AdFind has the ability to query Active Directory for computers.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used AdFind to enumerate remote systems.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has a tool that can detect the existence of remote systems.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has enumerated DC servers using the command net group "Domain Controllers" /domain. The group has also used the ping command.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used NBTscan and custom tools to discover remote systems.
   </Example>
   <Example id="S0099" name="Arp">
    Arp can be used to display a host's ARP cache, which may include address resolutions for remote systems.
   </Example>
   <Example id="S0093" name="Backdoor.Oldrea">
    Backdoor.Oldrea can enumerate and map ICS-specific systems in victim environments.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can enumerate remote systems using  Net View.
   </Example>
   <Example id="S0570" name="BitPaymer">
    BitPaymer can use net view to discover remote systems.
   </Example>
   <Example id="S0521" name="BloodHound">
    BloodHound can enumerate and collect the properties of domain computers, including domain controllers.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER typically use ping and Net to enumerate systems.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors used the commands net view /all /domain and ping to discover remote systems. They also used PowerView's PowerShell Invoke-ShareFinder script for file share enumeration.
   </Example>
   <Example id="S0335" name="Carbon">
    Carbon uses the net view command.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has utilized various scans and queries to find domain controllers and remote services in the target environment.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike uses the native Windows Network Enumeration APIs to interrogate and discover targets in a Windows Active Directory network.
   </Example>
   <Example id="S0244" name="Comnie">
    Comnie runs the net view command
   </Example>
   <Example id="S0575" name="Conti">
    Conti has the ability to discover hosts on a target network.
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can discover active IP addresses, along with the machine name, within a targeted network.
   </Example>
   <Example id="G0009" name="Deep Panda">
    Deep Panda has used ping to identify other machines of interest.
   </Example>
   <Example id="S0659" name="Diavol">
    Diavol can use the ARP table to find remote hosts to scan.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has likely obtained a list of hosts in the victim environment.
   </Example>
   <Example id="S0694" name="DRATzarus">
    DRATzarus can search for other machines connected to compromised host and attempt to map the network.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca used the command powershell "Get-EventLog -LogName security -Newest 500 | where {$_.EventID -eq 4624} | format-list -property * | findstr "Address"" to find the network information of successfully logged-in accounts to discovery addresses of other machines. Earth Lusca has also used multiple scanning tools to discover other machines within the same compromised network.
   </Example>
   <Example id="S0091" name="Epic">
    Epic uses the net view command on the victim’s machine.
   </Example>
   <Example id="G0053" name="FIN5">
    FIN5 has used the open source tool Essential NetTools to map the network and build a list of targets.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 used publicly available tools (including Microsoft's built-in SQL querying tool, osql.exe) to map the internal network and conduct reconnaissance against Active Directory, Structured Query Language (SQL) servers, and NetBIOS.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has used dsquery and other Active Directory utilities to enumerate hosts; they have also used nltest.exe /dclist to retrieve a list of domain controllers.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro has been used to execute net view on a targeted system.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used Angry IP Scanner to detect remote systems.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can collect information about hosts on the victim network.
   </Example>
   <Example id="C0007" name="FunnyDream">
    During FunnyDream, the threat actors used several tools and batch files to map victims' internal networks.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM used a modified version of NBTscan to identify available NetBIOS name servers over the network as well as ping to identify remote systems.
   </Example>
   <Example id="S0698" name="HermeticWizard">
    HermeticWizard can find machines on the local network by gathering known local IP addresses through DNSGetCacheDataTable, GetIpNetTable,WNetOpenEnumW(RESOURCE_GLOBALNET, RESOURCETYPE_ANY),NetServerEnum,GetTcpTable, and GetAdaptersAddresses.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has used net view to enumerate domain machines.
   </Example>
   <Example id="G0119" name="Indrik Spider">
    Indrik Spider has used PowerView to enumerate all Windows Server, Windows Server 2003, and Windows 7 instances in the Active Directory database.
   </Example>
   <Example id="S0604" name="Industroyer">
    Industroyer can enumerate remote computers in the compromised network.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has used network scanning and enumeration tools, including Ping.
   </Example>
   <Example id="S0599" name="Kinsing">
    Kinsing has used a script to parse files like /etc/hosts and SSH known_hosts to discover remote systems.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs collects a list of available servers with the command net view.
   </Example>
   <Example id="G0077" name="Leafminer">
    Leafminer used Microsoft’s Sysinternals tools to gather detailed information about remote systems.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass uses scripts to enumerate IP ranges on the victim network. menuPass has also issued the command net view /domain to a PlugX implant to gather information about remote systems on the network.
   </Example>
   <Example id="S0233" name="MURKYTOP">
    MURKYTOP has the capability to identify remote hosts on connected networks.
   </Example>
   <Example id="G0019" name="Naikon">
    Naikon has used a netbios scanner for remote machine identification.
   </Example>
   <Example id="S0590" name="NBTscan">
    NBTscan can list NetBIOS computer names.
   </Example>
   <Example id="S0039" name="Net">
    Commands such as net view can be used in Net to gather information about available remote systems.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT can identify remote hosts on connected networks.
   </Example>
   <Example id="S0359" name="Nltest">
    Nltest may be used to enumerate remote domain controllers using options such as /dclist and /dsgetdc.
   </Example>
   <Example id="S0365" name="Olympic Destroyer">
    Olympic Destroyer uses Windows Management Instrumentation to enumerate all systems in the network.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used the net view and ping commands as part of their advanced reconnaissance.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used nbtscan and ping to discover remote systems, as well as dsquery subnet on a domain controller to retrieve all subnets in the Active Directory.
   </Example>
   <Example id="S0165" name="OSInfo">
    OSInfo performs a connection test to discover remote systems in the network
   </Example>
   <Example id="S0097" name="Ping">
    Ping can be used to identify remote systems within a network.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT used Nmap for remote system discovery.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can identify remote systems through the net view command.
   </Example>
   <Example id="S0241" name="RATANKBA">
    RATANKBA runs the net view /domain and net view commands.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec can ping or traceroute a remote host.
   </Example>
   <Example id="S0684" name="ROADTools">
    ROADTools can enumerate Azure AD systems and devices.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has looked for IP addresses in the known_hosts file on the infected system and attempted to SSH into them.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used a tool to query Active Directory using LDAP, discovering information about computers listed in AD.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon scans the C-class subnet of the IPs on the victim's interfaces.
   </Example>
   <Example id="S0063" name="SHOTPUT">
    SHOTPUT has a command to list all servers in the domain, as well as one to locate domain controllers on a domain.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has used Nmap to scan the corporate network, build a network topology, and identify vulnerable hosts.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can enumerate and collect the properties of domain computers.
   </Example>
   <Example id="S0646" name="SpicyOmelette">
    SpicyOmelette can identify payment systems, payment gateways, and ATM systems in compromised environments.
   </Example>
   <Example id="S0018" name="Sykipot">
    Sykipot may use net view /domain to display hostnames of available systems on a network.
   </Example>
   <Example id="S0586" name="TAINTEDSCRIBE">
    The TAINTEDSCRIBE command and execution module can perform target system enumeration.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has used the net view command.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot can enumerate computers and network devices.
   </Example>
   <Example id="S0609" name="TRITON">
    TRITON’s TsLow python module pings controllers over the TriStation protocol.
   </Example>
   <Example id="G0010" name="Turla">
    Turla surveys a system upon check-in to discover remote systems on a local network using the net view and net view /DOMAIN commands. Turla has also used net group "Domain Computers" /domain, net group "Domain Controllers" /domain, and net group "Exchange Servers" /domain to enumerate domain computers, including the organization's DC and Exchange Server.
   </Example>
   <Example id="S0452" name="USBferry">
    USBferry can use net view to gather information about remote systems.
   </Example>
   <Example id="S0366" name="WannaCry">
    WannaCry scans its local network segment for remote systems to try to exploit and copy itself to.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used networkdll for network discovery and psfin specifically for financial and point of sale indicators. Wizard Spider has also used AdFind and nltest/dclist to enumerate domain computers, including the domain controller.
   </Example>
   <Example id="S0248" name="yty">
    yty uses the net view command for discovery.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1091" name="Replication Through Removable Media">
  Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.
  <Tactics>
   Lateral Movement, Initial Access
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <System_Requirements>
   Removable media allowed, Autorun enabled or vulnerability present that allows for code execution
  </System_Requirements>
  <Examples>
   <Example id="S0092" name="Agent.btz">
    Agent.btz drops itself onto removable media devices and creates an autorun.inf file with an instruction to run that file. When the device is inserted into another system, it opens autorun.inf and loads the malware.
   </Example>
   <Example id="G1007" name="Aoqin Dragon">
    Aoqin Dragon has used a dropper that employs a worm infection strategy using a removable device to breach a secure network environment.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 uses a tool to infect connected USB devices and transmit itself to air-gapped computers when the infected USB device is inserted.
   </Example>
   <Example id="S0023" name="CHOPSTICK">
    Part of APT28's operation involved using CHOPSTICK modules to copy itself to air-gapped machines and using files written to USB sticks to transfer data and command traffic.
   </Example>
   <Example id="S0608" name="Conficker">
    Conficker variants used the Windows AUTORUN feature to spread through USB propagation.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson can spread across systems by infecting removable media.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel's selective infector modifies executables stored on removable media as a method of spreading across computers.
   </Example>
   <Example id="S0062" name="DustySky">
    DustySky searches for removable media and duplicates itself onto it.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 actors have mailed USB drives to potential victims containing malware that downloads and installs various backdoors, including in some cases for ransomware operations.
   </Example>
   <Example id="S0143" name="Flame">
    Flame contains modules to infect USB sticks and spread laterally to other Windows systems the stick is plugged into using Autorun functionality.
   </Example>
   <Example id="S0132" name="H1N1">
    H1N1 has functionality to copy itself to removable media.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has used a customized PlugX variant which could spread through USB connections.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT can be configured to spread via removable drives.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot has the ability to use removable drives to spread through compromised networks.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can spread itself by infecting other portable executable files on removable drives.
   </Example>
   <Example id="S0028" name="SHIPSHAPE">
    APT30 may have used the SHIPSHAPE malware to move onto air-gapped networks. SHIPSHAPE targets removable drives to spread to other systems by modifying the drive to use Autorun to execute or by hiding legitimate document files and copying an executable to the folder with the same name as the legitimate document.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet can propagate via removable media using an autorun.inf file or the CVE-2010-2568 LNK vulnerability.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has attempted to transfer USBferry from an infected USB device by copying an Autorun function to the target machine.
   </Example>
   <Example id="S0130" name="Unknown Logger">
    Unknown Logger is capable of spreading to USB devices.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has copied itself to and infected removable drives for propagation.
   </Example>
   <Example id="S0452" name="USBferry">
    USBferry can copy its installer to attached USB storage devices.
   </Example>
   <Example id="S0136" name="USBStealer">
    USBStealer drops itself onto removable media and relies on Autorun to execute the malicious file when a user opens the removable media on another system.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to block unsigned/untrusted executable files (such as .exe, .dll, or .scr) from running from USB removable drives.
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Disable Autorun if it is unnecessary.
   </Mitigation>
   <Mitigation id="M1034" name="Limit Hardware Installation">
    Limit the use of USB devices and removable media within a network.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0016" name="Drive">
    Drive Creation
   </Detection>
   <Detection id="DS0022" name="File">
    File Access | File Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1496" name="Resource Hijacking">
  Adversaries may leverage the resources of co-opted systems in order to solve resource intensive problems, which may impact system and/or hosted service availability.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Containers, IaaS, Linux, Windows, macOS
  </Platforms>
  <Impact_Type>
   Availability
  </Impact_Type>
  <Examples>
   <Example id="G0096" name="APT41">
    APT41 deployed a Monero cryptocurrency mining tool in a victim’s environment.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has used XMRIG to mine cryptocurrency on victim systems.
   </Example>
   <Example id="S0486" name="Bonadan">
    Bonadan can download an additional module which has a cryptocurrency mining extension.
   </Example>
   <Example id="S0492" name="CookieMiner">
    CookieMiner has loaded coinmining software onto systems to mine for Koto cryptocurrency.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has used xmrig to mine cryptocurrency.
   </Example>
   <Example id="S0434" name="Imminent Monitor">
    Imminent Monitor has the capability to run a cryptocurrency miner on the victim machine.
   </Example>
   <Example id="S0599" name="Kinsing">
    Kinsing has created and run a Bitcoin cryptocurrency miner.
   </Example>
   <Example id="S0451" name="LoudMiner">
    LoudMiner harvested system resources to mine cryptocurrency, using XMRig to mine Monero.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can use system resources to mine cryptocurrency, dropping XMRig to mine Monero.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has distributed cryptomining malware.
   </Example>
   <Example id="S0468" name="Skidmap">
    Skidmap is a kernel-mode rootkit used for cryptocurrency mining.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has deployed XMRig Docker images to mine cryptocurrency.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Flow
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0013" name="Sensor Health">
    Host Status
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1207" name="Rogue Domain Controller">
  Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC.  Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Defense_Bypassed>
   Log analysis
  </Defense_Bypassed>
  <Examples>
   <Example id="S0002" name="Mimikatz">
    Mimikatz’s LSADUMP::DCShadow module can be used to make AD updates by temporarily setting a computer to be a DC.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Creation | Active Directory Object Modification
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1014" name="Rootkit">
  Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Application Control, File Monitoring, Host Intrusion Prevention Systems, Signature-based Detection, System Access Controls
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-552
  </CAPEC_ID>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has used a UEFI (Unified Extensible Firmware Interface) rootkit known as LoJax.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 deployed rootkits on Linux systems.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp has used user mode rootkit techniques to remain hidden on the system.
   </Example>
   <Example id="S0572" name="Caterpillar WebShell">
    Caterpillar WebShell has a module to use a rootkit on a system.
   </Example>
   <Example id="S0502" name="Drovorub">
    Drovorub has used a kernel module rootkit to hide processes, files, executables, and network artifacts from user space view.
   </Example>
   <Example id="S0377" name="Ebury">
    Ebury has used user mode rootkit techniques to remain hidden on the system.
   </Example>
   <Example id="S0047" name="Hacking Team UEFI Rootkit">
    Hacking Team UEFI Rootkit is a UEFI BIOS rootkit developed by the company Hacking Team to persist remote access software on some targeted systems.
   </Example>
   <Example id="S0394" name="HiddenWasp">
    HiddenWasp uses a rootkit to hook and implement functions on the system.
   </Example>
   <Example id="S0135" name="HIDEDRV">
    HIDEDRV is a rootkit that hides certain operating system artifacts.
   </Example>
   <Example id="S0009" name="Hikit">
    Hikit is a Rootkit that has been used by Axiom.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has modified /etc/ld.so.preload to overwrite readdir() and readdir64().
   </Example>
   <Example id="S0040" name="HTRAN">
    HTRAN can install a rootkit to hide network connections from the host OS.
   </Example>
   <Example id="S0397" name="LoJax">
    LoJax is a UEFI BIOS rootkit deployed to persist remote access software on some targeted systems.
   </Example>
   <Example id="S0012" name="PoisonIvy">
    PoisonIvy starts a rootkit from a malicious file dropped to disk.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay has included a rootkit to evade defenses.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has modified /etc/ld.so.preload to hook libc functions in order to hide the installed dropper and mining software in process lists.
   </Example>
   <Example id="S0468" name="Skidmap">
    Skidmap is a kernel-mode rootkit that has the ability to hook system calls to hide specific files and fake network and CPU-related statistics to make the CPU load of the infected machine always appear low.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet uses a Windows rootkit to mask its binaries and other relevant files.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has used rootkits such as the open-source Diamorphine rootkit and their custom bots to hide cryptocurrency mining activities on the machine.
   </Example>
   <Example id="S0221" name="Umbreon">
    Umbreon hides from defenders by hooking libc function calls, hiding artifacts that would reveal its presence, such as the user account it creates to provide access and undermining strace, a tool often used to identify malware.
   </Example>
   <Example id="S0022" name="Uroburos">
    Uroburos is a rootkit used by Turla.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT can include a rootkit to hide processes, files, and startup.
   </Example>
   <Example id="S0430" name="Winnti for Linux">
    Winnti for Linux has used a modified copy of the open-source userland rootkit Azazel, named libxselinux.so, to hide the malware's operations and network activity.
   </Example>
   <Example id="G0044" name="Winnti Group">
    Winnti Group used a rootkit to modify typical server functionality.
   </Example>
   <Example id="S0027" name="Zeroaccess">
    Zeroaccess is a kernel-mode rootkit.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0016" name="Drive">
    Drive Modification
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0001" name="Firmware">
    Firmware Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1053" name="Scheduled Task/Job">
  Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.
  <Tactics>
   Execution, Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Containers, Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User
  </Permissions_Required>
  <Effective_Permissions>
   Administrator, SYSTEM, User
  </Effective_Permissions>
  <Supports_Remote>
   Yes
  </Supports_Remote>
  <CAPEC_ID>
   CAPEC-557
  </CAPEC_ID>
  <Examples>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca used the command schtasks /Create /SC ONLOgon /TN WindowsUpdateCheck /TR "
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot's second stage DLL has set a timer using "timeSetEvent" to schedule its next execution.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec schedules the execution one of its modules by creating a new scheduler task.
   </Example>
   <Example id="S1034" name="StrifeWater">
    StrifeWater has create a scheduled task named Mozilla\Firefox Default Browser Agent 409046Z0FF4A39CB for persistence.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for permission weaknesses in scheduled tasks that could be used to escalate privileges.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Configure settings for scheduled tasks to force tasks to run under the context of the authenticated account instead of allowing them to run as SYSTEM. The associated Registry key is located at HKLM\SYSTEM\CurrentControlSet\Control\Lsa\SubmitControl. The setting can be configured through GPO: Computer Configuration &gt;
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Configure the Increase Scheduling Priority option to only allow the Administrators group the rights to schedule a priority process. This can be can be configured through GPO: Computer Configuration &gt;
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized administrators can create scheduled tasks on remote systems.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0032" name="Container">
    Container Creation
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0003" name="Scheduled Job">
    Scheduled Job Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1053.002" name="Scheduled Task/Job: At">
  Adversaries may abuse the at utility to perform task scheduling for initial or recurring execution of malicious code. The at utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of Scheduled Task's schtasks in Windows environments, using at requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.
  <Tactics>
   Execution, Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Supports_Remote>
   Yes
  </Supports_Remote>
  <Examples>
   <Example id="G0026" name="APT18">
    APT18 actors used the native at Windows task scheduler tool to use scheduled tasks for execution on a victim network.
   </Example>
   <Example id="S0110" name="at">
    at can be used to schedule a task on a system to be executed at a specific date or time.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has used at to register a scheduled task to execute malware during lateral movement.
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can set a scheduled task on the target system to execute commands remotely using at.
   </Example>
   <Example id="S0233" name="MURKYTOP">
    MURKYTOP has the capability to schedule remote AT jobs.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 actors use at to schedule tasks to run self-extracting RAR archives, which install HTTPBrowser or PlugX on other victims on a network.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for permission weaknesses in scheduled tasks that could be used to escalate privileges.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Configure settings for scheduled tasks to force tasks to run under the context of the authenticated account instead of allowing them to run as SYSTEM. The associated Registry key is located at HKLM\SYSTEM\CurrentControlSet\Control\Lsa\SubmitControl. The setting can be configured through GPO: Computer Configuration &gt;
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Configure the Increase Scheduling Priority option to only allow the Administrators group the rights to schedule a priority process. This can be configured through GPO: Computer Configuration &gt;
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized administrators can create scheduled tasks on remote systems. In Linux environments, users account-level access to at can be managed using at.allow and at.deny files. Users listed in the at.allow are enabled to schedule actions using at, whereas users listed in at.deny file disabled from the utility.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0003" name="Scheduled Job">
    Scheduled Job Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1053.003" name="Scheduled Task/Job: Cron">
  Adversaries may abuse the cron utility to perform task scheduling for initial or recurring execution of malicious code. The cron utility is a time-based job scheduler for Unix-like operating systems.  The  crontab file contains the schedule of cron entries to be run and the specified times for execution. Any crontab files are stored in operating system-specific file paths.
  <Tactics>
   Execution, Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Linux, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0504" name="Anchor">
    Anchor can install itself as a cron job.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has used cron to create pre-scheduled and periodic background jobs on a Linux system.
   </Example>
   <Example id="S0401" name="Exaramel for Linux">
    Exaramel for Linux uses crontab for persistence if it does not have root privileges.
   </Example>
   <Example id="S0588" name="GoldMax">
    The GoldMax Linux variant has used a crontab entry with a @reboot line to gain persistence.
   </Example>
   <Example id="S0163" name="Janicab">
    Janicab used a cron job for persistence on Mac devices.
   </Example>
   <Example id="S0599" name="Kinsing">
    Kinsing has used crontab to download and run shell scripts every minute to ensure persistence.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can use crontabs to establish persistence.
   </Example>
   <Example id="S0587" name="Penquin">
    Penquin can use Cron to create periodic and pre-scheduled background jobs.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke installed a cron job that downloaded and executed files from the C2.
   </Example>
   <Example id="S0468" name="Skidmap">
    Skidmap has installed itself via crontab.
   </Example>
   <Example id="S0374" name="SpeakUp">
    SpeakUp uses cron tasks to ensure persistence.
   </Example>
   <Example id="S0341" name="Xbash">
    Xbash can create a cronjob for persistence if it determines it is on a Linux system.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Review changes to the cron schedule. cron execution can be reviewed within the /var/log directory. To validate the location of the cron log file, check the syslog config at /etc/rsyslog.conf or /etc/syslog.conf
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    cron permissions are controlled by /etc/cron.allow and /etc/cron.deny. If there is a cron.allow file, then the user or users that need to use cron will need to be listed in the file. cron.deny is used to explicitly disallow users from using cron. If neither files exist, then only the super user is allowed to run cron.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0003" name="Scheduled Job">
    Scheduled Job Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1053.005" name="Scheduled Task/Job: Scheduled Task">
  Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.
  <Tactics>
   Execution, Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Supports_Remote>
   Yes
  </Supports_Remote>
  <Examples>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla  has achieved persistence via scheduled tasks.
   </Example>
   <Example id="S0504" name="Anchor">
    Anchor can create a scheduled task for persistence.
   </Example>
   <Example id="S0584" name="AppleJeus">
    AppleJeus has created a scheduled SYSTEM task that runs when a user logs in.
   </Example>
   <Example id="G0099" name="APT-C-36">
    APT-C-36 has used a macro function to set scheduled tasks, disguised as those used by Google.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 used scheduler and schtasks to create new tasks on remote hosts as part of lateral movement.
   </Example>
   <Example id="G0022" name="APT3">
    An APT3 downloader creates persistence by creating the following scheduled task: schtasks /create /tn "mysc" /tr C:\Users\Public\test.exe /sc ONLOGON /ru "System".
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has used scheduled tasks to persist on victim systems.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has created a scheduled task to execute a .vbe file multiple times a day.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 has created scheduled tasks to run malicious scripts on a compromised host.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has used Task Scheduler to run programs at system startup or on a scheduled basis for persistence.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has created scheduled tasks for persistence.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used a compromised account to create a scheduled task on a system.
   </Example>
   <Example id="S0438" name="Attor">
    Attor's installer plugin can schedule a new task that loads the dispatcher on boot/logon.
   </Example>
   <Example id="S0414" name="BabyShark">
    BabyShark has used scheduled tasks to maintain persistence.
   </Example>
   <Example id="S0475" name="BackConfig">
    BackConfig has the ability to use scheduled tasks to repeatedly execute malicious payloads on a compromised host.
   </Example>
   <Example id="S0606" name="Bad Rabbit">
    Bad Rabbit’s infpub.dat file creates a scheduled task to launch a malicious executable.
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS creates a scheduled task to establish by executing a malicious payload every subsequent minute.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can create a scheduled task for persistence.
   </Example>
   <Example id="G1002" name="BITTER">
    BITTER has used scheduled tasks for persistence and execution.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has used Windows Scheduled Tasks to establish persistence on local and remote hosts.
   </Example>
   <Example id="S0360" name="BONDUPDATER">
    BONDUPDATER persists using a scheduled task that executes every minute.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has used schtasks to register a scheduled task to execute malware during lateral movement.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can achieve persistence by copying its DLL to a subdirectory of %APPDATA% and creating a Visual Basic Script that will load the DLL via a scheduled task.
   </Example>
   <Example id="S0335" name="Carbon">
    Carbon creates several tasks for later execution to continue persistence on the victim’s machine.
   </Example>
   <Example id="S1043" name="ccf32">
    ccf32 can run on a daily basis using a scheduled task.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used scheduled tasks to invoke Cobalt Strike including through batch script schtasks /create /ru "SYSTEM" /tn "update" /tr "cmd /c c:\windows\temp\update.bat" /sc once /f /st and to maintain persistence.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has created Windows tasks to establish persistence.
   </Example>
   <Example id="S0126" name="ComRAT">
    ComRAT has used a scheduled task to launch its PowerShell loader.
   </Example>
   <Example id="G0142" name="Confucius">
    Confucius has created scheduled tasks to maintain persistence on a compromised host.
   </Example>
   <Example id="S0050" name="CosmicDuke">
    CosmicDuke uses scheduled tasks typically named "Watchmon Service" for persistence.
   </Example>
   <Example id="C0004" name="CostaRicto">
    During CostaRicto, the threat actors used scheduled tasks to download backdoor tools.
   </Example>
   <Example id="S0046" name="CozyCar">
    One persistence mechanism used by CozyCar is to register itself as a scheduled task.
   </Example>
   <Example id="S0538" name="Crutch">
    Crutch has the ability to persist using scheduled tasks.
   </Example>
   <Example id="S0527" name="CSPY Downloader">
    CSPY Downloader can use the schtasks utility to bypass UAC.
   </Example>
   <Example id="S1014" name="DanBot">
    DanBot can use a scheduled task for installation.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman has created a scheduled task for persistence.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has used scheduled tasks to automatically log out of created accounts every 8 hours as well as to execute malicious files.
   </Example>
   <Example id="S0038" name="Duqu">
    Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware.
   </Example>
   <Example id="S0024" name="Dyre">
    Dyre has the ability to achieve persistence by adding a new task in the task scheduler to run every minute.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has maintained persistence through a scheduled task.
   </Example>
   <Example id="S0363" name="Empire">
    Empire has modules to interact with the Windows task scheduler.
   </Example>
   <Example id="S0396" name="EvilBunny">
    EvilBunny has executed commands via scheduled tasks.
   </Example>
   <Example id="G0051" name="FIN10">
    FIN10 has established persistence by using S4U tasks as well as the Scheduled Task option in PowerShell Empire.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used scheduled tasks to establish persistence for various malware it uses, including downloaders known as HARDTACK and SHIPBREAD and FrameworkPOS.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 malware has created scheduled tasks to establish persistence.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has used scheduled tasks to maintain RDP backdoors.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used Scheduled Tasks for persistence and to load and execute a reverse proxy binary.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors established persistence through a scheduled task using the command: /Create /F /SC DAILY /ST 09:00 /TN WinUpdate /TR, named "WinUpdate"
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM established persistence for PoisonIvy by created a scheduled task.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has created scheduled tasks to launch executables after a designated number of minutes have passed.
   </Example>
   <Example id="S0168" name="Gazer">
    Gazer can establish persistence by creating a scheduled task.
   </Example>
   <Example id="S0588" name="GoldMax">
    GoldMax has used scheduled tasks to maintain persistence.
   </Example>
   <Example id="S0477" name="Goopy">
    Goopy has the ability to maintain persistence by creating scheduled tasks set to run every hour.
   </Example>
   <Example id="S0237" name="GravityRAT">
    GravityRAT creates a scheduled task to ensure it is re-executed everyday.
   </Example>
   <Example id="S0417" name="GRIFFON">
    GRIFFON has used sctasks for persistence.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent has the ability to set persistence using the Task Scheduler.
   </Example>
   <Example id="S0170" name="Helminth">
    Helminth has used a scheduled task for persistence.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper has the ability to use scheduled tasks for execution.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has used a scheduled task to establish persistence for a keylogger.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa dropped and added officeupdate.exe to scheduled tasks.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant has attempted to install a scheduled task named "Java Maintenance64" on startup to establish persistence.
   </Example>
   <Example id="S0483" name="IcedID">
    IcedID has created a scheduled task that executes every hour to establish persistence.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole has used scheduled tasks named MSST and \Microsoft\Windows\Autochk\Scheduled to establish persistence.
   </Example>
   <Example id="S0581" name="IronNetInjector">
    IronNetInjector has used a task XML file named mssch.xml to run an IronPython script when a user logs in or when specific system events are created.
   </Example>
   <Example id="S0189" name="ISMInjector">
    ISMInjector creates scheduled tasks to establish persistence.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    JHUHUGIT has registered itself as a scheduled task to run each time the current user logs in.
   </Example>
   <Example id="S0648" name="JSS Loader">
    JSS Loader has the ability to launch scheduled tasks to establish persistence.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has downloaded additional malware with scheduled tasks.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic has used scheduled tasks to add persistence.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used schtasks for persistence including through the periodic execution of a remote XSL script or a dropped VBS payload.
   </Example>
   <Example id="S0680" name="LitePower">
    LitePower can create a scheduled task to enable persistence mechanisms.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot embedded the commands schtasks /Run /TN \Microsoft\Windows\DiskCleanup\SilentCleanup /I inside a batch script.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer has established persistence by creating the following scheduled task schtasks /create /sc minute /mo 1 /tn QQMusic ^ /tr C:Users\%USERPROFILE%\Downloads\spread.exe /F.
   </Example>
   <Example id="S0409" name="Machete">
    The different components of Machete are executed by Windows Task Scheduler.
   </Example>
   <Example id="G0095" name="Machete">
    Machete has created scheduled tasks to maintain Machete's persistence.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has used scheduled tasks to establish persistence.
   </Example>
   <Example id="S0167" name="Matryoshka">
    Matryoshka can establish persistence by adding a Scheduled Task named "Microsoft Boost Kernel Optimization".
   </Example>
   <Example id="S0449" name="Maze">
    Maze has created scheduled tasks using name variants such as "Windows Update Security", "Windows Update Security Patches", and "Google Chrome Security Update", to launch Maze at a specific time.
   </Example>
   <Example id="S0500" name="MCMD">
    MCMD can use scheduled tasks for persistence.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used a script (atexec.py) to execute a command on a target machine via Task Scheduler.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor execution begins from a scheduled task named Microsoft\Windows\Power Efficiency Diagnostics\AnalyzeAll and it creates a separate scheduled task called mstask to run the wiper only once at 23:55:00.
   </Example>
   <Example id="S1015" name="Milan">
    Milan can establish persistence on a targeted host with scheduled tasks.
   </Example>
   <Example id="G0021" name="Molerats">
    Molerats has created scheduled tasks to persistently run VBScripts.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used scheduled tasks to establish persistence.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has created a scheduled task to execute additional malicious software, as well as maintain persistence.
   </Example>
   <Example id="G0019" name="Naikon">
    Naikon has used schtasks.exe for lateral movement in compromised networks.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can create a scheduled task to establish persistence.
   </Example>
   <Example id="S0368" name="NotPetya">
    NotPetya creates a task to reboot the system one hour after infection.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has created scheduled tasks that run a VBScript to execute a payload on victim machines.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum's installer can attempt to achieve persistence by creating a scheduled task.
   </Example>
   <Example id="S0264" name="OopsIE">
    OopsIE creates a scheduled task to run itself every three minutes.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used scheduled tasks to execute batch scripts for lateral movement with the following command: SCHTASKS /Create /S &lt;IP Address&gt; /U &lt;Username&gt; /p &lt;Password&gt; /SC ONCE /TN test /TR &lt;Path to a Batch File&gt; /ST &lt;Time&gt; /RU SYSTEM.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used scheduled tasks to execute malicious PowerShell code on remote systems.
   </Example>
   <Example id="G0040" name="Patchwork">
    A Patchwork file stealer can run a TaskScheduler DLL to add persistence.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit's New-UserPersistenceOption Persistence argument can be used to establish via a Scheduled Task/Job.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS has established persistence through a scheduled task using the command "C:\Windows\system32\schtasks.exe" /Create /F /SC DAILY /ST 12:00 /TN MicrosoftEdge /TR "c:\Windows\system32\wscript.exe C:\Windows\temp\Windows.vbe".
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER persists through a scheduled task that executes it every minute.
   </Example>
   <Example id="S0147" name="Pteranodon">
    Pteranodon schedules tasks to invoke its components in order to establish persistence.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot has the ability to create scheduled tasks for persistence.
   </Example>
   <Example id="S0269" name="QUADAGENT">
    QUADAGENT creates a scheduled task to maintain persistence on the victim’s machine.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT contains a .NET wrapper DLL for creating and managing scheduled tasks for maintaining persistence upon reboot.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay can use scheduled tasks to achieve persistence.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can schedule tasks via the Windows COM API to maintain persistence.
   </Example>
   <Example id="G0075" name="Rancor">
    Rancor launched a scheduled task to gain persistence using the schtasks /create /sc command.
   </Example>
   <Example id="S0375" name="Remexi">
    Remexi utilizes scheduled tasks as a persistence mechanism.
   </Example>
   <Example id="S0166" name="RemoteCMD">
    RemoteCMD can execute commands remotely by creating a new schedule task on the remote system
   </Example>
   <Example id="S0379" name="Revenge RAT">
    Revenge RAT schedules tasks to run malicious scripts at different intervals.
   </Example>
   <Example id="S0148" name="RTM">
    RTM tries to add a scheduled task to establish persistence.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk can remotely create a scheduled task to execute itself on a system.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has created a scheduled task named "Maintenance" to establish persistence.
   </Example>
   <Example id="S0111" name="schtasks">
    schtasks is used to schedule tasks on a Windows system to run at a specific date and time.
   </Example>
   <Example id="S0382" name="ServHelper">
    ServHelper contains modules that will use schtasks to carry out malicious operations.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon copies an executable payload to the target system by using SMB/Windows Admin Shares and then scheduling an unnamed task to execute the malware.
   </Example>
   <Example id="S0546" name="SharpStage">
    SharpStage has a persistence component to write a scheduled task for the payload.
   </Example>
   <Example id="S0589" name="Sibot">
    Sibot has been executed via a scheduled task.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has used scheduled tasks to stage its operation.
   </Example>
   <Example id="S0226" name="Smoke Loader">
    Smoke Loader launches a scheduled task.
   </Example>
   <Example id="S0516" name="SoreFang">
    SoreFang can gain persistence through use of scheduled tasks.
   </Example>
   <Example id="S0390" name="SQLRat">
    SQLRat has created scheduled tasks in %appdata%\Roaming\Microsoft\Templates\.
   </Example>
   <Example id="G0038" name="Stealth Falcon">
    Stealth Falcon malware creates a scheduled task entitled "IE Web Cache" to execute a malicious file hourly.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet schedules a network job to execute two minutes after host infection.
   </Example>
   <Example id="S1042" name="SUGARDUMP">
    SUGARDUMP has created scheduled tasks called MicrosoftInternetExplorerCrashRepoeterTaskMachineUA and MicrosoftEdgeCrashRepoeterTaskMachineUA, which were configured to execute CrashReporter.exe during user logon.
   </Example>
   <Example id="S1011" name="Tarrask">
    Tarrask is able to create "hidden" scheduled tasks for persistence.
   </Example>
   <Example id="G0088" name="TEMP.Veles">
    TEMP.Veles has used scheduled task XML triggers.
   </Example>
   <Example id="S0671" name="Tomiris">
    Tomiris has used SCHTASKS /CREATE /SC DAILY /TN StartDVL /TR "
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot creates a scheduled task on the system that provides persistence.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has used scheduled tasks to execute additional payloads and to gain persistence on a compromised host.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used scheduled tasks establish persistence for TrickBot and other malware.
   </Example>
   <Example id="S0248" name="yty">
    yty establishes persistence by creating a scheduled task with the command SchTasks /Create /SC DAILY /TN BigData /TR " + path_file + "/ST 09:30".
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy has a command to create a scheduled task for persistence.
   </Example>
   <Example id="S0350" name="zwShell">
    zwShell has used SchTasks for execution.
   </Example>
   <Example id="S1013" name="ZxxZ">
    ZxxZ has used scheduled tasks for persistence and execution.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for permission weaknesses in scheduled tasks that could be used to escalate privileges.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Configure settings for scheduled tasks to force tasks to run under the context of the authenticated account instead of allowing them to run as SYSTEM. The associated Registry key is located at HKLM\SYSTEM\CurrentControlSet\Control\Lsa\SubmitControl. The setting can be configured through GPO: Computer Configuration &gt;
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Configure the Increase Scheduling Priority option to only allow the Administrators group the rights to schedule a priority process. This can be configured through GPO: Computer Configuration &gt;
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized administrators can create scheduled tasks on remote systems.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0003" name="Scheduled Job">
    Scheduled Job Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1053.006" name="Scheduled Task/Job: Systemd Timers">
  Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension .timer that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to Cron in Linux environments.
  <Tactics>
   Execution, Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Linux
  </Platforms>
  <Permissions_Required>
   User, root
  </Permissions_Required>
  <Supports_Remote>
   Yes
  </Supports_Remote>
  <Mitigations>
   <Mitigation id="M1026" name="Privileged Account Management">
    Limit access to the root account and prevent users from creating and/or modifying systemd timer unit files.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Restrict read/write access to systemd .timer unit files to only select privileged users who have a legitimate need to manage system services.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit user access to system utilities such as 'systemctl' or 'systemd-run' to users who have a legitimate need.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0003" name="Scheduled Job">
    Scheduled Job Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1053.007" name="Scheduled Task/Job: Container Orchestration Job">
  Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster.
  <Tactics>
   Execution, Persistence, Privilege Escalation
  </Tactics>
  <Platforms>
   Containers
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Supports_Remote>
   Yes
  </Supports_Remote>
  <Mitigations>
   <Mitigation id="M1026" name="Privileged Account Management">
    Ensure containers are not running as root by default. In Kubernetes environments, consider defining a Pod Security Policy that prevents pods from running privileged containers.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit privileges of user accounts and remediate privilege escalation vectors so only authorized administrators can create container orchestration jobs.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0032" name="Container">
    Container Creation
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0003" name="Scheduled Job">
    Scheduled Job Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1029" name="Scheduled Transfer">
  Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.
  <Tactic>
   Exfiltration
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0045" name="ADVSTORESHELL">
    ADVSTORESHELL collects, compresses, encrypts, and exfiltrates data to the C2 server every 10 minutes.
   </Example>
   <Example id="S0667" name="Chrommme">
    Chrommme can set itself to sleep before requesting a new command from C2.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can set its Beacon payload to reach out to the C2 server on an arbitrary and random interval.
   </Example>
   <Example id="S0126" name="ComRAT">
    ComRAT has been programmed to sleep outside local business hours (9 to 5, Monday to Friday).
   </Example>
   <Example id="S0200" name="Dipsind">
    Dipsind can be configured to only run during normal working hours, which would make its communications harder to distinguish from normal traffic.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro has the ability to wait for a specified time interval between communicating with and executing commands from C2.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa sent the victim computer identifier in a User-Agent string back to the C2 server every 10 minutes.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT can be configured to reconnect at certain intervals.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar can sleep for a specific time and be set to communicate at specific intervals.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron can be configured to exfiltrate data during nighttime or working hours.
   </Example>
   <Example id="S0211" name="Linfo">
    Linfo creates a backdoor through which remote attackers can change the frequency at which compromised hosts contact remote C2 infrastructure.
   </Example>
   <Example id="S0409" name="Machete">
    Machete sends stolen data to the C2 server every 10 minutes.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS can sleep for a given number of seconds.
   </Example>
   <Example id="S0596" name="ShadowPad">
    ShadowPad has sent data back to C2 every 8 hours.
   </Example>
   <Example id="S1019" name="Shark">
    Shark can pause C2 communications for a specified time.
   </Example>
   <Example id="S0444" name="ShimRat">
    ShimRat can sleep when instructed to do so by the C2.
   </Example>
   <Example id="S0668" name="TinyTurla">
    TinyTurla contacts its C2 based on a scheduled timing set in its configuration.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool command and control signatures over time or construct protocols in such a way to avoid detection by common defensive tools.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1113" name="Screen Capture">
  Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as CopyFromScreen, xwd, or screencapture.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-648
  </CAPEC_ID>
  <Examples>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla can capture screenshots of the victim’s desktop.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed can take screenshots on a compromised host by calling a series of APIs.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has used tools to take screenshots from victims.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used a screen capture utility to take screenshots on a compromised host.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has the ability to capture screenshots on compromised hosts.
   </Example>
   <Example id="S0438" name="Attor">
    Attor's has a plugin that captures screenshots of the target applications.
   </Example>
   <Example id="S0344" name="Azorult">
    Azorult can capture screenshots of the victim’s machines.
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS has a command to take a screenshot and send it to the C2 server.
   </Example>
   <Example id="S0337" name="BadPatch">
    BadPatch captures screenshots in .jpg format and then exfiltrates them.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook is capable of taking an image of and uploading the current desktop.
   </Example>
   <Example id="S0017" name="BISCUIT">
    BISCUIT has a command to periodically take screenshots of the system.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    BlackEnergy is capable of taking screenshots.
   </Example>
   <Example id="S0657" name="BLUELIGHT">
    BLUELIGHT has captured a screenshot of the display every 30 seconds for the first 5 minutes after initiating a C2 loop, and then once every five minutes thereafter.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has used a tool to capture screenshots.
   </Example>
   <Example id="S0454" name="Cadelspy">
    Cadelspy has the ability to capture screenshots and webcam photos.
   </Example>
   <Example id="S0351" name="Cannon">
    Cannon can take a screenshot of the desktop.
   </Example>
   <Example id="S0030" name="Carbanak">
    Carbanak performs desktop video recording and captures screenshots of the desktop and sends it to the C2 server.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp can capture display screenshots with the screens_dll.dll plugin.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT can capture screenshots.
   </Example>
   <Example id="S0261" name="Catchamas">
    Catchamas captures screenshots based on specific keywords in the window’s title.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes can capture screenshots of the infected machine.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower has the ability to capture screenshots.
   </Example>
   <Example id="S0023" name="CHOPSTICK">
    CHOPSTICK has the capability to capture screenshots.
   </Example>
   <Example id="S0667" name="Chrommme">
    Chrommme has the ability to capture screenshots.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling has the ability to capture screenshots.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike's Beacon payload is capable of capturing screenshots.
   </Example>
   <Example id="S0338" name="Cobian RAT">
    Cobian RAT has a feature to perform screen capture.
   </Example>
   <Example id="S0591" name="ConnectWise">
    ConnectWise can take screenshots on remote hosts.
   </Example>
   <Example id="S0050" name="CosmicDuke">
    CosmicDuke takes periodic screenshots and exfiltrates them.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson contains a command to perform screen captures.
   </Example>
   <Example id="S0235" name="CrossRAT">
    CrossRAT is capable of taking screen captures.
   </Example>
   <Example id="G0070" name="Dark Caracal">
    Dark Caracal took screenshots using their Windows malware.
   </Example>
   <Example id="S0187" name="Daserf">
    Daserf can take screenshots.
   </Example>
   <Example id="S0021" name="Derusbi">
    Derusbi is capable of performing screen captures.
   </Example>
   <Example id="S0213" name="DOGCALL">
    DOGCALL is capable of capturing screenshots of the victim's machine.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has performed screen captures of victims, including by using a tool, scr.exe (which matched the hash of ScreenUtil).
   </Example>
   <Example id="S0062" name="DustySky">
    DustySky captures PNG screenshots of the main screen.
   </Example>
   <Example id="S0593" name="ECCENTRICBANDWAGON">
    ECCENTRICBANDWAGON can capture screenshots and store them locally.
   </Example>
   <Example id="S0363" name="Empire">
    Empire is capable of capturing screenshots on Windows and macOS systems.
   </Example>
   <Example id="S0152" name="EvilGrab">
    EvilGrab has the capability to capture screenshots.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 captured screenshots and desktop video recordings.
   </Example>
   <Example id="S0182" name="FinFisher">
    FinFisher takes a screenshot of the screen and displays it on top of all other windows for few seconds in an apparent attempt to hide some messages showed by the system during the setup process.
   </Example>
   <Example id="S0143" name="Flame">
    Flame can take regular screenshots when certain applications are open that are sent to the command and control server.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy can capture screenshots.
   </Example>
   <Example id="S0277" name="FruitFly">
    FruitFly takes screenshots of the user's desktop.
   </Example>
   <Example id="S1044" name="FunnyDream">
    The FunnyDream ScreenCap component can take screenshots on a compromised host.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group's malware can take screenshots of the compromised computer every minute.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT can capture the victim’s screen remotely.
   </Example>
   <Example id="G0115" name="GOLD SOUTHFIELD">
    GOLD SOUTHFIELD has used the remote monitoring and management tool ConnectWise to obtain screen captures from victim's machines.
   </Example>
   <Example id="S0417" name="GRIFFON">
    GRIFFON has used a screenshot module that can be used to take a screenshot of the remote system.
   </Example>
   <Example id="G0043" name="Group5">
    Malware used by Group5 is capable of watching the victim's screen.
   </Example>
   <Example id="S0151" name="HALFBAKED">
    HALFBAKED can obtain screenshots from the victim.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant has the ability to do real time screen viewing on an infected host.
   </Example>
   <Example id="S0203" name="Hydraq">
    Hydraq includes a component based on the code of VNC that can stream a live feed of the desktop of an infected host.
   </Example>
   <Example id="S0398" name="HyperBro">
    HyperBro has the ability to take screenshots.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can capture screenshots of not only the entire screen, but of each separate window open, in case they are overlapping.
   </Example>
   <Example id="S0163" name="Janicab">
    Janicab captured screenshots and sent them out to a C2 server.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    A JHUHUGIT variant takes screenshots by simulating the user pressing the "Take Screenshot" key (VK_SCREENSHOT), accessing the screenshot saved in the clipboard, and converting it to a JPG image.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT has the capability to take screenshots of the victim’s machine.
   </Example>
   <Example id="S0088" name="Kasidet">
    Kasidet has the ability to initiate keylogging and screen captures.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar captures screenshots of the victim’s screen.
   </Example>
   <Example id="S0387" name="KeyBoy">
    KeyBoy has a command to perform screen grabbing.
   </Example>
   <Example id="S0271" name="KEYMARBLE">
    KEYMARBLE can capture screenshots of the victim’s machine.
   </Example>
   <Example id="S0437" name="Kivars">
    Kivars has the ability to capture screenshots on the infected host.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI can take screenshots of the victim’s machine.
   </Example>
   <Example id="S0680" name="LitePower">
    LitePower can take system screenshots and save them to %AppData%.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar can take JPEG screenshots of an infected system.
   </Example>
   <Example id="S0582" name="LookBack">
    LookBack can take desktop screenshots.
   </Example>
   <Example id="S0409" name="Machete">
    Machete captures screenshots.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa has used Apple’s Core Graphic APIs, such as CGWindowListCreateImageFromArray, to capture the user's screen and open windows.
   </Example>
   <Example id="S0282" name="MacSpy">
    MacSpy can capture screenshots of the desktop over multiple monitors.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound malware can take a screenshot and upload the file to its C2 server.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can capture screenshots that are initially saved as ‘scr.jpg’.
   </Example>
   <Example id="S0167" name="Matryoshka">
    Matryoshka is capable of performing screen captures.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo can collect screenshots of the victim’s machine.
   </Example>
   <Example id="S0339" name="Micropsia">
    Micropsia takes screenshots every 90 seconds by calling the Gdi32.BitBlt API.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used malware that can capture screenshots of the victim’s machine.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can capture the victim's screen.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT can capture screenshots of the victim’s machines.
   </Example>
   <Example id="S0644" name="ObliqueRAT">
    ObliqueRAT can capture a screenshot of the current screen.
   </Example>
   <Example id="S0340" name="Octopus">
    Octopus can capture screenshots of the victims’ machine.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has a tool called CANDYKING to capture a screenshot of user's desktop.
   </Example>
   <Example id="S1050" name="PcShare">
    PcShare can take screen shots of a compromised machine.
   </Example>
   <Example id="S0643" name="Peppy">
    Peppy can take screenshots on targeted systems.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX allows the operator to capture screenshots.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has the ability to take screen captures.
   </Example>
   <Example id="S0216" name="POORAIM">
    POORAIM can perform screen capturing.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit's Get-TimedScreenshot Exfiltration module can take screenshots at regular intervals.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS can retrieve screenshots from compromised hosts.
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER can capture a screenshot from a victim.
   </Example>
   <Example id="S0113" name="Prikormka">
    Prikormka contains a module that captures screenshots of the victim's desktop.
   </Example>
   <Example id="S0279" name="Proton">
    Proton captures the content of the desktop with the screencapture binary.
   </Example>
   <Example id="S0147" name="Pteranodon">
    Pteranodon can capture screenshots at a configurable interval.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can drop a mouse-logger that will take small screenshots around at each click and then send back to the server.
   </Example>
   <Example id="S0686" name="QuietSieve">
    QuietSieve has taken screenshots every five minutes and saved them to the user's local Application Data folder under Temp\SymbolSourceSymbols\icons or Temp\ModeAuto\icons.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay has the ability to capture screenshots.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can take screenshots every 30 seconds as well as when an external removable storage device is connected.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession can capture screenshots from a compromised host.
   </Example>
   <Example id="S0495" name="RDAT">
    RDAT can take a screenshot on the infected system.
   </Example>
   <Example id="S0153" name="RedLeaves">
    RedLeaves can capture screenshots.
   </Example>
   <Example id="S0332" name="Remcos">
    Remcos takes automated screenshots of the infected machine.
   </Example>
   <Example id="S0375" name="Remexi">
    Remexi takes screenshots of windows of interest.
   </Example>
   <Example id="S0592" name="RemoteUtilities">
    RemoteUtilities can take screenshots on a compromised host.
   </Example>
   <Example id="S0379" name="Revenge RAT">
    Revenge RAT has a plugin for screen capture.
   </Example>
   <Example id="S0270" name="RogueRobin">
    RogueRobin has a command named $screenshot that may be responsible for taking screenshots of the victim machine.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can capture screenshots of the infected system using the gdi32 library.
   </Example>
   <Example id="S0090" name="Rover">
    Rover takes screenshots of the compromised system's desktop and saves them to C:\system\screenshot.bmp for exfiltration every 60 minutes.
   </Example>
   <Example id="S0148" name="RTM">
    RTM can capture screenshots.
   </Example>
   <Example id="S0546" name="SharpStage">
    SharpStage has the ability to capture the victim's screen.
   </Example>
   <Example id="S0217" name="SHUTTERSPEED">
    SHUTTERSPEED can capture screenshots.
   </Example>
   <Example id="G0091" name="Silence">
    Silence can capture victim screen activity.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can take a screenshot of the current desktop.
   </Example>
   <Example id="S0633" name="Sliver">
    Sliver can take screenshots of the victim’s active display.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA has taken a screenshot of a victim's desktop, named it "Filter3.jpg", and stored it in the local directory.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM can capture screenshots of the victim’s desktop.
   </Example>
   <Example id="S0273" name="Socksbot">
    Socksbot can take screenshots.
   </Example>
   <Example id="S0380" name="StoneDrill">
    StoneDrill can take screenshots.
   </Example>
   <Example id="S1034" name="StrifeWater">
    StrifeWater has the ability to take screen captures.
   </Example>
   <Example id="S0663" name="SysUpdate">
    SysUpdate has the ability to capture screenshots.
   </Example>
   <Example id="S0098" name="T9000">
    T9000 can take screenshots of the desktop and target application windows, saving them to user directories as one byte XOR encrypted .dat files.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to take screenshots on an infected host including capturing content from windows of instant messaging applications.
   </Example>
   <Example id="S0004" name="TinyZBot">
    TinyZBot contains screen capture functionality.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can take a desktop screenshot and save the file into \ProgramData\Mail\MailAg\shot.png.
   </Example>
   <Example id="S0647" name="Turian">
    Turian has the ability to take screenshots.
   </Example>
   <Example id="S0199" name="TURNEDUP">
    TURNEDUP is capable of taking screenshots.
   </Example>
   <Example id="S0275" name="UPPERCUT">
    UPPERCUT can capture desktop screenshots in the PNG format and send them to the C2 server.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has used hooked APIs to take screenshots.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has the ability to take screenshots on a compromised host.
   </Example>
   <Example id="S0257" name="VERMIN">
    VERMIN can perform screen captures of the victim’s machine.
   </Example>
   <Example id="S0161" name="XAgentOSX">
    XAgentOSX contains the takeScreenShot (along with startTakeScreenShot and stopTakeScreenShot) functions to take screenshots using the CGGetActiveDisplayList, CGDisplayCreateImage, and NSImage:initWithCGImage methods.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET saves a screen capture of the victim's system with a numbered filename and .jpg extension. Screen captures are taken at specified intervals based on the system.
   </Example>
   <Example id="S0248" name="yty">
    yty collects screenshots of the victim machine.
   </Example>
   <Example id="S0251" name="Zebrocy">
    A variant of Zebrocy captures screenshots of the victim’s machine in JPEG and BMP format.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda can take screenshots of the victim’s machine.
   </Example>
   <Example id="S0086" name="ZLib">
    ZLib has the ability to obtain screenshots of the compromised system.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell can capture screenshots.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1597" name="Search Closed Sources">
  Adversaries may search and gather information about victims from closed sources that can be used during targeting. Information about victims may be available for purchase from reputable private sources and databases, such as paid subscriptions to feeds of technical/threat intelligence data.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G1011" name="EXOTIC LILY">
    EXOTIC LILY has searched for information on targeted individuals on business databases including RocketReach and CrunchBase.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1597.001" name="Search Closed Sources: Threat Intel Vendors">
  Adversaries may search private data from threat intelligence vendors for information that can be used during targeting. Threat intelligence vendors may offer paid feeds or portals that offer more data than what is publicly reported. Although sensitive details (such as customer names and other identifiers) may be redacted, this information may contain trends regarding breaches such as target industries, attribution claims, and successful TTPs/countermeasures.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1597.002" name="Search Closed Sources: Purchase Technical Data">
  Adversaries may purchase technical information about victims that can be used during targeting. Information about victims may be available for purchase within reputable private sources and databases, such as paid subscriptions to feeds of scan databases or other data aggregation services. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has purchased credentials and session tokens from criminal underground forums.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1596" name="Search Open Technical Databases">
  Adversaries may search freely available technical databases for information about victims that can be used during targeting. Information about victims may be available in online databases and repositories, such as registrations of domains/certificates as well as public collections of network data/artifacts gathered from traffic and/or scans.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1596.001" name="Search Open Technical Databases: DNS/Passive DNS">
  Adversaries may search DNS data for information about victims that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target’s subdomains, mail servers, and other hosts.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1596.002" name="Search Open Technical Databases: WHOIS">
  Adversaries may search public WHOIS data for information about victims that can be used during targeting. WHOIS data is stored by regional Internet registries (RIR) responsible for allocating and assigning Internet resources such as domain names. Anyone can query WHOIS servers for information about a registered domain, such as assigned IP blocks, contact information, and DNS nameservers.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1596.003" name="Search Open Technical Databases: Digital Certificates">
  Adversaries may search public digital certificate data for information about victims that can be used during targeting. Digital certificates are issued by a certificate authority (CA) in order to cryptographically verify the origin of signed content. These certificates, such as those used for encrypted web traffic (HTTPS SSL/TLS communications), contain information about the registered organization such as name and location.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1596.004" name="Search Open Technical Databases: CDNs">
  Adversaries may search content delivery network (CDN) data about victims that can be used during targeting. CDNs allow an organization to host content from a distributed, load balanced array of servers. CDNs may also allow organizations to customize content delivery based on the requestor’s geographical region.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1596.005" name="Search Open Technical Databases: Scan Databases">
  Adversaries may search within public scan databases for information about victims that can be used during targeting. Various online services continuously publish the results of Internet scans/surveys, often harvesting information such as active IP addresses, hostnames, open ports, certificates, and even server banners.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1593" name="Search Open Websites/Domains">
  Adversaries may search freely available websites and/or domains for information about victims that can be used during targeting. Information about victims may be available in various online sites, such as social media, new sites, or those hosting information about business operations such as hiring or requested/rewarded contracts.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team researched Ukraine's unique legal entity identifier (called an "EDRPOU" number), including running queries on the EDRPOU website, in preparation for the NotPetya attack. Sandworm Team has also researched third-party websites to help it craft credible spearphishing emails.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1013" name="Application Developer Guidance">
    Application developers uploading to public code repositories should be careful to avoid publishing sensitive information such as credentials and API keys.
   </Mitigation>
   <Mitigation id="M1047" name="Audit">
    Scan public code repositories for exposed credentials or other sensitive information before making commits. Ensure that any leaked credentials are removed from the commit history, not just the current latest version of the code.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1593.001" name="Search Open Websites/Domains: Social Media">
  Adversaries may search social media for information about victims that can be used during targeting. Social media sites may contain various information about a victim organization, such as business announcements as well as information about the roles, locations, and interests of staff.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G1011" name="EXOTIC LILY">
    EXOTIC LILY has copied data from social media sites to impersonate targeted individuals.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used Twitter to monitor potential victims and to prepare targeted phishing e-mails.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used LinkedIn to identify and target specific employees within a chosen organization.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1593.002" name="Search Open Websites/Domains: Search Engines">
  Adversaries may use search engines to collect information about victims that can be used during targeting. Search engine services typical crawl online sites to index context and may provide users with specialized syntax to search for specific keywords or specific types of content (i.e. filetypes).
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has searched for vulnerabilities, tools, and geopolitical trends on Google to target victims.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1593.003" name="Search Open Websites/Domains: Code Repositories">
  Adversaries may search public code repositories for information about victims that can be used during targeting. Victims may store code in repositories on various third-party websites such as GitHub, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has searched public code repositories for exposed credentials.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1013" name="Application Developer Guidance">
    Application developers uploading to public code repositories should be careful to avoid publishing sensitive information such as credentials and API keys.
   </Mitigation>
   <Mitigation id="M1047" name="Audit">
    Scan public code repositories for exposed credentials or other sensitive information before making commits. Ensure that any leaked credentials are removed from the commit history, not just the current latest version of the code.
   </Mitigation>
  </Mitigations>
  <Detections>
   Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.  Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.
  </Detections>
 </Technique>
 <Technique id="T1594" name="Search Victim-Owned Websites">
  Adversaries may search websites owned by the victim for information that can be used during targeting. Victim-owned websites may contain a variety of details, including names of departments/divisions, physical locations, and data about key employees such as names, roles, and contact info (ex: Email Addresses). These sites may also have details highlighting business operations and relationships.
  <Tactic>
   Reconnaissance
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G1011" name="EXOTIC LILY">
    EXOTIC LILY has used contact forms on victim websites to generate phishing e-mails.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has searched for information on the target company's website.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has conducted research against potential victim websites as part of its operational planning.
   </Example>
   <Example id="G0122" name="Silent Librarian">
    Silent Librarian has searched victim's websites to identify the interests and academic areas of targeted individuals and to scrape source code, branding, and organizational contact information for phishing pages.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1505" name="Server Software Component">
  Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Regularly check component software on critical services that adversaries may target for persistence to verify the integrity of the systems and identify if unexpected changes have been made.
   </Mitigation>
   <Mitigation id="M1045" name="Code Signing">
    Ensure all application component binaries are signed by the correct application developers.
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Consider disabling software components from servers when possible to prevent abuse by adversaries.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Do not allow administrator accounts that have permissions to add component software on these services to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems.
   </Mitigation>
   <Mitigation id="M1024" name="Restrict Registry Permissions">
    Consider using Group Policy to configure and block modifications to service and other critical server parameters in the Registry.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Enforce the principle of least privilege by limiting privileges of user accounts so only authorized accounts can modify and/or add server software components.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1505.001" name="Server Software Component: SQL Stored Procedures">
  Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Linux, Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, root
  </Permissions_Required>
  <Examples>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used various MS-SQL stored procedures.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet used xp_cmdshell to store and execute SQL code.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Regularly check component software on critical services that adversaries may target for persistence to verify the integrity of the systems and identify if unexpected changes have been made.
   </Mitigation>
   <Mitigation id="M1045" name="Code Signing">
    Ensure all application component binaries are signed by the correct application developers.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Do not allow administrator accounts that have permissions to add component software on these services to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1505.002" name="Server Software Component: Transport Agent">
  Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails. Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Linux, Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, root
  </Permissions_Required>
  <Examples>
   <Example id="S0395" name="LightNeuron">
    LightNeuron has used a malicious Microsoft Exchange transport agent for persistence.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Regularly check component software on critical services that adversaries may target for persistence to verify the integrity of the systems and identify if unexpected changes have been made.
   </Mitigation>
   <Mitigation id="M1045" name="Code Signing">
    Ensure all application component binaries are signed by the correct application developers.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Do not allow administrator accounts that have permissions to add component software on these services to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1505.003" name="Server Software Component: Web Shell">
  Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <System_Requirements>
   Adversary access to Web server with vulnerability or account to upload and serve the Web shell file.
  </System_Requirements>
  <CAPEC_ID>
   CAPEC-650
  </CAPEC_ID>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has used a modified and obfuscated version of the reGeorg web shell to maintain persistence on a target's Outlook Web Access (OWA) server.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has installed web shells on exploited Microsoft Exchange servers.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has used Web shells to maintain access to victim websites.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has used web shells for persistence or to ensure redundant access.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has installed ANTAK and ASPXSPY web shells.
   </Example>
   <Example id="S0073" name="ASPXSpy">
    ASPXSpy is a Web shell. The ASPXTool version used by Threat Group-3390 has been deployed to accessible servers running Internet Information Services (IIS).
   </Example>
   <Example id="G0135" name="BackdoorDiplomacy">
    BackdoorDiplomacy has used web shells to establish an initial foothold and for lateral movement within a victim's system.
   </Example>
   <Example id="S0020" name="China Chopper">
    China Chopper's server component is a Web Shell payload.
   </Example>
   <Example id="G0009" name="Deep Panda">
    Deep Panda uses Web shells on publicly accessible Web servers to access victim networks.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has commonly created Web shells on victims' publicly accessible email and web servers, which they used to maintain access to a victim network and download additional malicious files.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has installed web shells on compromised hosts to maintain access.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM used Web shells to persist in victim environments and assist in execution and exfiltration.
   </Example>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has deployed multiple web shells on compromised servers including SIMPLESEESHARP, SPORTSBALL, China Chopper, and ASPXSpy.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used modified versions of open source PHP web shells to maintain access, often adding "Dinosaur" references within the code.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan relies on web shells for an initial foothold as well as persistence into the victim's systems.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has used multiple web shells to gain execution.
   </Example>
   <Example id="G1009" name="Moses Staff">
    Moses Staff has dropped a web shell onto a compromised system.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used web shells, often to maintain access to a victim network.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors generated a web shell within a vulnerable Enterprise Resource Planning Web Application Server as a persistence mechanism.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used their own web shells, as well as those previously placed on target systems by other threat actors, for reconnaissance and lateral movement.
   </Example>
   <Example id="S0072" name="OwaAuth">
    OwaAuth is a Web shell that appears to be exclusively used by Threat Group-3390. It is installed as an ISAPI filter on Exchange servers and shares characteristics with the China Chopper Web shell.
   </Example>
   <Example id="S0598" name="P.A.S. Webshell">
    P.A.S. Webshell can gain remote access and execution on target web servers.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used webshells including P.A.S. Webshell to maintain access to victim networks.
   </Example>
   <Example id="S0185" name="SEASHARPEE">
    SEASHARPEE is a Web shell.
   </Example>
   <Example id="S0578" name="SUPERNOVA">
    SUPERNOVA is a Web shell.
   </Example>
   <Example id="G0088" name="TEMP.Veles">
    TEMP.Veles has planted Web shells on Outlook Exchange servers.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has used a variety of Web shells.
   </Example>
   <Example id="G0131" name="Tonto Team">
    Tonto Team has used a first stage web shell after compromising a vulnerable Exchange server.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has started a web service in the target host and wait for the adversary to connect, acting as a web shell.
   </Example>
   <Example id="G0123" name="Volatile Cedar">
    Volatile Cedar can inject web shell code into a server.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Consider disabling functions from web technologies such as PHP’s eval() that may be abused for web shells.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Enforce the principle of least privilege by limiting privileges of user accounts so only authorized accounts can modify the web directory.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1505.004" name="Server Software Component: IIS Components">
  Adversaries may install malicious components that run on Internet Information Services (IIS) web servers to establish persistence. IIS provides several mechanisms to extend the functionality of the web servers. For example, Internet Server Application Programming Interface (ISAPI) extensions and filters can be installed to examine and/or modify incoming and outgoing IIS web requests. Extensions and filters are deployed as DLL files that export three functions: Get{Extension/Filter}Version, Http{Extension/Filter}Proc, and (optionally) Terminate{Extension/Filter}. IIS modules may also be installed to extend IIS web servers.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM
  </Permissions_Required>
  <Examples>
   <Example id="S1022" name="IceApple">
    IceApple is an IIS post-exploitation framework, consisting of 18 modules that provide several functionalities.
   </Example>
   <Example id="S0072" name="OwaAuth">
    OwaAuth has been loaded onto Exchange servers and disguised as an ISAPI filter (owaauth.dll). The IIS w3wp.exe process then loads the malicious DLL.
   </Example>
   <Example id="S0258" name="RGDoor">
    RGDoor establishes persistence on webservers as an IIS module.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Regularly check installed IIS components to verify the integrity of the web server and identify if unexpected changes have been made.
   </Mitigation>
   <Mitigation id="M1045" name="Code Signing">
    Ensure IIS DLLs and binaries are signed by the correct application developers.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Restrict unallowed ISAPI extensions and filters from running by specifying a list of ISAPI extensions and filters that can run on IIS.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Do not allow administrator accounts that have permissions to add IIS components to be used for day-to-day operations that may expose these permissions to potential adversaries and/or other unprivileged systems.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1505.005" name="Server Software Component: Terminal Services DLL">
  Adversaries may abuse components of Terminal Services to enable persistent access to systems. Microsoft Terminal Services, renamed to Remote Desktop Services in some Windows Server OSs as of 2022, enable remote terminal connections to hosts. Terminal Services allows servers to transmit a full, interactive, graphical user interface to clients via RDP.
  <Tactic>
   Persistence
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Regularly check component software on critical services that adversaries may target for persistence to verify the integrity of the systems and identify if unexpected changes have been made.
   </Mitigation>
   <Mitigation id="M1024" name="Restrict Registry Permissions">
    Consider using Group Policy to configure and block modifications to Terminal Services parameters in the Registry.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1648" name="Serverless Execution">
  Adversaries may abuse serverless computing, integration, and automation services to execute arbitrary code in cloud environments. Many cloud providers offer a variety of serverless resources, including compute engines, application integration services, and web servers.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   IaaS, Office 365, SaaS
  </Platforms>
  <Mitigations>
   <Mitigation id="M1018" name="User Account Management">
    Remove permissions to create, modify, or run serverless resources from users that do not explicitly require them.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0025" name="Cloud Service">
    Cloud Service Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1489" name="Service Stop">
  Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Impact_Type>
   Availability
  </Impact_Type>
  <Examples>
   <Example id="S0640" name="Avaddon">
    Avaddon looks for and attempts to stop database processes.
   </Example>
   <Example id="S0638" name="Babuk">
    Babuk can stop specific services related to backups.
   </Example>
   <Example id="S0611" name="Clop">
    Clop can kill several processes and services related to backups and security solutions.
   </Example>
   <Example id="S0575" name="Conti">
    Conti can stop up to 146 Windows services related to security, backup, database, and email solutions through the use of net stop.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba has a hardcoded list of services and processes to terminate.
   </Example>
   <Example id="S0659" name="Diavol">
    Diavol will terminate services using the Service Control Manager (SCM) API.
   </Example>
   <Example id="S0605" name="EKANS">
    EKANS stops database, data backup solution, antivirus, and ICS-related processes.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper has the ability to stop the Volume Shadow Copy service.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant has the ability to stop services on the infected host.
   </Example>
   <Example id="G0119" name="Indrik Spider">
    Indrik Spider has used PsExec to stop services prior to the execution of ransomware.
   </Example>
   <Example id="S0604" name="Industroyer">
    Industroyer’s data wiper module writes zeros into the registry keys in SYSTEM\CurrentControlSet\Services to render a system inoperable.
   </Example>
   <Example id="S0607" name="KillDisk">
    KillDisk terminates various processes to get the user to reboot the victim machine.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has stopped the MSExchangeIS service to render Exchange contents inaccessible to users.
   </Example>
   <Example id="S0582" name="LookBack">
    LookBack can kill processes and delete services.
   </Example>
   <Example id="S0449" name="Maze">
    Maze has stopped SQL services to ensure it can encrypt any database.
   </Example>
   <Example id="S0576" name="MegaCortex">
    MegaCortex can stop and disable services on the system.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor can disconnect all network adapters on a compromised host using powershell -Command "Get-WmiObject -class Win32_NetworkAdapter | ForEach { If ($.NetEnabled) { $.Disable() } }" &gt; NUL.
   </Example>
   <Example id="S0457" name="Netwalker">
    Netwalker can terminate system processes and services, some of which relate to backup software.
   </Example>
   <Example id="S0365" name="Olympic Destroyer">
    Olympic Destroyer uses the API call ChangeServiceConfigW to disable all services on the affected system.
   </Example>
   <Example id="S0556" name="Pay2Key">
    Pay2Key can stop the MS SQL service at the end of the encryption process to release files locked by the service.
   </Example>
   <Example id="S0583" name="Pysa">
    Pysa can stop services and processes.
   </Example>
   <Example id="S0481" name="Ragnar Locker">
    Ragnar Locker has attempted to stop services associated with business applications and databases to release the lock on files used by these applications so they may be encrypted.
   </Example>
   <Example id="S0496" name="REvil">
    REvil has the capability to stop services and kill processes.
   </Example>
   <Example id="S0400" name="RobbinHood">
    RobbinHood stops 181 Windows services on the system before beginning the encryption process.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk has called kill.bat for stopping services, disabling services and killing processes.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA has the capability to stop processes and services.
   </Example>
   <Example id="S0366" name="WannaCry">
    WannaCry attempts to kill processes associated with Exchange, Microsoft SQL Server, and MySQL to make it possible to encrypt their data stores.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used taskkill.exe and net.exe to stop backup, catalog, cloud, and other services prior to network encryption.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1030" name="Network Segmentation">
    Operate intrusion detection, analysis, and response systems on a separate network from the production environment to lessen the chances that an adversary can see and interfere with critical response functions.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Ensure proper process and file permissions are in place to inhibit adversaries from disabling or interfering with critical services.
   </Mitigation>
   <Mitigation id="M1024" name="Restrict Registry Permissions">
    Ensure proper registry permissions are in place to inhibit adversaries from disabling or interfering with critical services.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation | Process Termination
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Metadata
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1129" name="Shared Modules">
  Adversaries may execute malicious payloads via loading shared modules. The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like CreateProcess, LoadLibrary, etc. of the Win32 API.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Examples>
   <Example id="S0373" name="Astaroth">
    Astaroth uses the LoadLibraryExW() function to load additional modules.
   </Example>
   <Example id="S0438" name="Attor">
    Attor's dispatcher can execute additional plugins by loading the respective DLLs.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has loaded and executed DLLs in memory during runtime on a victim machine.
   </Example>
   <Example id="S0415" name="BOOSTWRITE">
    BOOSTWRITE has used the DWriteCreateFactory() function to load additional modules.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can use LoadLibrary to attempt to execute GdiPlus.dll.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman can load DLLs.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack contains a function that calls LoadLibrary and GetProcAddress.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb's loader can call the load() function to load the FoggyWeb dll into an Application Domain on a compromised AD FS server.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT can load DLLs into memory.
   </Example>
   <Example id="S0203" name="Hydraq">
    Hydraq creates a backdoor through which remote attackers can load and call DLL functions.
   </Example>
   <Example id="S0607" name="KillDisk">
    KillDisk loads and executes functions from a DLL.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo had used AutoIt to load and execute the DLL payload.
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon has used call to LoadLibrary to load its installer. PipeMon loads its modules using reflective loading or custom shellcode.
   </Example>
   <Example id="S0196" name="PUNCHBUGGY">
    PUNCHBUGGY can load a DLL using the LoadLibrary API.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet calls LoadLibrary then executes exports from a DLL.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to inject the LoadLibrary call template DLL into running processes.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    Identify and block potentially malicious software executed through this technique by using application control tools capable of preventing unknown DLLs from being loaded.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1072" name="Software Deployment Tools">
  Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, HBSS, Altiris, etc.).
  <Tactics>
   Execution, Lateral Movement
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User
  </Permissions_Required>
  <Supports_Remote>
   Yes
  </Supports_Remote>
  <CAPEC_ID>
   CAPEC-187
  </CAPEC_ID>
  <Examples>
   <Example id="G0050" name="APT32">
    APT32 compromised McAfee ePO to move laterally by distributing malware as a software deployment task.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has used RAdmin, a remote software tool used to remotely control workstations and ATMs.
   </Example>
   <Example id="G0028" name="Threat Group-1314">
    Threat Group-1314 actors used a victim's endpoint management platform, Altiris, for lateral movement.
   </Example>
   <Example id="S0041" name="Wiper">
    It is believed that a patch management system for an anti-virus product commonly installed among targeted companies was used to distribute the Wiper malware.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1015" name="Active Directory Configuration">
    Ensure proper system and access isolation for critical network systems through use of group policy.
   </Mitigation>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Ensure proper system and access isolation for critical network systems through use of multi-factor authentication.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Ensure proper system isolation for critical network systems through use of firewalls.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Verify that account credentials that may be used to access deployment systems are unique and not used throughout the enterprise network.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Grant access to application deployment systems only to a limited number of authorized administrators.
   </Mitigation>
   <Mitigation id="M1029" name="Remote Data Storage">
    If the application deployment system can be configured to deploy only signed binaries, then ensure that the trusted signing certificates are not co-located with the application deployment system and are instead located on a system that cannot be accessed remotely or to which remote access is tightly controlled.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Patch deployment systems regularly to prevent potential remote access through Exploitation for Privilege Escalation.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Ensure that any accounts used by third-party providers to access these systems are traceable to the third-party and are not used throughout the network or used by other third-party providers in the same environment. Ensure there are regular reviews of accounts provisioned to these systems to verify continued business need, and ensure there is governance to trace de-provisioning of access that is no longer required. Ensure proper system and access isolation for critical network systems through use of account privilege separation.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Have a strict approval policy for use of deployment systems.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1518" name="Software Discovery">
  Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-580
  </CAPEC_ID>
  <Examples>
   <Example id="S0534" name="Bazar">
    Bazar can query the Registry for installed applications.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has used tools to enumerate software installed on an infected host.
   </Example>
   <Example id="S0482" name="Bundlore">
    Bundlore has the ability to enumerate what browser is being used as well as version information for Safari.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower can list the installed applications on a compromised host.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    The Cobalt Strike System Profiler can discover applications through the browser and identify the version of Java the target has.
   </Example>
   <Example id="S0126" name="ComRAT">
    ComRAT can check the victim's default browser to determine which process to inject its communications module into.
   </Example>
   <Example id="S0472" name="down_new">
    down_new has the ability to gather information on installed applications.
   </Example>
   <Example id="S0384" name="Dridex">
    Dridex has collected a list of installed software on the system.
   </Example>
   <Example id="S0062" name="DustySky">
    DustySky lists all installed software for the infected machine.
   </Example>
   <Example id="S0024" name="Dyre">
    Dyre has the ability to identify installed programs on a compromised host.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has enumerated programs installed on an infected machine.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant can retrieve a list of applications from the SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths registry key.
   </Example>
   <Example id="G0100" name="Inception">
    Inception has enumerated installed software on compromised systems.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can collect information about installed software used by specific users, software executed on user login, and software executed by each system.
   </Example>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY can collect information on installed applications.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can check for the Telegram installation directory by enumerating the files on disk.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has searched the compromised system for banking applications.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used a PowerShell backdoor to check for Skype connectivity on the target machine.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has searched the victim system for the InstallUtil.exe program and its version.
   </Example>
   <Example id="C0016" name="Operation Dust Storm">
    During Operation Dust Storm, the threat actors deployed a file called DeployJava.js to fingerprint installed software on a victim system prior to exploit delivery.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors collected a list of installed software on the infected system.
   </Example>
   <Example id="S0229" name="Orz">
    Orz can gather the victim's Internet Explorer version.
   </Example>
   <Example id="S0598" name="P.A.S. Webshell">
    P.A.S. Webshell can list PHP server configuration details.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can enumerate a list of installed programs.
   </Example>
   <Example id="S0148" name="RTM">
    RTM can scan victim drives to look for specific banking software on the machine to determine next actions.
   </Example>
   <Example id="S0445" name="ShimRatReporter">
    ShimRatReporter gathered a list of installed software on the infected host.
   </Example>
   <Example id="G1008" name="SideCopy">
    SideCopy has collected browser information from a compromised host.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has used tools to enumerate software installed on an infected host.
   </Example>
   <Example id="S0623" name="Siloscape">
    Siloscape searches for the kubectl binary.
   </Example>
   <Example id="S0646" name="SpicyOmelette">
    SpicyOmelette can enumerate running software on a targeted system.
   </Example>
   <Example id="S1042" name="SUGARDUMP">
    SUGARDUMP can identify Chrome, Opera, Edge Chromium, and Firefox browsers, including version number, on a compromised host.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to identify the Internet Explorer (IE) version on an infected host.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper's backdoor could list the infected system's installed software.
   </Example>
   <Example id="G0124" name="Windigo">
    Windigo has used a script to detect installed software on targeted systems.
   </Example>
   <Example id="G0112" name="Windshift">
    Windshift has used malware to identify installed software.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET uses ps aux with the grep command to enumerate common browsers and system processes potentially impacting XCSSET's exfiltration capabilities.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0018" name="Firewall">
    Firewall Enumeration | Firewall Metadata
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1518.001" name="Software Discovery: Security Software Discovery">
  Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-581
  </CAPEC_ID>
  <Examples>
   <Example id="S0469" name="ABK">
    ABK has the ability to identify the installed anti-virus product on the compromised host.
   </Example>
   <Example id="S1028" name="Action RAT">
    Action RAT can identify AV products on an infected host using the following command: cmd.exe WMIC /Node:localhost /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List.
   </Example>
   <Example id="S1025" name="Amadey">
    Amadey has checked for a variety of antivirus products.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has identified security software, configurations, defensive tools, and sensors installed on a compromised system.
   </Example>
   <Example id="G0143" name="Aquatic Panda">
    Aquatic Panda has attempted to discover third party endpoint detection and response (EDR) tools on compromised systems.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth checks for the presence of Avast antivirus in the C:\Program\Files\ folder.
   </Example>
   <Example id="S1029" name="AuTo Stealer">
    AuTo Stealer has the ability to collect information about installed AV products from an infected host.
   </Example>
   <Example id="S0473" name="Avenger">
    Avenger has the ability to identify installed anti-virus products on a compromised host.
   </Example>
   <Example id="S0337" name="BadPatch">
    BadPatch uses WMI to enumerate installed security products in the victim’s environment.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can identify the installed antivirus engine.
   </Example>
   <Example id="S0657" name="BLUELIGHT">
    BLUELIGHT can collect a list of anti-virus products installed on a machine.
   </Example>
   <Example id="S0471" name="build_downer">
    build_downer has the ability to detect if the infected host is running an anti-virus process.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can identify specific analytical tools based on running processes.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp has queried the infected system's registry searching for specific registry keys associated with antivirus products.
   </Example>
   <Example id="S0023" name="CHOPSTICK">
    CHOPSTICK checks for antivirus and forensics software.
   </Example>
   <Example id="S0611" name="Clop">
    Clop can search for processes with antivirus and antimalware product names.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group used a JavaScript backdoor that is capable of collecting a list of the security solutions installed on the victim's machine.
   </Example>
   <Example id="S0244" name="Comnie">
    Comnie attempts to detect several anti-virus products.
   </Example>
   <Example id="S0492" name="CookieMiner">
    CookieMiner has checked for the presence of "Little Snitch", macOS network monitoring and application firewall software, stopping and exiting if it is found.
   </Example>
   <Example id="S0046" name="CozyCar">
    The main CozyCar dropper checks whether the victim has an anti-virus product installed. If the installed product is on a predetermined list, the dropper will exit.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson contains a command to collect information about anti-virus software on the victim.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel has searched for anti-malware strings and anti-virus processes running on the system.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman can search for anti-virus products on the system.
   </Example>
   <Example id="S0472" name="down_new">
    down_new has the ability to detect anti-virus products and processes on a compromised host.
   </Example>
   <Example id="S0062" name="DustySky">
    DustySky checks for the existence of anti-virus.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can enumerate antivirus software on the target.
   </Example>
   <Example id="S0091" name="Epic">
    Epic searches for anti-malware services running on the victim’s machine and terminates itself if it finds them.
   </Example>
   <Example id="S0396" name="EvilBunny">
    EvilBunny has been observed querying installed antivirus software.
   </Example>
   <Example id="S0568" name="EVILNUM">
    EVILNUM can search for anti-virus products on the system.
   </Example>
   <Example id="S0171" name="Felismus">
    Felismus checks for processes associated with anti-virus vendors.
   </Example>
   <Example id="S0267" name="FELIXROOT">
    FELIXROOT checks for installed security software like antivirus and firewall.
   </Example>
   <Example id="S0679" name="Ferocious">
    Ferocious has checked for AV software as part of its persistence process.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has used Registry keys to detect and avoid executing in potential sandboxes.
   </Example>
   <Example id="S0182" name="FinFisher">
    FinFisher probes the system to check for antimalware processes.
   </Example>
   <Example id="S0143" name="Flame">
    Flame identifies security software such as antivirus through the Security module.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy will attempt to detect anti-virus products during the initial infection.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors used WMI queries to determine if analysis tools were running on a compromised system.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can identify the processes for Bkav antivirus.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can check for the presence of specific security products.
   </Example>
   <Example id="S0249" name="Gold Dragon">
    Gold Dragon checks for anti-malware products and processes.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can list installed security products including the Trusteer and Diebold Warsaw GAS Tecnologia online banking protections.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can check for the presence of network sniffers, AV, and BitDefender firewall.
   </Example>
   <Example id="S0201" name="JPIN">
    JPIN checks for the presence of certain security-related processes and deletes its installer/uninstaller component if it identifies any of them.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT can list security software, such as by using WMIC to identify anti-virus products installed on the victim’s machine and to obtain firewall details.
   </Example>
   <Example id="S0088" name="Kasidet">
    Kasidet has the ability to identify any anti-virus installed on the infected system.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has checked for the presence of antivirus software with powershell Get-CimInstance -Namespace root/securityCenter2 – classname antivirusproduct.
   </Example>
   <Example id="S0513" name="LiteDuke">
    LiteDuke has the ability to check for the presence of Kaspersky security software.
   </Example>
   <Example id="S0680" name="LitePower">
    LitePower can identify installed AV software.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar can search for processes associated with an anti-virus product from list.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can check for running processes on the victim’s machine to look for Kaspersky and Bitdefender antivirus products.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo collects a list of installed antivirus software from the victim’s system.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor has the ability to search for Kaspersky Antivirus on a victim's machine.
   </Example>
   <Example id="S0339" name="Micropsia">
    Micropsia searches for anti-virus software and firewall products installed on the victim’s machine using WMI.
   </Example>
   <Example id="S0553" name="MoleNet">
    MoleNet can use WMI commands to check the system for firewall and antivirus software.
   </Example>
   <Example id="S0284" name="More_eggs">
    More_eggs can obtain information on installed anti-malware programs.
   </Example>
   <Example id="S0256" name="Mosquito">
    Mosquito's installer searches the Registry and system to see if specific antivirus tools are installed on the system.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used malware to check running processes against a hard-coded list of security tools often used by malware researchers.
   </Example>
   <Example id="G0019" name="Naikon">
    Naikon uses commands such as netsh advfirewall firewall to discover local firewall settings.
   </Example>
   <Example id="S0108" name="netsh">
    netsh can be used to discover system firewall settings.
   </Example>
   <Example id="S0457" name="Netwalker">
    Netwalker can detect and terminate active security software-related processes on infected systems.
   </Example>
   <Example id="S0368" name="NotPetya">
    NotPetya determines if specific antivirus programs are running on an infected host machine.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used scripts to detect security software.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork scanned the "Program Files" directories for a directory with the string "Total Security" (the installation path of the "360 Total Security" antivirus tool).
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon can check for the presence of ESET and Kaspersky security software.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS has detected security tools.
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER may collect information on the victim's anti-virus software.
   </Example>
   <Example id="S0113" name="Prikormka">
    A module in Prikormka collects information from the victim about installed anti-virus software.
   </Example>
   <Example id="S0196" name="PUNCHBUGGY">
    PUNCHBUGGY can gather AVs registered in the system.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can identify the installed antivirus product on a targeted system.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec has a plugin to detect active drivers of some security products.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke used scripts which detected and uninstalled antivirus software.
   </Example>
   <Example id="S0270" name="RogueRobin">
    RogueRobin enumerates running processes to search for Wireshark and Windows Sysinternals suite.
   </Example>
   <Example id="S0148" name="RTM">
    RTM can obtain information about security software on the victim.
   </Example>
   <Example id="G1008" name="SideCopy">
    SideCopy uses a loader DLL file to collect AV product names from an infected host.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has used the Windows service winmgmts:\.\root\SecurityCenter2 to check installed antivirus products.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can determine if an anti-virus product is installed through the resolution of the service's virtual SID.
   </Example>
   <Example id="S0468" name="Skidmap">
    Skidmap has the ability to check if /usr/sbin/setenforce exists. This file controls what mode SELinux is in.
   </Example>
   <Example id="S0646" name="SpicyOmelette">
    SpicyOmelette can check for the presence of 29 different antivirus tools.
   </Example>
   <Example id="S0380" name="StoneDrill">
    StoneDrill can check for antivirus and antimalware programs.
   </Example>
   <Example id="S0142" name="StreamEx">
    StreamEx has the ability to scan for security tools such as firewalls and antivirus tools.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity can identify if ESET or BitDefender antivirus are installed before dropping its payload.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet enumerates the currently running processes related to a variety of security products.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST checked for a variety of antivirus/endpoint detection agents prior to execution.
   </Example>
   <Example id="S0098" name="T9000">
    T9000 performs checks for various antivirus and security products during installation.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to identify which anti-virus products, firewalls, and anti-spyware products are in use.
   </Example>
   <Example id="S0057" name="Tasklist">
    Tasklist can be used to enumerate security software currently running on a system by process name of known products.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has searched for security products on infected machines.
   </Example>
   <Example id="G0089" name="The White Company">
    The White Company has checked for specific antivirus products on the target’s computer, including Kaspersky, Quick Heal, AVG, BitDefender, Avira, Sophos, Avast!, and ESET.
   </Example>
   <Example id="S0595" name="ThiefQuest">
    ThiefQuest uses the kill_unwanted function to get a list of running processes, compares each process with an encrypted list of "unwanted" security related programs, and kills the processes for security related programs.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper can search for anti-virus software running on the system.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has obtained information on security software, including security logging information that may indicate whether their malware has been detected.
   </Example>
   <Example id="S0476" name="Valak">
    Valak can determine if a compromised host has security products installed.
   </Example>
   <Example id="S0257" name="VERMIN">
    VERMIN uses WMI to check for anti-virus software installed on the system.
   </Example>
   <Example id="S0579" name="Waterbear">
    Waterbear can find the presence of a specific security software.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can recognize the presence of monitoring tools on a target system.
   </Example>
   <Example id="G0112" name="Windshift">
    Windshift has used malware to identify installed AV and commonly used forensic and malware analysis tools.
   </Example>
   <Example id="S0176" name="Wingbird">
    Wingbird checks for the presence of Bitdefender security software.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used WMI to identify anti-virus products installed on a victim's machine.
   </Example>
   <Example id="S0653" name="xCaon">
    xCaon has checked for the existence of Kaspersky antivirus software on the system.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET searches firewall configuration files located in /Library/Preferences/ and uses csrutil status to determine if System Integrity Protection is enabled.
   </Example>
   <Example id="S0388" name="YAHOYAH">
    YAHOYAH checks for antimalware solution processes on the system.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda checks to see if anti-virus, anti-spyware, or firewall products are installed in the victim’s environment.
   </Example>
   <Example id="S1013" name="ZxxZ">
    ZxxZ can search a compromised host to determine if it is running Windows Defender or Kasperky antivirus.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0018" name="Firewall">
    Firewall Enumeration | Firewall Metadata
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1608" name="Stage Capabilities">
  Adversaries may upload, install, or otherwise set up capabilities that can be used during targeting. To support their operations, an adversary may need to take capabilities they developed (Develop Capabilities) or obtained (Obtain Capabilities) and stage them on infrastructure under their control. These capabilities may be staged on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Capabilities may also be staged on web services, such as GitHub or Pastebin, or on Platform-as-a-Service (PaaS) offerings that enable users to easily provision applications.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has used servers under their control to validate tracking pixels sent to phishing victims.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1608.001" name="Stage Capabilities: Upload Malware">
  Adversaries may upload malware to third-party or adversary controlled infrastructure to make it accessible during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, and a variety of other malicious content. Adversaries may upload malware to support their operations, such as making a payload available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0050" name="APT32">
    APT32 has hosted malicious payloads in Dropbox, Amazon S3, and Google Drive for use during targeting.
   </Example>
   <Example id="G1002" name="BITTER">
    BITTER has registered domains to stage payloads.
   </Example>
   <Example id="C0010" name="C0010">
    For C0010, UNC3890 actors staged malware on their infrastructure for direct download onto a compromised system.
   </Example>
   <Example id="C0011" name="C0011">
    For C0011, Transparent Tribe hosted malicious documents on domains registered by the group.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has staged malware and malicious files on compromised web servers, GitHub, and Google Drive.
   </Example>
   <Example id="G1011" name="EXOTIC LILY">
    EXOTIC LILY  has uploaded malicious payloads to file-sharing services including TransferNow, TransferXL, WeTransfer, and OneDrive.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has registered domains to stage payloads.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has staged malware on fraudulent websites set up to impersonate targeted organizations.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used Blogspot to host malicious content such as beacons, file exfiltrators, and implants.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has hosted malicious files on compromised as well as Lazarus Group-controlled servers.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter has hosted open-source remote access Trojans used in its operations in GitHub.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has hosted malicious payloads on DropBox including PlugX.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors uploaded commonly available hacker tools to compromised web servers.
   </Example>
   <Example id="C0013" name="Operation Sharpshooter">
    For Operation Sharpshooter, the threat actors staged malicious files on Dropbox and other websites.
   </Example>
   <Example id="C0005" name="Operation Spalax">
    For Operation Spalax, the threat actors staged malware and malicious files in legitimate hosting services such as OneDrive or MediaFire.
   </Example>
   <Example id="G1008" name="SideCopy">
    SideCopy has used compromised domains to host its malicious payloads.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has staged malware on actor-controlled domains.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has uploaded backdoored Docker images to Docker Hub.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has hosted malicious payloads on Dropbox.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1608.002" name="Stage Capabilities: Upload Tool">
  Adversaries may upload tools to third-party or adversary controlled infrastructure to make it accessible during targeting. Tools can be open or closed source, free or commercial. Tools can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Adversaries may upload tools to support their operations, such as making a tool available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="C0010" name="C0010">
    For C0010, UNC3890 actors staged tools on their infrastructure to download directly onto a compromised system.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has hosted custom and open-source tools on compromised as well as Lazarus Group-controlled servers.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has staged tools, including gsecdump and WCE, on previously compromised websites.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1608.003" name="Stage Capabilities: Install Digital Certificate">
  Adversaries may install SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are files that can be installed on servers to enable secure communications between systems. Digital certificates include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate securely with its owner. Certificates can be uploaded to a server, then the server can be configured to use the certificate to enable encrypted communication with it.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1608.004" name="Stage Capabilities: Drive-by Target">
  Adversaries may prepare an operational environment to infect systems that visit a website over the normal course of browsing. Endpoint systems may be compromised through browsing to adversary controlled sites, as in Drive-by Compromise. In such cases, the user's web browser is typically targeted for exploitation (often not requiring any extra user interaction once landing on the site), but adversaries may also set up websites for non-exploitation behavior such as Application Access Token. Prior to Drive-by Compromise, adversaries must stage resources needed to deliver that exploit to users who browse to an adversary controlled site. Drive-by content can be staged on adversary controlled infrastructure that has been acquired (Acquire Infrastructure) or previously compromised (Compromise Infrastructure).
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0050" name="APT32">
    APT32 has stood up websites containing numerous articles and content scraped from the Internet to make them appear legitimate, but some of these pages include malicious JavaScript to profile the potential victim or infect them via a fake software update.
   </Example>
   <Example id="C0010" name="C0010">
    For C0010, the threat actors compromised the login page of a legitimate Israeli shipping company and likely established a watering hole that collected visitor information.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has compromised websites to redirect traffic and to host exploit kits.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has embedded malicious code into websites to screen a potential victim's IP address and then exploit their browser if they are of interest.
   </Example>
   <Example id="G0134" name="Transparent Tribe">
    Transparent Tribe has set up websites with malicious hyperlinks and iframes to infect targeted victims with Crimson, njRAT, and other malicious tools.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1608.005" name="Stage Capabilities: Link Target">
  Adversaries may put in place resources that are referenced by a link that can be used during targeting. An adversary may rely upon a user clicking a malicious link in order to divulge information (including credentials) or to gain execution, as in Malicious Link. Links can be used for spearphishing, such as sending an email accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. Prior to a phish for information (as in Spearphishing Link) or a phish to gain initial access to a system (as in Spearphishing Link), an adversary must set up the resources for a link target for the spearphishing link.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Examples>
   <Example id="G0122" name="Silent Librarian">
    Silent Librarian has cloned victim organization login pages and staged them for later use in credential harvesting campaigns. Silent Librarian has also made use of a variety of URL shorteners for these staged websites.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1608.006" name="Stage Capabilities: SEO Poisoning">
  Adversaries may poison mechanisms that influence search engine optimization (SEO) to further lure staged capabilities towards potential victims. Search engines typically display results to users based on purchased ads as well as the site’s ranking/score/reputation calculated by their web crawlers and algorithms.
  <Tactic>
   Resource Development
  </Tactic>
  <Platforms>
   PRE
  </Platforms>
  <Mitigations>
   <Mitigation id="M1056" name="Pre-compromise">
    This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0035" name="Internet Scan">
    Response Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1528" name="Steal Application Access Token">
  Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Azure AD, Containers, Google Workspace, Office 365, SaaS
  </Platforms>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals can steal users’ access tokens via phishing emails containing malicious links.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has used several malicious applications to steal user OAuth access tokens including applications masquerading as "Google Defender" "Google Email Protection," and "Google Scanner" for Gmail users. They also targeted Yahoo users with applications masquerading as "Delivery Service" and "McAfee Email Protection".
   </Example>
   <Example id="S0683" name="Peirates">
    Peirates gathers Kubernetes service account tokens using a variety of techniques.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Administrators should audit all cloud and container accounts to ensure that they are necessary and that the permissions granted to them are appropriate.  Additionally, administrators should perform an audit of all OAuth applications and the permissions they have been granted to access organizational data. This should be done extensively on all applications in order to establish a baseline, followed up on with periodic audits of new or updated applications. Suspicious applications should be investigated and removed.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    Administrators can block end-user consent to OAuth applications, disabling users from authorizing third-party apps through OAuth 2.0 and forcing administrative consent for all requests. They can also block end-user registration of applications by their users, to reduce risk. A Cloud Access Security Broker can also be used to ban applications.Azure offers a couple of enterprise policy settings in the Azure Management Portal that may help:"Users -&gt; User settings -&gt; App registrations: Users can register applications" can be set to "no" to prevent users from registering new applications. "Enterprise applications -&gt; User settings -&gt; Enterprise applications: Users can consent to apps accessing company data on their behalf" can be set to "no" to prevent users from consenting to allow third-party multi-tenant applications
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Enforce role-based access control to limit accounts to the least privileges they require. A Cloud Access Security Broker (CASB) can be used to set usage policies and manage user permissions on cloud applications to prevent access to application access tokens. In Kubernetes applications, set "automountServiceAccountToken: false" in the YAML specification of pods that do not require access to service account tokens.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Users need to be trained to not authorize third-party applications they don’t recognize. The user should pay particular attention to the redirect URL: if the URL is a misspelled or convoluted sequence of words related to an expected service or SaaS application, the website is likely trying to spoof a legitimate service. Users should also be cautious about the permissions they are granting to apps. For example, offline access and access to read emails should excite higher suspicions because adversaries can utilize SaaS APIs to discover credentials and other sensitive communications.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0002" name="User Account">
    User Account Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1649" name="Steal or Forge Authentication Certificates">
  Adversaries may steal or forge certificates used for authentication to access remote systems or resources. Digital certificates are often used to sign and encrypt messages and/or files. Certificates are also used as authentication material. For example, Azure AD device certificates and Active Directory Certificate Services (AD CS) certificates bind to an identity and can be used as credentials for domain accounts.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Azure AD, Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals can create and export various authentication certificates, including those associated with Azure AD joined/registered devices.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has abused misconfigured AD CS certificate templates to impersonate admin users and create additional authentication certificates.
   </Example>
   <Example id="S0002" name="Mimikatz">
    Mimikatz's CRYPTO module can create and export various types of authentication certificates.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1015" name="Active Directory Configuration">
    Ensure certificate authorities (CA) are properly secured, including treating CA servers (and other resources hosting CA certificates) as tier 0 assets. Harden abusable CA settings and attributes.For example, consider disabling the usage of AD CS certificate SANs within relevant authentication protocol settings to enforce strict user mappings and prevent certificates from authenticating as other identifies. Also consider enforcing CA Certificate Manager approval for the templates that include SAN as an issuance requirement.
   </Mitigation>
   <Mitigation id="M1047" name="Audit">
    Check and remediate unneeded existing authentication certificates as well as common abusable misconfigurations of CA settings and permissions, such as AD CS certificate enrollment permissions and published overly permissive certificate templates (which define available settings for created certificates). For example, available AD CS certificate templates can be checked via the Certificate Authority MMC snap-in (certsrv.msc). certutil.exe can also be used to examine various information within an AD CS CA database.
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Consider disabling old/dangerous authentication protocols (e.g. NTLM), as well as unnecessary certificate features, such as potentially vulnerable AD CS web and other enrollment server roles.
   </Mitigation>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Ensure certificates as well as associated private keys are appropriately secured. Consider utilizing additional hardware credential protections such as trusted platform modules (TPM) or hardware security modules (HSM). Enforce HTTPS and enable Extended Protection forAuthentication.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Credential Request | Active Directory Object Modification
   </Detection>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1558" name="Steal or Forge Kerberos Tickets">
  Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable Pass the Ticket. Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as "realms", there are three basic participants: client, service, and Key Distribution Center (KDC). Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <System_Requirements>
   Kerberos authentication enabled
  </System_Requirements>
  <Permissions_Required>
   User, root
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-652
  </CAPEC_ID>
  <Mitigations>
   <Mitigation id="M1015" name="Active Directory Configuration">
    For containing the impact of a previously generated golden ticket, reset the built-in KRBTGT account password twice, which will invalidate any existing golden tickets that have been created with the KRBTGT hash and other Kerberos tickets derived from it. For each domain, change the KRBTGT account password once, force replication, and then change the password a second time. Consider rotating the KRBTGT account password every 180 days.
   </Mitigation>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Ensure strong password length (ideally 25+ characters) and complexity for service accounts and that these passwords periodically expire.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Limit domain admin account permissions to domain controllers and limited servers. Delegate other admin functions to separate accounts.Limit service accounts to minimal required privileges, including membership in privileged groups such as Domain Administrators.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Credential Request
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1558.001" name="Steal or Forge Kerberos Tickets: Golden Ticket">
  Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0363" name="Empire">
    Empire can leverage its implementation of Mimikatz to obtain and use golden tickets.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has used Mimikatz to generate Kerberos golden tickets.
   </Example>
   <Example id="S0002" name="Mimikatz">
    Mimikatz's kerberos module can create golden tickets.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1015" name="Active Directory Configuration">
    For containing the impact of a previously generated golden ticket, reset the built-in KRBTGT account password twice, which will invalidate any existing golden tickets that have been created with the KRBTGT hash and other Kerberos tickets derived from it. For each domain, change the KRBTGT account password once, force replication, and then change the password a second time. Consider rotating the KRBTGT account password every 180 days.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Limit domain admin account permissions to domain controllers and limited servers. Delegate other admin functions to separate accounts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Credential Request
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1558.002" name="Steal or Forge Kerberos Tickets: Silver Ticket">
  Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals can be used to forge Kerberos tickets using the password hash of the AZUREADSSOACC account.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can leverage its implementation of Mimikatz to obtain and use silver tickets.
   </Example>
   <Example id="S0002" name="Mimikatz">
    Mimikatz's kerberos module can create silver tickets.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Ensure strong password length (ideally 25+ characters) and complexity for service accounts and that these passwords periodically expire.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Limit service accounts to minimal required privileges, including membership in privileged groups such as Domain Administrators.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1558.003" name="Steal or Forge Kerberos Tickets: Kerberoasting">
  Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to Brute Force.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <System_Requirements>
   Valid domain account or the ability to sniff traffic within a domain
  </System_Requirements>
  <CAPEC_ID>
   CAPEC-509
  </CAPEC_ID>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 obtained Ticket Granting Service (TGS) tickets for Active Directory Service Principle Names to crack offline.
   </Example>
   <Example id="S0363" name="Empire">
    Empire uses PowerSploit's Invoke-Kerberoast to request service tickets and return crackable ticket hashes.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has used Kerberoasting for credential access and to enable lateral movement.
   </Example>
   <Example id="S0357" name="Impacket">
    Impacket modules like GetUserSPNs can be used to get Service Principal Names (SPNs) for user accounts. The output is formatted to be compatible with cracking tools like John the Ripper and Hashcat.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used PowerSploit's Invoke-Kerberoast module to request encrypted service tickets and bruteforce the passwords of Windows service accounts offline.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit's Invoke-Kerberoast module can request service tickets and return crackable ticket hashes.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY contains a module to conduct Kerberoasting.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used Rubeus, MimiKatz Kerberos module, and the Invoke-Kerberoast cmdlet to steal AES hashes.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Ensure strong password length (ideally 25+ characters) and complexity for service accounts and that these passwords periodically expire.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Limit service accounts to minimal required privileges, including membership in privileged groups such as Domain Administrators.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Credential Request
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1558.004" name="Steal or Forge Kerberos Tickets: AS-REP Roasting">
  Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by Password Cracking Kerberos messages.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <System_Requirements>
   Valid domain account
  </System_Requirements>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Kerberos preauthentication is enabled by default. Older protocols might not support preauthentication therefore it is possible to have this setting disabled. Make sure that all accounts have preauthentication whenever possible and audit changes to setting. Windows tools such as PowerShell may be used to easily find which accounts have preauthentication disabled.
   </Mitigation>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Ensure strong password length (ideally 25+ characters) and complexity for service accounts and that these passwords periodically expire. Also consider using Group Managed Service Accounts or another third party product such as password vaulting.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Credential Request
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1539" name="Steal Web Session Cookie">
  An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Google Workspace, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 has stolen Chrome browser cookies by copying the Chrome profile directories of targeted users.
   </Example>
   <Example id="S0657" name="BLUELIGHT">
    BLUELIGHT can harvest cookies from Internet Explorer, Edge, Chrome, and Naver Whale browsers.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes has used a script that extracts the web session cookie and sends it to the C2 server.
   </Example>
   <Example id="S0492" name="CookieMiner">
    CookieMiner can steal Google Chrome and Apple Safari browser cookies from the victim’s machine.
   </Example>
   <Example id="S0568" name="EVILNUM">
    EVILNUM can harvest cookies and upload them to the C2 server.
   </Example>
   <Example id="G0120" name="Evilnum">
    Evilnum can steal cookies and session information from browsers.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can steal the victim's cookies to use for duplicating the active session from another device.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot has the ability to capture web session cookies.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to steal web session cookies from Internet Explorer, Netscape Navigator, FireFox and RealNetworks applications.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET uses scp to access the ~/Library/Cookies/Cookies.binarycookies file.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    A physical second factor key that uses the target login domain as part of the negotiation protocol will prevent session cookie theft through proxy methods.
   </Mitigation>
   <Mitigation id="M1054" name="Software Configuration">
    Configure browsers or tasks to regularly delete persistent cookies.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Train users to identify aspects of phishing attempts where they're asked to enter credentials into a site that has the incorrect domain for the application they are logging into.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1553" name="Subvert Trust Controls">
  Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Application Control, Autoruns Analysis, Digital Certificate Validation, User Mode Signature Validation, Windows User Account Control
  </Defense_Bypassed>
  <Examples>
   <Example id="G0001" name="Axiom">
    Axiom has used digital certificates to deliver malware.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    System settings can prevent applications from running that haven't been downloaded through the Apple Store (or other legitimate repositories) which can help mitigate some of these issues. Also enable application control solutions such as AppLocker and/or Device Guard to block the loading of malicious content.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    Windows Group Policy can be used to manage root certificates and the Flags value of HKLM\SOFTWARE\Policies\Microsoft\SystemCertificates\Root\ProtectedRoots can be set to 1 to prevent non-administrator users from making further root installations into their own HKCU certificate store.
   </Mitigation>
   <Mitigation id="M1024" name="Restrict Registry Permissions">
    Ensure proper permissions are set for Registry hives to prevent users from modifying keys related to SIP and trust provider components. Components may still be able to be hijacked to suitable functions already present on disk if malicious modifications to Registry keys are not prevented.
   </Mitigation>
   <Mitigation id="M1054" name="Software Configuration">
    HTTP Public Key Pinning (HPKP) is one method to mitigate potential Adversary-in-the-Middle situations where and adversary uses a mis-issued or fraudulent certificate to intercept encrypted communications by enforcing use of an expected certificate.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Metadata | File Modification
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Creation | Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1553.001" name="Subvert Trust Controls: Gatekeeper Bypass">
  Adversaries may modify file attributes and subvert Gatekeeper functionality to evade user prompts and execute untrusted programs. Gatekeeper is a set of technologies that act as layer of Apple’s security model to ensure only trusted applications are executed on a host. Gatekeeper was built on top of File Quarantine in Snow Leopard (10.6, 2009) and has grown to include Code Signing, security policy compliance, Notarization, and more. Gatekeeper also treats applications running for the first time differently than reopened applications.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Application Control
  </Defense_Bypassed>
  <Examples>
   <Example id="S0369" name="CoinTicker">
    CoinTicker downloads the EggShell mach-o binary using curl, which does not set the quarantine flag.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa has removed the com.apple.quarantineattribute from the dropped file, $TMPDIR/airportpaird.
   </Example>
   <Example id="S0402" name="OSX/Shlayer">
    If running with elevated privileges, OSX/Shlayer has used the spctl command to disable Gatekeeper protection for a downloaded file. OSX/Shlayer can also leverage system links pointing to bash scripts in the downloaded DMG file to bypass Gatekeeper, a flaw patched in macOS 11.3 and later versions. OSX/Shlayer has been Notarized by Apple, resulting in successful passing of additional Gatekeeper checks.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    OSX_OCEANLOTUS.D uses the command xattr -d com.apple.quarantine to remove the quarantine file attribute used by Gatekeeper.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET has dropped a malicious applet into an app's .../Contents/MacOS/ folder of a previously launched app to bypass Gatekeeper's security checks on first launch apps (prior to macOS 13).
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    System settings can prevent applications from running that haven't been downloaded through the Apple Store which can help mitigate some of these issues.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Metadata | File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1553.002" name="Subvert Trust Controls: Code Signing">
  Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  Unlike Invalid Code Signature, this activity will result in a valid signature.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Windows User Account Control
  </Defense_Bypassed>
  <Examples>
   <Example id="S0504" name="Anchor">
    Anchor has been signed with valid certificates to evade detection by security tools.
   </Example>
   <Example id="S0584" name="AppleJeus">
    AppleJeus has used a valid digital signature from Sectigo to appear legitimate.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 was able to get SUNBURST signed by SolarWinds code signing certificates by injecting the malware into the SolarWinds Orion software lifecycle.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 leveraged code-signing certificates to sign malware when targeting both gaming and non-gaming organizations.
   </Example>
   <Example id="S0475" name="BackConfig">
    BackConfig has been signed with self signed digital certificates mimicking a legitimate software company.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook was signed with valid Certum certificates.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar has been signed with fake certificates including those appearing to be from VB CORPORATE PTY. LTD.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has been signed with code-signing certificates such as CodeRipper.
   </Example>
   <Example id="S0415" name="BOOSTWRITE">
    BOOSTWRITE has been signed by a valid CA.
   </Example>
   <Example id="C0015" name="C0015">
    For C0015, the threat actors used DLL files that had invalid certificates.
   </Example>
   <Example id="S0144" name="ChChes">
    ChChes samples were digitally signed with a certificate originally used by Hacking Team that was later leaked and subsequently revoked.
   </Example>
   <Example id="S0611" name="Clop">
    Clop can use code signing to evade detection.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can use self signed Java applets to execute signed applet attacks.
   </Example>
   <Example id="G0052" name="CopyKittens">
    CopyKittens digitally signed an executable with a stolen certificate from legitimate company AI Squared.
   </Example>
   <Example id="S0527" name="CSPY Downloader">
    CSPY Downloader has come signed with revoked certificates.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel has used code-signing certificates on its malware that are either forged due to weak keys or stolen. Darkhotel has also stolen certificates and signed backdoors and downloaders with them.
   </Example>
   <Example id="S0187" name="Daserf">
    Some Daserf samples were signed with a stolen digital certificate.
   </Example>
   <Example id="S0377" name="Ebury">
    Ebury has installed a self-signed RPM package mimicking the original system package on RPM based systems.
   </Example>
   <Example id="S0624" name="Ecipekac">
    Ecipekac has used a valid, legitimate digital signature to evade detection.
   </Example>
   <Example id="G1003" name="Ember Bear">
    Ember Bear has used stolen certificates from Electrum Technologies GmbH to sign payloads.
   </Example>
   <Example id="S0091" name="Epic">
    Turla has used valid digital certificates from Sysprint AG to sign its Epic dropper.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used Comodo code-signing certificates.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has signed Carbanak payloads with legally purchased code signing certificates. FIN7 has also digitally signed their phishing documents, backdoors and other staging tools to bypass security controls.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM has used stolen certificates to sign its tools including those from Whizzimo LLC.
   </Example>
   <Example id="S0168" name="Gazer">
    Gazer versions are signed with various valid certificates; one was likely faked and issued by Comodo for "Solid Loop Ltd," and another was issued for "Ultimate Computer Support Ltd."
   </Example>
   <Example id="S0342" name="GreyEnergy">
    GreyEnergy digitally signs the malware with a code-signing certificate.
   </Example>
   <Example id="S0170" name="Helminth">
    Helminth samples have been signed with legitimate, compromised code signing certificates owned by software company AI Squared.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    The HermeticWiper executable has been signed with a legitimate certificate issued to Hermetica Digital Ltd.
   </Example>
   <Example id="S0698" name="HermeticWizard">
    HermeticWizard has been signed by valid certificates assigned to Hermetica Digital.
   </Example>
   <Example id="S0163" name="Janicab">
    Janicab used a valid AppleDeveloperID to sign the code to get past security restrictions.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has signed files with the name EGIS CO,. Ltd..
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has digitally signed malware and utilities to evade detection.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has used stolen code signing certificates to sign malware.
   </Example>
   <Example id="S0372" name="LockerGoga">
    LockerGoga has been signed with stolen certificates in order to make it look more legitimate.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has resized and added data to the certificate table to enable the signing of modified files with legitimate signatures.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has digitally signed executables using AVAST Software certificates.
   </Example>
   <Example id="G0021" name="Molerats">
    Molerats has used forged Microsoft code-signing certificates on malware.
   </Example>
   <Example id="S0284" name="More_eggs">
    More_eggs has used a signed binary shellcode loader and a signed Dynamic Link Library (DLL) to create a reverse shell.
   </Example>
   <Example id="G1009" name="Moses Staff">
    Moses Staff has used signed drivers from an open source tool called DiskCryptor to evade detection.
   </Example>
   <Example id="S0210" name="Nerex">
    Nerex drops a signed Microsoft DLL to disk.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, the threat actors deployed the MaoCheng dropper with a stolen Adobe Systems digital signature.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork has signed malware with self-signed certificates from fictitious and spoofed legitimate software companies.
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon, its installer, and tools are signed with stolen code-signing certificates.
   </Example>
   <Example id="G0056" name="PROMETHIUM">
    PROMETHIUM has signed code with self-signed certificates.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can use signed loaders to evade detection.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    A QuasarRAT .dll file is digitally signed by a certificate from AirVPN.
   </Example>
   <Example id="S0148" name="RTM">
    RTM samples have been signed with a code-signing certificates.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has used a valid certificate to sign their primary loader Silence.Downloader (aka TrueBot).
   </Example>
   <Example id="S0646" name="SpicyOmelette">
    SpicyOmelette has been signed with valid digital certificates.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity has been signed with self-signed certificates.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet used a digitally signed driver with a compromised Realtek certificate.
   </Example>
   <Example id="G0039" name="Suckfly">
    Suckfly has used stolen certificates to sign its malware.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST was digitally signed by SolarWinds from March - May 2020.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has signed payloads with code signing certificates from Thawte and Sectigo.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot has come with a signed downloader component.
   </Example>
   <Example id="G0044" name="Winnti Group">
    Winnti Group used stolen certificates to sign its malware.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used Digicert code-signing certificates for some of its malware.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0022" name="File">
    File Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1553.003" name="Subvert Trust Controls: SIP and Trust Provider Hijacking">
  Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Defense_Bypassed>
   Application Control, Autoruns Analysis, Digital Certificate Validation, User Mode Signature Validation
  </Defense_Bypassed>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    Enable application control solutions such as AppLocker and/or Device Guard to block the loading of malicious SIP DLLs.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Restrict storage and execution of SIP DLLs to protected directories, such as C:\Windows, rather than user directories.
   </Mitigation>
   <Mitigation id="M1024" name="Restrict Registry Permissions">
    Ensure proper permissions are set for Registry hives to prevent users from modifying keys related to SIP and trust provider components. Components may still be able to be hijacked to suitable functions already present on disk if malicious modifications to Registry keys are not prevented.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1553.004" name="Subvert Trust Controls: Install Root Certificate">
  Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Defense_Bypassed>
   Digital Certificate Validation
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-479
  </CAPEC_ID>
  <Examples>
   <Example id="S0160" name="certutil">
    certutil can be used to install browser root certificates as a precursor to performing Adversary-in-the-Middle between connections to banking websites. Example command: certutil -addstore -f -user ROOT ProgramData\cert512121.der.
   </Example>
   <Example id="S0281" name="Dok">
    Dok installs a root certificate to aid in Adversary-in-the-Middle actions using the command add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /tmp/filename.
   </Example>
   <Example id="S0009" name="Hikit">
    Hikit uses certmgr.exe -add GlobalSign.cer -c -s -r localMachine Root and certmgr.exe -add GlobalSign.cer -c -s -r localMachineTrustedPublisher to install a self-generated certificate to the local trust store as a root CA and Trusted Publisher.
   </Example>
   <Example id="S0148" name="RTM">
    RTM can add a certificate to the Windows store.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1028" name="Operating System Configuration">
    Windows Group Policy can be used to manage root certificates and the Flags value of HKLM\SOFTWARE\Policies\Microsoft\SystemCertificates\Root\ProtectedRoots can be set to 1 to prevent non-administrator users from making further root installations into their own HKCU certificate store.
   </Mitigation>
   <Mitigation id="M1054" name="Software Configuration">
    HTTP Public Key Pinning (HPKP) is one method to mitigate potential Adversary-in-the-Middle situations where and adversary uses a mis-issued or fraudulent certificate to intercept encrypted communications by enforcing use of an expected certificate.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Creation | Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1553.005" name="Subvert Trust Controls: Mark-of-the-Web Bypass">
  Adversaries may abuse specific file formats to subvert Mark-of-the-Web (MOTW) controls. In Windows, when files are downloaded from the Internet, they are tagged with a hidden NTFS Alternate Data Stream (ADS) named Zone.Identifier with a specific value known as the MOTW.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Application Control
  </Defense_Bypassed>
  <Examples>
   <Example id="S1025" name="Amadey">
    Amadey has modified the :Zone.Identifier in the ADS area to zero.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has embedded ISO images and VHDX files in HTML to evade Mark-of-the-Web.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used .iso files to deploy malicious .lnk files.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Consider disabling auto-mounting of disk image files (i.e., .iso, .img, .vhd, and .vhdx). This can be achieved by modifying the Registry values related to the Windows Explorer file associations in order to disable the automatic Explorer "Mount and Burn" dialog for these file extensions. Note: this will not deactivate the mount functionality itself.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Consider blocking container file types at web and/or email gateways. Consider unregistering container file extensions in Windows File Explorer.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation | File Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1553.006" name="Subvert Trust Controls: Code Signing Policy Modification">
  Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Application Control, Digital Certificate Validation, User Mode Signature Validation
  </Defense_Bypassed>
  <Examples>
   <Example id="G0087" name="APT39">
    APT39 has used malware to turn off the RequireSigned feature which ensures only signed DLLs can be run on Windows.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    BlackEnergy has enabled the TESTSIGNING boot configuration option to facilitate loading of a driver component.
   </Example>
   <Example id="S0009" name="Hikit">
    Hikit has attempted to disable driver signing verification by tampering with several Registry keys prior to the loading of a rootkit driver component.
   </Example>
   <Example id="S0664" name="Pandora">
    Pandora can use CVE-2017-15303 to disable Windows Driver Signature Enforcement (DSE) protection and load its driver.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has modified variables in kernel memory to turn off Driver Signature Enforcement after exploiting vulnerabilities that obtained kernel mode privileges.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1046" name="Boot Integrity">
    Use of Secure Boot may prevent some implementations of modification to code signing policies.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Limit the usage of local administrator and domain administrator accounts to be used for day-to-day operations that may expose them to potential adversaries.
   </Mitigation>
   <Mitigation id="M1024" name="Restrict Registry Permissions">
    Ensure proper permissions are set for the Registry to prevent users from modifying keys related to code signing policies.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1195" name="Supply Chain Compromise">
  Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.
  <Tactic>
   Initial Access
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-437, CAPEC-438, CAPEC-439
  </CAPEC_ID>
  <Mitigations>
   <Mitigation id="M1051" name="Update Software">
    A patch management process should be implemented to check unused dependencies, unmaintained and/or previously vulnerable dependencies, unnecessary features, components, files, and documentation.
   </Mitigation>
   <Mitigation id="M1016" name="Vulnerability Scanning">
    Continuous monitoring of vulnerability sources and the use of automatic and manual code review tools should also be implemented as well.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Metadata
   </Detection>
   <Detection id="DS0013" name="Sensor Health">
    Host Status
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1195.001" name="Supply Chain Compromise: Compromise Software Dependencies and Development Tools">
  Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.
  <Tactic>
   Initial Access
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0658" name="XCSSET">
    XCSSET adds malicious code to a host's Xcode projects by enumerating CocoaPods target_integrator.rb files under the /Library/Ruby/Gems folder or enumerates all .xcodeproj folders under a given directory. XCSSET then downloads a script and Mach-O file into the Xcode project folder.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1051" name="Update Software">
    A patch management process should be implemented to check unused dependencies, unmaintained and/or previously vulnerable dependencies, unnecessary features, components, files, and documentation.
   </Mitigation>
   <Mitigation id="M1016" name="Vulnerability Scanning">
    Continuous monitoring of vulnerability sources and the use of automatic and manual code review tools should also be implemented as well.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1195.002" name="Supply Chain Compromise: Compromise Software Supply Chain">
  Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.
  <Tactic>
   Initial Access
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 gained initial network access to some victims via a trojanized update of SolarWinds Orion software.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 gained access to production environments where they could inject malicious code into legitimate, signed files and widely distribute them to end users.
   </Example>
   <Example id="S0222" name="CCBkdr">
    CCBkdr was added to a legitimate, signed version 5.33 of the CCleaner software and distributed on CCleaner's distribution site.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has compromised legitimate web browser updates to deliver a backdoor.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has placed trojanized installers for control system software on legitimate vendor app stores.
   </Example>
   <Example id="G0115" name="GOLD SOUTHFIELD">
    GOLD SOUTHFIELD has distributed ransomware by backdooring software installers via a strategic web compromise of the site hosting Italian WinRAR.
   </Example>
   <Example id="S0493" name="GoldenSpy">
    GoldenSpy has been packaged with a legitimate tax preparation software.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has distributed NotPetya by compromising the legitimate Ukrainian accounting software M.E.Doc and replacing a legitimate software update with a malicious one.
   </Example>
   <Example id="S0562" name="SUNSPOT">
    SUNSPOT malware was designed and used to insert SUNBURST into software builds of the SolarWinds Orion IT management product.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has compromised the Able Desktop installer to gain access to victim's environments.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1051" name="Update Software">
    A patch management process should be implemented to check unused applications, unmaintained and/or previously vulnerable software, unnecessary features, components, files, and documentation.
   </Mitigation>
   <Mitigation id="M1016" name="Vulnerability Scanning">
    Continuous monitoring of vulnerability sources and the use of automatic and manual code review tools should also be implemented as well.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1195.003" name="Supply Chain Compromise: Compromise Hardware Supply Chain">
  Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.
  <Tactic>
   Initial Access
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Mitigations>
   <Mitigation id="M1046" name="Boot Integrity">
    Use Trusted Platform Module technology and a secure or trusted boot process to prevent system integrity from being compromised. Check the integrity of the existing BIOS or EFI to determine if it is vulnerable to modification.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0013" name="Sensor Health">
    Host Status
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1218" name="System Binary Proxy Execution">
  Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system. Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Application control, Digital Certificate Validation
  </Defense_Bypassed>
  <Examples>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group lnk files used for persistence have abused the Windows Update Client (wuauclt.exe) to execute a malicious DLL.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Many native binaries may not be necessary within a given environment.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Consider using application control to prevent execution of binaries that are susceptible to abuse and not required for a given system or network.
   </Mitigation>
   <Mitigation id="M1050" name="Exploit Protection">
    Microsoft's Enhanced Mitigation Experience Toolkit (EMET) Attack Surface Reduction (ASR) feature can be used to block methods of using using trusted binaries to bypass application control.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Restrict execution of particularly vulnerable binaries to privileged accounts or groups that need to use it to lessen the opportunities for malicious usage.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1218.001" name="System Binary Proxy Execution: Compiled HTML File">
  Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Defense_Bypassed>
   Application control, Digital Certificate Validation
  </Defense_Bypassed>
  <Examples>
   <Example id="G0082" name="APT38">
    APT38 has used CHM files to move concealed payloads.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used compiled HTML (.chm) files for targeting.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth uses ActiveX objects for file execution and manipulation.
   </Example>
   <Example id="G0070" name="Dark Caracal">
    Dark Caracal leveraged a compiled HTML file that contained a command to download and run an executable.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used a CHM payload to load and execute another malicious file once delivered to a victim.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has weaponized CHM files in their phishing campaigns.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    Consider using application control to prevent execution of hh.exe if it is not required for a given system or network to prevent potential misuse by adversaries.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    Consider blocking download/transfer and execution of potentially uncommon file types known to be used in adversary campaigns, such as CHM files
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1218.002" name="System Binary Proxy Execution: Control Panel">
  Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User
  </Permissions_Required>
  <Defense_Bypassed>
   Application control
  </Defense_Bypassed>
  <Examples>
   <Example id="G1003" name="Ember Bear">
    Ember Bear has used control panel files (CPL), delivered via e-mail, for execution.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can register itself for execution and persistence via the Control Panel.
   </Example>
   <Example id="S0172" name="Reaver">
    Reaver drops and executes a malicious CPL file as its payload.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    Identify and block potentially malicious and unknown .cpl files by using application control
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Restrict storage and execution of Control Panel items to protected directories, such as C:\Windows, rather than user directories.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1218.003" name="System Binary Proxy Execution: CMSTP">
  Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles.  CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Defense_Bypassed>
   Anti-virus, Application control
  </Defense_Bypassed>
  <Examples>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has used the command cmstp.exe /s /ns C:\Users\ADMINI~W\AppData\Local\Temp\XKNqbpzl.txt to bypass AppLocker and launch a malicious script.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used CMSTP.exe and a malicious INF to execute its POWERSTATS payload.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    CMSTP.exe may not be necessary within a given environment (unless using it for VPN connection installation).
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Consider using application control configured to block execution of CMSTP.exe if it is not required for a given system or network to prevent potential misuse by adversaries.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1218.004" name="System Binary Proxy Execution: InstallUtil">
  Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries.  The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system: C:\Windows\Microsoft.NET\Framework\v\InstallUtil.exe and C:\Windows\Microsoft.NET\Framework64\v\InstallUtil.exe.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Defense_Bypassed>
   Application control, Digital Certificate Validation
  </Defense_Bypassed>
  <Examples>
   <Example id="S0631" name="Chaes">
    Chaes has used Installutill to download content.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used InstallUtil.exe to execute malicious software.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has used InstallUtil.exe to execute a malicious Beacon stager.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot had used InstallUtil.exe to download and deploy executables.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate has used InstallUtil.exe as part of its process to disable Windows Defender.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    InstallUtil may not be necessary within a given environment.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Use application control configured to block execution of InstallUtil.exe if it is not required for a given system or network to prevent potential misuse by adversaries.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1218.005" name="System Binary Proxy Execution: Mshta">
  Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Defense_Bypassed>
   Application control, Digital Certificate Validation
  </Defense_Bypassed>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 has use mshta to execute malicious scripts on a compromised host.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has used mshta.exe for code execution.
   </Example>
   <Example id="S0414" name="BabyShark">
    BabyShark has used mshta.exe to download and execute applications from a remote server.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors used mshta to execute DLLs.
   </Example>
   <Example id="G0142" name="Confucius">
    Confucius has used mshta.exe to execute malicious VBScript.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has used mshta.exe to load an HTA script within a malicious .LNK file.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has used mshta.exe to execute VBScript to execute malicious code on victim systems.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has used mshta.exe to execute malicious HTA files.
   </Example>
   <Example id="G0100" name="Inception">
    Inception has used malicious HTA files to drop and execute malware.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used mshta.exe to run malicious scripts on the system.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can use mshta to serve additional payloads and to help schedule tasks for persistence.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used mshta.exe to execute HTML pages downloaded by initial access documents.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter has used mshta.exe to execute Koadic stagers.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has used mshta.exe to execute a HTA payload.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used mshta.exe to execute its POWERSTATS payload and to pass a PowerShell one-liner for execution.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has used mshta.exe to launch collection scripts.
   </Example>
   <Example id="S0228" name="NanHaiShu">
    NanHaiShu uses mshta.exe to load its program and files.
   </Example>
   <Example id="C0016" name="Operation Dust Storm">
    During Operation Dust Storm, the threat actors executed JavaScript code via mshta.exe.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS can use Mshta.exe to execute additional payloads on compromised hosts.
   </Example>
   <Example id="S0147" name="Pteranodon">
    Pteranodon can use mshta.exe to execute an HTA file hosted on a remote server.
   </Example>
   <Example id="S0379" name="Revenge RAT">
    Revenge RAT uses mshta.exe to run malicious scripts on the system.
   </Example>
   <Example id="S0589" name="Sibot">
    Sibot has been executed via MSHTA application.
   </Example>
   <Example id="G1008" name="SideCopy">
    SideCopy has utilized mshta.exe to execute a malicious hta file.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has used mshta.exe to execute malicious payloads.
   </Example>
   <Example id="G0127" name="TA551">
    TA551 has used mshta.exe to execute malicious payloads.
   </Example>
   <Example id="S0341" name="Xbash">
    Xbash can use mshta for executing scripts.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Mshta.exe may not be necessary within a given environment since its functionality is tied to older versions of Internet Explorer that have reached end of life.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Use application control configured to block execution of mshta.exe if it is not required for a given system or network to prevent potential misuse by adversaries. For example, in Windows 10 and Windows Server 2016 and above, Windows Defender Application Control (WDAC) policy rules may be applied to block the mshta.exe application and to prevent abuse.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1218.007" name="System Binary Proxy Execution: Msiexec">
  Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). The Msiexec.exe binary may also be digitally signed by Microsoft.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Defense_Bypassed>
   Application control, Digital Certificate Validation
  </Defense_Bypassed>
  <Examples>
   <Example id="S0584" name="AppleJeus">
    AppleJeus has been installed via MSI installer.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes has used .MSI files as an initial way to start the infection chain.
   </Example>
   <Example id="S0611" name="Clop">
    Clop can use msiexec.exe to disable security tools on the system.
   </Example>
   <Example id="S0038" name="Duqu">
    Duqu has used msiexec to execute malicious Windows Installer packages. Additionally, a PROPERTY=VALUE pair containing a 56-bit encryption key has been used to decrypt the main payload from the installer packages.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy has been installed via msiexec.exe.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can use MSI files to execute DLLs.
   </Example>
   <Example id="S0483" name="IcedID">
    IcedID can inject itself into a suspended msiexec.exe process to send beacons to C2 while appearing as a normal msi application.
   </Example>
   <Example id="S0528" name="Javali">
    Javali has used the MSI installer to download and execute malicious payloads.
   </Example>
   <Example id="S0451" name="LoudMiner">
    LoudMiner used an MSI installer to install the virtualization software.
   </Example>
   <Example id="G0095" name="Machete">
    Machete has used msiexec to install the Machete malware.
   </Example>
   <Example id="S0449" name="Maze">
    Maze has delivered components for its ransomware attacks using MSI files, some of which have been executed from the command-line using msiexec.
   </Example>
   <Example id="S0530" name="Melcoz">
    Melcoz can use MSI files with embedded VBScript for execution.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has used MsiExec.exe to automatically execute files.
   </Example>
   <Example id="G0021" name="Molerats">
    Molerats has used msiexec.exe to execute an MSI payload.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can use MSIExec to spawn multiple cmd.exe processes.
   </Example>
   <Example id="S0481" name="Ragnar Locker">
    Ragnar Locker has been delivered as an unsigned MSI package that was executed with msiexec.exe.
   </Example>
   <Example id="G0075" name="Rancor">
    Rancor has used msiexec to download and execute malicious installer files over HTTP.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession has the ability to execute inside the msiexec.exe process.
   </Example>
   <Example id="S0592" name="RemoteUtilities">
    RemoteUtilities can use Msiexec to install a service.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used msiexec to download and execute malicious Windows Installer files.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has used the msiexec.exe command-line utility to download and execute malicious MSI files.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Consider disabling the AlwaysInstallElevated policy to prevent elevated execution of Windows Installer packages.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Restrict execution of Msiexec.exe to privileged accounts or groups that need to use it to lessen the opportunities for malicious usage.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1218.008" name="System Binary Proxy Execution: Odbcconf">
  Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names. The Odbcconf.exe binary may be digitally signed by Microsoft.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Defense_Bypassed>
   Application control, Digital Certificate Validation
  </Defense_Bypassed>
  <Examples>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can use odbcconf.exe to run DLLs on targeted hosts.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has used odbcconf to proxy the execution of malicious DLL files.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Odbcconf.exe may not be necessary within a given environment.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Use application control configured to block execution of Odbcconf.exe if it is not required for a given system or network to prevent potential misuse by adversaries.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1218.009" name="System Binary Proxy Execution: Regsvcs/Regasm">
  Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are binaries that may be digitally signed by Microsoft.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Defense_Bypassed>
   Application control, Digital Certificate Validation
  </Defense_Bypassed>
  <Examples>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla has dropped RegAsm.exe onto systems for performing malicious activity.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Regsvcs and Regasm may not be necessary within a given environment.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Block execution of Regsvcs.exe and Regasm.exe if they are not required for a given system or network to prevent potential misuse by adversaries.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1218.010" name="System Binary Proxy Execution: Regsvr32">
  Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Defense_Bypassed>
   Anti-virus, Application control, Digital Certificate Validation
  </Defense_Bypassed>
  <Examples>
   <Example id="S0622" name="AppleSeed">
    AppleSeed can call regsvr32.exe for execution.
   </Example>
   <Example id="G0073" name="APT19">
    APT19 used Regsvr32 to bypass application control techniques.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 created a Scheduled Task/Job that used regsvr32.exe to execute a COM scriptlet that dynamically downloaded a backdoor and injected it into memory. The group has also used regsvr32 to run their backdoor.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth can be loaded through regsvr32.exe.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has executed custom-compiled XMRIG miner DLLs using regsvr32.exe.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors employed code that used regsvr32 for execution.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has used regsvr32.exe to execute scripts.
   </Example>
   <Example id="G0009" name="Deep Panda">
    Deep Panda has used regsvr32.exe to execute a server variant of Derusbi in victim networks.
   </Example>
   <Example id="S0021" name="Derusbi">
    Derusbi variants have been seen that use Registry persistence to proxy execution through regsvr32.exe.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor has used regsvr32.exe to execute malicious DLLs.
   </Example>
   <Example id="S0568" name="EVILNUM">
    EVILNUM can run a remote scriptlet that drops a file and executes it via regsvr32.exe.
   </Example>
   <Example id="S0698" name="HermeticWizard">
    HermeticWizard has used regsvr32.exe /s /i to execute malicious payloads.
   </Example>
   <Example id="S0087" name="Hi-Zor">
    Hi-Zor executes using regsvr32.exe called from the Registry Run Keys / Startup Folder persistence mechanism.
   </Example>
   <Example id="G0100" name="Inception">
    Inception has ensured persistence at system boot by setting the value regsvr32 %path%\ctfmonrn.dll /s.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has executed malware with regsvr32s.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can use Regsvr32 to execute additional payloads.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used rgsvr32 to execute custom malware.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has used regsvr32 for execution.
   </Example>
   <Example id="S0284" name="More_eggs">
    More_eggs has used regsvr32.exe to execute the malicious DLL.
   </Example>
   <Example id="S1047" name="Mori">
    Mori can use regsvr32.exe for DLL execution.
   </Example>
   <Example id="S0229" name="Orz">
    Some Orz versions have an embedded DLL known as MockDll that uses Process Hollowing and regsvr32 to execute another payload.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can use Regsvr32 to execute malicious DLLs.
   </Example>
   <Example id="S0481" name="Ragnar Locker">
    Ragnar Locker has used regsvr32.exe to execute components of VirtualBox.
   </Example>
   <Example id="S0270" name="RogueRobin">
    RogueRobin uses regsvr32.exe to run a .sct file for execution.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has used regsvr32 to execute scripts.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has been executed using regsvr32.exe.
   </Example>
   <Example id="G0127" name="TA551">
    TA551 has used regsvr32.exe to load malicious DLLs.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has used regsvr32.exe to launch malicious DLLs.
   </Example>
   <Example id="G0090" name="WIRTE">
    WIRTE has used regsvr32.exe to trigger the execution of a malicious script.
   </Example>
   <Example id="S0341" name="Xbash">
    Xbash can use regsvr32 for executing scripts.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1050" name="Exploit Protection">
    Microsoft's Enhanced Mitigation Experience Toolkit (EMET) Attack Surface Reduction (ASR) feature can be used to block regsvr32.exe from being used to bypass application control.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1218.011" name="System Binary Proxy Execution: Rundll32">
  Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: rundll32.exe {DLLname, DLLfunction}).
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Application control, Digital Certificate Validation
  </Defense_Bypassed>
  <Examples>
   <Example id="S0045" name="ADVSTORESHELL">
    ADVSTORESHELL has used rundll32.exe in a Registry value to establish persistence.
   </Example>
   <Example id="G0073" name="APT19">
    APT19 configured its payload to inject into the rundll32.exe.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 executed CHOPSTICK by using rundll32 commands such as rundll32.exe "C:\Windows\twain_64.dll". APT28 also executed a .dll for a first stage dropper using rundll32.exe. An APT28 loader Trojan saved a batch script that uses rundll32 to execute a DLL payload.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used Rundll32.exe to execute payloads.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has a tool that can run DLLs.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 malware has used rundll32.exe to execute an initial infection process.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has used rundll32.exe to execute binaries, scripts, and Control Panel Item files and to execute code via proxy to avoid triggering security tools.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 has used rundll32.exe to execute a loader.
   </Example>
   <Example id="S0438" name="Attor">
    Attor's installer plugin can schedule rundll32.exe to load the dispatcher.
   </Example>
   <Example id="S0093" name="Backdoor.Oldrea">
    Backdoor.Oldrea can use rundll32 for execution on compromised hosts.
   </Example>
   <Example id="S0606" name="Bad Rabbit">
    Bad Rabbit has used rundll32 to launch a malicious DLL as C:Windowsinfpub.dat.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has used rundll32.exe to execute as part of the Registry Run key it adds: HKEY_CURRENT_USER \Software\Microsoft\Windows\CurrentVersion\Run\"vert" = "rundll32.exe c:\windows\temp\pvcu.dll , Qszdez".
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has used Rundll32 to load a malicious DLL.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has executed custom-compiled XMRIG miner DLLs using rundll32.exe.
   </Example>
   <Example id="S0635" name="BoomBox">
    BoomBox can use RunDLL32 for execution.
   </Example>
   <Example id="S0204" name="Briba">
    Briba uses rundll32 within Registry Run Keys / Startup Folder entries to execute malicious DLLs.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee has used rundll32 for execution of the loader component.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors loaded DLLs via rundll32 using the svchost process.
   </Example>
   <Example id="G0008" name="Carbanak">
    Carbanak installs VNC server software that executes through rundll32.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can use rundll32.exe to load DLL from the command line.
   </Example>
   <Example id="S0244" name="Comnie">
    Comnie uses Rundll32 to load a malicious DLL.
   </Example>
   <Example id="G0052" name="CopyKittens">
    CopyKittens uses rundll32 to load various tools on victims, including a lateral movement tool named Vminst, Cobalt Strike, and shellcode.
   </Example>
   <Example id="S0137" name="CORESHELL">
    CORESHELL is installed via execution of rundll32 with an export named "init" or "InitW."
   </Example>
   <Example id="S0046" name="CozyCar">
    The CozyCar dropper copies the system file rundll32.exe to the install location for the malware, then uses the copy of rundll32.exe to load and execute the main CozyCar component.
   </Example>
   <Example id="S0255" name="DDKONG">
    DDKONG uses Rundll32 to ensure only a single instance of itself is running at once.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor has used rundll32 during execution.
   </Example>
   <Example id="S0081" name="Elise">
    After copying itself to a DLL file, a variant of Elise calls the DLL file using rundll32.exe.
   </Example>
   <Example id="S0082" name="Emissary">
    Variants of Emissary have used rundll32.exe in Registry values added to establish persistence.
   </Example>
   <Example id="S0634" name="EnvyScout">
    EnvyScout has the ability to proxy execution of malicious files with Rundll32.
   </Example>
   <Example id="S0568" name="EVILNUM">
    EVILNUM can execute commands and scripts through rundll32.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke can execute via rundll32.
   </Example>
   <Example id="S0267" name="FELIXROOT">
    FELIXROOT uses Rundll32 for executing the dropper program.
   </Example>
   <Example id="S0143" name="Flame">
    Rundll32.exe is used as a way of executing Flame at the command-line.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy has used rundll32 for execution.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can use rundll32 for execution of its components.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group malware has used rundll32 to launch additional malicious components.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    A gh0st RAT variant has used rundll32 for execution.
   </Example>
   <Example id="S0342" name="GreyEnergy">
    GreyEnergy uses PsExec locally in order to execute rundll32.exe at the highest privileges (NTAUTHORITY\SYSTEM).
   </Example>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has used rundll32 to load malicious DLLs.
   </Example>
   <Example id="S0698" name="HermeticWizard">
    HermeticWizard has the ability to create a new process using rundll32.
   </Example>
   <Example id="S1027" name="Heyoka Backdoor">
    Heyoka Backdoor can use rundll32.exe to gain execution.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole has used rundll32.exe for execution.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    JHUHUGIT is executed using rundll32.exe.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used rundll32.exe to execute malicious scripts and malware on a victim's network.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can use Rundll32 to execute additional payloads.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has used Rundll32 to execute its loader for privilege escalation purposes.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs uses rundll32.exe in a Registry value added to establish persistence.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used rundll32 to execute malicious payloads on a compromised host.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter has used rundll32.exe to execute Koadic stagers.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has used rundll32.exe to execute MiniDump from comsvcs.dll when dumping LSASS memory.
   </Example>
   <Example id="S0167" name="Matryoshka">
    Matryoshka uses rundll32.exe in a Registry Run key value for execution as part of its persistence mechanism.
   </Example>
   <Example id="S0576" name="MegaCortex">
    MegaCortex has used rundll32.exe to load a DLL for file encryption.
   </Example>
   <Example id="S1026" name="Mongall">
    Mongall can use rundll32.exe for execution.
   </Example>
   <Example id="S0256" name="Mosquito">
    Mosquito's launcher uses rundll32.exe in a Registry Key value to start the main backdoor capability.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used malware that leveraged rundll32.exe in a Registry Run key to execute a .dll.
   </Example>
   <Example id="S0637" name="NativeZone">
    NativeZone has used rundll32 to execute a malicious DLL.
   </Example>
   <Example id="S0353" name="NOKKI">
    NOKKI has used rundll32 for execution.
   </Example>
   <Example id="S0368" name="NotPetya">
    NotPetya uses rundll32.exe to install itself on remote systems when accessed via PsExec or wmic.
   </Example>
   <Example id="C0005" name="Operation Spalax">
    During Operation Spalax, the threat actors used rundll32.exe to execute malicious installers.
   </Example>
   <Example id="S1050" name="PcShare">
    PcShare has used rundll32.exe for execution.
   </Example>
   <Example id="S0518" name="PolyglotDuke">
    PolyglotDuke can be executed using rundll32.exe.
   </Example>
   <Example id="S0139" name="PowerDuke">
    PowerDuke uses rundll32.exe to load.
   </Example>
   <Example id="S0113" name="Prikormka">
    Prikormka uses rundll32.exe to load its DLL.
   </Example>
   <Example id="S0147" name="Pteranodon">
    Pteranodon executes functions using rundll32.exe.
   </Example>
   <Example id="S0196" name="PUNCHBUGGY">
    PUNCHBUGGY can load a DLL using Rundll32.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can use Rundll32.exe to enable C2 communication.
   </Example>
   <Example id="S0481" name="Ragnar Locker">
    Ragnar Locker has used rundll32.exe to execute components of VirtualBox.
   </Example>
   <Example id="S0148" name="RTM">
    RTM runs its core DLL file using rundll32.exe.
   </Example>
   <Example id="S0074" name="Sakula">
    Sakula calls cmd.exe to run various DLL files via rundll32.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team used a backdoor which could execute a supplied DLL using rundll32.exe.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has used rundll32.exe to execute DLLs.
   </Example>
   <Example id="S0382" name="ServHelper">
    ServHelper contains a module for downloading and executing DLLs that leverages rundll32.exe.
   </Example>
   <Example id="S0589" name="Sibot">
    Sibot has executed downloaded DLLs with rundll32.exe.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has been executed using rundll32.exe.
   </Example>
   <Example id="S0142" name="StreamEx">
    StreamEx uses rundll32 to call an exported function.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST used Rundll32 to execute payloads.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has leveraged rundll32.exe to execute malicious DLLs.
   </Example>
   <Example id="G0127" name="TA551">
    TA551 has used rundll32.exe to load malicious DLLs.
   </Example>
   <Example id="S0452" name="USBferry">
    USBferry can execute rundll32.exe in memory to avoid detection.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    The Winnti for Windows installer loads a DLL using rundll32.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell has used rundll32.exe to execute other DLLs and named pipes.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1050" name="Exploit Protection">
    Microsoft's Enhanced Mitigation Experience Toolkit (EMET) Attack Surface Reduction (ASR) feature can be used to block methods of using rundll32.exe to bypass application control.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Metadata
   </Detection>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1218.012" name="System Binary Proxy Execution: Verclsid">
  Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Defense_Bypassed>
   Application control, Digital Certificate Validation
  </Defense_Bypassed>
  <Examples>
   <Example id="S0499" name="Hancitor">
    Hancitor has used verclsid.exe to download and execute a malicious script.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Consider removing verclsid.exe if it is not necessary within a given environment.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Use application control configured to block execution of verclsid.exe if it is not required for a given system or network to prevent potential misuse by adversaries.
   </Mitigation>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Consider modifying host firewall rules to prevent egress traffic from verclsid.exe.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1218.013" name="System Binary Proxy Execution: Mavinject">
  Adversaries may abuse mavinject.exe to proxy execution of malicious code. Mavinject.exe is the Microsoft Application Virtualization Injector, a Windows utility that can inject code into external processes as part of Microsoft Application Virtualization (App-V).
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Consider removing mavinject.exe if Microsoft App-V is not used within a given environment.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Use application control configured to block execution of mavinject.exe if it is not required for a given system or network to prevent potential misuse by adversaries.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1218.014" name="System Binary Proxy Execution: MMC">
  Adversaries may abuse mmc.exe to proxy execution of malicious .msc files. Microsoft Management Console (MMC) is a binary that may be signed by Microsoft and is used in several ways in either its GUI or in a command prompt.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Defense_Bypassed>
   Application control, Digital Certificate Validation
  </Defense_Bypassed>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    MMC may not be necessary within a given environment since it is primarily used by system administrators, not regular users or clients.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Use application control configured to block execution of MMC if it is not required for a given system or network to prevent potential misuse by adversaries.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1082" name="System Information Discovery">
  An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   IaaS, Linux, Network, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-312
  </CAPEC_ID>
  <Examples>
   <Example id="S0065" name="4H RAT">
    4H RAT sends an OS version identifier in its beacons.
   </Example>
   <Example id="S1028" name="Action RAT">
    Action RAT has the ability to collect the hostname, OS version, and OS architecture of an infected host.
   </Example>
   <Example id="G0018" name="admin@338">
    admin@338 actors used the following commands after exploiting a machine with LOWBALL malware to obtain information about the OS: ver &gt;&gt; %temp%\download systeminfo &gt;&gt; %temp%\download
   </Example>
   <Example id="S0045" name="ADVSTORESHELL">
    ADVSTORESHELL can run Systeminfo to gather information about the victim.
   </Example>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla can collect the system's computer name and also has the capability to collect information on the processor, memory, OS, and video card from the system.
   </Example>
   <Example id="S1025" name="Amadey">
    Amadey has collected the computer name and OS version from a compromised machine.
   </Example>
   <Example id="S0504" name="Anchor">
    Anchor can determine the hostname and linux version on a compromised host.
   </Example>
   <Example id="S0584" name="AppleJeus">
    AppleJeus has collected the victim host information after infection.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed can identify the OS version of a targeted system.
   </Example>
   <Example id="G0026" name="APT18">
    APT18 can collect system information from the victim’s machine.
   </Example>
   <Example id="G0073" name="APT19">
    APT19 collected system architecture information. APT19 used an HTTP malware variant and a Port 22 malware variant to gather the hostname and CPU information from the victim’s machine.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 used fsutil to check available free space before executing actions that might create large files on disk.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has a tool that can obtain information about the local system.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has collected the OS version and computer name from victims. One of the group's backdoors can also query the Windows Registry to gather system information, and another macOS backdoor performs a fingerprint of the machine on its first connection to the C&amp;C server. APT32 executed shellcode to identify the name of the infected host.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 collects the computer name, the BIOS model, and execution path.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has attempted to get detailed information about a compromised host, including the operating system, version, patches, hotfixes, and service packs.
   </Example>
   <Example id="G0143" name="Aquatic Panda">
    Aquatic Panda has used native OS commands to understand privilege levels and system details.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has the ability to identify the hostname, computer name, Windows version, processor speed, machine GUID, and disk information on a compromised host.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth collects the machine name and keyboard language from the system.
   </Example>
   <Example id="S0438" name="Attor">
    Attor monitors the free disk space on the system.
   </Example>
   <Example id="S1029" name="AuTo Stealer">
    AuTo Stealer has the ability to collect the hostname and OS information from an infected host.
   </Example>
   <Example id="S0473" name="Avenger">
    Avenger has the ability to identify the host volume ID and the OS architecture on a compromised host.
   </Example>
   <Example id="S0344" name="Azorult">
    Azorult can collect the machine information, system architecture, the OS version, computer name, Windows product name, the number of CPU cores, video card information, and the system language.
   </Example>
   <Example id="S0638" name="Babuk">
    Babuk can enumerate disk volumes, get disk information, and query service status.
   </Example>
   <Example id="S0414" name="BabyShark">
    BabyShark has executed the ver command.
   </Example>
   <Example id="S0475" name="BackConfig">
    BackConfig has the ability to gather the victim's computer name.
   </Example>
   <Example id="S0093" name="Backdoor.Oldrea">
    Backdoor.Oldrea collects information about the OS and computer name.
   </Example>
   <Example id="S0031" name="BACKSPACE">
    During its initial execution, BACKSPACE extracts operating system information from the infected host.
   </Example>
   <Example id="S0245" name="BADCALL">
    BADCALL collects the computer name and host name on the compromised system.
   </Example>
   <Example id="S0642" name="BADFLICK">
    BADFLICK has captured victim computer name, memory space, and CPU details.
   </Example>
   <Example id="S0337" name="BadPatch">
    BadPatch collects the OS system, OS version, MAC address, and the computer name from the victim’s machine.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook can collect information about the drives available on the system.
   </Example>
   <Example id="S0239" name="Bankshot">
    Bankshot gathers system information, network addresses, disk type, disk free space, and the operation system version.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can fingerprint architecture, computer name, and OS version on the compromised host. Bazar can also check if the Russian language is installed on the infected machine and terminate if it is found.
   </Example>
   <Example id="S0017" name="BISCUIT">
    BISCUIT has a command to collect the processor type, operation system, computer name, uptime, and whether the system is a laptop or PC.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has used commands and API calls to gather system information.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    BlackEnergy has used Systeminfo to gather the OS version, as well as information on the system configuration, BIOS, the motherboard, and the processor.
   </Example>
   <Example id="S0564" name="BlackMould">
    BlackMould can enumerate local drives on a compromised host.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has collected from a victim machine the system name, processor information, OS version, and disk information, including type and free space available.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has collected hardware details for the victim's system, including CPU and memory information.
   </Example>
   <Example id="S0657" name="BLUELIGHT">
    BLUELIGHT has collected the computer name and OS version from victim machines.
   </Example>
   <Example id="S0486" name="Bonadan">
    Bonadan has discovered the OS version, CPU model, and RAM size of the system it has been installed on.
   </Example>
   <Example id="S0635" name="BoomBox">
    BoomBox can enumerate the hostname, domain, and IP of a compromised host.
   </Example>
   <Example id="S0252" name="Brave Prince">
    Brave Prince collects hard drive content and system configuration information.
   </Example>
   <Example id="S0043" name="BUBBLEWRAP">
    BUBBLEWRAP collects system information, including the operating system version and hostname.
   </Example>
   <Example id="S0471" name="build_downer">
    build_downer has the ability to send system volume information to C2.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can enumerate the OS version and domain on a targeted system.
   </Example>
   <Example id="S0482" name="Bundlore">
    Bundlore will enumerate the macOS version to determine which follow-on behaviors to execute using /usr/bin/sw_vers -productVersion.
   </Example>
   <Example id="S0693" name="CaddyWiper">
    CaddyWiper can use DsRoleGetPrimaryDomainInformation to determine the role of the infected machine. CaddyWiper can also halt execution if the compromised host is identified as a domain controller.
   </Example>
   <Example id="S0454" name="Cadelspy">
    Cadelspy has the ability to discover information about the compromised host.
   </Example>
   <Example id="S0351" name="Cannon">
    Cannon can gather system information from the victim’s machine such as the OS version, machine name, and drive information.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp has collected the operating system version from the infected system.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT can collect the hostname, Microsoft Windows version, and processor architecture from a victim machine.
   </Example>
   <Example id="S0462" name="CARROTBAT">
    CARROTBAT has the ability to determine the operating system of the compromised host and whether Windows is being run with x86 or x64 architecture.
   </Example>
   <Example id="S0572" name="Caterpillar WebShell">
    Caterpillar WebShell has a module to gather information from the compromrised asset, including the computer version, computer name, IIS version, and more.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes has collected system information, including the machine name and OS version.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower can enumerate the OS version and computer name on a targeted system.
   </Example>
   <Example id="S0144" name="ChChes">
    ChChes collects the victim hostname, window resolution, and Microsoft Windows version.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used fsutil fsinfo drives, systeminfo, and vssadmin list shadows for system information including shadow volumes and drive information.
   </Example>
   <Example id="S0667" name="Chrommme">
    Chrommme has the ability to list drives and obtain the computer name of a compromised host.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can discover the hostname, computer name, and Windows version of a targeted machine.
   </Example>
   <Example id="S0106" name="cmd">
    cmd can be used to find information about the operating system.
   </Example>
   <Example id="S0244" name="Comnie">
    Comnie collects the hostname of the victim machine.
   </Example>
   <Example id="G0142" name="Confucius">
    Confucius has used a file stealer that can examine system drives, including those other than the C drive.
   </Example>
   <Example id="S0137" name="CORESHELL">
    CORESHELL collects hostname, volume serial number and OS version data from the victim and sends the information to its C2 server.
   </Example>
   <Example id="S0046" name="CozyCar">
    A system info module in CozyCar gathers information on the victim host’s configuration.
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can enumerate the system drives and associated system name.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson contains a command to collect the victim PC name, disk drive information, and operating system.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba can enumerate local drives, disk type, and disk free space.
   </Example>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink has the ability to query device information.
   </Example>
   <Example id="S0334" name="DarkComet">
    DarkComet can collect the computer name, RAM used, and operating system version from the victim’s machine.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel has collected the hostname, OS version, service pack version, and the processor architecture from the victim’s machine.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman can collect the OS version, system architecture, uptime, and computer name.
   </Example>
   <Example id="S0616" name="DEATHRANSOM">
    DEATHRANSOM can enumerate logical drives on a target system.
   </Example>
   <Example id="S0354" name="Denis">
    Denis collects OS information and the computer name from the victim’s machine.
   </Example>
   <Example id="S0021" name="Derusbi">
    Derusbi gathers the name of the local host, version of GNU Compiler Collection (GCC), and the system information about the CPU, machine, and operating system.
   </Example>
   <Example id="S0659" name="Diavol">
    Diavol can collect the computer name and OS version from the system.
   </Example>
   <Example id="S0472" name="down_new">
    down_new has the ability to identify the system volume information of a compromised host.
   </Example>
   <Example id="S0186" name="DownPaper">
    DownPaper collects the victim host name and serial number, and then sends the information to the C2 server.
   </Example>
   <Example id="S0384" name="Dridex">
    Dridex has collected the computer name and OS architecture information from the system.
   </Example>
   <Example id="S0547" name="DropBook">
    DropBook has checked for the presence of Arabic language in the infected machine's settings.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack can collect the victim's computer name, hostname and adapter information to create a unique identifier.
   </Example>
   <Example id="S0062" name="DustySky">
    DustySky extracts basic information about the operating system.
   </Example>
   <Example id="S0024" name="Dyre">
    Dyre has the ability to identify the computer name, OS version, and hardware configuration on a compromised host.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor can perform a language check of the infected system and can query the CPU information (cupid).
   </Example>
   <Example id="S0081" name="Elise">
    Elise executes systeminfo after initial communication is made to the remote server.
   </Example>
   <Example id="S0082" name="Emissary">
    Emissary has the capability to execute ver and systeminfo commands.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can enumerate host system information like OS, architecture, domain name, applied patches, and more.
   </Example>
   <Example id="S0634" name="EnvyScout">
    EnvyScout can determine whether the ISO payload was received by a Windows or iOS device.
   </Example>
   <Example id="S0091" name="Epic">
    Epic collects the OS version, hardware information, computer name, available system memory status, disk space information, and system and user language settings.
   </Example>
   <Example id="S0568" name="EVILNUM">
    EVILNUM can obtain the computer name from the victim's system.
   </Example>
   <Example id="S0569" name="Explosive">
    Explosive has collected the computer name from the infected host.
   </Example>
   <Example id="S0181" name="FALLCHILL">
    FALLCHILL can collect operating system (OS) version information, processor information, system name, and information about installed disks from the victim.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke can collect the user name, Windows version, computer name, and available space on discs from a compromised host.
   </Example>
   <Example id="S0171" name="Felismus">
    Felismus collects the system information, including hostname and OS version, and sends it to the C2 server.
   </Example>
   <Example id="S0267" name="FELIXROOT">
    FELIXROOT collects the victim’s computer name, processor architecture, OS version, volume serial number, and system type.
   </Example>
   <Example id="S0679" name="Ferocious">
    Ferocious can use GET.WORKSPACE in Microsoft Excel to determine the OS version of the compromised host.
   </Example>
   <Example id="S0355" name="Final1stspy">
    Final1stspy obtains victim Microsoft Windows version information and CPU architecture.
   </Example>
   <Example id="S0182" name="FinFisher">
    FinFisher checks if the victim OS is 32 or 64-bit.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy can collect the victim's operating system and computer name during the initial infection.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors used Empire to obtain the compromised machine's name.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can enumerate all logical drives on a targeted machine.
   </Example>
   <Example id="C0007" name="FunnyDream">
    During FunnyDream, the threat actors used Systeminfo to collect information on targeted hosts.
   </Example>
   <Example id="S0410" name="Fysbis">
    Fysbis has used the command ls /etc | egrep -e"fedora*|debian*|gentoo*|mandriva*|mandrake*|meego*|redhat*|lsb-*|sun-*|SUSE*|release" to determine which Linux OS version is running.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    A Gamaredon Group file stealer can gather the victim's computer name and drive serial numbers to send to a C2 server.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can determine the operating system and whether a targeted machine has a 32 or 64 bit architecture.
   </Example>
   <Example id="S0460" name="Get2">
    Get2 has the ability to identify the computer name and Windows version of an infected host.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT has gathered system architecture, processor, OS configuration, and installed hardware information.
   </Example>
   <Example id="S0249" name="Gold Dragon">
    Gold Dragon collects endpoint information using the systeminfo command.
   </Example>
   <Example id="S0493" name="GoldenSpy">
    GoldenSpy has gathered operating system information.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can collect the computer name and OS version from a compromised host.
   </Example>
   <Example id="S0237" name="GravityRAT">
    GravityRAT collects the MAC address, computer name, and CPU information.
   </Example>
   <Example id="S0690" name="Green Lambert">
    Green Lambert can use uname to identify the operating system name, version, and processor type.
   </Example>
   <Example id="S0417" name="GRIFFON">
    GRIFFON has used a reconnaissance module that can be used to retrieve information about a victim's computer, including the resolution of the workstation .
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent can collect the OS, and build version on a compromised host.
   </Example>
   <Example id="S0151" name="HALFBAKED">
    HALFBAKED can obtain information about the OS, processor, and BIOS.
   </Example>
   <Example id="S0214" name="HAPPYWORK">
    can collect system information, including computer name, system manufacturer, IsDebuggerPresent state, and execution path.
   </Example>
   <Example id="S0391" name="HAWKBALL">
    HAWKBALL can collect the OS version, architecture information, and computer name.
   </Example>
   <Example id="S0617" name="HELLOKITTY">
    HELLOKITTY can enumerate logical drives on a target system.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper can determine the OS version, bitness, and enumerate physical drives on a targeted host.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has collected the hostname of a compromised machine.
   </Example>
   <Example id="S1027" name="Heyoka Backdoor">
    Heyoka Backdoor can enumerate drives on a compromised host.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa collected the system volume serial number, GUID, and computer name.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has collected the host's OS, CPU, and memory information.
   </Example>
   <Example id="S0376" name="HOPLIGHT">
    HOPLIGHT has been observed collecting victim machine information like OS version, drivers, volume information and more.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant has the ability to determine if the current user is an administrator, Windows product name, processor name, screen resolution, and physical RAM of the infected host.
   </Example>
   <Example id="S0203" name="Hydraq">
    Hydraq creates a backdoor through which remote attackers can retrieve information such as computer name, OS version, processor speed, memory size, and CPU speed.
   </Example>
   <Example id="S1022" name="IceApple">
    The IceApple Server Variable Dumper module iterates over all server variables present for the current request and returns them to the adversary.
   </Example>
   <Example id="S0483" name="IcedID">
    IcedID has the ability to identify the computer name and OS version on a compromised host.
   </Example>
   <Example id="G0100" name="Inception">
    Inception has used a reconnaissance module to gather information about the operating system and hardware on the infected host.
   </Example>
   <Example id="S0604" name="Industroyer">
    Industroyer collects the victim machine’s Windows GUID.
   </Example>
   <Example id="S0259" name="InnaputRAT">
    InnaputRAT gathers volume drive information and system information.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can gather information on the mapped drives, OS version, computer name, DEP policy, memory size, and system volume serial number.
   </Example>
   <Example id="S0015" name="Ixeshe">
    Ixeshe collects the computer name of the victim's system during the initial infection.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    JHUHUGIT obtains a build identifier as well as victim hard drive information from Windows registry key HKLM\SYSTEM\CurrentControlSet\Services\Disk\Enum. Another JHUHUGIT variant gathers the victim storage volume serial number and the storage device name.
   </Example>
   <Example id="S0201" name="JPIN">
    JPIN can obtain system information such as OS version and disk space.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT collects information about the OS (version, build type, install date) as well as system up-time upon receiving a connection from a backdoor.
   </Example>
   <Example id="S0215" name="KARAE">
    KARAE can collect system information.
   </Example>
   <Example id="S0088" name="Kasidet">
    Kasidet has the ability to obtain a victim's system name and operating system version.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar gathers information on the system and local drives.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang performs operating system information discovery using systeminfo and has used implants to identify the system language and computer name.
   </Example>
   <Example id="S0585" name="Kerrdown">
    Kerrdown has the ability to determine if the compromised host is running a 32 or 64 bit OS architecture.
   </Example>
   <Example id="S0487" name="Kessel">
    Kessel has collected the system architecture, OS version, and MAC address information.
   </Example>
   <Example id="S1020" name="Kevin">
    Kevin can enumerate the OS version and hostname of a targeted machine.
   </Example>
   <Example id="S0387" name="KeyBoy">
    KeyBoy can gather extended system information, such as information about the operating system, disks, and memory.
   </Example>
   <Example id="S0271" name="KEYMARBLE">
    KEYMARBLE has the capability to collect the computer name, language settings, the OS version, CPU information, disk devices, and time elapsed since system start.
   </Example>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY can collect drive information from a compromised host.
   </Example>
   <Example id="S0607" name="KillDisk">
    KillDisk retrieves the hard disk name by calling the CreateFileA to \.\PHYSICALDRIVE0 API.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has enumerated drives, OS type, OS version, and other information using a script or the "systeminfo" command.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can obtain the OS version and build, computer name, and processor architecture from a compromised host.
   </Example>
   <Example id="S0641" name="Kobalos">
    Kobalos can record the hostname and kernel version of the target machine.
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS has checked the OS version using wmic.exe and the find command.
   </Example>
   <Example id="S0156" name="KOMPROGO">
    KOMPROGO is capable of retrieving information about the infected system.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI can gather the OS version, architecture information, connected drives, hostname, RAM size, and disk space information from the victim’s machine and has used cmd /c systeminfo command to get a snapshot of the current system state of the target machine.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs collects OS version information such as registered owner details, manufacturer details, processor type, available storage, installed patches, hostname, version info, system date, and other system information by using the commands systeminfo, net config workstation, hostname, ver, set, and date /t.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Several Lazarus Group malware families collect information on the type and version of the victim OS, as well as the victim computer name and CPU information. A Destover-like variant used by Lazarus Group also collects disk space information and sends it to its C2 server.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron gathers the victim computer name using the Win32 API call GetComputerName.
   </Example>
   <Example id="S0211" name="Linfo">
    Linfo creates a backdoor through which remote attackers can retrieve system information.
   </Example>
   <Example id="S0513" name="LiteDuke">
    LiteDuke can enumerate the CPUID and BIOS version on a compromised system.
   </Example>
   <Example id="S0680" name="LitePower">
    LitePower has the ability to list local drives and enumerate the OS architecture.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar can collect the computer name from the machine,.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has the ability to discover the computer name and Windows product name/version.
   </Example>
   <Example id="S0451" name="LoudMiner">
    LoudMiner has monitored CPU usage.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can collect the computer name, system architecture, default language, and processor frequency of a compromised host.
   </Example>
   <Example id="S0409" name="Machete">
    Machete collects the hostname of the target computer.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa can collect information about a compromised computer, including: Hardware UUID, Mac serial number, macOS version, and disk sizes.
   </Example>
   <Example id="S1048" name="macOS.OSAMiner">
    macOS.OSAMiner can gather the device serial number and has checked to ensure there is enough disk space using the Unix utility df.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound malware has used a PowerShell command to check the victim system architecture to determine if it is an x64 machine. Other malware has obtained the OS version, UUID, and computer/host name to send to the C2 server.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can obtain the computer name from a compromised host.
   </Example>
   <Example id="S0449" name="Maze">
    Maze has checked the language of the infected system using the "GetUSerDefaultUILanguage" function.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has collected the hostname and operating system version from the compromised host.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor has the ability to discover the hostname of a compromised host.
   </Example>
   <Example id="S0339" name="Micropsia">
    Micropsia gathers the hostname and OS version from the victim’s machine.
   </Example>
   <Example id="S1015" name="Milan">
    Milan can enumerate the targeted machine's name and GUID.
   </Example>
   <Example id="S0051" name="MiniDuke">
    MiniDuke can gather the hostname on a compromised machine.
   </Example>
   <Example id="S0280" name="MirageFox">
    MirageFox can collect CPU and architecture information from the victim’s machine.
   </Example>
   <Example id="S0084" name="Mis-Type">
    The initial beacon packet for Mis-Type contains the operating system version and file system of the victim.
   </Example>
   <Example id="S0083" name="Misdat">
    The initial beacon packet for Misdat contains the operating system version of the victim.
   </Example>
   <Example id="S0079" name="MobileOrder">
    MobileOrder has a command to upload to its C2 server victim mobile device information, including IMEI, IMSI, SIM card serial number, phone number, Android version, and other information.
   </Example>
   <Example id="S0553" name="MoleNet">
    MoleNet can collect information about the about the system.
   </Example>
   <Example id="S1026" name="Mongall">
    Mongall can identify drives on compromised hosts and retrieve the hostname via gethostbyname.
   </Example>
   <Example id="S0149" name="MoonWind">
    MoonWind can obtain the victim hostname, Windows version, RAM amount, number of drives, and screen resolution.
   </Example>
   <Example id="S0284" name="More_eggs">
    More_eggs has the capability to gather the OS version and computer name.
   </Example>
   <Example id="G1009" name="Moses Staff">
    Moses Staff collected information about the infected host, including the machine names and OS architecture.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used malware that can collect the victim’s OS version and machine name.
   </Example>
   <Example id="S0233" name="MURKYTOP">
    MURKYTOP has the capability to retrieve information about the OS.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has gathered system information using systeminfo.
   </Example>
   <Example id="S0205" name="Naid">
    Naid collects a unique identifier (UID) from a compromised host.
   </Example>
   <Example id="S0228" name="NanHaiShu">
    NanHaiShu can gather the victim computer name and serial number.
   </Example>
   <Example id="S0247" name="NavRAT">
    NavRAT uses systeminfo on a victim’s machine.
   </Example>
   <Example id="S0272" name="NDiskMonitor">
    NDiskMonitor obtains the victim computer name and encrypts the information to send over its C2 channel.
   </Example>
   <Example id="S0630" name="Nebulae">
    Nebulae can discover logical drive information including the drive type, free space, and volume information.
   </Example>
   <Example id="S0691" name="Neoichor">
    Neoichor can collect the OS version and computer name from a compromised host.
   </Example>
   <Example id="S0457" name="Netwalker">
    Netwalker can determine the system architecture it is running on to choose which version of the DLL to use.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can discover and collect victim system information.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT enumerates the victim operating system and computer name during the initial infection.
   </Example>
   <Example id="S0353" name="NOKKI">
    NOKKI can gather information on drives and the operating system on the victim’s machine.
   </Example>
   <Example id="S0644" name="ObliqueRAT">
    ObliqueRAT has the ability to check for blocklisted computer names on infected endpoints.
   </Example>
   <Example id="S0346" name="OceanSalt">
    OceanSalt can collect the computer name from the system.
   </Example>
   <Example id="S0340" name="Octopus">
    Octopus can collect system drive information, the computer name, the size of the disk, OS version, and OS architecture information.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has run hostname and systeminfo on a victim.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum can collect computer name, locale information, and information about the OS and architecture.
   </Example>
   <Example id="S0264" name="OopsIE">
    OopsIE checks for information on the CPU fan, temperature, mouse, hard disk, and motherboard as part of its anti-VM checks.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used the systeminfo command to gather details about a compromised system.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, the threat actors collected the computer name, OS, and other system information using cmd /c systeminfo &gt; %temp%\ temp.ini.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors discovered the local disks attached to the system and their hardware information including manufacturer and model, as well as the OS versions of systems connected to a targeted network.
   </Example>
   <Example id="S0229" name="Orz">
    Orz can gather the victim OS version and whether it is 64 or 32 bit.
   </Example>
   <Example id="S0165" name="OSInfo">
    OSInfo discovers information about the infected machine.
   </Example>
   <Example id="S0402" name="OSX/Shlayer">
    OSX/Shlayer has collected the IOPlatformUUID, session UID, and the OS version using the command sw_vers -productVersion.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    OSX_OCEANLOTUS.D collects processor information, memory information, computer name, hardware UUID, serial number, and operating system version. OSX_OCEANLOTUS.D has used the ioreg command to gather some of this information.
   </Example>
   <Example id="S0208" name="Pasam">
    Pasam creates a backdoor through which remote attackers can retrieve information such as hostname and free disk space.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork collected the victim computer name, OS version, and architecture type and sent the information to its C2 server. Patchwork also enumerated all available drives on the victim's machine.
   </Example>
   <Example id="S0556" name="Pay2Key">
    Pay2Key has the ability to gather the hostname of the victim machine.
   </Example>
   <Example id="S0587" name="Penquin">
    Penquin can report the file system type and disk space of a compromised host to C2.
   </Example>
   <Example id="S0048" name="PinchDuke">
    PinchDuke gathers system configuration information.
   </Example>
   <Example id="S1031" name="PingPull">
    PingPull can retrieve the hostname of a compromised host.
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon can collect and send OS version and computer name as a part of its C2 beacon.
   </Example>
   <Example id="S0124" name="Pisloader">
    Pisloader has a command to collect victim system information, including the system name and OS version.
   </Example>
   <Example id="S0254" name="PLAINTEE">
    PLAINTEE collects general system enumeration data about the infected machine and checks the OS version.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has the ability to gather information about the compromised host.
   </Example>
   <Example id="S0453" name="Pony">
    Pony has collected the Service Pack, language, and region information to send to the C2.
   </Example>
   <Example id="S0216" name="POORAIM">
    POORAIM can identify system information, including battery status.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 contains modules, such as Get-ComputerInfo, for enumerating common system information.
   </Example>
   <Example id="S0139" name="PowerDuke">
    PowerDuke has commands to get information about the victim's name, build, version, serial number, and memory usage.
   </Example>
   <Example id="S0441" name="PowerShower">
    PowerShower has collected system information on the infected host.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS can retrieve OS name/architecture and computer/domain name information from compromised hosts.
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER may collect information about the system by running hostname and systeminfo on a victim.
   </Example>
   <Example id="S0113" name="Prikormka">
    A module in Prikormka collects information from the victim about Windows OS version, computer name, battery info, and physical memory.
   </Example>
   <Example id="S0238" name="Proxysvc">
    Proxysvc collects the OS version, country name, MAC address, computer name, physical memory statistics, and volume information for all drives on the system.
   </Example>
   <Example id="S0196" name="PUNCHBUGGY">
    PUNCHBUGGY can gather system information such as computer names.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can grab a system’s information including the OS version, architecture, etc.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can collect system information including the OS version and domain on a compromised host.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT can gather system information from the victim’s machine including the OS type.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can detect system information--including disk names, total space, and remaining space--to create a hardware profile GUID which acts as a system identifier for operators.
   </Example>
   <Example id="S0241" name="RATANKBA">
    RATANKBA gathers information about the OS architecture, OS name, and OS version/Service pack.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession can gather system information from a compromised host.
   </Example>
   <Example id="S0172" name="Reaver">
    Reaver collects system information from the victim, including CPU speed, computer name, volume serial number, ANSI code page, OEM code page identifier for the OS, Microsoft Windows version, and memory information.
   </Example>
   <Example id="S0153" name="RedLeaves">
    RedLeaves can gather extended system information including the hostname, OS version number, platform, memory information, time elapsed since system startup, and CPU information.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec can obtain the OS version information, computer name, processor architecture, machine role, and OS edition.
   </Example>
   <Example id="S0379" name="Revenge RAT">
    Revenge RAT collects the CPU information, OS information, and system language.
   </Example>
   <Example id="S0496" name="REvil">
    REvil can identify the username, machine name, system language, keyboard layout, OS version, and system drive information on a compromised host.
   </Example>
   <Example id="S0433" name="Rifdoor">
    Rifdoor has the ability to identify the Windows version on the compromised host.
   </Example>
   <Example id="S0448" name="Rising Sun">
    Rising Sun can detect the computer name, operating system, and drive information, including drive type, total number of bytes on disk, total number of free bytes on disk, and name of a specified volume.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has used uname -m to collect the name and information about the infected system's kernel.
   </Example>
   <Example id="S0270" name="RogueRobin">
    RogueRobin gathers BIOS versions and manufacturers, the number of CPU cores, the total physical memory, and the computer name.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can gather the hostname and the OS version to ensure it doesn’t run on a Windows XP or Windows Server 2003 systems.
   </Example>
   <Example id="S0148" name="RTM">
    RTM can obtain the computer name, OS version, and default language identifier.
   </Example>
   <Example id="S0253" name="RunningRAT">
    RunningRAT gathers the OS version, logical drives information, processor information, and volume information.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk has called GetLogicalDrives to emumerate all mounted drives, and GetDriveTypeW to determine the drive type.
   </Example>
   <Example id="S0085" name="S-Type">
    The initial beacon packet for S-Type contains the operating system version and file system of the victim.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot can identify the OS version, CPU, and other details from a victim's machine.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team used a backdoor to enumerate information about the infected system's operating system.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has the ability to identify the OS version, OS bit information and computer name.
   </Example>
   <Example id="S0382" name="ServHelper">
    ServHelper will attempt to enumerate Windows version and system architecture.
   </Example>
   <Example id="S0596" name="ShadowPad">
    ShadowPad has discovered system information including memory status, CPU frequency, OS versions, and volume serial numbers.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon obtains the victim's operating system version and keyboard layout and sends the information to the C2 server.
   </Example>
   <Example id="S1019" name="Shark">
    Shark can collect the GUID of a targeted machine.
   </Example>
   <Example id="S0546" name="SharpStage">
    SharpStage has checked the system settings to see if Arabic is the configured language.
   </Example>
   <Example id="S0450" name="SHARPSTATS">
    SHARPSTATS has the ability to identify the IP address, machine name, and OS of the compromised host.
   </Example>
   <Example id="S0445" name="ShimRatReporter">
    ShimRatReporter gathered the operating system name and specific Windows version of an infected machine.
   </Example>
   <Example id="S0217" name="SHUTTERSPEED">
    SHUTTERSPEED can collect system information.
   </Example>
   <Example id="G1008" name="SideCopy">
    SideCopy has identified the OS version of a compromised host.
   </Example>
   <Example id="S0610" name="SideTwist">
    SideTwist can collect the computer name of a targeted system.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has used tools to collect the computer name, OS version, installed hotfixes, as well as information regarding the memory and processor on a compromised host.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can collect information related to a compromised host, including OS version and a list of drives.
   </Example>
   <Example id="S0468" name="Skidmap">
    Skidmap has the ability to check whether the infected system’s OS is Debian or RHEL/CentOS to determine which cryptocurrency miner it should use.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA has collected system name, OS version, adapter information, memory usage, and disk information from a victim machine.
   </Example>
   <Example id="S0218" name="SLOWDRIFT">
    SLOWDRIFT collects and sends system information to its C2.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM has used the systeminfo command on a compromised host.
   </Example>
   <Example id="S0627" name="SodaMaster">
    SodaMaster can enumerate the host name and OS version on a target system.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT can execute getinfo to enumerate the computer name and OS version of a compromised system.
   </Example>
   <Example id="S0516" name="SoreFang">
    SoreFang can collect the hostname, operating system configuration, product ID, and disk space on victim machines by executing Systeminfo.
   </Example>
   <Example id="S0157" name="SOUNDBITE">
    SOUNDBITE is capable of gathering system information.
   </Example>
   <Example id="G0054" name="Sowbug">
    Sowbug obtained OS version and hardware configuration from a victim.
   </Example>
   <Example id="S0543" name="Spark">
    Spark can collect the hostname, keyboard layout, and language from the system.
   </Example>
   <Example id="S0374" name="SpeakUp">
    SpeakUp uses the cat /proc/cpuinfo | grep -c "cpu family" 2&gt;&amp;1 command to gather system information.
   </Example>
   <Example id="S0646" name="SpicyOmelette">
    SpicyOmelette can identify the system name of a compromised host.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has gathered victim computer information and configurations.
   </Example>
   <Example id="S0058" name="SslMM">
    SslMM sends information to its hard-coded C2, including OS version, service pack information, processor speed, system name, and OS install date.
   </Example>
   <Example id="S1037" name="STARWHALE">
    STARWHALE can gather the computer name of an infected host.
   </Example>
   <Example id="G0038" name="Stealth Falcon">
    Stealth Falcon malware gathers system information via WMI, including the system directory, build number, serial number, version, manufacturer, model, and total physical memory.
   </Example>
   <Example id="S0380" name="StoneDrill">
    StoneDrill has the capability to discover the system OS, Windows version, architecture and environment.
   </Example>
   <Example id="S0142" name="StreamEx">
    StreamEx has the ability to enumerate system information.
   </Example>
   <Example id="S1034" name="StrifeWater">
    StrifeWater can collect the OS version, architecture, and machine name to create a unique token for the infected host.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity can identify the hard disk volume serial number on a compromised host.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet collects system information including computer and domain names, OS version, and S7P paths.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST collected hostname, OS version, and device uptime.
   </Example>
   <Example id="S0242" name="SynAck">
    SynAck gathers computer names, OS version info, and also checks installed keyboard layouts to estimate if it has been launched from a certain list of countries.
   </Example>
   <Example id="S0060" name="Sys10">
    Sys10 collects the computer name, OS versioning information, and OS install date and sends the information to the C2.
   </Example>
   <Example id="S0464" name="SYSCON">
    SYSCON has the ability to use Systeminfo to identify system information.
   </Example>
   <Example id="S0096" name="Systeminfo">
    Systeminfo can be used to gather information about the operating system.
   </Example>
   <Example id="S0663" name="SysUpdate">
    SysUpdate can determine whether a system has a 32 bit or 64 bit architecture.
   </Example>
   <Example id="S0098" name="T9000">
    T9000 gathers and beacons the operating system build number and CPU Architecture (32-bit/64-bit) during installation.
   </Example>
   <Example id="S0586" name="TAINTEDSCRIBE">
    TAINTEDSCRIBE can use DriveList to retrieve drive information.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to identify hardware information, the computer name, and OS information on an infected host.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has searched for system version, architecture, disk partition, logical volume, and hostname information.
   </Example>
   <Example id="S0665" name="ThreatNeedle">
    ThreatNeedle can collect system profile information from a compromised host.
   </Example>
   <Example id="S0678" name="Torisma">
    Torisma can use GetlogicalDrives to get a bitmask of all drives available on a compromised system. It can also use GetDriveType to determine if a new drive is a CD-ROM drive.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot gathers the OS version, machine name, CPU type, amount of RAM available, and UEFI/BIOS firmware information from the victim’s machine.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can capture information regarding the victim's OS, security, and hardware configuration.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has detected a target system’s OS version and system volume information.
   </Example>
   <Example id="S0647" name="Turian">
    Turian can retrieve system information including OS version, memory usage, local hostname, and system adapter information.
   </Example>
   <Example id="G0010" name="Turla">
    Turla surveys a system upon check-in to discover operating system configuration details using the systeminfo and set commands.
   </Example>
   <Example id="S0199" name="TURNEDUP">
    TURNEDUP is capable of gathering system information.
   </Example>
   <Example id="S0263" name="TYPEFRAME">
    TYPEFRAME can gather the disk volume information.
   </Example>
   <Example id="S0130" name="Unknown Logger">
    Unknown Logger can obtain information about the victim computer name, physical memory, country, and date.
   </Example>
   <Example id="S0275" name="UPPERCUT">
    UPPERCUT has the capability to gather the system’s hostname and OS version.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has used Systeminfo to gather system information.
   </Example>
   <Example id="S0476" name="Valak">
    Valak can determine the Windows version and computer name on a compromised host.
   </Example>
   <Example id="S0257" name="VERMIN">
    VERMIN collects the OS name, machine name, and architecture information.
   </Example>
   <Example id="S0180" name="Volgmer">
    Volgmer can gather system information, the computer name, OS version, drive and serial information from the victim's machine.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT can collect compromised host information, including OS version, PC name, RAM size, and CPU details.
   </Example>
   <Example id="S0514" name="WellMess">
    WellMess can identify the computer name of a compromised host.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate has the ability to enumerate fixed logical drives on a targeted system.
   </Example>
   <Example id="G0124" name="Windigo">
    Windigo has used a script to detect which Linux distribution and version is currently installed on the system.
   </Example>
   <Example id="S0155" name="WINDSHIELD">
    WINDSHIELD can gather the victim computer name.
   </Example>
   <Example id="G0112" name="Windshift">
    Windshift has used malware to identify the computer name of a compromised host.
   </Example>
   <Example id="S0219" name="WINERACK">
    WINERACK can gather information about the host.
   </Example>
   <Example id="S0176" name="Wingbird">
    Wingbird checks the victim OS version after executing to determine where to drop files based on whether the victim is 32-bit or 64-bit.
   </Example>
   <Example id="S0059" name="WinMM">
    WinMM collects the system name, OS version including service pack, and system install date and sends the information to the C2 server.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    Winnti for Windows can determine if the OS on a compromised host is newer than Windows XP.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used "systeminfo" and similar commands to acquire detailed configuration information of a victim machine.
   </Example>
   <Example id="S0161" name="XAgentOSX">
    XAgentOSX contains the getInstalledAPP function to run ls -la /Applications to gather what applications are installed.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET identifies the macOS version and uses ioreg to determine serial number.
   </Example>
   <Example id="S0388" name="YAHOYAH">
    YAHOYAH checks for the system’s Windows OS version and hostname.
   </Example>
   <Example id="S0248" name="yty">
    yty gathers the computer name, the serial number of the main disk volume, CPU information, Microsoft Windows version, and runs the command systeminfo.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy collects the OS version, computer name and serial number for the storage volume C:. Zebrocy also runs the systeminfo command to gather system information.
   </Example>
   <Example id="S0230" name="ZeroT">
    ZeroT gathers the victim's computer name, Windows version, and system language, and then sends it to its C2 server.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda collects the OS version, system architecture, computer name, product ID, install date, and information on the keyboard mapping to determine the language used on the system.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has used a tool to capture the processor architecture of a compromised host in order to register it with C2.
   </Example>
   <Example id="S0086" name="ZLib">
    ZLib has the ability to enumerate system information.
   </Example>
   <Example id="S0672" name="Zox">
    Zox can enumerate attached drives.
   </Example>
   <Example id="S0350" name="zwShell">
    zwShell can obtain the victim PC name and OS version.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell can collect the local hostname, operating system details, CPU speed, and total physical memory.
   </Example>
   <Example id="S1013" name="ZxxZ">
    ZxxZ has collected the host name and operating system product name from a compromised machine.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1614" name="System Location Discovery">
  Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from System Location Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   IaaS, Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S1025" name="Amadey">
    Amadey does not run any tasks or install additional malware if the victim machine is based in Russia.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson can identify the geographical location of a victim host.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman can identity the OS locale of a compromised host.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent can identify the country code on a compromised host.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT can determine the country a victim host is located in.
   </Example>
   <Example id="S0481" name="Ragnar Locker">
    Before executing malicious code, Ragnar Locker checks the Windows API GetLocaleInfoW and doesn't encrypt files if it finds a former Soviet country.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has conducted system locale checks to see if the compromised host is in Russia, Ukraine, Belarus, Armenia, Kazakhstan, or Moldova.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot can collected the country code of a compromised machine.
   </Example>
   <Example id="G1008" name="SideCopy">
    SideCopy has identified the country location of a compromised host.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1614.001" name="System Location Discovery: System Language Discovery">
  Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0640" name="Avaddon">
    Avaddon checks for specific keyboard layouts and OS languages to avoid targeting Commonwealth of Independent States (CIS) entities.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can perform a check to ensure that the operating system's keyboard and language settings are not set to Russian.
   </Example>
   <Example id="S0611" name="Clop">
    Clop has checked the keyboard language using the GetKeyboardLayout() function to avoid installation on Russian-language or other Commonwealth of Independent States-language machines; it will also check the GetTextCharset function.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba can check if Russian language is installed on the infected machine by using the function GetKeyboardLayoutList.
   </Example>
   <Example id="S0616" name="DEATHRANSOM">
    Some versions of DEATHRANSOM have performed language ID and keyboard layout checks; if either of these matched Russian, Kazakh, Belarusian, Ukrainian or Tatar DEATHRANSOM would exit.
   </Example>
   <Example id="S0547" name="DropBook">
    DropBook has checked for the presence of Arabic language in the infected machine's settings.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro can check whether the target system is using Japanese, Taiwanese, or English through detection of specific Windows Security and Internet Explorer dialog.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent has used Accept-Language to identify hosts in the United Kingdom, United States, France, and Spain.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has used implants to collect the system language ID of a compromised machine.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has deployed malware designed not to run on computers set to Korean, Japanese, or Chinese in Windows language preferences.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can use the GetKeyboardLayout API to check if a compromised host's keyboard is set to Persian.
   </Example>
   <Example id="S0449" name="Maze">
    Maze has checked the language of the machine with function GetUserDefaultUILanguage and terminated execution if the language matches with an entry in the predefined list.
   </Example>
   <Example id="S0083" name="Misdat">
    Misdat has attempted to detect if a compromised host had a Japanese keyboard via the Windows API call GetKeyboardType.
   </Example>
   <Example id="S0691" name="Neoichor">
    Neoichor can identify the system language on a compromised host.
   </Example>
   <Example id="S0496" name="REvil">
    REvil can check the system language using GetUserDefaultUILanguage and GetSystemDefaultUILanguage. If the language is found in the list, the process terminates.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk has been observed to query the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Nls\Language and the value InstallLanguage. If the machine has the value 0x419 (Russian), 0x422 (Ukrainian), or 0x423 (Belarusian), it stops execution.
   </Example>
   <Example id="S0085" name="S-Type">
    S-Type has attempted to determine if a compromised system was using a Japanese keyboard via the GetKeyboardType API call.
   </Example>
   <Example id="S0546" name="SharpStage">
    SharpStage  has been used to target Arabic-speaking users and used code that checks if the compromised machine has the Arabic language installed.
   </Example>
   <Example id="S0543" name="Spark">
    Spark has checked the results of the GetKeyboardLayoutList and the language name returned by GetLocaleInfoA to make sure they contain the word "Arabic" before executing.
   </Example>
   <Example id="S0242" name="SynAck">
    SynAck lists all the keyboard layouts installed on the victim’s system using GetKeyboardLayoutList API and checks against a hardcoded language code list. If a match if found, SynAck sleeps for 300 seconds and then exits without encrypting files.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET uses AppleScript to check the host's language and location with the command user locale of (get system info).
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda queries the system's keyboard mapping to determine the language used on the system. It will terminate execution if it detects LANG_RUSSIAN, LANG_BELARUSIAN, LANG_KAZAK, or LANG_UKRAINIAN.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1016" name="System Network Configuration Discovery">
  Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-309
  </CAPEC_ID>
  <Examples>
   <Example id="S1028" name="Action RAT">
    Action RAT has the ability to collect the MAC address of an infected host.
   </Example>
   <Example id="S0552" name="AdFind">
    AdFind can extract subnet information from Active Directory.
   </Example>
   <Example id="G0018" name="admin@338">
    admin@338 actors used the following command after exploiting a machine with LOWBALL malware to acquire information about local networks: ipconfig /all &gt;&gt; %temp%\download
   </Example>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla can collect the IP address of the victim machine and spawn instances of netsh.exe to enumerate wireless settings.
   </Example>
   <Example id="S0092" name="Agent.btz">
    Agent.btz collects the network adapter’s IP and MAC address as well as IP addresses of the network adapter’s default gateway, primary/secondary WINS, DHCP, and DNS servers, and saves them into a log file.
   </Example>
   <Example id="S1025" name="Amadey">
    Amadey can identify the IP address of a victim machine.
   </Example>
   <Example id="S0504" name="Anchor">
    Anchor can determine the public IP and location of a compromised host.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed can identify the IP of a targeted system.
   </Example>
   <Example id="G0006" name="APT1">
    APT1 used the ipconfig /all command to gather network configuration information.
   </Example>
   <Example id="G0073" name="APT19">
    APT19 used an HTTP malware variant and a Port 22 malware variant to collect the MAC address and IP address from the victim’s machine.
   </Example>
   <Example id="G0022" name="APT3">
    A keylogging tool used by APT3 gathers network information from the victim, including the MAC address, IP address, WINS, DHCP server, and gateway.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 used the ipconfig /all command to gather the IP address from the system.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 collected MAC addresses from victim machines.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has the ability to identify the location, public IP address, and domain name on a compromised host.
   </Example>
   <Example id="S0099" name="Arp">
    Arp can be used to display ARP configuration information on the host.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth collects the external IP address from the system.
   </Example>
   <Example id="S0640" name="Avaddon">
    Avaddon can collect the external IP address of the victim.
   </Example>
   <Example id="S0473" name="Avenger">
    Avenger can identify the domain of the compromised host.
   </Example>
   <Example id="S0344" name="Azorult">
    Azorult can collect host IP information from the victim’s machine.
   </Example>
   <Example id="S0414" name="BabyShark">
    BabyShark has executed the ipconfig /all command.
   </Example>
   <Example id="S0093" name="Backdoor.Oldrea">
    Backdoor.Oldrea collects information about the Internet adapter configuration.
   </Example>
   <Example id="S0245" name="BADCALL">
    BADCALL collects the network adapter information.
   </Example>
   <Example id="S0642" name="BADFLICK">
    BADFLICK has captured victim IP address details.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook has a command to get the public IP address from a system.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can collect the IP address and NetBIOS name of an infected machine.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal can execute ipconfig on the victim’s machine.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    BlackEnergy has gathered information about network IP configurations using ipconfig.exe and about routing tables using route.exe.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has collected the victim machine's local IP address information and MAC address.
   </Example>
   <Example id="S0657" name="BLUELIGHT">
    BLUELIGHT can collect IP information from the victim’s machine.
   </Example>
   <Example id="S0486" name="Bonadan">
    Bonadan can find the external IP address of the infected host.
   </Example>
   <Example id="S0651" name="BoxCaon">
    BoxCaon can collect the victim's MAC address by using the GetAdaptersInfo API.
   </Example>
   <Example id="S0252" name="Brave Prince">
    Brave Prince gathers network configuration information as well as the ARP cache.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors used code to obtain the external public-facing IPv4 address of the compromised host.
   </Example>
   <Example id="S0274" name="Calisto">
    Calisto runs the ifconfig command to obtain the IP address from the victim’s machine.
   </Example>
   <Example id="S0335" name="Carbon">
    Carbon can collect the IP address of the victims and other computers on the network using the commands: ipconfig -all nbtstat -n, and nbtstat -s.
   </Example>
   <Example id="S0261" name="Catchamas">
    Catchamas gathers the Mac address, IP address, and the network adapter information from the victim’s machine.
   </Example>
   <Example id="S0572" name="Caterpillar WebShell">
    Caterpillar WebShell can gather the IP address from the victim's machine using the IP config command.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower has the ability to use ipconfig to enumerate system network settings.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used ipconfig, Ping, and tracert to enumerate the IP address and network environment and settings of the local host.
   </Example>
   <Example id="S0667" name="Chrommme">
    Chrommme can enumerate the IP address of a compromised host.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can enumerate the IP address of a compromised machine.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can determine the NetBios name and  the IP addresses of targets machines including domain controllers.
   </Example>
   <Example id="S0244" name="Comnie">
    Comnie uses ipconfig /all and route PRINT to identify network adapter and interface information.
   </Example>
   <Example id="S0575" name="Conti">
    Conti can retrieve the ARP cache from the local system by using the GetIpNetTable() API call and check to ensure IP addresses it connects to are for local, non-Internet, systems.
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can collect DNS information from the targeted system.
   </Example>
   <Example id="S1024" name="CreepySnail">
    CreepySnail can use getmac and Get-NetIPAddress to enumerate network settings.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson contains a command to collect the victim MAC address and LAN IP.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba can retrieve the ARP cache from the local system by using GetIpNetTable.
   </Example>
   <Example id="S0687" name="Cyclops Blink">
    Cyclops Blink can use the Linux API if_nameindex to gather network interface names.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel has collected the IP address and network adapter information from the victim’s machine.
   </Example>
   <Example id="S0354" name="Denis">
    Denis uses ipconfig to gather the IP address from the system.
   </Example>
   <Example id="S0659" name="Diavol">
    Diavol can enumerate victims' local and external IPs when registering with C2.
   </Example>
   <Example id="S0472" name="down_new">
    down_new has the ability to identify the MAC address of a compromised host.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has used batch scripts to enumerate network information, including information about trusts, zones, and the domain.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack can collect the host's IP addresses using the ipconfig command.
   </Example>
   <Example id="S0038" name="Duqu">
    The reconnaissance modules used with Duqu can collect information on network configuration.
   </Example>
   <Example id="S0024" name="Dyre">
    Dyre has the ability to identify network settings on a compromised host.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca used the command ipconfig to obtain information about network configurations.
   </Example>
   <Example id="S0605" name="EKANS">
    EKANS can determine the domain of a compromised host.
   </Example>
   <Example id="S0081" name="Elise">
    Elise executes ipconfig /all after initial communication is made to the remote server.
   </Example>
   <Example id="S0082" name="Emissary">
    Emissary has the capability to execute the command ipconfig /all.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can acquire network configuration information like DNS servers, public IP, and network proxies used by a host.
   </Example>
   <Example id="S0091" name="Epic">
    Epic uses the nbtstat -n and nbtstat -s commands on the victim’s machine.
   </Example>
   <Example id="S0569" name="Explosive">
    Explosive has collected the MAC address from the victim's machine.
   </Example>
   <Example id="S0181" name="FALLCHILL">
    FALLCHILL collects MAC address and local IP address information from the victim.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke can identify the MAC address on the target computer.
   </Example>
   <Example id="S0171" name="Felismus">
    Felismus collects the victim LAN IP address and sends it to the C2 server.
   </Example>
   <Example id="S0267" name="FELIXROOT">
    FELIXROOT collects information about the network including the IP address and DHCP server.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro has been used to execute the ipconfig /all command on a victim system.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors used Empire to find the public IP address of a compromised system.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can parse the ProxyServer string in the Registry to discover http proxies.
   </Example>
   <Example id="C0007" name="FunnyDream">
    During FunnyDream, the threat actors used ipconfig for discovery on remote systems.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM used ipconfig /all to obtain information about the victim network configuration. The group also ran a modified version of NBTscan to identify available NetBIOS name servers.
   </Example>
   <Example id="S0049" name="GeminiDuke">
    GeminiDuke collects information on network settings and Internet proxy settings from the victim.
   </Example>
   <Example id="S0588" name="GoldMax">
    GoldMax retrieved a list of the system's network interface after execution.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can determine the IP and physical location of the compromised host via IPinfo.
   </Example>
   <Example id="S0237" name="GravityRAT">
    GravityRAT collects the victim IP address, MAC address, as well as the victim account domain name.
   </Example>
   <Example id="S0690" name="Green Lambert">
    Green Lambert can obtain proxy information from a victim's machine using system environment variables.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent can enumerate the IP and domain of a target system.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has used Ping and tracert for network discovery.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa used ipconfig to gather network configuration information.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant has the ability to identify the IP address of the compromised machine.
   </Example>
   <Example id="S0203" name="Hydraq">
    Hydraq creates a backdoor through which remote attackers can retrieve IP addresses of compromised machines.
   </Example>
   <Example id="S1022" name="IceApple">
    The IceApple ifconfig module can iterate over all network interfaces on the host and retrieve the name, description, MAC address, DNS suffix, DNS servers, gateways, IPv4 addresses, and subnet masks.
   </Example>
   <Example id="S0101" name="ifconfig">
    ifconfig can be used to display adapter configuration on Unix systems, including information for TCP/IP, DNS, and DHCP.
   </Example>
   <Example id="S0278" name="iKitten">
    iKitten will look for the current IP address.
   </Example>
   <Example id="S0604" name="Industroyer">
    Industroyer’s 61850 payload component enumerates connected network adapters and their corresponding IP addresses.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole gathers information on the IP forwarding table, MAC address, configured proxy, and network SSID.
   </Example>
   <Example id="S0100" name="ipconfig">
    ipconfig can be used to display adapter configuration on Windows systems, including information for TCP/IP, DNS, and DHCP.
   </Example>
   <Example id="S0015" name="Ixeshe">
    Ixeshe enumerates the IP address, network proxy settings, and domain name from a victim's system.
   </Example>
   <Example id="S0044" name="JHUHUGIT">
    A JHUHUGIT variant gathers network interface card information.
   </Example>
   <Example id="S0201" name="JPIN">
    JPIN can obtain network information, including DNS, IP, and proxies.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT can gather victim internal and external IPs.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar gathers information about network adapters.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has performed local network configuration discovery using ipconfig.
   </Example>
   <Example id="S0487" name="Kessel">
    Kessel has collected the DNS address of the infected host.
   </Example>
   <Example id="S1020" name="Kevin">
    Kevin can collect the MAC address and other information from a victim machine using ipconfig/all.
   </Example>
   <Example id="S0387" name="KeyBoy">
    KeyBoy can determine the public or WAN IP address for the system.
   </Example>
   <Example id="S0271" name="KEYMARBLE">
    KEYMARBLE gathers the MAC address of the victim’s machine.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used ipconfig/all to gather network configuration information.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can retrieve the contents of the IP routing table as well as information about the Windows domain.
   </Example>
   <Example id="S0641" name="Kobalos">
    Kobalos can record the IP address of the target machine.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI can collect the IP address from the victim’s machine.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs collects network adapter and interface information by using the commands ipconfig /all, arp -a and route print. It also collects the system's MAC address with getmac and domain configuration with net config workstation.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group malware IndiaIndia obtains and sends to its C2 server information about the first network interface card’s configuration, including IP address, gateways, subnet mask, DHCP information, and whether WINS is available.
   </Example>
   <Example id="S0395" name="LightNeuron">
    LightNeuron gathers information about network adapters using the Win32 API call GetAdaptersInfo.
   </Example>
   <Example id="S0513" name="LiteDuke">
    LiteDuke has the ability to discover the proxy configuration of Firefox and/or Opera.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar can retrieve network information from a compromised host.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has the ability to discover the domain name of the infected host.
   </Example>
   <Example id="S0451" name="LoudMiner">
    LoudMiner used a script to gather the IP address of the infected machine before sending to the C2.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can collect the IP address of a compromised host.
   </Example>
   <Example id="S0409" name="Machete">
    Machete collects the MAC address of the target computer and other network configuration information.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa can collect IP addresses from a compromised host.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound malware gathers the victim's local IP address, MAC address, and external IP address.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used several tools to scan for open NetBIOS nameservers and enumerate NetBIOS sessions.
   </Example>
   <Example id="S1015" name="Milan">
    Milan can run C:\Windows\system32\cmd.exe /c cmd /c ipconfig /all 2&gt;&amp;1 to discover network settings.
   </Example>
   <Example id="S0084" name="Mis-Type">
    Mis-Type may create a file containing the results of the command cmd.exe /c ipconfig /all.
   </Example>
   <Example id="S0149" name="MoonWind">
    MoonWind obtains the victim IP address.
   </Example>
   <Example id="S0284" name="More_eggs">
    More_eggs has the capability to gather the IP address from the victim's machine.
   </Example>
   <Example id="G1009" name="Moses Staff">
    Moses Staff has collected the domain name of a compromised network.
   </Example>
   <Example id="S0256" name="Mosquito">
    Mosquito uses the ipconfig command.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used malware to collect the victim’s IP address and domain name.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has used ipconfig and arp to determine network configuration information.
   </Example>
   <Example id="S0205" name="Naid">
    Naid collects the domain name from a compromised host.
   </Example>
   <Example id="G0019" name="Naikon">
    Naikon uses commands such as netsh interface show to discover network interface settings.
   </Example>
   <Example id="S0228" name="NanHaiShu">
    NanHaiShu can gather information about the victim proxy server.
   </Example>
   <Example id="S0336" name="NanoCore">
    NanoCore gathers the IP address from the victim’s machine.
   </Example>
   <Example id="S0590" name="NBTscan">
    NBTscan can be used to collect MAC addresses.
   </Example>
   <Example id="S0102" name="nbtstat">
    nbtstat can be used to discover local NetBIOS domain names.
   </Example>
   <Example id="S0691" name="Neoichor">
    Neoichor can gather the IP address from an infected host.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can collect the IP address of a compromised host.
   </Example>
   <Example id="S0359" name="Nltest">
    Nltest may be used to enumerate the parent domain of a local machine using /parentdomain.
   </Example>
   <Example id="S0353" name="NOKKI">
    NOKKI can gather information on the victim IP address.
   </Example>
   <Example id="S0346" name="OceanSalt">
    OceanSalt can collect the victim’s IP address.
   </Example>
   <Example id="S0340" name="Octopus">
    Octopus can collect the host IP address from the victim’s machine.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has run ipconfig /all on a victim.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum can collect network information, including the host IP address, DNS, and proxy information.
   </Example>
   <Example id="S0365" name="Olympic Destroyer">
    Olympic Destroyer uses API calls to enumerate the infected system's ARP table.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used ipconfig, nbtstat, tracert, route print, and cat /etc/hosts commands.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors discovered the local network configuration with ipconfig.
   </Example>
   <Example id="S0229" name="Orz">
    Orz can gather victim proxy information.
   </Example>
   <Example id="S0165" name="OSInfo">
    OSInfo discovers the current domain information.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    OSX_OCEANLOTUS.D can collect the network interface MAC address on the infected host.
   </Example>
   <Example id="S0556" name="Pay2Key">
    Pay2Key can identify the IP and MAC addresses of the compromised host.
   </Example>
   <Example id="S1050" name="PcShare">
    PcShare can obtain the proxy settings of a compromised machine using InternetQueryOptionA and its IP address by running nslookup myip.opendns.comresolver1.opendns.com\r\n.
   </Example>
   <Example id="S0587" name="Penquin">
    Penquin can report the IP of the compromised host to attacker controlled infrastructure.
   </Example>
   <Example id="S1031" name="PingPull">
    PingPull can retrieve the IP address of a compromised host.
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon can collect and send the local IP address, RDP information, and the network adapter physical address as a part of its C2 beacon.
   </Example>
   <Example id="S0124" name="Pisloader">
    Pisloader has a command to collect the victim's IP address.
   </Example>
   <Example id="S0254" name="PLAINTEE">
    PLAINTEE uses the ipconfig /all command to gather the victim’s IP address.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 can enumerate network adapter information.
   </Example>
   <Example id="S0139" name="PowerDuke">
    PowerDuke has a command to get the victim's domain and NetBIOS name.
   </Example>
   <Example id="S0441" name="PowerShower">
    PowerShower has the ability to identify the current Windows domain of the infected host.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS can retrieve IP, network adapter configuration information, and domain from compromised hosts.
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER may collect network configuration data by running ipconfig /all on a victim.
   </Example>
   <Example id="S0113" name="Prikormka">
    A module in Prikormka collects information from the victim about its IP addresses and MAC addresses.
   </Example>
   <Example id="S0238" name="Proxysvc">
    Proxysvc collects the network adapter information and domain/username information based on current remote sessions.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy has built in commands to identify a host’s IP address and find out other network configuration settings by viewing connected sessions.
   </Example>
   <Example id="S0583" name="Pysa">
    Pysa can perform network reconnaissance using the Advanced IP Scanner tool.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can use net config workstation, arp -a, and ipconfig /all to gather network configuration information.
   </Example>
   <Example id="S0269" name="QUADAGENT">
    QUADAGENT gathers the current domain the victim system belongs to.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT has the ability to enumerate the Wide Area Network (WAN) IP through requests to ip-api
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can use ipconfig and Arp to collect network configuration information, including routing information and ARP tables.
   </Example>
   <Example id="S0241" name="RATANKBA">
    RATANKBA gathers the victim’s IP address via the ipconfig -all command.
   </Example>
   <Example id="S0172" name="Reaver">
    Reaver collects the victim's IP address.
   </Example>
   <Example id="S0153" name="RedLeaves">
    RedLeaves can obtain information about network parameters.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec can obtain information about network configuration, including the routing table, ARP cache, and DNS cache.
   </Example>
   <Example id="S0379" name="Revenge RAT">
    Revenge RAT collects the IP address and MAC address from the system.
   </Example>
   <Example id="S0433" name="Rifdoor">
    Rifdoor has the ability to identify the IP address of the compromised host.
   </Example>
   <Example id="S0448" name="Rising Sun">
    Rising Sun can detect network adapter and IP address information.
   </Example>
   <Example id="S0270" name="RogueRobin">
    RogueRobin gathers the IP address and domain from the victim’s machine.
   </Example>
   <Example id="S0103" name="route">
    route can be used to discover routing configuration information.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk has called GetIpNetTable in attempt to identify all mounted drives and hosts that have Address Resolution Protocol (ARP) entries.
   </Example>
   <Example id="S0085" name="S-Type">
    S-Type has used ipconfig /all on a compromised host.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot can collect the IP address of a victim machine.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team checks for connectivity to other resources in the network.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has the ability to determine the domain name and whether a proxy is configured on a compromised host.
   </Example>
   <Example id="S0596" name="ShadowPad">
    ShadowPad has collected the domain name of the victim system.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon obtains the target's IP address and local network segment.
   </Example>
   <Example id="S0450" name="SHARPSTATS">
    SHARPSTATS has the ability to identify the domain of the compromised host.
   </Example>
   <Example id="S0445" name="ShimRatReporter">
    ShimRatReporter gathered the local proxy, domain, IP, routing tables, mac address, gateway, DNS servers, and DHCP status information from an infected host.
   </Example>
   <Example id="S0589" name="Sibot">
    Sibot checked if the compromised system is configured to use proxies.
   </Example>
   <Example id="G1008" name="SideCopy">
    SideCopy has identified the IP address of a compromised host.
   </Example>
   <Example id="S0610" name="SideTwist">
    SideTwist has the ability to collect the domain name on a compromised host.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has used malware to collect information on network interfaces, including the MAC address.
   </Example>
   <Example id="S0633" name="Sliver">
    Sliver has the ability to gather network configuration information.
   </Example>
   <Example id="S1035" name="Small Sieve">
    Small Sieve can obtain the IP address of a victim host.
   </Example>
   <Example id="S0516" name="SoreFang">
    SoreFang can collect the TCP/IP, DNS, DHCP, and network adapter configuration on a compromised host via ipconfig.exe /all.
   </Example>
   <Example id="S0374" name="SpeakUp">
    SpeakUp uses the ifconfig -a command.
   </Example>
   <Example id="S0646" name="SpicyOmelette">
    SpicyOmelette can identify the IP of a compromised system.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has collected the victim’s external IP address.
   </Example>
   <Example id="S1037" name="STARWHALE">
    STARWHALE has the ability to collect the IP address of an infected host.
   </Example>
   <Example id="G0038" name="Stealth Falcon">
    Stealth Falcon malware gathers the Address Resolution Protocol (ARP) table from the victim.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity can identify the IP address of a compromised host.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet collects the IP address of a compromised system.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST collected all network interface MAC addresses that are up and not loopback devices, as well as IP address, DHCP configuration, and domain information.
   </Example>
   <Example id="S0018" name="Sykipot">
    Sykipot may use ipconfig /all to gather system network configuration details.
   </Example>
   <Example id="S0060" name="Sys10">
    Sys10 collects the local IP address of the victim and sends it to the C2.
   </Example>
   <Example id="S0098" name="T9000">
    T9000 gathers and beacons the MAC and IP addresses during installation.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor has collected the MAC address of a compromised host; it can also use GetAdaptersInfo to identify network adapters.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to identify the MAC address on an infected host.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has enumerated the host machine’s IP address.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 actors use NBTscan to discover vulnerable systems.
   </Example>
   <Example id="S0678" name="Torisma">
    Torisma can collect the local MAC address using GetAdaptersInfo as well as the system's IP address.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot obtains the IP address, location, and other relevant network information from the victim’s machine.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can gather information on the network configuration of a compromised host.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has used scripts to collect the host's network topology.
   </Example>
   <Example id="S0436" name="TSCookie">
    TSCookie has the ability to identify the IP of the infected host.
   </Example>
   <Example id="S0647" name="Turian">
    Turian can retrieve the internal IP address of a compromised host.
   </Example>
   <Example id="G0010" name="Turla">
    Turla surveys a system upon check-in to discover network configuration details using the arp -a, nbtstat -n, net config, ipconfig /all, and route commands, as well as NBTscan.
   </Example>
   <Example id="S0130" name="Unknown Logger">
    Unknown Logger can obtain information about the victim's IP address.
   </Example>
   <Example id="S0275" name="UPPERCUT">
    UPPERCUT has the capability to gather the victim's proxy information.
   </Example>
   <Example id="S0452" name="USBferry">
    USBferry can detect the infected machine's network topology using ipconfig and arp.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has the ability to identify the domain and the MAC and IP addresses of an infected machine.
   </Example>
   <Example id="S0257" name="VERMIN">
    VERMIN gathers the local IP address.
   </Example>
   <Example id="S0180" name="Volgmer">
    Volgmer can gather the IP address from the victim's machine.
   </Example>
   <Example id="S0366" name="WannaCry">
    WannaCry will attempt to determine the local network segment it is a part of.
   </Example>
   <Example id="S0515" name="WellMail">
    WellMail can identify the IP address of the victim system.
   </Example>
   <Example id="S0514" name="WellMess">
    WellMess can identify the IP address and user domain on the target machine.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used "ipconfig" to identify the network configuration of a victim machine.
   </Example>
   <Example id="S0341" name="Xbash">
    Xbash can collect IP addresses and local intranet information from a victim’s machine.
   </Example>
   <Example id="S0653" name="xCaon">
    xCaon has used the GetAdaptersInfo() API call to get the victim's MAC address.
   </Example>
   <Example id="S0248" name="yty">
    yty runs ipconfig /all and collects the domain name.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy runs the ipconfig /all command.
   </Example>
   <Example id="S0230" name="ZeroT">
    ZeroT gathers the victim's IP address and domain information, and then sends it to its C2 server.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has used a tool to enumerate proxy settings in the target environment.
   </Example>
   <Example id="S0350" name="zwShell">
    zwShell can obtain the victim IP address.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1016.001" name="System Network Configuration Discovery: Internet Connection Discovery">
  Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using Ping, tracert, and GET requests to websites.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 has used GoldFinder to perform HTTP GET requests to check internet connectivity and identify HTTP proxy servers and other redirectors that an HTTP request travels through.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has tested connectivity between a compromised machine and a C2 server using  Ping with commands such as CSIDL_SYSTEM\cmd.exe /c ping -n 1.
   </Example>
   <Example id="S0597" name="GoldFinder">
    GoldFinder performed HTTP GET requests to check internet connectivity and identify HTTP proxy servers and other redirectors that an HTTP request traveled through.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has used tools including BITSAdmin to test internet connectivity from compromised hosts.
   </Example>
   <Example id="S0284" name="More_eggs">
    More_eggs has used HTTP GET requests to check internet connectivity.
   </Example>
   <Example id="S0691" name="Neoichor">
    Neoichor can check for Internet connectivity by contacting bing
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used a Visual Basic script that checked for internet connectivity.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can measure the download speed on a targeted host.
   </Example>
   <Example id="S0686" name="QuietSieve">
    QuietSieve can check C2 connectivity with a ping to 8.8.8.8 (Google public DNS).
   </Example>
   <Example id="S0448" name="Rising Sun">
    Rising Sun can test a connection to a specified network IP address over a specified port number.
   </Example>
   <Example id="S1049" name="SUGARUSH">
    SUGARUSH has checked for internet connectivity from an infected host before attempting to establish a new TCP connection.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used tracert to check internet connectivity.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1049" name="System Network Connections Discovery">
  Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   IaaS, Linux, Network, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0018" name="admin@338">
    admin@338 actors used the following command following exploitation of a machine with LOWBALL malware to display network connections: netstat -ano &gt;&gt; %temp%\download
   </Example>
   <Example id="G0138" name="Andariel">
    Andariel has used the netstat -naop tcp command to display TCP connections on a victim's machine.
   </Example>
   <Example id="G0006" name="APT1">
    APT1 used the net use command to get a listing on network connections.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has a tool that can enumerate current network connections.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 used the netstat -anpo tcp command to display TCP connections on the victim's machine.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 installed a port monitoring tool, MAPMAKER, to print the active TCP connections on the local system.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 has enumerated IP addresses of network resources and used the netstat command as part of network reconnaissance. The group has also used a malware variant, HIGHNOON, to enumerate active RDP sessions.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has the ability to gather TCP and UDP table status listings.
   </Example>
   <Example id="S0638" name="Babuk">
    Babuk can use "WNetOpenEnumW" and "WNetEnumResourceW" to enumerate files in network resources for encryption.
   </Example>
   <Example id="G0135" name="BackdoorDiplomacy">
    BackdoorDiplomacy has used NetCat and PortQry  to enumerate network connections and display the status of related TCP and UDP ports.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    BlackEnergy has gathered information about local network connections using netstat.
   </Example>
   <Example id="S0335" name="Carbon">
    Carbon uses the netstat -r and netstat -an commands.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower can use netsh wlan show profiles to list specific Wi-Fi profile details.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used netstat -ano | findstr EST to discover network connections.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can produce a sessions report from compromised hosts.
   </Example>
   <Example id="S0244" name="Comnie">
    Comnie executes the netstat -ano command.
   </Example>
   <Example id="S0575" name="Conti">
    Conti can enumerate routine network connections from a compromised host.
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can discover active sessions for a targeted system.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba can use the function GetIpNetTable to recover the last connections to the victim's machine.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack can collect network and active connection information.
   </Example>
   <Example id="S0038" name="Duqu">
    The discovery modules used with Duqu can collect information on network connections.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca employed a PowerShell script called RDPConnectionParser to read and filter the Windows event log "Microsoft-Windows-TerminalServices-RDPClient/Operational"(Event ID 1024) to obtain network information from RDP connections. Earth Lusca has also used netstat from a compromised system to obtain network connection information.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor can enumerate all connected drives.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can enumerate the current network connections of a host.
   </Example>
   <Example id="S0091" name="Epic">
    Epic uses the net use, net session, and netstat commands to gather information on network connections.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro has been used to execute netstat -ano on a compromised host.
   </Example>
   <Example id="C0007" name="FunnyDream">
    During FunnyDream, the threat actors used netstat to discover network connections on remote systems.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM used netstat -oan to obtain information about the victim network connections.
   </Example>
   <Example id="S0237" name="GravityRAT">
    GravityRAT uses the netstat command to find open ports on the victim’s machine.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has used netstat to monitor connections to specific ports.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT can list network connections.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang performs local network connection discovery using netstat.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has used net session on the victim's machine.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs collects a list of active and listening connections by using the command netstat -nao as well as a list of available network mappings with net use.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used net use to identify and establish a network connection with a remote host.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar has a plugin to retrieve information about all active network sessions on the infected server.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can identify the IP and port numbers for all remote connections from the compromised host.
   </Example>
   <Example id="S0409" name="Machete">
    Machete uses the netsh wlan show networks mode=bssid and netsh wlan show interfaces commands to list all nearby WiFi networks and connected interfaces.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has used quser.exe to identify existing RDP connections.
   </Example>
   <Example id="S0449" name="Maze">
    Maze has used the "WNetOpenEnumW", "WNetEnumResourceW", "WNetCloseEnum" and "WNetAddConnection2W" functions to enumerate the network resources on the infected machine.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used net use to conduct connectivity checks to machines.
   </Example>
   <Example id="S0443" name="MESSAGETAP">
    After loading the keyword and phone data files, MESSAGETAP begins monitoring all network connections to and from the victim server.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used a PowerShell backdoor to check for Skype connections on the target machine.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has used netstat -ano to determine network connection information.
   </Example>
   <Example id="S0102" name="nbtstat">
    nbtstat can be used to discover current NetBIOS sessions.
   </Example>
   <Example id="S0039" name="Net">
    Commands such as net use and net session can be used in Net to gather information about network connections from a particular host.
   </Example>
   <Example id="S0104" name="netstat">
    netstat can be used to enumerate local network connections, including active TCP connections and other network statistics.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE can capture session logon details from a compromised host.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used netstat -an on a victim to get a listing of network connections.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum was seen using NetSess to discover NetBIOS sessions.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used the net session, net use, and netstat commands as part of their advanced reconnaissance.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors collected a list of open connections on the infected system using netstat and checks whether it has an internet connection.
   </Example>
   <Example id="S0165" name="OSInfo">
    OSInfo enumerates the current network connections similar to  net use .
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX has a module for enumerating TCP and UDP network connections and associated processes using the netstat command.
   </Example>
   <Example id="G0033" name="Poseidon Group">
    Poseidon Group obtains and saves information about victim network interfaces and addresses.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 contains an implementation of netstat to enumerate TCP and UDP connections.
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER may collect active network connections by running netstat -an on a victim.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy has a built-in utility command for netstat, can do net session through PowerView, and has an interactive shell which can be used to discover additional information.
   </Example>
   <Example id="S1032" name="PyDCrypt">
    PyDCrypt has used netsh to find RPC connections on remote machines.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can use netstat to enumerate current network connections.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can use netstat to enumerate network connections.
   </Example>
   <Example id="S0241" name="RATANKBA">
    RATANKBA uses netstat -ano to search for specific IP address ranges.
   </Example>
   <Example id="S0153" name="RedLeaves">
    RedLeaves can enumerate drives and Remote Desktop sessions.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec can obtain a list of active connections and open ports.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team had gathered user, IP address, and server data related to RDP sessions on a compromised host. It has also accessed network diagram files useful for understanding how a host's network was configured.
   </Example>
   <Example id="S0445" name="ShimRatReporter">
    ShimRatReporter used the Windows function GetExtendedUdpTable to detect connected UDP endpoints.
   </Example>
   <Example id="S0063" name="SHOTPUT">
    SHOTPUT uses netstat to list TCP connection status.
   </Example>
   <Example id="S0589" name="Sibot">
    Sibot has retrieved a GUID associated with a present LAN connection on a compromised machine.
   </Example>
   <Example id="S0633" name="Sliver">
    Sliver can collect network connection information.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA can enumerate open ports on a victim machine.
   </Example>
   <Example id="S0374" name="SpeakUp">
    SpeakUp uses the arp -a command.
   </Example>
   <Example id="S0018" name="Sykipot">
    Sykipot may use netstat -ano to display active network connections.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has run netstat -anp to search for rival malware connections.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has used net use and netstat to conduct internal discovery of systems. The group has also used quser.exe to identify existing RDP sessions on a victim.
   </Example>
   <Example id="S0678" name="Torisma">
    Torisma can use WTSEnumerateSessionsW to monitor remote desktop connections.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can use netstat to collect a list of network connections.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has tested if the localhost network is available and other connection capability on an infected system using command scripts.
   </Example>
   <Example id="G0010" name="Turla">
    Turla surveys a system upon check-in to discover active local network connections using the netstat -an, net use, net file, and net session commands.
   </Example>
   <Example id="S0452" name="USBferry">
    USBferry can use netstat and nbtstat to detect active network connections.
   </Example>
   <Example id="S0180" name="Volgmer">
    Volgmer can gather information about TCP connection state.
   </Example>
   <Example id="S0579" name="Waterbear">
    Waterbear can use API hooks on GetExtendedTcpTable to retrieve a table containing a list of TCP endpoints available to the application.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy uses netstat -aon to gather network connection information.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1033" name="System Owner/User Discovery">
  Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-577
  </CAPEC_ID>
  <Examples>
   <Example id="S1028" name="Action RAT">
    Action RAT has the ability to collect the username from an infected host.
   </Example>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla can collect the username from the victim’s machine.
   </Example>
   <Example id="S0092" name="Agent.btz">
    Agent.btz obtains the victim username and saves it to a file.
   </Example>
   <Example id="S1025" name="Amadey">
    Amadey has collected the user name from a compromised host using GetUserNameA.
   </Example>
   <Example id="G0073" name="APT19">
    APT19 used an HTTP malware variant and a Port 22 malware variant to collect the victim’s username.
   </Example>
   <Example id="G0022" name="APT3">
    An APT3 downloader uses the Windows command "cmd.exe" /C whoami to verify that it is running with the elevated privileges of "System."
   </Example>
   <Example id="G0050" name="APT32">
    APT32 collected the victim's username and executed the whoami command on the victim's machine. APT32 executed shellcode to collect the username on the victim's machine.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 identifies the victim username.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has identified primary users, currently logged in users, sets of users that commonly use a system, or inactive users.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 used Remexi to collect usernames from the system.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used the WMIEXEC utility to execute whoami commands on remote machines.
   </Example>
   <Example id="S0456" name="Aria-body">
    Aria-body has the ability to identify the username on a compromised host.
   </Example>
   <Example id="S1029" name="AuTo Stealer">
    AuTo Stealer has the ability to collect the username from an infected host.
   </Example>
   <Example id="S0344" name="Azorult">
    Azorult can collect the username from the victim’s machine.
   </Example>
   <Example id="S0414" name="BabyShark">
    BabyShark has executed the whoami command.
   </Example>
   <Example id="S0093" name="Backdoor.Oldrea">
    Backdoor.Oldrea collects the current username from the victim.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can identify the username of the infected user.
   </Example>
   <Example id="S0017" name="BISCUIT">
    BISCUIT has a command to gather the username from the system.
   </Example>
   <Example id="S0521" name="BloodHound">
    BloodHound can collect information on user sessions.
   </Example>
   <Example id="S0657" name="BLUELIGHT">
    BLUELIGHT can collect the username on a compromised host.
   </Example>
   <Example id="S0486" name="Bonadan">
    Bonadan has discovered the username of the user running the backdoor.
   </Example>
   <Example id="S0635" name="BoomBox">
    BoomBox can enumerate the username on a compromised host.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee has the ability to identify the user name.
   </Example>
   <Example id="S0351" name="Cannon">
    Cannon can gather the username from the system.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT can collect the username from a victim machine.
   </Example>
   <Example id="S0572" name="Caterpillar WebShell">
    Caterpillar WebShell can obtain a list of user accounts from a victim's machine.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes has collected the username and UID from the infected machine.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used the quser command to show currently logged on users.
   </Example>
   <Example id="S0667" name="Chrommme">
    Chrommme can retrieve the username from a targeted system.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can identify the username on a compromised host.
   </Example>
   <Example id="S1024" name="CreepySnail">
    CreepySnail can execute getUsername on compromised systems.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson can identify the user on a targeted system.
   </Example>
   <Example id="S0498" name="Cryptoistic">
    Cryptoistic can gather data on the user of a compromised host.
   </Example>
   <Example id="S0334" name="DarkComet">
    DarkComet gathers the username from the victim’s machine.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman has collected the username from a victim machine.
   </Example>
   <Example id="S0354" name="Denis">
    Denis enumerates and collects the username from the victim’s machine.
   </Example>
   <Example id="S0021" name="Derusbi">
    A Linux version of Derusbi checks if the victim user ID is anything other than zero (normally used for root), and the malware will not execute if it does not have root privileges. Derusbi also gathers the username of the victim.
   </Example>
   <Example id="S0659" name="Diavol">
    Diavol can collect the username from a compromised host.
   </Example>
   <Example id="S1021" name="DnsSystem">
    DnsSystem can use the Windows user name to create a unique identification for infected users and systems.
   </Example>
   <Example id="S0186" name="DownPaper">
    DownPaper collects the victim username and sends it to the C2 server.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly used the command query user on victim hosts.
   </Example>
   <Example id="S0694" name="DRATzarus">
    DRATzarus can obtain a list of users from an infected machine.
   </Example>
   <Example id="S0024" name="Dyre">
    Dyre has the ability to identify the users on a compromised host.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca collected information on user accounts via the whoami command.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor has used tools to gather information about users.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can enumerate the username on targeted hosts.
   </Example>
   <Example id="S0091" name="Epic">
    Epic collects the user name from the victim’s machine.
   </Example>
   <Example id="S0568" name="EVILNUM">
    EVILNUM can obtain the username from the victim's machine.
   </Example>
   <Example id="S0401" name="Exaramel for Linux">
    Exaramel for Linux can run whoami to identify the system owner.
   </Example>
   <Example id="S0569" name="Explosive">
    Explosive has collected the username from the infected host.
   </Example>
   <Example id="S0171" name="Felismus">
    Felismus collects the current username and sends it to the C2 server.
   </Example>
   <Example id="S0267" name="FELIXROOT">
    FELIXROOT collects the username from the victim’s machine.
   </Example>
   <Example id="G0051" name="FIN10">
    FIN10 has used Meterpreter to enumerate users on remote systems.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro has been used to run the whoami command on the system.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy enumerates the current user during the initial infection.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors used Empire to enumerate hosts and gather username, machine name, and administrative permissions information.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream has the ability to gather user information from the targeted system using whoami/upn&amp;whoami/fqdn&amp;whoami/logonid&amp;whoami/all.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM used whoami and query user to obtain information about the victim user.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    A Gamaredon Group file stealer can gather the victim's username to send to a C2 server.
   </Example>
   <Example id="S0168" name="Gazer">
    Gazer obtains the current user's security identifier.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium has the ability to distinguish between a standard user and an administrator on a compromised host.
   </Example>
   <Example id="S0460" name="Get2">
    Get2 has the ability to identify the current username of an infected host.
   </Example>
   <Example id="S0249" name="Gold Dragon">
    Gold Dragon collects the endpoint victim's username and uses it as a basis for downloading additional components from the C2 server.
   </Example>
   <Example id="S0477" name="Goopy">
    Goopy has the ability to enumerate the infected system's user name.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can collect the username from the victim's machine.
   </Example>
   <Example id="S0237" name="GravityRAT">
    GravityRAT collects the victim username along with other account information (account type, description, full name, SID and status).
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent can identify the user id on a target machine.
   </Example>
   <Example id="S0214" name="HAPPYWORK">
    can collect the victim user name.
   </Example>
   <Example id="S0391" name="HAWKBALL">
    HAWKBALL can collect the user name of the system.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has run whoami on compromised machines to identify the current user.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant has the ability to collect the username on the infected host.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole lists local users and session information.
   </Example>
   <Example id="S0015" name="Ixeshe">
    Ixeshe collects the username from the victim’s machine.
   </Example>
   <Example id="S0201" name="JPIN">
    JPIN can obtain the victim user name.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar gathers information on users.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has used implants capable of collecting the signed-in username.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can identify logged in users across the domain and views user sessions.
   </Example>
   <Example id="S0162" name="Komplex">
    The OsInfo function in Komplex collects the current running username.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI can collect the username from the victim’s machine.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs collects registered owner details by using the commands systeminfo and net config workstation.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Various Lazarus Group malware enumerates logged-on users.
   </Example>
   <Example id="S0362" name="Linux Rabbit">
    Linux Rabbit opens a socket on port 22 and if it receives a response it attempts to obtain the machine's hostname and Top-Level Domain.
   </Example>
   <Example id="S0513" name="LiteDuke">
    LiteDuke can enumerate the account name on a targeted system.
   </Example>
   <Example id="S0680" name="LitePower">
    LitePower can determine if the current user has admin privileges.
   </Example>
   <Example id="S0681" name="Lizar">
    Lizar can collect the username from the system.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has the ability to discover the username on the infected host.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer has the ability to identify the username on a compromised host.
   </Example>
   <Example id="S1016" name="MacMa">
    MacMa can collect the username from the compromised machine.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound malware has obtained the victim username and sent it to the C2 server.
   </Example>
   <Example id="S0652" name="MarkiRAT">
    MarkiRAT can retrieve the victim’s username.
   </Example>
   <Example id="S0459" name="MechaFlounder">
    MechaFlounder has the ability to identify the username and hostname on a compromised host.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has collected the username from the victim's machine.
   </Example>
   <Example id="S0339" name="Micropsia">
    Micropsia collects the username from the victim’s machine.
   </Example>
   <Example id="S1015" name="Milan">
    Milan can identify users registered to a targeted machine.
   </Example>
   <Example id="S0280" name="MirageFox">
    MirageFox can gather the username from the victim’s machine.
   </Example>
   <Example id="S0084" name="Mis-Type">
    Mis-Type runs tests to determine the privilege level of the compromised user.
   </Example>
   <Example id="S0149" name="MoonWind">
    MoonWind obtains the victim username.
   </Example>
   <Example id="S0284" name="More_eggs">
    More_eggs has the capability to gather the username from the victim's machine.
   </Example>
   <Example id="S0256" name="Mosquito">
    Mosquito runs whoami on the victim’s machine.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used malware that can collect the victim’s username.
   </Example>
   <Example id="S0228" name="NanHaiShu">
    NanHaiShu collects the username from the victim.
   </Example>
   <Example id="S0590" name="NBTscan">
    NBTscan can list active users on the system.
   </Example>
   <Example id="S0272" name="NDiskMonitor">
    NDiskMonitor obtains the victim username and encrypts the information to send over its C2 channel.
   </Example>
   <Example id="S0691" name="Neoichor">
    Neoichor can collect the user name from a victim's machine.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors used password cracking and pass-the-hash tools to discover usernames and passwords.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT enumerates the current user during the initial infection.
   </Example>
   <Example id="S0353" name="NOKKI">
    NOKKI can collect the username from the victim’s machine.
   </Example>
   <Example id="S0644" name="ObliqueRAT">
    ObliqueRAT can check for blocklisted usernames on infected endpoints.
   </Example>
   <Example id="S0340" name="Octopus">
    Octopus can collect the username from the victim’s machine.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has run whoami on a victim.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum can collect the victim username.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used the query user and whoami commands as part of their advanced reconnaissance.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors enumerated sessions and users on a remote host, and identified privileged users logged into a targeted system.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork collected the victim username and whether it was running as admin, then sent the information to its C2 server.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT sent username, computer name, and the previously generated UUID in reply to a "who" command from C2.
   </Example>
   <Example id="S0139" name="PowerDuke">
    PowerDuke has commands to get the current user's name and SID.
   </Example>
   <Example id="S0441" name="PowerShower">
    PowerShower has the ability to identify the current user on the infected host.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS has the ability to identify the username on the compromised host.
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER may collect information about the currently logged in user by running whoami on a victim.
   </Example>
   <Example id="S0113" name="Prikormka">
    A module in Prikormka collects information from the victim about the current user name.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can enumerate local information for Linux hosts and find currently logged on users for Windows hosts.
   </Example>
   <Example id="S1032" name="PyDCrypt">
    PyDCrypt has probed victim machines with whoami and has collected the username from the machine.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can identify the user name on a compromised system.
   </Example>
   <Example id="S0269" name="QUADAGENT">
    QUADAGENT gathers the victim username.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT can enumerate the username and account type.
   </Example>
   <Example id="S0241" name="RATANKBA">
    RATANKBA runs the whoami and query user commands.
   </Example>
   <Example id="S0662" name="RCSession">
    RCSession can gather system owner information, including user and administrator privileges.
   </Example>
   <Example id="S0172" name="Reaver">
    Reaver collects the victim's username.
   </Example>
   <Example id="S0153" name="RedLeaves">
    RedLeaves can obtain information about the logged on user both locally and for Remote Desktop sessions.
   </Example>
   <Example id="S0125" name="Remsec">
    Remsec can obtain information about the current user.
   </Example>
   <Example id="S0379" name="Revenge RAT">
    Revenge RAT gathers the username from the system.
   </Example>
   <Example id="S0258" name="RGDoor">
    RGDoor executes the whoami on the victim’s machine.
   </Example>
   <Example id="S0433" name="Rifdoor">
    Rifdoor has the ability to identify the username on the compromised host.
   </Example>
   <Example id="S0448" name="Rising Sun">
    Rising Sun can detect the username of the infected host.
   </Example>
   <Example id="S0270" name="RogueRobin">
    RogueRobin collects the victim’s username and whether that user is an admin.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can collect the username from a compromised host.
   </Example>
   <Example id="S0148" name="RTM">
    RTM can obtain the victim username and permissions.
   </Example>
   <Example id="S0085" name="S-Type">
    S-Type has run tests to determine the privilege level of the compromised user.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot can collect the username from a compromised host.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has collected the username from a compromised host.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has the ability to identify the user on a compromised host.
   </Example>
   <Example id="S0382" name="ServHelper">
    ServHelper will attempt to enumerate the username of the victim.
   </Example>
   <Example id="S0596" name="ShadowPad">
    ShadowPad has collected the username of the victim system.
   </Example>
   <Example id="S0450" name="SHARPSTATS">
    SHARPSTATS has the ability to identify the username on the compromised host.
   </Example>
   <Example id="S0610" name="SideTwist">
    SideTwist can collect the username on a targeted system.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has used tools to identify the user of a compromised host.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can gather a list of logged on users.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA has collected the username from a victim machine.
   </Example>
   <Example id="S1035" name="Small Sieve">
    Small Sieve can obtain the id of a logged in user.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM has used whoami commands to identify system owners.
   </Example>
   <Example id="S0627" name="SodaMaster">
    SodaMaster can identify the username on a compromised host.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT can execute getinfo  to identify the username on a compromised host.
   </Example>
   <Example id="S0543" name="Spark">
    Spark has run the whoami command and has a built-in command to identify the user logged in.
   </Example>
   <Example id="S0374" name="SpeakUp">
    SpeakUp uses the whoami command.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle can collect the user name from a compromised host.
   </Example>
   <Example id="S0058" name="SslMM">
    SslMM sends the logged-on username to its hard-coded C2.
   </Example>
   <Example id="S1037" name="STARWHALE">
    STARWHALE can gather the username from an infected host.
   </Example>
   <Example id="G0038" name="Stealth Falcon">
    Stealth Falcon malware gathers the registered user and primary owner name via WMI.
   </Example>
   <Example id="S1034" name="StrifeWater">
    StrifeWater can collect the user name from the victim's machine.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST collected the username from a compromised host.
   </Example>
   <Example id="S0242" name="SynAck">
    SynAck gathers user names from infected hosts.
   </Example>
   <Example id="S0060" name="Sys10">
    Sys10 collects the account name of the logged-in user and sends it to the C2.
   </Example>
   <Example id="S0098" name="T9000">
    T9000 gathers and beacons the username of the logged in account during installation. It will also gather the username of running processes to determine if it is running as SYSTEM.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has used whoami to collect system user information.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot can identify the user and groups the user belongs to on a compromised host.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can gather information about the user on a compromised host.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper used letmein to scan for saved usernames on the target system.
   </Example>
   <Example id="S0647" name="Turian">
    Turian can retrieve usernames.
   </Example>
   <Example id="S0130" name="Unknown Logger">
    Unknown Logger can obtain information about the victim usernames.
   </Example>
   <Example id="S0275" name="UPPERCUT">
    UPPERCUT has the capability to collect the current logged on user’s username from a machine.
   </Example>
   <Example id="S0476" name="Valak">
    Valak can gather information regarding the user.
   </Example>
   <Example id="S0257" name="VERMIN">
    VERMIN gathers the username from the victim’s machine.
   </Example>
   <Example id="S0515" name="WellMail">
    WellMail can identify the current username on the victim system.
   </Example>
   <Example id="S0514" name="WellMess">
    WellMess can collect the username on the victim machine to send to C2.
   </Example>
   <Example id="S0155" name="WINDSHIELD">
    WINDSHIELD can gather the victim user name.
   </Example>
   <Example id="G0112" name="Windshift">
    Windshift has used malware to identify the username on a compromised host.
   </Example>
   <Example id="S0219" name="WINERACK">
    WINERACK can gather information on the victim username.
   </Example>
   <Example id="S0059" name="WinMM">
    WinMM uses NetUser-GetInfo to identify that it is running under an "Admin" account on the local system.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used "whoami" to identify the local user and their privileges.
   </Example>
   <Example id="S0161" name="XAgentOSX">
    XAgentOSX contains the getInfoOSX function to return the OS X version as well as the current user.
   </Example>
   <Example id="S0248" name="yty">
    yty collects the victim’s username.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy gets the username from the system.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has used a tool to capture the username on a compromised host in order to register it with C2.
   </Example>
   <Example id="S0350" name="zwShell">
    zwShell can obtain the name of the logged-in user on the victim.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell can collect the owner and organization information from the target workstation.
   </Example>
   <Example id="S1013" name="ZxxZ">
    ZxxZ can collect the username from a compromised host.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Object Access
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Access | Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1216" name="System Script Proxy Execution">
  Adversaries may use trusted scripts, often signed with certificates, to proxy the execution of malicious files. Several Microsoft signed scripts that have been downloaded from Microsoft or are default on Windows installations can be used to proxy execution of other files.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Defense_Bypassed>
   Application control, Digital Certificate Validation
  </Defense_Bypassed>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    Certain signed scripts that can be used to execute other programs may not be necessary within a given environment. Use application control configured to block execution of these scripts if they are not required for a given system or network to prevent potential misuse by adversaries.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1216.001" name="System Script Proxy Execution: PubPrn">
  Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a Visual Basic script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the Windows Command Shell via Cscript.exe. For example, the following code publishes a printer within the specified domain: cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Defense_Bypassed>
   Application Control, Digital Certificate Validation
  </Defense_Bypassed>
  <Examples>
   <Example id="G0050" name="APT32">
    APT32 has used PubPrn.vbs within execution scripts to execute malware, possibly bypassing defenses.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, update Windows Defender Application Control policies to include rules that block the older, vulnerable versions of PubPrn.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Certain signed scripts that can be used to execute other programs may not be necessary within a given environment. Use application control configured to block execution of these scripts if they are not required for a given system or network to prevent potential misuse by adversaries.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0012" name="Script">
    Script Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1007" name="System Service Discovery">
  Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as sc query, tasklist /svc, systemctl --type=service, and net start.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <CAPEC_ID>
   CAPEC-574
  </CAPEC_ID>
  <Examples>
   <Example id="G0018" name="admin@338">
    admin@338 actors used the following command following exploitation of a machine with LOWBALL malware to obtain information about services: net start &gt;&gt; %temp%\download
   </Example>
   <Example id="G0006" name="APT1">
    APT1 used the commands net start and tasklist to get a listing of the services on the system.
   </Example>
   <Example id="G0143" name="Aquatic Panda">
    Aquatic Panda has attempted to discover services for third party EDR products.
   </Example>
   <Example id="S0638" name="Babuk">
    Babuk can enumerate all services running on a compromised host.
   </Example>
   <Example id="S0127" name="BBSRAT">
    BBSRAT can query service configuration information.
   </Example>
   <Example id="S0570" name="BitPaymer">
    BitPaymer can enumerate existing Windows services on the host that are configured to run as LocalSystem.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has used TROJ_GETVERSION to discover system services.
   </Example>
   <Example id="S0572" name="Caterpillar WebShell">
    Caterpillar WebShell can obtain a list of the services from a system.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used net start and net use for system service discovery.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can enumerate services on compromised hosts.
   </Example>
   <Example id="S0244" name="Comnie">
    Comnie runs the command: net start &gt;&gt; %TEMP%\info.dat on a victim.
   </Example>
   <Example id="S0625" name="Cuba">
    Cuba can query service status using QueryServiceStatusEx function.
   </Example>
   <Example id="S0024" name="Dyre">
    Dyre has the ability to identify running services on a compromised host.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca has used Tasklist to obtain information from a compromised host.
   </Example>
   <Example id="S0081" name="Elise">
    Elise executes net start after initial communication is made to the remote server.
   </Example>
   <Example id="S0082" name="Emissary">
    Emissary has the capability to execute the command net start to interact with services.
   </Example>
   <Example id="S0091" name="Epic">
    Epic uses the tasklist /svc command to list the services on the system.
   </Example>
   <Example id="S0049" name="GeminiDuke">
    GeminiDuke collects information on programs and services on the victim that are configured to automatically run at startup.
   </Example>
   <Example id="S0237" name="GravityRAT">
    GravityRAT has a feature to list the available services on the system.
   </Example>
   <Example id="S0342" name="GreyEnergy">
    GreyEnergy enumerates all Windows services.
   </Example>
   <Example id="S1027" name="Heyoka Backdoor">
    Heyoka Backdoor can check if it is running as a service on a compromised host.
   </Example>
   <Example id="S0431" name="HotCroissant">
    HotCroissant has the ability to retrieve a list of services on the infected host.
   </Example>
   <Example id="S0203" name="Hydraq">
    Hydraq creates a backdoor through which remote attackers can monitor services.
   </Example>
   <Example id="S0398" name="HyperBro">
    HyperBro can list all services and their configurations.
   </Example>
   <Example id="G0119" name="Indrik Spider">
    Indrik Spider has used the win32_service WMI class to retrieve a list of services from the system.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can obtain running services on the victim.
   </Example>
   <Example id="S0015" name="Ixeshe">
    Ixeshe can list running services.
   </Example>
   <Example id="S0201" name="JPIN">
    JPIN can list running services.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT can list local services.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang performs service discovery using net start commands.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used an instrumentor script to gather the names of all services running on a victim's system.
   </Example>
   <Example id="S0236" name="Kwampirs">
    Kwampirs collects a list of running services with the command tasklist /svc.
   </Example>
   <Example id="S0582" name="LookBack">
    LookBack can enumerate services on the victim machine.
   </Example>
   <Example id="S0039" name="Net">
    The net start command can be used in Net to find information about Windows services.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used sc query on a victim to gather information about services.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used the net start command as part of their initial reconnaissance.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used the tasklist command to search for one of its backdoors.
   </Example>
   <Example id="G0033" name="Poseidon Group">
    After compromising a victim, Poseidon Group discovers all running services.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 can enumerate service and service permission information.
   </Example>
   <Example id="S0629" name="RainyDay">
    RainyDay can create and register a service for execution.
   </Example>
   <Example id="S0241" name="RATANKBA">
    RATANKBA uses tasklist /svc to display running tasks.
   </Example>
   <Example id="S0496" name="REvil">
    REvil can enumerate active services.
   </Example>
   <Example id="S0085" name="S-Type">
    S-Type runs the command net start on a victim.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can search for modifiable services that could be used for privilege escalation.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA has the capability to enumerate services.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT can enumerate services on a victim machine.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST collected a list of service names that were hashed using a FNV-1a + XOR algorithm to check against similarly-hashed hardcoded blocklists.
   </Example>
   <Example id="S0018" name="Sykipot">
    Sykipot may use net start to display running services.
   </Example>
   <Example id="S0242" name="SynAck">
    SynAck enumerates all running services.
   </Example>
   <Example id="S0057" name="Tasklist">
    Tasklist can be used to discover services running on a system.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has searched for services such as Alibaba Cloud Security's aliyun service and BMC Helix Cloud Security's bmc-agent service in order to disable them.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot collects a list of install programs and services on the system’s machine.
   </Example>
   <Example id="G0010" name="Turla">
    Turla surveys a system upon check-in to discover running services and associated processes using the tasklist /svc command.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has gathered information about running services.
   </Example>
   <Example id="S0180" name="Volgmer">
    Volgmer queries the system to identify existing services.
   </Example>
   <Example id="S0219" name="WINERACK">
    WINERACK can enumerate services.
   </Example>
   <Example id="S0086" name="ZLib">
    ZLib has the ability to discover and manipulate Windows services.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell can check the services on the system.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1569" name="System Services">
  Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services either locally or remotely. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User, root
  </Permissions_Required>
  <Supports_Remote>
   Yes
  </Supports_Remote>
  <Examples>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has created system services to execute cryptocurrency mining software.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to block processes created by PsExec from running.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Ensure that permissions disallow services that run at a higher permissions level from being created or interacted with by a user with a lower permission level.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Ensure that high permission level service binaries cannot be replaced or modified by users with a lower permission level.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Prevent users from installing their own launch agents or launch daemons.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1569.001" name="System Services: Launchctl">
  Adversaries may abuse launchctl to execute commands or programs. Launchctl interfaces with launchd, the service management framework for macOS. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   macOS
  </Platforms>
  <Permissions_Required>
   User, root
  </Permissions_Required>
  <Examples>
   <Example id="S0584" name="AppleJeus">
    AppleJeus has loaded a plist file using the launchctl command.
   </Example>
   <Example id="S0274" name="Calisto">
    Calisto uses launchctl to enable screen sharing on the victim’s machine.
   </Example>
   <Example id="S0451" name="LoudMiner">
    LoudMiner launched the QEMU services in the /Library/LaunchDaemons/ folder using launchctl. It also uses launchctl to unload all Launch Daemons when updating to a newer version of LoudMiner.
   </Example>
   <Example id="S1048" name="macOS.OSAMiner">
    macOS.OSAMiner has used launchctl to restart the Launch Agent.
   </Example>
   <Example id="S0658" name="XCSSET">
    XCSSET loads a system level launchdaemon using the launchctl load -w command from /System/Librarby/LaunchDaemons/ssh.plist.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1018" name="User Account Management">
    Prevent users from installing their own launch agents or launch daemons.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1569.002" name="System Services: Service Execution">
  Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as sc.exe and Net.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM
  </Permissions_Required>
  <Supports_Remote>
   Yes
  </Supports_Remote>
  <Examples>
   <Example id="S0504" name="Anchor">
    Anchor can create and execute services to load its payload.
   </Example>
   <Example id="G0050" name="APT32">
    APT32's backdoor has used Windows services as a way to execute its malicious payload.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has created new services or modified existing ones to run executables, commands, or scripts.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used post-exploitation tools including RemCom and the Non-sucking Service Manager (NSSM) to execute processes.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used  svchost.exe and Net to execute a system service installed to launch a Cobalt Strike BEACON loader.
   </Example>
   <Example id="S0438" name="Attor">
    Attor's dispatcher can be executed as a service.
   </Example>
   <Example id="S0606" name="Bad Rabbit">
    Bad Rabbit drops a file named infpub.datinto the Windows directory and is executed through SCManager and rundll.exe.
   </Example>
   <Example id="S0127" name="BBSRAT">
    BBSRAT can start, stop, or delete services.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has executed custom-compiled XMRIG miner DLLs by configuring them to execute via the "wercplsupport" service.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used PsExec to deploy beacons on compromised systems.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can create and start services on a compromised host.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can use PsExec to execute a payload on a remote host. It can also use Service Control Manager to start new services.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can use PsExec to execute a payload on a remote host.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has created Windows services to execute encoded PowerShell commands.
   </Example>
   <Example id="S0032" name="gh0st RAT">
    gh0st RAT can execute its service if the Service key exists. If the key does not exist, gh0st RAT will create and run the service.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper can create system services to aid in executing the payload.
   </Example>
   <Example id="S0698" name="HermeticWizard">
    HermeticWizard can use OpenRemoteServiceManager to create a service.
   </Example>
   <Example id="S0376" name="HOPLIGHT">
    HOPLIGHT has used svchost.exe to execute a malicious DLL .
   </Example>
   <Example id="S0203" name="Hydraq">
    Hydraq uses svchost.exe to execute a malicious DLL included in a new service group.
   </Example>
   <Example id="S0398" name="HyperBro">
    HyperBro has the ability to start and stop a specified service.
   </Example>
   <Example id="S0357" name="Impacket">
    Impacket contains various modules emulating other service execution tools such as PsExec.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole has used Windows services as a way to execute its malicious payload.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has used a tool known as RemoteExec (similar to PsExec) to remotely execute batch scripts and binaries.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can run a command on another machine using PsExec.
   </Example>
   <Example id="S0451" name="LoudMiner">
    LoudMiner started the cryptomining virtual machine as a service on the infected machine.
   </Example>
   <Example id="S0039" name="Net">
    The net start and net stop commands can be used in Net to execute or stop Windows services.
   </Example>
   <Example id="S0056" name="Net Crawler">
    Net Crawler uses PsExec to perform remote service manipulation to execute a copy of itself as part of lateral movement.
   </Example>
   <Example id="S0457" name="Netwalker">
    Operators deploying Netwalker have used psexec and certutil to retrieve the Netwalker payload.
   </Example>
   <Example id="S0368" name="NotPetya">
    NotPetya can use PsExec to help propagate itself across a network.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum's loader can create a new service named NtmsSvc to execute the payload.
   </Example>
   <Example id="S0365" name="Olympic Destroyer">
    Olympic Destroyer utilizes PsExec to help propagate itself across a network.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, threat actors ran sc start to start the COMSysApp as part of the service hijacking and sc stop to stop and reconfigure the COMSysApp.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors created services on remote systems for execution purposes.
   </Example>
   <Example id="S0664" name="Pandora">
    Pandora has the ability to install itself as a Windows service.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 contains an implementation of PsExec for remote execution.
   </Example>
   <Example id="S0238" name="Proxysvc">
    Proxysvc registers itself as a service on the victim’s machine to run as a standalone process.
   </Example>
   <Example id="S0029" name="PsExec">
    Microsoft Sysinternals PsExec is a popular administration tool that can be used to execute binaries on remote systems using a temporary Windows service.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy uses PsExec to execute a payload or commands on a remote host.
   </Example>
   <Example id="S0583" name="Pysa">
    Pysa has used PsExec to copy and execute the ransomware.
   </Example>
   <Example id="S0481" name="Ragnar Locker">
    Ragnar Locker has used sc.exe to execute a service that it creates.
   </Example>
   <Example id="S0166" name="RemoteCMD">
    RemoteCMD can execute commands remotely by creating a new service on the remote system.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon creates a new service named "ntssrv" to execute the payload. Shamoon can also spread via PsExec.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has used Winexe to install a service on the remote system.
   </Example>
   <Example id="S0533" name="SLOTHFULMEDIA">
    SLOTHFULMEDIA has the capability to start services.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity can install a service to execute itself as a service.
   </Example>
   <Example id="S0663" name="SysUpdate">
    SysUpdate can manage services and processes.
   </Example>
   <Example id="S0668" name="TinyTurla">
    TinyTurla can install itself as a service on compromised machines.
   </Example>
   <Example id="S0612" name="WastedLocker">
    WastedLocker can execute itself as a service.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can download and execute AdvancedRun.exe via sc.exe.
   </Example>
   <Example id="S0191" name="Winexe">
    Winexe installs a service on the remote system, executes the command, then uninstalls the service.
   </Example>
   <Example id="S0176" name="Wingbird">
    Wingbird uses services.exe to register a new autostart service named "Audit Service" using a copy of the local lsass.exe file.
   </Example>
   <Example id="S0141" name="Winnti for Windows">
    Winnti for Windows can run as a service using svchost.exe.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used services.exe to execute scripts and executables during lateral movement within a victim network.
   </Example>
   <Example id="S0123" name="xCmd">
    xCmd can be used to execute binaries on remote systems by creating and starting a service.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell can create a new service for execution.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to block processes created by PsExec from running.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Ensure that permissions disallow services that run at a higher permissions level from being created or interacted with by a user with a lower permission level.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Ensure that high permission level service binaries cannot be replaced or modified by users with a lower permission level.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0019" name="Service">
    Service Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1529" name="System Shutdown/Reboot">
  Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via Network Device CLI (e.g. reload). Shutting down or rebooting systems may disrupt access to computer resources for legitimate users.
  <Tactic>
   Impact
  </Tactic>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <Impact_Type>
   Availability
  </Impact_Type>
  <Examples>
   <Example id="G0067" name="APT37">
    APT37 has used malware that will issue the command shutdown /r /t 1 to reboot a system after wiping its MBR.
   </Example>
   <Example id="G0082" name="APT38">
    APT38 has used a custom MBR wiper named BOOTWRECK, which will initiate a system reboot after wiping the victim's MBR.
   </Example>
   <Example id="S1033" name="DCSrv">
    DCSrv has a function to sleep for two hours before rebooting the system.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper can initiate a system shutdown.
   </Example>
   <Example id="S0607" name="KillDisk">
    KillDisk attempts to reboot the machine by terminating specific processes.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has rebooted systems after destroying files and wiping the MBR on infected systems.
   </Example>
   <Example id="S0372" name="LockerGoga">
    LockerGoga has been observed shutting down infected systems.
   </Example>
   <Example id="S0582" name="LookBack">
    LookBack can shutdown and reboot the victim machine.
   </Example>
   <Example id="S0449" name="Maze">
    Maze has issued a shutdown command on a victim machine that, upon reboot, will run the ransomware within a VM.
   </Example>
   <Example id="S0368" name="NotPetya">
    NotPetya will reboot the system one hour after infection.
   </Example>
   <Example id="S0365" name="Olympic Destroyer">
    Olympic Destroyer will shut down the compromised system after it is done modifying system configuration settings.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon will reboot the infected system once the wiping functionality has been completed.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can shutdown a compromised host through execution of ExitWindowsEx with the EXW_SHUTDOWN flag.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0013" name="Sensor Health">
    Host Status
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1124" name="System Time Discovery">
  An adversary may gather the system time and/or time zone from a local or remote system. The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network.
  <Tactic>
   Discovery
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-295
  </CAPEC_ID>
  <Examples>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla can collect the timestamp from the victim’s machine.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed can pull a timestamp from the victim's machine.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth collects the timestamp from the infected machine.
   </Example>
   <Example id="S0344" name="Azorult">
    Azorult can collect the time zone information from the system.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can collect the time on the compromised host.
   </Example>
   <Example id="S0574" name="BendyBear">
    BendyBear has the ability to determine local time on a compromised host.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal can check the system time set on the infected host.
   </Example>
   <Example id="S0657" name="BLUELIGHT">
    BLUELIGHT can collect the local time on a compromised host.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has used net time to check the local time on a target system.
   </Example>
   <Example id="S0471" name="build_downer">
    build_downer has the ability to determine the local time to ensure malware installation only happens during the hours that the infected system is active.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors used the command net view /all time to gather the local time of a compromised network.
   </Example>
   <Example id="S0351" name="Cannon">
    Cannon can collect the current time zone information from the victim’s machine.
   </Example>
   <Example id="S0335" name="Carbon">
    Carbon uses the command net time \127.0.0.1 to get information the system’s time.
   </Example>
   <Example id="S1043" name="ccf32">
    ccf32 can determine the local time on targeted machines.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used time /t and net time \ip/hostname for system time discovery.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can determine the current time.
   </Example>
   <Example id="S0126" name="ComRAT">
    ComRAT has checked the victim system's date and time to perform tasks during business hours (9 to 5, Monday to Friday).
   </Example>
   <Example id="S0608" name="Conficker">
    Conficker uses the current UTC victim system date for domain generation and connects to time servers to determine the current date.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson has the ability to determine the date and time on a compromised host.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel malware can obtain system time from a compromised host.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman can collect the time zone information from the system.
   </Example>
   <Example id="S1033" name="DCSrv">
    DCSrv can compare the current time on an infected host with a configuration value to determine when to start the encryption process.
   </Example>
   <Example id="S0694" name="DRATzarus">
    DRATzarus can use the GetTickCount and GetSystemTimeAsFileTime API calls to inspect system time.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor contains functionality to query the local/system time.
   </Example>
   <Example id="S0091" name="Epic">
    Epic uses the net time command  to get the system time from the machine and collect the current date and time zone information.
   </Example>
   <Example id="S0396" name="EvilBunny">
    EvilBunny has used the API calls NtQuerySystemTime, GetSystemTimeAsFileTime, and GetTickCount to gather time metrics as part of its checks to see if the malware is running in a sandbox.
   </Example>
   <Example id="S0267" name="FELIXROOT">
    FELIXROOT gathers the time zone information from the victim’s machine.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can check system time to help determine when changes were made to specified files.
   </Example>
   <Example id="S0588" name="GoldMax">
    GoldMax can check the current date-time value of the compromised system, comparing it to the hardcoded execution trigger and can send the current timestamp to the C2 server.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can determine the time on the victim machine via IPinfo.
   </Example>
   <Example id="S0237" name="GravityRAT">
    GravityRAT can obtain the date and time of a system.
   </Example>
   <Example id="S0690" name="Green Lambert">
    Green Lambert can collect the date and time from a compromised host.
   </Example>
   <Example id="S0417" name="GRIFFON">
    GRIFFON has used a reconnaissance module that can be used to retrieve the date and time of the system.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa used a function to gather the current time.
   </Example>
   <Example id="S0376" name="HOPLIGHT">
    HOPLIGHT has been observed collecting system time from victim machines.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole gathers the local system time from the victim’s machine.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    A Destover-like implant used by Lazarus Group can obtain the current system time and send it to the C2 server.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo uses JavaScript to get the system time.
   </Example>
   <Example id="S0149" name="MoonWind">
    MoonWind obtains the victim's current time.
   </Example>
   <Example id="S0039" name="Net">
    The net time command can be used in Net to determine the local or remote system time.
   </Example>
   <Example id="S0353" name="NOKKI">
    NOKKI can collect the current timestamp of the victim's machine.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum can obtain the date and time of the compromised system.
   </Example>
   <Example id="S0264" name="OopsIE">
    OopsIE checks to see if the system is configured with "Daylight" time and checks for a specific region to be set for the timezone.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used the net time command as part of their advanced reconnaissance.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used the time command to retrieve the current time of a compromised system.
   </Example>
   <Example id="S0501" name="PipeMon">
    PipeMon can send time zone information from a compromised host to C2.
   </Example>
   <Example id="S0139" name="PowerDuke">
    PowerDuke has commands to get the time the machine was built, the time, and the time zone.
   </Example>
   <Example id="S0238" name="Proxysvc">
    As part of the data reconnaissance phase, Proxysvc grabs the system time to send back to the control server.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can identify the system time on a targeted host.
   </Example>
   <Example id="S0148" name="RTM">
    RTM can obtain the victim time zone.
   </Example>
   <Example id="S0596" name="ShadowPad">
    ShadowPad has collected the current date and time of the victim system.
   </Example>
   <Example id="S0140" name="Shamoon">
    Shamoon obtains the system time and will only activate if it is greater than a preset date.
   </Example>
   <Example id="S0450" name="SHARPSTATS">
    SHARPSTATS has the ability to identify the current date and time on the compromised host.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has used tools to obtain the current system time.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can collect start time information from a compromised host.
   </Example>
   <Example id="S0615" name="SombRAT">
    SombRAT can execute getinfo  to discover the current time on a compromised host.
   </Example>
   <Example id="S0380" name="StoneDrill">
    StoneDrill can obtain the current date and time of the victim machine.
   </Example>
   <Example id="S1034" name="StrifeWater">
    StrifeWater can collect the time zone from the victim's machine.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet collects the time and date of a system when it is infected.
   </Example>
   <Example id="S0098" name="T9000">
    T9000 gathers and beacons the system time during installation.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor can use GetLocalTime and GetSystemTime to collect system time.
   </Example>
   <Example id="S0586" name="TAINTEDSCRIBE">
    TAINTEDSCRIBE can execute GetLocalTime for time discovery.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to determine local time on a compromised host.
   </Example>
   <Example id="G0089" name="The White Company">
    The White Company has checked the current date on the victim system.
   </Example>
   <Example id="S0678" name="Torisma">
    Torisma can collect the current time on a victim machine.
   </Example>
   <Example id="G0010" name="Turla">
    Turla surveys a system upon check-in to discover the system time by using the net time command.
   </Example>
   <Example id="S0275" name="UPPERCUT">
    UPPERCUT has the capability to obtain the time zone information and current timestamp of the victim’s machine.
   </Example>
   <Example id="S0466" name="WindTail">
    WindTail has the ability to generate the current date and time.
   </Example>
   <Example id="S0251" name="Zebrocy">
    Zebrocy gathers the current time zone and date information from the system.
   </Example>
   <Example id="S0330" name="Zeus Panda">
    Zeus Panda collects the current system time (UTC) and sends it back to the C2 server.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has used a tool to capture the time on a compromised host in order to register it with C2.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1080" name="Taint Shared Content">
  Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.
  <Tactic>
   Lateral Movement
  </Tactic>
  <Platforms>
   Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <System_Requirements>
   Access to shared folders and content with write permissions
  </System_Requirements>
  <Permissions_Required>
   User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-562
  </CAPEC_ID>
  <Examples>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has placed malware on file shares and given it the same name as legitimate documents on the share.
   </Example>
   <Example id="S0575" name="Conti">
    Conti can spread itself by infecting other remote machines via network shared drives.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel used a virus that propagates by infecting executables stored on shared drives.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has injected malicious macros into all Word and Excel documents on mapped network drives.
   </Example>
   <Example id="S0132" name="H1N1">
    H1N1 has functionality to copy itself to network shares.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can replace legitimate software or documents in the compromised network with their trojanized versions, in an attempt to propagate itself within the network.
   </Example>
   <Example id="S0133" name="Miner-C">
    Miner-C copies itself into the public folder of Network Attached Storage (NAS) devices and infects new victims who open the file.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay can spread itself by infecting other portable executable files on networks shared drives.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet infects remote servers via network shares and by infecting WinCC database views with malicious code.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has copied itself to and infected files in network drives for propagation.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    Identify potentially malicious software that may be used to taint content or may result from it and audit and/or block the unknown programs by using application control
   </Mitigation>
   <Mitigation id="M1050" name="Exploit Protection">
    Use utilities that detect or mitigate common features used in exploitation, such as the Microsoft Enhanced Mitigation Experience Toolkit (EMET).
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Protect shared folders by minimizing users who have write access.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation | File Modification
   </Detection>
   <Detection id="DS0033" name="Network Share">
    Network Share Access
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1221" name="Template Injection">
  Adversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft’s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Defense_Bypassed>
   Static File Analysis
  </Defense_Bypassed>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 used weaponized Microsoft Word documents abusing the remote template function to retrieve a malicious macro.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes changed the template target of the settings.xml file embedded in the Word document and populated that field with the downloaded URL of the next payload.
   </Example>
   <Example id="G0142" name="Confucius">
    Confucius has used a weaponized Microsoft Word document with an embedded RTF exploit.
   </Example>
   <Example id="G0079" name="DarkHydrus">
    DarkHydrus used an open-source tool, Phishery, to inject malicious remote template URLs into Microsoft Word documents and then sent them to victims to enable Forced Authentication.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has injected SMB URLs into malicious Word spearphishing attachments to initiate Forced Authentication.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors used trojanized documents that retrieved remote templates from an adversary-controlled website.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has used DOCX files to download malicious DOT document templates and has used RTF template injection to download malicious payloads.
   </Example>
   <Example id="G0100" name="Inception">
    Inception has used decoy documents to load malicious remote payloads via HTTP.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used DOCX files to retrieve a malicious document template/DOTM file.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper delivered malicious documents with the XLSX extension, typically used by OpenXML documents, but the file itself was actually an OLE (XLS) document.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT has been install via template injection through a malicious DLL embedded within a template RTF in a Word document.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1049" name="Antivirus/Antimalware">
    Network/Host intrusion prevention systems, antivirus, and detonation chambers can be employed to prevent documents from fetching and/or executing malicious payloads.
   </Mitigation>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Consider disabling Microsoft Office macros/active content to prevent the execution of malicious payloads in documents , though this setting may not mitigate the Forced Authentication use for this technique.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network/Host intrusion prevention systems, antivirus, and detonation chambers can be employed to prevent documents from fetching and/or executing malicious payloads.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Train users to identify social engineering techniques and spearphishing emails that could be used to deliver malicious documents.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1205" name="Traffic Signaling">
  Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.
  <Tactics>
   Defense Evasion, Persistence, Command and Control
  </Tactics>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Defensive network service scanning
  </Defense_Bypassed>
  <Examples>
   <Example id="S0220" name="Chaos">
    Chaos provides a reverse shell is triggered upon receipt of a packet with a special string, sent to any port.
   </Example>
   <Example id="S0641" name="Kobalos">
    Kobalos is triggered by an incoming TCP connection to a legitimate service from a specific source port.
   </Example>
   <Example id="S0664" name="Pandora">
    Pandora can identify if incoming HTTP traffic contains a token and if so it will intercept the traffic and process the received command.
   </Example>
   <Example id="S0587" name="Penquin">
    Penquin will connect to C2 only after sniffing a "magic packet" value in TCP or UDP packets matching specific conditions.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk has used Wake-on-Lan to power on turned off systems for lateral movement.
   </Example>
   <Example id="S0519" name="SYNful Knock">
    SYNful Knock can be sent instructions via special packets to change its functionality. Code for new functionality can be included in these messages.
   </Example>
   <Example id="S0221" name="Umbreon">
    Umbreon provides additional access using its backdoor Espeon, providing a reverse shell upon receipt of a special packet.
   </Example>
   <Example id="S0430" name="Winnti for Linux">
    Winnti for Linux has used a passive listener, capable of identifying a specific magic value before executing tasking, as a secondary command and control (C2) mechanism.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Disable Wake-on-LAN if it is not needed within an environment.
   </Mitigation>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Mitigation of some variants of this technique could be achieved through the use of stateful firewalls, depending upon how it is implemented.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1205.001" name="Traffic Signaling: Port Knocking">
  Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.
  <Tactics>
   Defense Evasion, Persistence, Command and Control
  </Tactics>
  <Platforms>
   Linux, Network, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0056" name="PROMETHIUM">
    PROMETHIUM has used a script that configures the knockd service and firewall to only accept C2 connections from systems that use a specified sequence of knock ports.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Mitigation of some variants of this technique could be achieved through the use of stateful firewalls, depending upon how it is implemented.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1205.002" name="Traffic Signaling: Socket Filters">
  Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the libpcap library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.
  <Tactics>
   Defense Evasion, Persistence, Command and Control
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="S0587" name="Penquin">
    Penquin installs a TCP and UDP filter on the eth0 interface.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Mitigation of some variants of this technique could be achieved through the use of stateful firewalls, depending upon how it is implemented.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1537" name="Transfer Data to Cloud Account">
  Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.
  <Tactic>
   Exfiltration
  </Tactic>
  <Platforms>
   IaaS
  </Platforms>
  <Mitigations>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Implement network-based filtering restrictions to prohibit data transfers to untrusted VPCs.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Consider rotating access keys within a certain number of days to reduce the effectiveness of stolen credentials.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Limit user account and IAM policies to the least privileges required. Consider using temporary credentials for accounts that are only valid for a certain period of time to reduce the effectiveness of compromised accounts.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0010" name="Cloud Storage">
    Cloud Storage Creation | Cloud Storage Metadata | Cloud Storage Modification
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
   <Detection id="DS0020" name="Snapshot">
    Snapshot Creation | Snapshot Metadata | Snapshot Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1127" name="Trusted Developer Utilities Proxy Execution">
  Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Defense_Bypassed>
   Application Control
  </Defense_Bypassed>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Specific developer utilities may not be necessary within a given environment and should be removed if not used.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Certain developer utilities should be blocked or restricted if not required.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1127.001" name="Trusted Developer Utilities Proxy Execution: MSBuild">
  Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <System_Requirements>
   .NET Framework version 4 or higher
  </System_Requirements>
  <Examples>
   <Example id="S0363" name="Empire">
    Empire can use built-in modules to abuse trusted utilities like MSBuild.exe.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors used MSbuild to execute an actor-created file.
   </Example>
   <Example id="S0013" name="PlugX">
    A version of PlugX loads as shellcode within a .NET Framework project using msbuild.exe, presumably to bypass application control techniques.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    MSBuild.exe may not be necessary within an environment and should be removed if not being used.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Use application control configured to block execution of msbuild.exe if it is not required for a given system or network to prevent potential misuse by adversaries. For example, in Windows 10 and Windows Server 2016 and above, Windows Defender Application Control (WDAC) policy rules may be applied to block the msbuild.exe application and to prevent abuse.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1199" name="Trusted Relationship">
  Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.
  <Tactic>
   Initial Access
  </Tactic>
  <Platforms>
   IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0007" name="APT28">
    Once APT28 gained access to the DCCC network, the group then proceeded to use that access to compromise the DNC network.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has gained access through compromised accounts at cloud solution partners, and used compromised certificates issued by Mimecast to authenticate to Mimecast customer systems.
   </Example>
   <Example id="G0115" name="GOLD SOUTHFIELD">
    GOLD SOUTHFIELD has breached Managed Service Providers (MSP's) to deliver malware to MSP customers.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has accessed internet-facing identity providers such as Azure Active Directory and Okta to target specific organizations.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used legitimate access granted to Managed Service Providers in order to access victims of interest.
   </Example>
   <Example id="G1005" name="POLONIUM">
    POLONIUM has used compromised credentials from an IT company to target downstream customers including a law firm and aviation company.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used dedicated network connections from one victim organization to gain unauthorized access to a separate organization.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has compromised third party service providers to gain access to victim's environments.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Require MFA for all delegated administrator accounts.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Network segmentation can be used to isolate infrastructure components that do not require broad network access.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Properly manage accounts and permissions used by parties in trusted relationships to minimize potential abuse by the party and if the party is compromised by an adversary. In Office 365 environments, partner relationships and roles can be viewed under the "Partner Relationships" page.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation | Logon Session Metadata
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1552" name="Unsecured Credentials">
  Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. Bash History), operating system or application-specific repositories (e.g. Credentials in Registry), or other specialized files/artifacts (e.g. Private Keys).
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Azure AD, Containers, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, SYSTEM, User
  </Permissions_Required>
  <Examples>
   <Example id="S0373" name="Astaroth">
    Astaroth uses an external software known as NetPass to recover passwords.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1015" name="Active Directory Configuration">
    Remove vulnerable Group Policy Preferences.
   </Mitigation>
   <Mitigation id="M1047" name="Audit">
    Preemptively search for files containing passwords or other credentials and take actions to reduce the exposure risk when found.
   </Mitigation>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    When possible, store keys on separate cryptographic hardware instead of on the local system.
   </Mitigation>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Limit access to the Instance Metadata API using a host-based firewall such as iptables. A properly configured Web Application Firewall (WAF) may help prevent external adversaries from exploiting Server-side Request Forgery (SSRF) attacks that allow access to the Cloud Instance Metadata API.
   </Mitigation>
   <Mitigation id="M1028" name="Operating System Configuration">
    There are multiple methods of preventing a user's command history from being flushed to their .bash_history file, including use of the following commands:set +o history and set -o history to start logging again;unset HISTFILE being added to a user's .bash_rc file; andln -s /dev/null ~/.bash_history to write commands to /dev/nullinstead.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Use strong passphrases for private keys to make cracking difficult. Do not store credentials within the Registry. Establish an organizational policy that prohibits password storage in files.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    If it is necessary that software must store credentials in the Registry, then ensure the associated accounts have limited permissions so they cannot be abused if obtained by an adversary.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Restrict file shares to specific directories with access only to necessary users.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Apply patch KB2962486 which prevents credentials from being stored in GPPs.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Ensure that developers and system administrators are aware of the risk associated with having plaintext passwords in software configuration files that may be left on endpoint systems or servers.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1552.001" name="Unsecured Credentials: Credentials In Files">
  Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Containers, IaaS, Linux, Windows, macOS
  </Platforms>
  <System_Requirements>
   Access to files
  </System_Requirements>
  <Permissions_Required>
   Administrator, SYSTEM, User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-639
  </CAPEC_ID>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals can gather unsecured credentials for Azure AD services, such as Azure AD Connect, from a local machine.
   </Example>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla has the ability to extract credentials from configuration or support files.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has a tool that can locate credentials in files on the file system such as those from Firefox or Chrome.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has used a variety of publicly available tools like LaZagne to gather credentials.
   </Example>
   <Example id="S0344" name="Azorult">
    Azorult can steal credentials in files belonging to common software such as Skype, Telegram, and Steam.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    BlackEnergy has used a plug-in to gather credentials stored in files on the host by various software programs, including The Bat! email client, Outlook, and Windows Credential Store.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has been observed leveraging a module that retrieves passwords stored on a system for the current logged-on user.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can use various modules to search for files containing passwords.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has accessed files to gain valid credentials.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has searched for SSH keys, Docker credentials, and Kubernetes service tokens.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT can capture passwords from common chat applications such as MSN Messenger, AOL, Instant Messenger, and and Google Talk.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used tools that are capable of obtaining credentials from saved mail.
   </Example>
   <Example id="S0349" name="LaZagne">
    LaZagne can obtain credentials from chats, databases, mail, and WiFi.
   </Example>
   <Example id="G0077" name="Leafminer">
    Leafminer used several tools for retrieving login and password information, including LaZagne.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has run a tool that steals passwords saved in victim email.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.
   </Example>
   <Example id="S0067" name="pngdowner">
    If an initial connectivity check fails, pngdowner attempts to extract proxy details and credentials from Windows Protected Storage and from the IE Credentials Store. This allows the adversary to use the proxy credentials for subsequent requests if they enable outbound HTTP access.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 contains modules for searching for passwords in local and remote files.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can use Lazagne for harvesting credentials.
   </Example>
   <Example id="S0583" name="Pysa">
    Pysa has extracted credentials from the password database before encrypting the files.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT can obtain passwords from FTP clients.
   </Example>
   <Example id="S0226" name="Smoke Loader">
    Smoke Loader searches for files named logins.json to parse for credentials.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used malware to gather credentials from FTP clients and Outlook.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has searched for unsecured AWS credentials and Docker API credentials.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot can obtain passwords stored in files from several applications such as Outlook, Filezilla, OpenSSH, OpenVPN and WinSCP.
   </Example>
   <Example id="S0117" name="XTunnel">
    XTunnel is capable of accessing locally stored passwords on victims.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Preemptively search for files containing passwords and take actions to reduce the exposure risk when found.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Establish an organizational policy that prohibits password storage in files.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Restrict file shares to specific directories with access only to necessary users.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Ensure that developers and system administrators are aware of the risk associated with having plaintext passwords in software configuration files that may be left on endpoint systems or servers.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1552.002" name="Unsecured Credentials: Credentials in Registry">
  Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <System_Requirements>
   Ability to query some Registry locations depends on the adversary's level of access. User permissions are usually limited to access of user-related Registry keys.
  </System_Requirements>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Examples>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla has the ability to extract credentials from the Registry.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 used Outlook Credential Dumper to harvest credentials stored in Windows registry.
   </Example>
   <Example id="S1022" name="IceApple">
    IceApple can harvest credentials from local and remote host registries.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit has several modules that search the Windows Registry for stored credentials: Get-UnattendedInstallFile, Get-Webconfig, Get-ApplicationHost, Get-SiteListPassword, Get-CachedGPPPassword, and Get-RegistryAutoLogon.
   </Example>
   <Example id="S0075" name="Reg">
    Reg may be used to find credentials in the Windows Registry.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot has retrieved PuTTY credentials by querying the Software\SimonTatham\Putty\Sessions registry key
   </Example>
   <Example id="S0476" name="Valak">
    Valak can use the clientgrabber module to steal e-mail credentials from the Registry.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Proactively search for credentials within the Registry and attempt to remediate the risk.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Do not store credentials within the Registry.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    If it is necessary that software must store credentials in the Registry, then ensure the associated accounts have limited permissions so they cannot be abused if obtained by an adversary.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
   <Detection id="DS0024" name="Windows Registry">
    Windows Registry Key Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1552.003" name="Unsecured Credentials: Bash History">
  Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the "history" utility. Once a user logs out, the history is flushed to the user’s .bash_history file. For each user, this file resides at the same location: ~/.bash_history. Typically, this file keeps track of the user’s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Adversaries can abuse this by looking through the file for potential credentials.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Linux, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0599" name="Kinsing">
    Kinsing has searched bash_history for credentials.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1028" name="Operating System Configuration">
    There are multiple methods of preventing a user's command history from being flushed to their .bash_history file, including use of the following commands:set +o history and set -o history to start logging again;unset HISTFILE being added to a user's .bash_rc file; andln -s /dev/null ~/.bash_history to write commands to /dev/nullinstead.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1552.004" name="Unsecured Credentials: Private Keys">
  Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0677" name="AADInternals">
    AADInternals can gather encryption keys from Azure AD services such as ADSync and Active Directory Federated Services servers.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 obtained PKI keys, certificate files and the private encryption key from an Active Directory Federation Services (AD FS) container to decrypt corresponding SAML signing certificates.
   </Example>
   <Example id="S0377" name="Ebury">
    Ebury has intercepted unencrypted private keys as well as private key pass-phrases.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can use modules like Invoke-SessionGopher to extract private key and session information.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb can retrieve token signing certificates and token decryption certificates from a compromised AD FS server.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has searched for private keys in .ssh.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT can steal keys for VPNs and cryptocurrency wallets.
   </Example>
   <Example id="S0599" name="Kinsing">
    Kinsing has searched for private keys.
   </Example>
   <Example id="S0409" name="Machete">
    Machete has scanned and looked for cryptographic keys and certificate file extensions.
   </Example>
   <Example id="S0002" name="Mimikatz">
    Mimikatz's CRYPTO::Extract module can extract keys by interacting with Windows cryptographic application programming interface (API) functions.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used Mimikatz to dump certificates and private keys from the Windows certificate store.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has used SSH private keys on the infected machine to spread its coinminer throughout a network.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has searched for unsecured SSH keys.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Ensure only authorized keys are allowed access to critical resources and audit access lists regularly.
   </Mitigation>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    When possible, store keys on separate cryptographic hardware instead of on the local system.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Use strong passphrases for private keys to make cracking difficult.
   </Mitigation>
   <Mitigation id="M1022" name="Restrict File and Directory Permissions">
    Ensure permissions are properly set on folders containing sensitive private keys to prevent unintended access.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1552.005" name="Unsecured Credentials: Cloud Instance Metadata API">
  Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   IaaS
  </Platforms>
  <Examples>
   <Example id="S0601" name="Hildegard">
    Hildegard has queried the Cloud Instance Metadata API for cloud credentials.
   </Example>
   <Example id="S0683" name="Peirates">
    Peirates can query the query AWS and GCP metadata APIs for secrets.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has queried the AWS instance metadata service for credentials.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1042" name="Disable or Remove Feature or Program">
    Disable unnecessary metadata services and restrict or disable insecure versions of metadata services that are in use to prevent adversary access.
   </Mitigation>
   <Mitigation id="M1037" name="Filter Network Traffic">
    Limit access to the Instance Metadata API using a host-based firewall such as iptables. A properly configured Web Application Firewall (WAF) may help prevent external adversaries from exploiting Server-side Request Forgery (SSRF) attacks that allow access to the Cloud Instance Metadata API.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1552.006" name="Unsecured Credentials: Group Policy Preferences">
  Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0064" name="APT33">
    APT33 has used a variety of publicly available tools like Gpppassword to gather credentials.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit contains a collection of Exfiltration modules that can harvest credentials from Group Policy Preferences.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY has a module that can extract cached GPP passwords.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1015" name="Active Directory Configuration">
    Remove vulnerable Group Policy Preferences.
   </Mitigation>
   <Mitigation id="M1047" name="Audit">
    Search SYSVOL for any existing GGPs that may contain credentials and remove them.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Apply patch KB2962486 which prevents credentials from being stored in GPPs.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0022" name="File">
    File Access
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1552.007" name="Unsecured Credentials: Container API">
  Adversaries may gather credentials via APIs within a containers environment. APIs in these environments, such as the Docker API and Kubernetes APIs, allow a user to remotely manage their container resources and cluster components.
  <Tactic>
   Credential Access
  </Tactic>
  <Platforms>
   Containers
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Examples>
   <Example id="S0683" name="Peirates">
    Peirates can query the Kubernetes API for secrets.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1035" name="Limit Access to Resource Over Network">
    Limit communications with the container service to local Unix sockets or remote access via SSH. Require secure port access to communicate with the APIs over TLS by disabling unauthenticated access to the Docker API and Kubernetes API Server.
   </Mitigation>
   <Mitigation id="M1030" name="Network Segmentation">
    Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Use the principle of least privilege for privileged accounts such as the service account in Kubernetes.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Enforce authentication and role-based access control on the container API to restrict users to the least privileges required.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1535" name="Unused/Unsupported Cloud Regions">
  Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   IaaS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Mitigations>
   <Mitigation id="M1054" name="Software Configuration">
    Cloud service providers may allow customers to deactivate unused regions.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0030" name="Instance">
    Instance Creation | Instance Metadata
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1550" name="Use Alternate Authentication Material">
  Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.
  <Tactics>
   Defense Evasion, Lateral Movement
  </Tactics>
  <Platforms>
   Containers, Google Workspace, IaaS, Office 365, SaaS, Windows
  </Platforms>
  <Defense_Bypassed>
   System Access Controls
  </Defense_Bypassed>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 used forged SAML tokens that allowed the actors to impersonate users and bypass MFA, enabling APT29 to access enterprise cloud applications and services.
   </Example>
   <Example id="S0661" name="FoggyWeb">
    FoggyWeb can allow abuse of a compromised AD FS server's SAML token.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1026" name="Privileged Account Management">
    Limit credential overlap across systems to prevent the damage of credential compromise and reduce the adversary's ability to perform Lateral Movement between systems.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Enforce the principle of least-privilege. Do not allow a domain user to be in the local administrator group on multiple systems.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Credential Request
   </Detection>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
   <Detection id="DS0006" name="Web Credential">
    Web Credential Usage
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1550.001" name="Use Alternate Authentication Material: Application Access Token">
  Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users or services and used in lieu of login credentials.
  <Tactics>
   Defense Evasion, Lateral Movement
  </Tactics>
  <Platforms>
   Azure AD, Containers, Google Workspace, IaaS, Office 365, SaaS
  </Platforms>
  <Defense_Bypassed>
   System Access Controls
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-593
  </CAPEC_ID>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has used several malicious applications that abused OAuth access tokens to gain access to target email accounts, including Gmail and Yahoo Mail.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used compromised service principals to make changes to the Office 365 environment.
   </Example>
   <Example id="S1023" name="CreepyDrive">
    CreepyDrive can use legitimate OAuth refresh tokens to authenticate with OneDrive.
   </Example>
   <Example id="S0683" name="Peirates">
    Peirates can use stolen service account tokens to perform its operations. It also enables adversaries to switch between valid service accounts.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Administrators should audit all cloud and container accounts to ensure that they are necessary and that the permissions granted to them are appropriate. Where possible, the ability to request temporary account tokens on behalf of another accounts should be disabled. Additionally, administrators can leverage audit tools to monitor actions that can be conducted as a result of OAuth 2.0 access. For instance, audit reports enable admins to identify privilege escalation actions such as role creations or policy modifications, which could be actions performed after initial access.
   </Mitigation>
   <Mitigation id="M1041" name="Encrypt Sensitive Information">
    File encryption should be enforced across email communications containing sensitive information that may be obtained through access to email services.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    Update corporate policies to restrict what types of third-party applications may be added to any online service or tool that is linked to the company's information, accounts or network (e.g., Google, Microsoft, Dropbox, Basecamp, GitHub). However, rather than providing high-level guidance on this, be extremely specific—include a list of per-approved applications and deny all others not on the list. Administrators may also block end-user consent through administrative portals, such as the Azure Portal, disabling users from authorizing third-party apps through OAuth and forcing administrative consent.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0006" name="Web Credential">
    Web Credential Usage
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1550.002" name="Use Alternate Authentication Material: Pass the Hash">
  Adversaries may "pass the hash" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.
  <Tactics>
   Defense Evasion, Lateral Movement
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <Defense_Bypassed>
   System Access Controls
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-644
  </CAPEC_ID>
  <Examples>
   <Example id="G0006" name="APT1">
    The APT1 group is known to have used pass the hash.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has used pass the hash for lateral movement.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has used pass the hash for lateral movement.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has dumped password hashes for use in pass the hash authentication attacks.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can perform pass the hash.
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can pass the hash to authenticate via SMB.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can perform pass the hash attacks.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM used dumped hashes to authenticate to other machines via pass the hash.
   </Example>
   <Example id="S0376" name="HOPLIGHT">
    HOPLIGHT has been observed loading several APIs associated with Pass the Hash.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used pass the hash for authentication to remote access software used in C2.
   </Example>
   <Example id="S0002" name="Mimikatz">
    Mimikatz's SEKURLSA::Pth module can impersonate a user, with only a password hash, to execute arbitrary commands.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors used pass-the-hash tools to obtain authenticated access to sensitive internal desktops and servers.
   </Example>
   <Example id="S0122" name="Pass-The-Hash Toolkit">
    Pass-The-Hash Toolkit can perform pass the hash.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 has a number of modules that leverage pass the hash for lateral movement.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1026" name="Privileged Account Management">
    Limit credential overlap across systems to prevent the damage of credential compromise and reduce the adversary's ability to perform Lateral Movement between systems.
   </Mitigation>
   <Mitigation id="M1051" name="Update Software">
    Apply patch KB2871997 to Windows 7 and higher systems to limit the default access of accounts in the local administrator group.
   </Mitigation>
   <Mitigation id="M1052" name="User Account Control">
    Enable pass the hash mitigations to apply UAC restrictions to local accounts on network logon. The associated Registry key is located HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\LocalAccountTokenFilterPolicy.Through GPO: Computer Configuration &gt;
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Do not allow a domain user to be in the local administrator group on multiple systems.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Credential Request
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1550.003" name="Use Alternate Authentication Material: Pass the Ticket">
  Adversaries may "pass the ticket" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.
  <Tactics>
   Defense Evasion, Lateral Movement
  </Tactics>
  <Platforms>
   Windows
  </Platforms>
  <System_Requirements>
   Kerberos authentication enabled
  </System_Requirements>
  <Defense_Bypassed>
   System Access Controls
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-645
  </CAPEC_ID>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 used Kerberos ticket attacks for lateral movement.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 successfully gained remote access by using pass the ticket.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has created forged Kerberos Ticket Granting Ticket (TGT) and Ticket Granting Service (TGS) tickets to maintain administrative access.
   </Example>
   <Example id="S0002" name="Mimikatz">
    Mimikatz’s LSADUMP::DCSync and KERBEROS::PTT modules implement the three steps required to extract the krbtgt account hash and create/use Kerberos tickets.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can also perform pass-the-ticket.
   </Example>
   <Example id="S0053" name="SeaDuke">
    Some SeaDuke samples have a module to use pass the ticket with Kerberos for authentication.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1015" name="Active Directory Configuration">
    To contain the impact of a previously generated golden ticket, reset the built-in KRBTGT account password twice, which will invalidate any existing golden tickets that have been created with the KRBTGT hash and other Kerberos tickets derived from it.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Ensure that local administrator accounts have complex, unique passwords.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Limit domain admin account permissions to domain controllers and limited servers. Delegate other admin functions to separate accounts.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Do not allow a user to be a local administrator for multiple systems.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0026" name="Active Directory">
    Active Directory Credential Request
   </Detection>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1550.004" name="Use Alternate Authentication Material: Web Session Cookie">
  Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.
  <Tactics>
   Defense Evasion, Lateral Movement
  </Tactics>
  <Platforms>
   Google Workspace, IaaS, Office 365, SaaS
  </Platforms>
  <Defense_Bypassed>
   System Access Controls
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-60
  </CAPEC_ID>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 used stolen cookies to access cloud resources, and a forged duo-sid cookie to bypass MFA set on an email account.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1054" name="Software Configuration">
    Configure browsers or tasks to regularly delete persistent cookies.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0006" name="Web Credential">
    Web Credential Usage
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1204" name="User Execution">
  An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of Phishing.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Containers, IaaS, Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has recruited target organization employees or contractors who provide credentials and approve an associated MFA prompt, or install remote management software onto a corporate workstation, allowing LAPSUS$ to take control of an authenticated system.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent executable files from running unless they meet a prevalence, age, or trusted list criteria and to prevent Office applications from creating potentially malicious executable content by blocking malicious code from being written to disk. Note: cloud-delivered protection must be enabled to use certain rules.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Application control may be able to prevent the running of executables masquerading as other files.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    If a link is being visited by a user, network intrusion prevention systems and systems designed to scan and remove malicious downloads can be used to block activity.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    If a link is being visited by a user, block unknown or unused files in transit by default that should not be downloaded or by policy from suspicious sites as a best practice to prevent some vectors, such as .scr, .exe, .pif, .cpl, etc. Some download scanning devices can open and analyze compressed and encrypted formats, such as zip and rar that may be used to conceal malicious files.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0032" name="Container">
    Container Creation | Container Start
   </Detection>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0007" name="Image">
    Image Creation
   </Detection>
   <Detection id="DS0030" name="Instance">
    Instance Creation | Instance Start
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1204.001" name="User Execution: Malicious Link">
  An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0584" name="AppleJeus">
    AppleJeus's spearphishing links required user interaction to navigate to the malicious website.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has tricked unwitting recipients into clicking on malicious hyperlinks within emails crafted to resemble trustworthy senders.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used various forms of spearphishing attempting to get a user to click on a malicous link.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 has lured victims into clicking malicious links delivered through spearphishing.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has lured targets to download a Cobalt Strike beacon by including a malicious link within spearphishing emails.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has lured users to click links to malicious HTML applications delivered via spearphishing emails.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has sent spearphishing emails in an attempt to lure users to click on a malicious link.
   </Example>
   <Example id="S0475" name="BackConfig">
    BackConfig has compromised victims via links to URLs hosting malicious content.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can gain execution after a user clicks on a malicious link to decoy landing pages hosted on Google Docs.
   </Example>
   <Example id="G0098" name="BlackTech">
    BlackTech has used e-mails with malicious links to lure victims into installing malware.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee has relied upon a user downloading a file from a OneDrive link for execution.
   </Example>
   <Example id="C0011" name="C0011">
    During C0011, Transparent Tribe relied on student targets to click on a malicious link sent via email.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has sent emails containing malicious links that require users to execute a file or macro to infect the victim machine.
   </Example>
   <Example id="G0142" name="Confucius">
    Confucius has lured victims into clicking on a malicious link sent through spearphishing.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca  has sent spearphishing emails that required the user to click on a malicious link and subsequently open a decoy document with a malicious loader.
   </Example>
   <Example id="G0066" name="Elderwood">
    Elderwood has leveraged multiple types of spearphishing in order to attempt to get a user to open links.
   </Example>
   <Example id="G1003" name="Ember Bear">
    Ember Bear has attempted to lure users to click on a malicious link within a spearphishing email.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has relied upon users clicking on a malicious link delivered through spearphishing.
   </Example>
   <Example id="G0120" name="Evilnum">
    Evilnum has sent spearphishing emails designed to trick the recipient into opening malicious shortcut links which downloads a .LNK file.
   </Example>
   <Example id="G1011" name="EXOTIC LILY">
    EXOTIC LILY has used malicious links to lure users into executing malicious payloads.
   </Example>
   <Example id="G0085" name="FIN4">
    FIN4 has lured victims to click malicious links delivered via spearphishing emails (often sent from compromised accounts).
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has used malicious links to lure victims into downloading malware.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has used emails with malicious links to lure victims into installing malware.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro has used malicious links to gain execution on victim machines.
   </Example>
   <Example id="S0561" name="GuLoader">
    GuLoader has relied upon users clicking on links to malicious documents.
   </Example>
   <Example id="S0499" name="Hancitor">
    Hancitor has relied upon users clicking on a malicious link delivered through phishing.
   </Example>
   <Example id="S0528" name="Javali">
    Javali has achieved execution through victims clicking links to malicious websites.
   </Example>
   <Example id="S0585" name="Kerrdown">
    Kerrdown has gained execution through victims opening malicious links.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has lured victims into clicking malicious links.
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS has relied on victims clicking on a malicious link delivered via email.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has sent spearphishing emails in an attempt to lure users to click on a malicious link.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter has relied upon users clicking on links to malicious files.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has sent spearphishing email links attempting to get a user to click.
   </Example>
   <Example id="G0095" name="Machete">
    Machete has has relied on users opening malicious links delivered through spearphishing to execute malware.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has attempted to lure victims into opening malicious links embedded in emails.
   </Example>
   <Example id="S0530" name="Melcoz">
    Melcoz has gained execution through victims opening malicious links.
   </Example>
   <Example id="G0103" name="Mofang">
    Mofang's spearphishing emails required a user to click the link to connect to a compromised website.
   </Example>
   <Example id="G0021" name="Molerats">
    Molerats has sent malicious links via email trick users into opening a RAR archive and running an executable.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has distributed URLs in phishing e-mails that link to lure documents.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has sent malicious links including links directing victims to a Google Drive folder.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE has been executed through convincing victims into clicking malicious links.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors enticed users to click on links in spearphishing emails to download malware.
   </Example>
   <Example id="S0644" name="ObliqueRAT">
    ObliqueRAT has gained execution on targeted systems through luring users to click on links to malicious URLs.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has delivered malicious links to achieve execution on the target system.
   </Example>
   <Example id="C0016" name="Operation Dust Storm">
    During Operation Dust Storm, the threat actors relied on a victim clicking on a malicious link sent via email.
   </Example>
   <Example id="C0005" name="Operation Spalax">
    During Operation Spalax, the threat actors relied on a victim to click on a malicious link distributed via phishing emails.
   </Example>
   <Example id="S1017" name="OutSteel">
    OutSteel has relied on a user to click a malicious link within a spearphishing email.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork has used spearphishing with links to try to get users to click, download and open malicious files.
   </Example>
   <Example id="S0435" name="PLEAD">
    PLEAD has been executed via malicious links in e-mails.
   </Example>
   <Example id="S0453" name="Pony">
    Pony has attempted to lure targets into clicking links in spoofed emails from legitimate banks.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot has gained execution through users opening malicious links.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has relied on users to click on a malicious link delivered via a spearphishing.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has tricked unwitting recipients into clicking on malicious hyperlinks within emails crafted to resemble trustworthy senders.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has lured targets to click on malicious links to gain execution in the target environment.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM has relied upon users clicking on a malicious link delivered through phishing.
   </Example>
   <Example id="S0646" name="SpicyOmelette">
    SpicyOmelette has been executed through malicious links within spearphishing emails.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has relied on victims to click on a malicious link send via phishing campaigns.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used lures to get users to click links in emails and attachments. For example, TA505 makes their malware look like legitimate Microsoft Word documents, .pdf and/or .lnk files.
   </Example>
   <Example id="G0134" name="Transparent Tribe">
    Transparent Tribe has directed users to open URLs hosting malicious content.
   </Example>
   <Example id="S0436" name="TSCookie">
    TSCookie has been executed via malicious links embedded in e-mails spoofing the Ministries of Education, Culture, Sports, Science and Technology of Japan.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used spearphishing via a link to get users to download and run their malware.
   </Example>
   <Example id="G0112" name="Windshift">
    Windshift has used links embedded in e-mails to lure victims into executing malicious code.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has lured victims into clicking a malicious link delivered through spearphishing.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has used malicious links in e-mails to lure victims into downloading malware.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    If a link is being visited by a user, network intrusion prevention systems and systems designed to scan and remove malicious downloads can be used to block activity.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    If a link is being visited by a user, block unknown or unused files in transit by default that should not be downloaded or by policy from suspicious sites as a best practice to prevent some vectors, such as .scr, .exe, .pif, .cpl, etc. Some download scanning devices can open and analyze compressed and encrypted formats, such as zip and rar that may be used to conceal malicious files.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1204.002" name="User Execution: Malicious File">
  An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Examples>
   <Example id="G0018" name="admin@338">
    admin@338 has attempted to get victims to launch malicious Microsoft Word attachments delivered via spearphishing emails.
   </Example>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla has been executed through malicious e-mail attachments
   </Example>
   <Example id="G0130" name="Ajax Security Team">
    Ajax Security Team has lured victims into executing malicious files.
   </Example>
   <Example id="G0138" name="Andariel">
    Andariel has attempted to lure victims into enabling malicious macros within email attachments.
   </Example>
   <Example id="G1007" name="Aoqin Dragon">
    Aoqin Dragon has lured victims into opening weaponized documents, fake external drives, and fake antivirus to execute malicious payloads.
   </Example>
   <Example id="S0584" name="AppleJeus">
    AppleJeus has required user execution of a malicious MSI installer.
   </Example>
   <Example id="S0622" name="AppleSeed">
    AppleSeed can achieve execution through users running malicious file attachments distributed via email.
   </Example>
   <Example id="G0099" name="APT-C-36">
    APT-C-36 has prompted victims to accept macros in order to execute the subsequent payload.
   </Example>
   <Example id="G0005" name="APT12">
    APT12 has attempted to get victims to open malicious Microsoft Word and PDF attachment sent via spearphishing.
   </Example>
   <Example id="G0073" name="APT19">
    APT19 attempted to get users to launch malicious attachments delivered via spearphishing emails.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 attempted to get users to click on Microsoft Office attachments containing malicious macro scripts.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used various forms of spearphishing attempting to get a user to open attachments, including, but not limited to, malicious Microsoft Word documents, .pdf, and .lnk files.
   </Example>
   <Example id="G0013" name="APT30">
    APT30 has relied on users to execute malicious file attachments delivered via spearphishing emails.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has attempted to lure users to execute a malicious dropper delivered via a spearphishing attachment.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has used malicious e-mail attachments to lure victims into executing malware.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 has sent spearphishing attachments attempting to get a user to open them.
   </Example>
   <Example id="G0082" name="APT38">
    APT38  has attempted to lure victims into enabling malicious macros within email attachments.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has sent spearphishing emails in an attempt to lure users to click on a malicious attachment.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth has used malicious files including VBS, LNK, and HTML for execution.
   </Example>
   <Example id="S0606" name="Bad Rabbit">
    Bad Rabbit has been executed through user installation of an executable disguised as a flash installer.
   </Example>
   <Example id="S0642" name="BADFLICK">
    BADFLICK has relied upon users clicking on a malicious attachment delivered through spearphishing.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook has used lure documents to convince the user to enable macros.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has relied on users to execute malicious file attachments delivered via spearphishing emails.
   </Example>
   <Example id="G1002" name="BITTER">
    BITTER has attempted to lure victims into opening malicious attachments delivered via spearphishing.
   </Example>
   <Example id="G0098" name="BlackTech">
    BlackTech has used e-mails with malicious documents to lure victims into installing malware.
   </Example>
   <Example id="S0520" name="BLINDINGCAN">
    BLINDINGCAN has lured victims into executing malicious macros embedded within Microsoft Office documents.
   </Example>
   <Example id="S0635" name="BoomBox">
    BoomBox has gained execution through user interaction with a malicious file.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER has attempted to get users to launch malicious Microsoft Word attachments delivered via spearphishing emails.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee has relied upon a user opening an ISO file to enable execution of malicious shortcut files and DLLs.
   </Example>
   <Example id="S0482" name="Bundlore">
    Bundlore has attempted to get users to execute a malicious .app file that looks like a Flash Player update.
   </Example>
   <Example id="C0011" name="C0011">
    During C0011, Transparent Tribe relied on a student target to open a malicious document delivered via email.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors relied on users to enable macros within a malicious Microsoft Word document.
   </Example>
   <Example id="S0348" name="Cardinal RAT">
    Cardinal RAT lures victims into executing malicious macros embedded within Microsoft Excel documents.
   </Example>
   <Example id="S0465" name="CARROTBALL">
    CARROTBALL has been executed through users being lured into opening malicious e-mail attachments.
   </Example>
   <Example id="S0631" name="Chaes">
    Chaes requires the user to click on the malicious Word document to execute the next part of the attack.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling has gained execution through luring victims into opening malicious files.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group has sent emails containing malicious attachments that require users to execute a file or macro to infect the victim machine.
   </Example>
   <Example id="G0142" name="Confucius">
    Confucius has lured victims to execute malicious attachments included in crafted spearphishing emails related to current topics.
   </Example>
   <Example id="S0527" name="CSPY Downloader">
    CSPY Downloader has been delivered via malicious documents with embedded macros.
   </Example>
   <Example id="S1014" name="DanBot">
    DanBot has relied on victims' opening a malicious file for initial execution.
   </Example>
   <Example id="G0070" name="Dark Caracal">
    Dark Caracal makes their malware look like Flash Player, Office, or PDF documents in order to entice a user to click on it.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel has sent spearphishing emails in an attempt to lure users into clicking on a malicious attachments.
   </Example>
   <Example id="G0079" name="DarkHydrus">
    DarkHydrus has sent malware that required users to hit the enable button in Microsoft Excel to allow an .iqy file to be downloaded.
   </Example>
   <Example id="S1021" name="DnsSystem">
    DnsSystem has lured victims into opening macro-enabled Word documents for execution.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has used various forms of spearphishing in attempts to get users to open malicious attachments.
   </Example>
   <Example id="S0384" name="Dridex">
    Dridex has relied upon users clicking on a malicious attachment delivered through spearphishing.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca required users to click on a malicious file for the loader to activate.
   </Example>
   <Example id="G0066" name="Elderwood">
    Elderwood has leveraged multiple types of spearphishing in order to attempt to get a user to open attachments.
   </Example>
   <Example id="G1003" name="Ember Bear">
    Ember Bear has attempted to lure victims into executing malicious files.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has relied upon users clicking on a malicious attachment delivered through spearphishing.
   </Example>
   <Example id="S0634" name="EnvyScout">
    EnvyScout has been executed through malicious files attached to e-mails.
   </Example>
   <Example id="G1011" name="EXOTIC LILY">
    EXOTIC LILY has gained execution through victims clicking on malicious LNK files contained within ISO files, which can execute hidden DLLs within the ISO.
   </Example>
   <Example id="G0137" name="Ferocious Kitten">
    Ferocious Kitten has attempted to convince victims to enable malicious content within a spearphishing email by including an odd decoy message.
   </Example>
   <Example id="G0085" name="FIN4">
    FIN4 has lured victims to launch malicious attachments delivered via spearphishing emails (often sent from compromised accounts).
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used malicious documents to lure victims into allowing execution of PowerShell scripts.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 lured victims to double-click on images in the attachments they sent which would then execute the hidden LNK file.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has used malicious e-mail attachments to lure victims into executing malware.
   </Example>
   <Example id="S0696" name="Flagpro">
    Flagpro has relied on users clicking a malicious attachment delivered through spearphishing.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors relied on a victim to enable macros within a malicious Microsoft Word document likely sent via email.
   </Example>
   <Example id="G0084" name="Gallmaker">
    Gallmaker sent victims a lure document with a warning that asked victims to "enable content" for execution.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has attempted to get users to click on Office attachments with malicious macros embedded.
   </Example>
   <Example id="G0078" name="Gorgon Group">
    Gorgon Group attempted to get users to launch malicious Microsoft Office attachments delivered via spearphishing emails.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro has infected victims via malicious attachments.
   </Example>
   <Example id="S0561" name="GuLoader">
    The GuLoader executable has been retrieved via embedded macros in malicious Word documents.
   </Example>
   <Example id="S0499" name="Hancitor">
    Hancitor has used malicious Microsoft Word documents, sent via email, which prompted the victim to enable macros.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has relied on victim's executing malicious file attachments delivered via email or embedded within actor-controlled websites to deliver malware.
   </Example>
   <Example id="S1027" name="Heyoka Backdoor">
    Heyoka Backdoor has been spread through malicious document lures.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa used malicious e-mail attachments to lure victims into executing LNK files.
   </Example>
   <Example id="S0483" name="IcedID">
    IcedID has been executed through Word documents with malicious embedded macros.
   </Example>
   <Example id="G0100" name="Inception">
    Inception lured victims into clicking malicious files for machine reconnaissance and to execute malware.
   </Example>
   <Example id="G0136" name="IndigoZebra">
    IndigoZebra sent spearphishing emails containing malicious attachments that urged recipients to review modifications in the file which would trigger the attack.
   </Example>
   <Example id="G0119" name="Indrik Spider">
    Indrik Spider has attempted to get users to click on a malicious zipped file.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can deliver trojanized versions of software and documents, relying on user execution.
   </Example>
   <Example id="S0528" name="Javali">
    Javali has achieved execution through victims opening malicious attachments, including MSI files with embedded VBScript.
   </Example>
   <Example id="S0389" name="JCry">
    JCry has achieved execution by luring users to click on a file that appeared to be an Adobe Flash Player update installer.
   </Example>
   <Example id="S0648" name="JSS Loader">
    JSS Loader has been executed through malicious attachments contained in spearphishing emails.
   </Example>
   <Example id="S0585" name="Kerrdown">
    Kerrdown has gained execution through victims opening malicious files.
   </Example>
   <Example id="S0526" name="KGH_SPY">
    KGH_SPY has been spread through Word documents containing malicious macros.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used attempted to lure victims into opening malicious e-mail attachments.
   </Example>
   <Example id="S0669" name="KOCTOPUS">
    KOCTOPUS has relied on victims clicking a malicious document for execution.
   </Example>
   <Example id="S0356" name="KONNI">
    KONNI has relied on a victim to enable malicious macros within an attachment delivered via email.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has attempted to get users to launch a malicious Microsoft Word attachment delivered via a spearphishing email.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter has lured users to open malicious email attachments.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has sent spearphishing attachments attempting to get a user to click.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has tricked recipients into enabling malicious macros by getting victims to click "enable content" in email attachments.
   </Example>
   <Example id="G0095" name="Machete">
    Machete has relied on users opening malicious attachments delivered through spearphishing to execute malware.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has attempted to lure victims into opening malicious email attachments.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has attempted to get victims to open malicious files such as Windows Shortcuts (.lnk) and/or Microsoft Office documents, sent via email as part of spearphishing campaigns.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo requires the user to double-click the executable to run the malicious HTA file or to download a malicious installer.
   </Example>
   <Example id="G0103" name="Mofang">
    Mofang's malicious spearphishing attachments required a user to open the file after receiving.
   </Example>
   <Example id="G0021" name="Molerats">
    Molerats has sent malicious files via email that tricked users into clicking Enable Content to run an embedded macro and to download malicious archives.
   </Example>
   <Example id="S1026" name="Mongall">
    Mongall has relied on a user opening a malicious document for execution.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has attempted to get users to enable macros and launch malicious Microsoft Word documents delivered via spearphishing emails.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has sent malicious files requiring direct victim interaction to execute.
   </Example>
   <Example id="G0019" name="Naikon">
    Naikon has convinced victims to open malicious attachments to execute malware.
   </Example>
   <Example id="S0637" name="NativeZone">
    NativeZone can display an RTF document to the user  to enable execution of  Cobalt Strike stage shellcode.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE has been executed through luring victims into opening malicious documents.
   </Example>
   <Example id="G0133" name="Nomadic Octopus">
    Nomadic Octopus as attempted to lure victims into clicking on malicious attachments within spearphishing emails.
   </Example>
   <Example id="S0340" name="Octopus">
    Octopus has relied upon users clicking on a malicious attachment delivered through spearphishing.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has delivered macro-enabled documents that required targets to click the "enable content" button to execute the payload on the system.
   </Example>
   <Example id="C0016" name="Operation Dust Storm">
    During Operation Dust Storm, the threat actors relied on potential victims to open a malicious Microsoft Word document sent via email.
   </Example>
   <Example id="C0006" name="Operation Honeybee">
    During Operation Honeybee, threat actors relied on a victim to enable macros within a malicious Word document.
   </Example>
   <Example id="C0013" name="Operation Sharpshooter">
    During Operation Sharpshooter, the threat actors relied on victims executing malicious Microsoft Word or PDF files.
   </Example>
   <Example id="C0005" name="Operation Spalax">
    During Operation Spalax, the threat actors relied on a victim to open a PDF document and click on an embedded malicious link to download malware.
   </Example>
   <Example id="S0402" name="OSX/Shlayer">
    OSX/Shlayer has relied on users mounting and executing a malicious DMG file.
   </Example>
   <Example id="S1017" name="OutSteel">
    OutSteel has relied on a user to execute a malicious attachment delivered via spearphishing.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork embedded a malicious macro in a Word document and lured the victim to click on an icon to execute the malware.
   </Example>
   <Example id="G0068" name="PLATINUM">
    PLATINUM has attempted to get users to open malicious files by sending spearphishing emails with attachments to victims.
   </Example>
   <Example id="S0435" name="PLEAD">
    PLEAD has been executed via malicious e-mail attachments.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has used spearphishing attachments to infect victims.
   </Example>
   <Example id="S0453" name="Pony">
    Pony has attempted to lure targets into downloading an attached executable (ZIP, RAR, or CAB archives) or document (PDF or other MS Office format).
   </Example>
   <Example id="G0056" name="PROMETHIUM">
    PROMETHIUM has attempted to get users to execute compromised installation files for legitimate software including compression applications, security software, browsers, file recovery applications, and other tools and utilities.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot has gained execution through users opening malicious attachments.
   </Example>
   <Example id="S0458" name="Ramsay">
    Ramsay has been executed through malicious e-mail attachments.
   </Example>
   <Example id="G0075" name="Rancor">
    Rancor attempted to get users to click on an embedded macro within a Microsoft Office Excel document to launch their malware.
   </Example>
   <Example id="S0496" name="REvil">
    REvil has been executed via malicious MS Word e-mail attachments.
   </Example>
   <Example id="S0433" name="Rifdoor">
    Rifdoor has been executed from malicious Excel or Word documents containing macros.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT has relied upon users clicking on a malicious attachment delivered through spearphishing.
   </Example>
   <Example id="S0148" name="RTM">
    RTM has relied on users opening malicious email attachments, decompressing the attached archive, and double-clicking the executable within.
   </Example>
   <Example id="G0048" name="RTM">
    RTM has attempted to lure victims into opening e-mail attachments to execute malicious code.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has relied upon users to execute a malicious attachment delivered via spearphishing.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has tricked unwitting recipients into clicking on spearphishing attachments and enabling malicious macros embedded within files.
   </Example>
   <Example id="G1008" name="SideCopy">
    SideCopy has attempted to lure victims into clicking on malicious embedded archive files sent via spearphishing campaigns.
   </Example>
   <Example id="G0121" name="Sidewinder">
    Sidewinder has lured targets to click on malicious files to gain execution in the target environment.
   </Example>
   <Example id="G0091" name="Silence">
    Silence attempts to get users to launch malicious attachments delivered via spearphishing emails.
   </Example>
   <Example id="S0390" name="SQLRat">
    SQLRat relies on users clicking on an embedded image to execute the scripts.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has relied on users enabling malicious macros within Microsoft Excel and Word attachments.
   </Example>
   <Example id="S1037" name="STARWHALE">
    STARWHALE has relied on victims opening a malicious Excel file for execution.
   </Example>
   <Example id="S0491" name="StrongPity">
    StrongPity has been executed via compromised installation files for legitimate software including compression applications, security software, browsers, file recovery applications, and other tools and utilities.
   </Example>
   <Example id="S1042" name="SUGARDUMP">
    Some SUGARDUMP variants required a user to enable a macro within a malicious .xls file for execution.
   </Example>
   <Example id="S0464" name="SYSCON">
    SYSCON has been executed by luring victims to open malicious e-mail attachments.
   </Example>
   <Example id="G0062" name="TA459">
    TA459 has attempted to get victims to open malicious Microsoft Word attachment sent via spearphishing.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used lures to get users to enable content in malicious attachments and execute malicious files contained in archives. For example, TA505 makes their malware look like legitimate Microsoft Word documents, .pdf and/or .lnk files.
   </Example>
   <Example id="G0127" name="TA551">
    TA551 has prompted users to enable macros within spearphishing attachments to install malware.
   </Example>
   <Example id="S0011" name="Taidoor">
    Taidoor has relied upon a victim to click on a malicious email attachment.
   </Example>
   <Example id="G0089" name="The White Company">
    The White Company has used phishing lure documents that trick users into opening them and infecting their computers.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 has lured victims into opening malicious files containing malware.
   </Example>
   <Example id="S0665" name="ThreatNeedle">
    ThreatNeedle relies on a victim to click on a malicious document for initial execution.
   </Example>
   <Example id="G0131" name="Tonto Team">
    Tonto Team has relied on user interaction to open their malicious RTF documents.
   </Example>
   <Example id="G0134" name="Transparent Tribe">
    Transparent Tribe has used weaponized documents in e-mail to compromise targeted systems.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot has attempted to get users to launch malicious documents to deliver its payload.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has lured victims into executing malware via malicious e-mail attachments.
   </Example>
   <Example id="S0263" name="TYPEFRAME">
    A Word document delivering TYPEFRAME prompts the user to enable macro execution.
   </Example>
   <Example id="S0476" name="Valak">
    Valak has been executed via Microsoft Word documents containing malicious macros.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT has relied on a victim to open a malicious attachment within an email for execution.
   </Example>
   <Example id="G0107" name="Whitefly">
    Whitefly has used malicious .exe or .dll files disguised as documents or images.
   </Example>
   <Example id="G0112" name="Windshift">
    Windshift has used e-mail attachments to lure victims into executing malicious code.
   </Example>
   <Example id="G0090" name="WIRTE">
    WIRTE has attempted to lure users into opening malicious MS Word and Excel files to execute malicious payloads.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has lured victims to execute malware with spearphishing attachments containing macros to download either Emotet, Bokbot, TrickBot, or Bazar.
   </Example>
   <Example id="S1013" name="ZxxZ">
    ZxxZ has relied on victims to open a malicious attachment delivered via email.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, various Attack Surface Reduction (ASR) rules can be enabled to prevent the execution of potentially malicious executable files (such as those that have been downloaded and executed by Office applications/scripting interpreters/email clients or that do not meet specific prevalence, age, or trusted list criteria). Note: cloud-delivered protection must be enabled for certain rules.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Application control may be able to prevent the running of executables masquerading as other files.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0022" name="File">
    File Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1204.003" name="User Execution: Malicious Image">
  Adversaries may rely on a user running a malicious image to facilitate execution. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be backdoored. Backdoored images may be uploaded to a public repository via Upload Malware, and users may then download and deploy an instance or container from the image without realizing the image is malicious, thus bypassing techniques that specifically achieve Initial Access. This can lead to the execution of malicious code, such as code that executes cryptocurrency mining, in the instance or container.
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Containers, IaaS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has relied on users to download and execute malicious Docker images.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1047" name="Audit">
    Audit images deployed within the environment to ensure they do not contain any malicious components.
   </Mitigation>
   <Mitigation id="M1045" name="Code Signing">
    Utilize a trust model such as Docker Content Trust with digital signatures to ensure runtime verification of the integrity and publisher of specific image tags.
   </Mitigation>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network prevention intrusion systems and systems designed to scan and remove malicious downloads can be used to block activity.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Train users to be aware of the existence of malicious images and how to avoid deploying instances and containers from them.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0015" name="Application Log">
    Application Log Content
   </Detection>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0032" name="Container">
    Container Creation | Container Start
   </Detection>
   <Detection id="DS0007" name="Image">
    Image Creation
   </Detection>
   <Detection id="DS0030" name="Instance">
    Instance Creation | Instance Start
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1078" name="Valid Accounts">
  Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.
  <Tactics>
   Defense Evasion, Persistence, Privilege Escalation, Initial Access
  </Tactics>
  <Platforms>
   Azure AD, Containers, Google Workspace, IaaS, Linux, Network, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Effective_Permissions>
   Administrator, User
  </Effective_Permissions>
  <Defense_Bypassed>
   Anti-virus, Application Control, Firewall, Host Intrusion Prevention Systems, Network Intrusion Detection System, System Access Controls
  </Defense_Bypassed>
  <CAPEC_ID>
   CAPEC-560
  </CAPEC_ID>
  <Examples>
   <Example id="G0026" name="APT18">
    APT18 actors leverage legitimate credentials to log into external remote services.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has used legitimate credentials to gain initial access, maintain access, and exfiltrate data from a victim network. The group has specifically used credentials stolen through a spearphishing email to login to the DCCC network. The group has also leveraged default manufacturer's passwords to gain initial access to corporate networks via IoT devices such as a VOIP phone, printer, and video decoder.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 used different compromised credentials for remote access and to move laterally.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has used valid accounts for initial access and privilege escalation.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has used stolen credentials to compromise Outlook Web Access (OWA).
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used compromised credentials to log on to other systems.
   </Example>
   <Example id="G0001" name="Axiom">
    Axiom has used previously compromised administrative accounts to escalate privileges.
   </Example>
   <Example id="G0008" name="Carbanak">
    Carbanak actors used legitimate credentials of banking employees to perform operations that sent them millions of dollars.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used a valid account to maintain persistence via scheduled task.
   </Example>
   <Example id="G0035" name="Dragonfly">
    Dragonfly has compromised user credentials and used valid accounts for operations.
   </Example>
   <Example id="S0567" name="Dtrack">
    Dtrack used hard-coded credentials to gain access to a network share.
   </Example>
   <Example id="S0038" name="Duqu">
    Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware.
   </Example>
   <Example id="G0051" name="FIN10">
    FIN10 has used stolen credentials to connect remotely to victim networks using VPNs protected with only a single factor.
   </Example>
   <Example id="G0085" name="FIN4">
    FIN4 has used legitimate credentials to hijack email communications.
   </Example>
   <Example id="G0053" name="FIN5">
    FIN5 has used legitimate VPN, RDP, Citrix, or VNC credentials to maintain access to a victim environment.
   </Example>
   <Example id="G0037" name="FIN6">
    To move laterally on a victim network, FIN6 has used credentials stolen from various systems on which it gathered usernames and password hashes.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has harvested valid administrative credentials for lateral movement.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has used valid accounts for persistence and lateral movement.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used valid credentials with various services during lateral movement.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM leveraged valid accounts to maintain access to a victim network.
   </Example>
   <Example id="S0604" name="Industroyer">
    Industroyer can use supplied user credentials to execute processes and stop services.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has used credential dumpers or stealers to obtain legitimate credentials, which they used to gain access to victim accounts.
   </Example>
   <Example id="S0599" name="Kinsing">
    Kinsing has used valid SSH credentials to access remote hosts.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has used compromised credentials and/or session tokens to gain access into a victim's VPN, VDI, RDP, and IAMs.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used administrator credentials to gain access to restricted network segments.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has obtained valid accounts to gain initial access.
   </Example>
   <Example id="S0362" name="Linux Rabbit">
    Linux Rabbit acquires valid SSH accounts through brute force.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used valid accounts including shared between Managed Service Providers and clients to move between the two environments.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors used compromised VPN accounts to gain access to victim systems.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used compromised credentials to access other systems on a victim network.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used valid VPN credentials to gain initial access.
   </Example>
   <Example id="G0011" name="PittyTiger">
    PittyTiger attempts to obtain legitimate credentials during operations.
   </Example>
   <Example id="G1005" name="POLONIUM">
    POLONIUM has used valid compromised credentials to gain access to victim environments.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team have used previously acquired legitimate credentials prior to attacks.
   </Example>
   <Example id="S0053" name="SeaDuke">
    Some SeaDuke samples have a module to extract email from Microsoft Exchange servers using compromised credentials.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has used compromised credentials to log on to other systems and escalate privileges.
   </Example>
   <Example id="G0122" name="Silent Librarian">
    Silent Librarian has used compromised credentials to obtain unauthorized access to online accounts.
   </Example>
   <Example id="G0039" name="Suckfly">
    Suckfly used legitimate account credentials that they dumped to navigate the internal victim network as though they were the legitimate account owner.
   </Example>
   <Example id="G0088" name="TEMP.Veles">
    TEMP.Veles has used compromised VPN accounts.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    Threat Group-3390 actors obtain legitimate credentials using a variety of methods and use them to further lateral movement on victim networks.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used valid credentials for privileged accounts with the goal of accessing domain controllers.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1013" name="Application Developer Guidance">
    Ensure that applications do not store sensitive data or credentials insecurely. (e.g. plaintext credentials in code, published credentials in repositories, or credentials in public cloud storage).
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Applications and appliances that utilize default username and password should be changed immediately after the installation, and before deployment to a production environment.  When possible, applications that use SSH keys should be updated periodically and properly secured.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Audit domain and local accounts as well as their permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Regularly audit user accounts for activity and deactivate or remove any that are no longer needed.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation | Logon Session Metadata
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1078.001" name="Valid Accounts: Default Accounts">
  Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.
  <Tactics>
   Defense Evasion, Persistence, Privilege Escalation, Initial Access
  </Tactics>
  <Platforms>
   Azure AD, Containers, Google Workspace, IaaS, Linux, Office 365, SaaS, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-70
  </CAPEC_ID>
  <Examples>
   <Example id="S0537" name="HyperStack">
    HyperStack can use default credentials to connect to IPC$ shares on remote machines.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet infected WinCC machines via a hardcoded database server password.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1027" name="Password Policies">
    Applications and appliances that utilize default username and password should be changed immediately after the installation, and before deployment to a production environment.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1078.002" name="Valid Accounts: Domain Accounts">
  Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.
  <Tactics>
   Defense Evasion, Persistence, Privilege Escalation, Initial Access
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-560
  </CAPEC_ID>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 has used valid accounts, including administrator accounts, to help facilitate lateral movement on compromised networks.
   </Example>
   <Example id="G0022" name="APT3">
    APT3 leverages valid accounts after gaining credentials for use within the victim domain.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used compromised domain accounts to gain access to the target environment.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can use known credentials to run commands and spawn processes as a domain user account.
   </Example>
   <Example id="S1024" name="CreepySnail">
    CreepySnail can use stolen credentials to authenticate on target networks.
   </Example>
   <Example id="G0119" name="Indrik Spider">
    Indrik Spider has collected credentials from infected systems, including domain accounts.
   </Example>
   <Example id="G0019" name="Naikon">
    Naikon has used administrator credentials for lateral movement in compromised networks.
   </Example>
   <Example id="C0002" name="Night Dragon">
    During Night Dragon, threat actors used domain accounts to gain further access to victim systems.
   </Example>
   <Example id="C0012" name="Operation CuckooBees">
    During Operation CuckooBees, the threat actors used compromised domain administrator credentials as part of their lateral movement.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used domain credentials, including domain admin, for lateral movement and privilege escalation.
   </Example>
   <Example id="S0446" name="Ryuk">
    Ryuk can use stolen domain admin accounts to move laterally within a victim domain.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used stolen credentials to access administrative accounts within the domain.
   </Example>
   <Example id="S0140" name="Shamoon">
    If Shamoon cannot access shares using current privileges, it attempts access using hard coded, domain-specific credentials gathered earlier in the intrusion.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet attempts to access network resources with a domain account’s credentials.
   </Example>
   <Example id="G0092" name="TA505">
    TA505 has used stolen domain admin accounts to compromise additional hosts.
   </Example>
   <Example id="G0028" name="Threat Group-1314">
    Threat Group-1314 actors used compromised domain credentials for the victim's endpoint management platform, Altiris, to move laterally.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used administrative accounts, including Domain Admin, to move laterally within a victim network.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Integrating multi-factor authentication (MFA) as part of organizational policy can greatly reduce the risk of an adversary gaining control of valid credentials that may be used for additional tactics such as initial access, lateral movement, and collecting information. MFA can also be used to restrict access to cloud resources and APIs.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Audit domain account permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account. Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled and use of accounts is segmented, as this is often equivalent to having a local administrator account with the same password on all systems. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers. Limit credential overlap across systems to prevent access if account credentials are obtained.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation | Logon Session Metadata
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1078.003" name="Valid Accounts: Local Accounts">
  Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.
  <Tactics>
   Defense Evasion, Persistence, Privilege Escalation, Initial Access
  </Tactics>
  <Platforms>
   Containers, Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Examples>
   <Example id="G0016" name="APT29">
    APT29 has used compromised local accounts to access victims' networks.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 has used legitimate local admin account credentials.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can use known credentials to run commands and spawn processes as a local user account.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet can brute force a local admin password, then use it to facilitate lateral movement.
   </Example>
   <Example id="G0051" name="FIN10">
    FIN10 has moved laterally using the Local Administrator account.
   </Example>
   <Example id="G0125" name="HAFNIUM">
    HAFNIUM has used the NT AUTHORITY\SYSTEM account to create files on Exchange servers.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used a tool called GREASE to add a Windows admin account in order to allow them continued access via RDP.
   </Example>
   <Example id="S0368" name="NotPetya">
    NotPetya can use valid credentials with PsExec or wmic to spread itself to remote systems.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors used local account credentials found during the intrusion for lateral movement and privilege escalation.
   </Example>
   <Example id="G0056" name="PROMETHIUM">
    PROMETHIUM has created admin accounts on a compromised host.
   </Example>
   <Example id="G0081" name="Tropic Trooper">
    Tropic Trooper has used known administrator account credentials to execute the backdoor directly.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has abused local accounts that have the same password across the victim’s network.
   </Example>
   <Example id="S0221" name="Umbreon">
    Umbreon creates valid local users to provide access to the system.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1027" name="Password Policies">
    Ensure that local administrator accounts have complex, unique passwords across all systems on the network.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Audit local accounts permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation | Logon Session Metadata
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1078.004" name="Valid Accounts: Cloud Accounts">
  Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.
  <Tactics>
   Defense Evasion, Persistence, Privilege Escalation, Initial Access
  </Tactics>
  <Platforms>
   Azure AD, Google Workspace, IaaS, Office 365, SaaS
  </Platforms>
  <Permissions_Required>
   Administrator, User
  </Permissions_Required>
  <Examples>
   <Example id="G0007" name="APT28">
    APT28 has used compromised Office 365 service accounts with Global Administrator privileges to collect email from user inboxes.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used a compromised O365 administrator account to create a new Service Principal.
   </Example>
   <Example id="G0064" name="APT33">
    APT33 has used compromised Office 365 accounts in tandem with Ruler in an attempt to gain control of endpoints.
   </Example>
   <Example id="G0004" name="Ke3chang">
    Ke3chang has used compromised credentials to sign into victims’ Microsoft 365 accounts.
   </Example>
   <Example id="G1004" name="LAPSUS$">
    LAPSUS$ has used compromised credentials to access cloud assets within a target organization.
   </Example>
   <Example id="S0683" name="Peirates">
    Peirates can use stolen service account tokens to perform its operations.
   </Example>
   <Example id="S0684" name="ROADTools">
    ROADTools leverages valid cloud credentials to perform enumeration operations using the internal Azure AD Graph API.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1032" name="Multi-factor Authentication">
    Use multi-factor authentication for cloud accounts, especially privileged accounts. This can be implemented in a variety of forms (e.g. hardware, virtual, SMS), and can also be audited using administrative reporting features.
   </Mitigation>
   <Mitigation id="M1027" name="Password Policies">
    Ensure that cloud accounts, particularly privileged accounts, have complex, unique passwords across all systems on the network. Passwords and access keys should be rotated regularly. This limits the amount of time credentials can be used to access resources if a credential is compromised without your knowledge. Cloud service providers may track access key age to help audit and identify keys that may need to be rotated.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Review privileged cloud account permission levels routinely to look for those that could allow an adversary to gain wide access. These reviews should also check if new privileged cloud accounts have been created that were not authorized.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    Periodically review user accounts and remove those that are inactive or unnecessary. Limit the ability for user accounts to create additional accounts.
   </Mitigation>
   <Mitigation id="M1017" name="User Training">
    Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0028" name="Logon Session">
    Logon Session Creation | Logon Session Metadata
   </Detection>
   <Detection id="DS0002" name="User Account">
    User Account Authentication
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1125" name="Video Capture">
  An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.
  <Tactic>
   Collection
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <CAPEC_ID>
   CAPEC-634
  </CAPEC_ID>
  <Examples>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla can access the victim’s webcam and record video.
   </Example>
   <Example id="S0234" name="Bandook">
    Bandook has modules that are capable of capturing video from a victim's webcam.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can record screen content in AVI format.
   </Example>
   <Example id="S0338" name="Cobian RAT">
    Cobian RAT has a feature to access the webcam on the victim’s machine.
   </Example>
   <Example id="S0591" name="ConnectWise">
    ConnectWise can record video on remote hosts.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson can capture webcam video on targeted systems.
   </Example>
   <Example id="S0334" name="DarkComet">
    DarkComet can access the victim’s webcam to take pictures.
   </Example>
   <Example id="S0021" name="Derusbi">
    Derusbi is capable of capturing video.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can capture webcam data on Windows and macOS systems.
   </Example>
   <Example id="S0152" name="EvilGrab">
    EvilGrab has the capability to capture video from a victim machine.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 created a custom video recording capability that could be used to monitor operations in the victim's environment.
   </Example>
   <Example id="S0434" name="Imminent Monitor">
    Imminent Monitor has a remote webcam monitoring capability.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can remotely activate the victim’s webcam to capture content.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT has the capability to capture video from a webcam.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar captures images from the webcam.
   </Example>
   <Example id="S0409" name="Machete">
    Machete takes photos from the computer’s web camera.
   </Example>
   <Example id="S0336" name="NanoCore">
    NanoCore can access the victim's webcam and capture data.
   </Example>
   <Example id="S0385" name="njRAT">
    njRAT can access the victim's webcam.
   </Example>
   <Example id="S0644" name="ObliqueRAT">
    ObliqueRAT can capture images from webcams on compromised hosts.
   </Example>
   <Example id="S1050" name="PcShare">
    PcShare can capture camera video as part of its collection process.
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT has used a Python tool named Bewmac to record the webcam on compromised hosts.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy can access a connected webcam and capture pictures.
   </Example>
   <Example id="S0262" name="QuasarRAT">
    QuasarRAT can perform webcam viewing.
   </Example>
   <Example id="S0332" name="Remcos">
    Remcos can access a system’s webcam and take pictures.
   </Example>
   <Example id="S0379" name="Revenge RAT">
    Revenge RAT has the ability to access the webcam.
   </Example>
   <Example id="S0461" name="SDBbot">
    SDBbot has the ability to record video on a compromised host.
   </Example>
   <Example id="G0091" name="Silence">
    Silence has been observed making videos of victims to observe bank employees day to day activities.
   </Example>
   <Example id="S0098" name="T9000">
    T9000 uses the Skype API to record audio and video calls. It writes encrypted data to %APPDATA%\Intel\Skype.
   </Example>
   <Example id="S0467" name="TajMahal">
    TajMahal has the ability to capture webcam video.
   </Example>
   <Example id="S0670" name="WarzoneRAT">
    WarzoneRAT can access the webcam on a victim's machine.
   </Example>
   <Example id="S0412" name="ZxShell">
    ZxShell has a command to perform video device spying.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1497" name="Virtualization/Sandbox Evasion">
  Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.
  <Tactics>
   Defense Evasion, Discovery
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Host forensic analysis, Signature-based detection, Static File Analysis
  </Defense_Bypassed>
  <Examples>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla has he ability to perform anti-sandboxing and anti-virtualization checks.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can attempt to overload sandbox analysis by sending 1550 calls to printf.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal can check to determine if the compromised system is running on VMware.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee has the ability to perform anti-virtualization checks.
   </Example>
   <Example id="S0484" name="Carberp">
    Carberp has removed various hooks before installing the trojan or bootkit to evade sandbox analysis or other analysis software.
   </Example>
   <Example id="S0023" name="CHOPSTICK">
    CHOPSTICK  includes runtime checks to identify an analysis environment and prevent execution on it.
   </Example>
   <Example id="S0046" name="CozyCar">
    Some versions of CozyCar will check to ensure it is not being executed inside a virtual machine or a known malware analysis sandbox environment. If it detects that it is, it will exit.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel malware has employed just-in-time decryption of strings to evade sandbox detection.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor has used multiple anti-analysis and anti-sandbox techniques to prevent automated analysis by sandboxes.
   </Example>
   <Example id="S0666" name="Gelsemium">
    Gelsemium can use junk code to generate random activity to obscure malware behavior.
   </Example>
   <Example id="S0499" name="Hancitor">
    Hancitor has used a macro to check that an ActiveDocument shape object in the lure message is present. If this object is not found, the macro will exit without downloading additional payloads.
   </Example>
   <Example id="S1020" name="Kevin">
    Kevin can sleep for a time interval between C2 communication attempts.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has embedded a "vmdetect.exe" executable to identify virtual machines at the beginning of execution.
   </Example>
   <Example id="C0005" name="Operation Spalax">
    During Operation Spalax, the threat actors used droppers that would run anti-analysis checks before executing malware on a compromised host.
   </Example>
   <Example id="S0147" name="Pteranodon">
    Pteranodon has the ability to use anti-detection functions to identify sandbox environments.
   </Example>
   <Example id="S0148" name="RTM">
    RTM can detect if it is running within a sandbox or other virtualized analysis environment.
   </Example>
   <Example id="S1030" name="Squirrelwaffle">
    Squirrelwaffle has contained a hardcoded list of IP addresses to block that belong to sandboxes and analysis platforms.
   </Example>
   <Example id="S0380" name="StoneDrill">
    StoneDrill has used several anti-emulation techniques to prevent automated analysis by emulators or sandboxes.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1497.001" name="Virtualization/Sandbox Evasion: System Checks">
  Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.
  <Tactics>
   Defense Evasion, Discovery
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Host forensic analysis, Signature-based detection, Static File Analysis
  </Defense_Bypassed>
  <Examples>
   <Example id="S0373" name="Astaroth">
    Astaroth can check for Windows product ID's used by sandboxes and usernames and disk serial numbers associated with analyst environments.
   </Example>
   <Example id="S0438" name="Attor">
    Attor can detect whether it is executed in some virtualized or emulated environment by searching for specific artifacts, such as communication with I/O ports and using VM-specific instructions.
   </Example>
   <Example id="S0337" name="BadPatch">
    BadPatch attempts to detect if it is being run in a Virtual Machine (VM) using a WMI query for disk drive name, BIOS, and motherboard information.
   </Example>
   <Example id="S0657" name="BLUELIGHT">
    BLUELIGHT can check to see if the infected machine has VM tools running.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee has the ability to search for designated file paths and Registry keys that indicate a virtualized environment from multiple products.
   </Example>
   <Example id="S0527" name="CSPY Downloader">
    CSPY Downloader can search loaded modules, PEB structure, file paths, Registry keys, and memory to determine if it is being debugged or running in a virtual environment.
   </Example>
   <Example id="G0012" name="Darkhotel">
    Darkhotel malware has used a series of checks to determine if it's being analyzed; checks include the length of executable names, if a filename ends with .Md5.exe, and if the program is executed from the root of the C:\ drive, as well as checks for sandbox-related libraries.
   </Example>
   <Example id="S0354" name="Denis">
    Denis ran multiple system checks, looking for processor and register characteristics, to evade emulation and analysis.
   </Example>
   <Example id="S0024" name="Dyre">
    Dyre can detect sandbox analysis environments by inspecting the process list and Registry.
   </Example>
   <Example id="S0396" name="EvilBunny">
    EvilBunny's dropper has checked the number of processes and the length and strings of its own file name to identify if the malware is in a sandbox environment.
   </Example>
   <Example id="G0120" name="Evilnum">
    Evilnum has used a component called TerraLoader to check certain hardware and file information to detect sandboxed environments.
   </Example>
   <Example id="S0679" name="Ferocious">
    Ferocious can run anti-sandbox checks using the Microsoft Excel 4.0 function GET.WORKSPACE to determine the OS version, if there is a mouse present, and if the host is capable of playing sounds.
   </Example>
   <Example id="S0182" name="FinFisher">
    FinFisher obtains the hardware device list and checks if the MD5 of the vendor ID is equal to a predefined list in order to check for sandbox/virtualized environments.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors used a script that ran WMI queries to check if a VM or sandbox was running, including VMWare and Virtualbox. The script would also call WMI to determine the number of cores allocated to the system; if less than two the script would stop execution.
   </Example>
   <Example id="S0588" name="GoldMax">
    GoldMax will check if it is being run in a virtualized environment by comparing the collected MAC address to c8:27:cc:c2:37:5a.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can detect VMWare via its I/O port and Virtual PC via the vpcext instruction.
   </Example>
   <Example id="S0237" name="GravityRAT">
    GravityRAT uses WMI to check the BIOS and manufacturer information for strings like "VMWare", "Virtual", and "XEN" and another WMI request to get the current temperature of the hardware to determine if it's a virtual machine environment.
   </Example>
   <Example id="S0561" name="GuLoader">
    GuLoader has the ability to perform anti-VM and anti-sandbox checks using string hashing, the API call EnumWindows, and checking for Qemu guest agent.
   </Example>
   <Example id="S0260" name="InvisiMole">
    InvisiMole can check for artifacts of VirtualBox, Virtual PC and VMware environment, and terminate itself if they are detected.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used tools to detect sandbox or VMware services through identifying the presence of a debugger or related services.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can check for specific usernames, computer names, device drivers, DLL's, and virtual devices associated with sandboxed environments and can enter an infinite loop and stop itself if any are detected.
   </Example>
   <Example id="S1048" name="macOS.OSAMiner">
    macOS.OSAMiner can parse the output of the native system_profiler tool to determine if the machine is running with 4 cores.
   </Example>
   <Example id="S0576" name="MegaCortex">
    MegaCortex has checked the number of CPUs in the system to avoid being run in a sandbox or emulator.
   </Example>
   <Example id="S0637" name="NativeZone">
    NativeZone has checked if Vmware or VirtualBox VM is running on a compromised host.
   </Example>
   <Example id="S0644" name="ObliqueRAT">
    ObliqueRAT can halt execution if it identifies processes belonging to virtual machine software or analysis tools.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used macros to verify if a mouse is connected to a compromised machine.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum's loader can check the amount of physical memory and terminates itself if the host has less than 1.5 Gigabytes of physical memory in total.
   </Example>
   <Example id="S0264" name="OopsIE">
    OopsIE performs several anti-VM and sandbox checks on the victim's machine. One technique the group has used was to perform a WMI query SELECT * FROM MSAcpi_ThermalZoneTemperature to check the temperature to see if it’s running in a virtual environment.
   </Example>
   <Example id="S0352" name="OSX_OCEANLOTUS.D">
    OSX_OCEANLOTUS.D has variants that check a number of system parameters to see if it is being run on real hardware or in a virtual machine environment, such as sysctl hw.model.
   </Example>
   <Example id="S0626" name="P8RAT">
    P8RAT can check the compromised host for processes associated with VMware or VirtualBox environments.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX checks if VMware tools is running in the background by searching for any process named "vmtoolsd".
   </Example>
   <Example id="S0428" name="PoetRAT">
    PoetRAT checked the size of the hard drive to determine if it was being run in a sandbox environment. In the event of sandbox detection, it would delete itself by overwriting the malware scripts with the contents of "License.txt" and exiting.
   </Example>
   <Example id="S0192" name="Pupy">
    Pupy has a module that checks a number of indicators on the system to determine if its running on a virtual machine.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can check the compromised host for the presence of multiple executables associated with analysis tools and halt execution if any are found.
   </Example>
   <Example id="S0332" name="Remcos">
    Remcos searches for Sandboxie and VMware on the system.
   </Example>
   <Example id="S0270" name="RogueRobin">
    RogueRobin uses WMI to check BIOS version for VBOX, bochs, qemu, virtualbox, and vm to check for evidence that the script might be executing within an analysis environment.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT can check for VMware-related files and DLLs related to sandboxes.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has run several virtual machine and sandbox checks, including checking if Sbiedll.dll is present in a list of loaded modules, comparing the machine name to HAL9TH and the user name to JohnDoe, and checking the BIOS version for known virtual machine identifiers.
   </Example>
   <Example id="S1019" name="Shark">
    Shark can stop execution if the screen width of the targeted machine is not over 600 pixels.
   </Example>
   <Example id="S0226" name="Smoke Loader">
    Smoke Loader scans processes to perform anti-VM checks.
   </Example>
   <Example id="S0627" name="SodaMaster">
    SodaMaster can check for the presence of the Registry key HKEY_CLASSES_ROOT\Applications\VMwareHostOpen.exe before proceeding to its main functionality.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST checked the domain name of the compromised host to verify it was running in a real environment.
   </Example>
   <Example id="S0242" name="SynAck">
    SynAck checks its directory location in an attempt to avoid launching in a sandbox.
   </Example>
   <Example id="S0094" name="Trojan.Karagany">
    Trojan.Karagany can detect commonly used and generic virtualization platforms based primarily on drivers and file paths.
   </Example>
   <Example id="S0333" name="UBoatRAT">
    UBoatRAT checks for virtualization software such as VMWare, VirtualBox, or QEmu on the compromised machine.
   </Example>
   <Example id="S0612" name="WastedLocker">
    WastedLocker checked if UCOMIEnumConnections and IActiveScriptParseProcedure32 Registry keys were detected as part of its anti-analysis technique.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can stop its execution when it recognizes the presence of certain monitoring tools.
   </Example>
   <Example id="S0248" name="yty">
    yty has some basic anti-sandbox detection that tries to detect Virtual PC, Sandboxie, and VMware.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1497.002" name="Virtualization/Sandbox Evasion: User Activity Based Checks">
  Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.
  <Tactics>
   Defense Evasion, Discovery
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Host forensic analysis, Signature-based detection, Static File Analysis
  </Defense_Bypassed>
  <Examples>
   <Example id="G0012" name="Darkhotel">
    Darkhotel has used malware that repeatedly checks the mouse cursor position to determine if a real user is on the system.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 used images embedded into document lures that only activate the payload when a user double clicks to avoid sandboxes.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum loader only executes the payload after the left mouse button has been pressed at least three times, in order to avoid being executed within virtualized or emulated environments.
   </Example>
   <Example id="S0543" name="Spark">
    Spark has used a splash screen to check whether an user actively clicks on the screen before running malicious code.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1497.003" name="Virtualization/Sandbox Evasion: Time Based Evasion">
  Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.
  <Tactics>
   Defense Evasion, Discovery
  </Tactics>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Defense_Bypassed>
   Anti-virus, Host forensic analysis, Signature-based detection, Static File Analysis
  </Defense_Bypassed>
  <Examples>
   <Example id="S0584" name="AppleJeus">
    AppleJeus has waited a specified time before downloading a second stage payload.
   </Example>
   <Example id="S0642" name="BADFLICK">
    BADFLICK has delayed communication to the actor-controlled IP address by 5 minutes.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can use a timer to delay execution of core functionality.
   </Example>
   <Example id="S0574" name="BendyBear">
    BendyBear can check for analysis environments and signs of debugging using the Windows API kernel32!GetTickCountKernel32 call.
   </Example>
   <Example id="S0268" name="Bisonal">
    Bisonal has checked if the malware is running in a virtual environment with the anti-debug function GetTickCount() to compare the timing.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee has the ability to set a hardcoded and randomized sleep interval.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can wait 30 minutes before initiating contact with C2.
   </Example>
   <Example id="S0611" name="Clop">
    Clop has used the sleep command to avoid sandbox detection.
   </Example>
   <Example id="S0115" name="Crimson">
    Crimson can determine when it has been installed on a host for at least 15 days before downloading the final payload.
   </Example>
   <Example id="S0694" name="DRATzarus">
    DRATzarus can use the GetTickCount and GetSystemTimeAsFileTime API calls to measure function timing.
   </Example>
   <Example id="S0554" name="Egregor">
    Egregor can perform a  long sleep (greater than or equal to 3 minutes) to evade detection.
   </Example>
   <Example id="S0396" name="EvilBunny">
    EvilBunny has used time measurements from 3 different APIs before and after performing sleep operations to check and abort if the malware is running in a sandbox.
   </Example>
   <Example id="S0512" name="FatDuke">
    FatDuke can turn itself on or off at random intervals.
   </Example>
   <Example id="S0493" name="GoldenSpy">
    GoldenSpy's installer has delayed installation of GoldenSpy for two hours after it reaches a victim system.
   </Example>
   <Example id="S0588" name="GoldMax">
    GoldMax has set an execution trigger date and time, stored as an ASCII Unix/Epoch time value.
   </Example>
   <Example id="S0632" name="GrimAgent">
    GrimAgent can sleep for 195 - 205 seconds after payload execution and before deleting its task.
   </Example>
   <Example id="S0561" name="GuLoader">
    GuLoader has the ability to perform anti-debugging based on time checks, API calls, and CPUID.
   </Example>
   <Example id="S0697" name="HermeticWiper">
    HermeticWiper has the ability to receive a command parameter to sleep prior to carrying out destructive actions on a targeted host.
   </Example>
   <Example id="S0513" name="LiteDuke">
    LiteDuke can wait 30 seconds before executing additional code if security software is detected.
   </Example>
   <Example id="S0447" name="Lokibot">
    Lokibot has performed a time-based anti-debug check before downloading its third stage.
   </Example>
   <Example id="S0439" name="Okrum">
    Okrum's loader can detect presence of an emulator by using two calls to GetTickCount API, and checking whether the time has been accelerated.
   </Example>
   <Example id="S0626" name="P8RAT">
    P8RAT has the ability to "sleep" for a specified time to evade detection.
   </Example>
   <Example id="S0453" name="Pony">
    Pony has delayed execution using a built-in function to avoid detection and analysis.
   </Example>
   <Example id="S0650" name="QakBot">
    The QakBot dropper can delay dropping the payload to evade detection.
   </Example>
   <Example id="S0565" name="Raindrop">
    After initial installation, Raindrop runs a computation to delay execution.
   </Example>
   <Example id="S1018" name="Saint Bot">
    Saint Bot has used the command timeout 20 to pause the execution of its initial loader.
   </Example>
   <Example id="S0627" name="SodaMaster">
    SodaMaster has the ability to put itself to "sleep" for a specified time.
   </Example>
   <Example id="S1034" name="StrifeWater">
    StrifeWater can modify its sleep time responses from the default of 20-22 seconds.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST remained dormant after initial access for a period of up to two weeks.
   </Example>
   <Example id="S0595" name="ThiefQuest">
    ThiefQuest invokes time call to check the system's time, executes a sleep command, invokes a second time call, and then compares the time difference between the two time calls and the amount of time the system slept to identify the sandbox.
   </Example>
   <Example id="S0671" name="Tomiris">
    Tomiris has the ability to sleep for at least nine minutes to evade sandbox-based analysis systems.
   </Example>
   <Example id="S0266" name="TrickBot">
    TrickBot has used printf and file I/O loops to delay process execution as part of API hammering.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif has used a 30 minute delay after execution to evade sandbox monitoring tools.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can pause for 20 seconds to bypass antivirus solutions.
   </Example>
   <Example id="S0658" name="XCSSET">
    Using the machine's local time, XCSSET waits 43200 seconds (12 hours) from the initial creation timestamp of a specific file, .report. After the elapsed time, XCSSET executes additional modules.
   </Example>
  </Examples>
  <Mitigations/>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0009" name="Process">
    OS API Execution | Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1600" name="Weaken Encryption">
  Adversaries may compromise a network device’s encryption capability in order to bypass encryption that would otherwise protect data communications.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Network
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Defense_Bypassed>
   Encryption
  </Defense_Bypassed>
  <Mitigations/>
  <Detections>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1600.001" name="Weaken Encryption: Reduce Key Space">
  Adversaries may reduce the level of effort required to decrypt data transmitted over the network by reducing the cipher strength of encrypted communications.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Network
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Mitigations/>
  <Detections>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1600.002" name="Weaken Encryption: Disable Crypto Hardware">
  Adversaries disable a network device’s dedicated hardware encryption, which may enable them to leverage weaknesses in software encryption in order to reduce the effort involved in collecting, manipulating, and exfiltrating transmitted data.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Network
  </Platforms>
  <Permissions_Required>
   Administrator
  </Permissions_Required>
  <Mitigations/>
  <Detections>
   <Detection id="DS0022" name="File">
    File Modification
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1102" name="Web Service">
  Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0050" name="APT32">
    APT32 has used Dropbox, Amazon S3, and Google Drive to host malicious downloads.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar downloads have been hosted on Google Docs.
   </Example>
   <Example id="S0635" name="BoomBox">
    BoomBox can download files from Dropbox using a hardcoded access token.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee has been downloaded to victim's machines from OneDrive.
   </Example>
   <Example id="S0335" name="Carbon">
    Carbon can use Pastebin to receive C2 commands.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower can download additional modules from actor-controlled Amazon S3 buckets.
   </Example>
   <Example id="S0600" name="Doki">
    Doki has used the dogechain.info API to generate a C2 address.
   </Example>
   <Example id="S0547" name="DropBook">
    DropBook can communicate with its operators by exploiting the Simplenote, DropBox, and the social media platform, Facebook, where it can create fake accounts to control the backdoor and receive instructions.
   </Example>
   <Example id="G1003" name="Ember Bear">
    Ember Bear has used Discord's content delivery network (CDN) to deliver malware and malicious scripts to a compromised host.
   </Example>
   <Example id="G1011" name="EXOTIC LILY">
    EXOTIC LILY has used file-sharing services including WeTransfer, TransferNow, and OneDrive to deliver payloads.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used Pastebin and Google Storage to host content for their operations.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8 has used sslip.io, a free IP to domain mapping service that also makes SSL certificate generation easier for traffic encryption, as part of their command and control.
   </Example>
   <Example id="G0117" name="Fox Kitten">
    Fox Kitten has used Amazon Web Services to host C2.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has used GitHub repositories for downloaders which will be obtained by the group's .NET executable on the compromised system.
   </Example>
   <Example id="S0561" name="GuLoader">
    GuLoader has the ability to download malware from Google Drive.
   </Example>
   <Example id="S0601" name="Hildegard">
    Hildegard has downloaded scripts from GitHub.
   </Example>
   <Example id="G0100" name="Inception">
    Inception has incorporated at least five different cloud service providers into their C2 infrastructure including CloudMe.
   </Example>
   <Example id="G0140" name="LazyScripter">
    LazyScripter has used GitHub to host its payloads to operate spam campaigns.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has used DropBox URLs to deliver variants of PlugX.
   </Example>
   <Example id="S0198" name="NETWIRE">
    NETWIRE has used web services including Paste.ee to host payloads.
   </Example>
   <Example id="S0508" name="Ngrok">
    Ngrok has been used by threat actors to proxy C2 connections to ngrok service subdomains.
   </Example>
   <Example id="C0005" name="Operation Spalax">
    During Operation Spalax, the threat actors used OneDrive and MediaFire to host payloads.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has used Pastebin, Gitee, and GitLab for Command and Control.
   </Example>
   <Example id="S0546" name="SharpStage">
    SharpStage has used a legitimate web service for evading detection.
   </Example>
   <Example id="S0589" name="Sibot">
    Sibot has used a legitimate compromised website to download DLLs to the victim's machine.
   </Example>
   <Example id="S0649" name="SMOKEDHAM">
    SMOKEDHAM has used Google Drive and Dropbox to host files downloaded by victims via malicious links.
   </Example>
   <Example id="G0139" name="TeamTNT">
    TeamTNT has leveraged iplogger.org to send collected data back to C2.
   </Example>
   <Example id="G0010" name="Turla">
    Turla has used legitimate web services including Pastebin, Dropbox, and GitHub for C2 communications.
   </Example>
   <Example id="S0689" name="WhisperGate">
    WhisperGate can download additional payloads hosted on a Discord channel.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    Web proxies can be used to enforce external network communication policy that prevents use of unauthorized external services.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1102.001" name="Web Service: Dead Drop Resolver">
  Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0096" name="APT41">
    APT41 used legitimate websites for C2 through dead drop resolvers (DDR), including GitHub, Pastebin, and Microsoft TechNet.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth can store C2 information on cloud hosting services such as AWS and CloudFlare and websites like YouTube and Facebook.
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS collects C2 information via a dead drop resolver.
   </Example>
   <Example id="S0069" name="BLACKCOFFEE">
    BLACKCOFFEE uses Microsoft’s TechNet Web portal to obtain a dead drop resolver containing an encoded tag with the IP address of a command and control server.
   </Example>
   <Example id="G0060" name="BRONZE BUTLER">
    BRONZE BUTLER's MSGET downloader uses a dead drop resolver to access malicious payloads.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower can retrieve C2 domain information from actor-controlled S3 buckets.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can obtain C2 information from Google Docs.
   </Example>
   <Example id="S0528" name="Javali">
    Javali can read C2 information from Google Documents and YouTube.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has used YouTube to store and hide C&amp;C server domains.
   </Example>
   <Example id="S0051" name="MiniDuke">
    Some MiniDuke components use Twitter to initially obtain the address of a C2 server or as a backup if no hard-coded C2 server responds.
   </Example>
   <Example id="G0040" name="Patchwork">
    Patchwork hides base64-encoded and encrypted C2 server locations in comments on legitimate websites.
   </Example>
   <Example id="S0013" name="PlugX">
    PlugX uses Pastebin to store C2 addresses.
   </Example>
   <Example id="S0518" name="PolyglotDuke">
    PolyglotDuke can use Twitter, Reddit, Imgur and other websites to get a C2 URL.
   </Example>
   <Example id="G0106" name="Rocke">
    Rocke has used Pastebin to check the version of beaconing malware and redirect to another Pastebin hosting updated malware.
   </Example>
   <Example id="S0148" name="RTM">
    RTM has used an RSS feed on Livejournal to update a list of encrypted C2 server names. RTM has also hidden Pony C2 server IP addresses within transactions on the Bitcoin and Namecoin blockchain.
   </Example>
   <Example id="G0048" name="RTM">
    RTM has used an RSS feed on Livejournal to update a list of encrypted C2 server names.
   </Example>
   <Example id="S0341" name="Xbash">
    Xbash can obtain a webpage hosted on Pastebin to update its C2 domain list.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    Web proxies can be used to enforce external network communication policy that prevents use of unauthorized external services.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1102.002" name="Web Service: Bidirectional Communication">
  Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="G0005" name="APT12">
    APT12 has used blogs and WordPress for C2 infrastructure.
   </Example>
   <Example id="G0007" name="APT28">
    APT28 has used Google Drive for C2.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 has used social media platforms to hide communications to C2 servers.
   </Example>
   <Example id="G0067" name="APT37">
    APT37 leverages social networking sites and cloud platforms (AOL, Twitter, Yandex, Mediafire, pCloud, Dropbox, and Box) for C2.
   </Example>
   <Example id="G0087" name="APT39">
    APT39 has communicated with C2 through files uploaded to and downloaded from DropBox.
   </Example>
   <Example id="S0128" name="BADNEWS">
    BADNEWS can use multiple C2 channels, including RSS feeds, Github, forums, and blogs.
   </Example>
   <Example id="S0069" name="BLACKCOFFEE">
    BLACKCOFFEE has also obfuscated its C2 traffic as normal traffic to sites such as Github.
   </Example>
   <Example id="S0657" name="BLUELIGHT">
    BLUELIGHT can use different cloud providers for its C2.
   </Example>
   <Example id="S0651" name="BoxCaon">
    BoxCaon has used DropBox for C2 communications.
   </Example>
   <Example id="S0025" name="CALENDAR">
    The CALENDAR malware communicates through the use of events in Google Calendar.
   </Example>
   <Example id="G0008" name="Carbanak">
    Carbanak has used a VBScript named "ggldr" that uses Google Apps Script, Sheets, and Forms services for C2.
   </Example>
   <Example id="S0660" name="Clambling">
    Clambling can use Dropbox to download malicious payloads, send commands, and receive information.
   </Example>
   <Example id="S0054" name="CloudDuke">
    One variant of CloudDuke uses a Microsoft OneDrive account to exchange commands and stolen data with its operators.
   </Example>
   <Example id="S0244" name="Comnie">
    Comnie uses blogs and third-party sites (GitHub, tumbler, and BlogSpot) to avoid DNS-based blocking of their communication to the command and control server.
   </Example>
   <Example id="S0126" name="ComRAT">
    ComRAT has the ability to use the Gmail web UI to receive commands and exfiltrate information.
   </Example>
   <Example id="S0046" name="CozyCar">
    CozyCar uses Twitter as a backup C2 channel to Twitter accounts specified in its configuration file.
   </Example>
   <Example id="S1023" name="CreepyDrive">
    CreepyDrive can use OneDrive for C2.
   </Example>
   <Example id="S0538" name="Crutch">
    Crutch can use Dropbox to receive commands and upload stolen data.
   </Example>
   <Example id="S0213" name="DOGCALL">
    DOGCALL is capable of leveraging cloud storage APIs such as Cloud, Box, Dropbox, and Yandex for C2.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can use Dropbox and GitHub for C2.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 used legitimate services like Google Docs, Google Scripts, and Pastebin for C2.
   </Example>
   <Example id="S0026" name="GLOOXMAIL">
    GLOOXMAIL communicates to servers operated by Google using the Jabber/XMPP protocol.
   </Example>
   <Example id="S0531" name="Grandoreiro">
    Grandoreiro can utilize web services including Google sites to send and receive C2 data.
   </Example>
   <Example id="G1001" name="HEXANE">
    HEXANE has used cloud services, including OneDrive, for C2.
   </Example>
   <Example id="S0215" name="KARAE">
    KARAE can use public cloud-based storage providers for command and control.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar has used compromised WordPress blogs as C2 servers.
   </Example>
   <Example id="G0094" name="Kimsuky">
    Kimsuky has used Blogspot pages for C2.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used GitHub as C2, pulling hosted image payloads then committing command execution output to files in specific directories.
   </Example>
   <Example id="S0042" name="LOWBALL">
    LOWBALL uses the Dropbox cloud storage service for command and control.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound malware can use a SOAP Web service to communicate with its C2 server.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used web services including OneHub to distribute remote access tools.
   </Example>
   <Example id="S0229" name="Orz">
    Orz has used Technet and Pastebin web pages for command and control.
   </Example>
   <Example id="G1005" name="POLONIUM">
    POLONIUM has used OneDrive and DropBox for C2.
   </Example>
   <Example id="S0216" name="POORAIM">
    POORAIM has used AOL Instant Messenger for C2.
   </Example>
   <Example id="S0393" name="PowerStallion">
    PowerStallion uses Microsoft OneDrive as a C2 server via a network drive mapped with net use.
   </Example>
   <Example id="S0511" name="RegDuke">
    RegDuke can use Dropbox as its C2 server.
   </Example>
   <Example id="S0379" name="Revenge RAT">
    Revenge RAT used blogpost.com as its primary command and control server during a campaign.
   </Example>
   <Example id="S0270" name="RogueRobin">
    RogueRobin has used Google Drive as a Command and Control channel.
   </Example>
   <Example id="S0240" name="ROKRAT">
    ROKRAT has used legitimate social networking sites and cloud platforms (including but not limited to Twitter, Yandex, Dropbox, and Mediafire) for C2 communications.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used the Telegram Bot API from Telegram Messenger to send and receive commands to its Python backdoor. Sandworm Team also used legitimate M.E.Doc software update check requests for sending and receiving commands and hosted malicious payloads on putdrive.com.
   </Example>
   <Example id="S0218" name="SLOWDRIFT">
    SLOWDRIFT uses cloud based services for C2.
   </Example>
   <Example id="S1035" name="Small Sieve">
    Small Sieve has the ability to use the Telegram Bot API from Telegram Messenger to send and receive messages.
   </Example>
   <Example id="G0010" name="Turla">
    A Turla JavaScript backdoor has used Google Apps Script as its C2 server.
   </Example>
   <Example id="S0333" name="UBoatRAT">
    UBoatRAT has used GitHub and a public blog service in Hong Kong for C2 communications.
   </Example>
   <Example id="S0248" name="yty">
    yty communicates to the C2 server by retrieving a Google Doc.
   </Example>
   <Example id="G0128" name="ZIRCONIUM">
    ZIRCONIUM has used Dropbox for C2 allowing upload and download of files as well as execution of arbitrary commands.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    Web proxies can be used to enforce external network communication policy that prevents use of unauthorized external services.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1102.003" name="Web Service: One-Way Communication">
  Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.
  <Tactic>
   Command and Control
  </Tactic>
  <Platforms>
   Linux, Windows, macOS
  </Platforms>
  <Permissions_Required>
   User
  </Permissions_Required>
  <Examples>
   <Example id="S0568" name="EVILNUM">
    EVILNUM has used a one-way communication method via GitLab and Digital Point to perform C2.
   </Example>
   <Example id="S0037" name="HAMMERTOSS">
    The "tDiscoverer" variant of HAMMERTOSS establishes a C2 channel by downloading resources from Web services like Twitter and GitHub. HAMMERTOSS binaries contain an algorithm that generates a different Twitter handle for the malware to check for instructions every day.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has received C2 instructions from user profiles created on legitimate websites such as Github and TechNet.
   </Example>
   <Example id="S0455" name="Metamorfo">
    Metamorfo has downloaded a zip file for execution on the system.
   </Example>
   <Example id="S0052" name="OnionDuke">
    OnionDuke uses Twitter as a backup C2.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1031" name="Network Intrusion Prevention">
    Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.
   </Mitigation>
   <Mitigation id="M1021" name="Restrict Web-Based Content">
    Web proxies can be used to enforce external network communication policy that prevents use of unauthorized external services.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation | Network Traffic Content | Network Traffic Flow
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1047" name="Windows Management Instrumentation">
  Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is an administration feature that provides a uniform environment to access Windows system components. The WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model (DCOM) and Windows Remote Management (WinRM).
  <Tactic>
   Execution
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <Supports_Remote>
   Yes
  </Supports_Remote>
  <Examples>
   <Example id="S1028" name="Action RAT">
    Action RAT can use WMI to gather AV products installed on an infected host.
   </Example>
   <Example id="S0331" name="Agent Tesla">
    Agent Tesla has used wmi queries to gather information from the system.
   </Example>
   <Example id="G0016" name="APT29">
    APT29 used WMI to steal credentials and execute backdoors at a future time.
   </Example>
   <Example id="G0050" name="APT32">
    APT32 used WMI to deploy their tools on remote machines and to gather information about the Outlook process.
   </Example>
   <Example id="G0096" name="APT41">
    APT41 used WMI in several ways, including for execution of commands via WMIEXEC as well as for persistence via PowerSploit.
   </Example>
   <Example id="S0373" name="Astaroth">
    Astaroth uses WMIC to execute payloads.
   </Example>
   <Example id="S0640" name="Avaddon">
    Avaddon uses wmic.exe to delete shadow copies.
   </Example>
   <Example id="S0534" name="Bazar">
    Bazar can execute a WMI query to gather information about the installed antivirus engine.
   </Example>
   <Example id="S0089" name="BlackEnergy">
    A BlackEnergy 2 plug-in uses WMI to gather victim host details.
   </Example>
   <Example id="G0108" name="Blue Mockingbird">
    Blue Mockingbird has used wmic.exe to set environment variables.
   </Example>
   <Example id="S1039" name="Bumblebee">
    Bumblebee can use WMI to gather system information and to spawn processes for code injection.
   </Example>
   <Example id="C0015" name="C0015">
    During C0015, the threat actors used wmic and rundll32 to load Cobalt Strike onto a target host.
   </Example>
   <Example id="S0674" name="CharmPower">
    CharmPower can use wmic to gather information from a system.
   </Example>
   <Example id="G0114" name="Chimera">
    Chimera has used WMIC to execute remote commands.
   </Example>
   <Example id="S0154" name="Cobalt Strike">
    Cobalt Strike can use WMI to deliver a payload to a remote host.
   </Example>
   <Example id="S0488" name="CrackMapExec">
    CrackMapExec can execute remote commands using Windows Management Instrumentation.
   </Example>
   <Example id="S0673" name="DarkWatchman">
    DarkWatchman can use WMI to execute commands.
   </Example>
   <Example id="S0616" name="DEATHRANSOM">
    DEATHRANSOM has the ability to use WMI to delete volume shadow copies.
   </Example>
   <Example id="G0009" name="Deep Panda">
    The Deep Panda group is known to utilize WMI for lateral movement.
   </Example>
   <Example id="S0062" name="DustySky">
    The DustySky dropper uses Windows Management Instrumentation to extract information about the operating system and whether an anti-virus is active.
   </Example>
   <Example id="G1006" name="Earth Lusca">
    Earth Lusca used a VBA script to execute WMI.
   </Example>
   <Example id="S0605" name="EKANS">
    EKANS can use Windows Mangement Instrumentation (WMI) calls to execute operations.
   </Example>
   <Example id="S0367" name="Emotet">
    Emotet has used WMI to execute powershell.exe.
   </Example>
   <Example id="S0363" name="Empire">
    Empire can use WMI to deliver a payload to a remote host.
   </Example>
   <Example id="S0396" name="EvilBunny">
    EvilBunny has used WMI to gather information about the system.
   </Example>
   <Example id="S0568" name="EVILNUM">
    EVILNUM has used the Windows Management Instrumentation (WMI) tool to enumerate infected machines.
   </Example>
   <Example id="S0267" name="FELIXROOT">
    FELIXROOT uses WMI to query the Windows Registry.
   </Example>
   <Example id="G0037" name="FIN6">
    FIN6 has used WMI to automate the remote execution of PowerShell scripts.
   </Example>
   <Example id="G0046" name="FIN7">
    FIN7 has used WMI to install malware on targeted systems.
   </Example>
   <Example id="G0061" name="FIN8">
    FIN8's malicious spearphishing payloads use WMI to launch malware and spawn cmd.exe execution. FIN8 has also used WMIC for lateral movement as well as during and post compromise cleanup activities.
   </Example>
   <Example id="S0618" name="FIVEHANDS">
    FIVEHANDS can use WMI to delete files on a  target machine.
   </Example>
   <Example id="S0381" name="FlawedAmmyy">
    FlawedAmmyy leverages WMI to enumerate anti-virus on the victim.
   </Example>
   <Example id="C0001" name="Frankenstein">
    During Frankenstein, the threat actors used WMI queries to check if various security applications were running as well as to determine the operating system version.
   </Example>
   <Example id="S1044" name="FunnyDream">
    FunnyDream can use WMI to open a Windows command shell on a remote machine.
   </Example>
   <Example id="C0007" name="FunnyDream">
    During FunnyDream, the threat actors used wmiexec.vbs to run remote commands.
   </Example>
   <Example id="G0093" name="GALLIUM">
    GALLIUM used WMI for execution to assist in lateral movement as well as for installing tools across multiple assets.
   </Example>
   <Example id="G0047" name="Gamaredon Group">
    Gamaredon Group has used WMI to execute scripts used for discovery.
   </Example>
   <Example id="S0237" name="GravityRAT">
    GravityRAT collects various information via WMI requests, including CPU information in the Win32_Processor entry (Processor ID, Name, Manufacturer and the clock speed).
   </Example>
   <Example id="S0151" name="HALFBAKED">
    HALFBAKED can use WMI queries to gather system information.
   </Example>
   <Example id="S0617" name="HELLOKITTY">
    HELLOKITTY can use WMI to delete volume shadow copies.
   </Example>
   <Example id="S0698" name="HermeticWizard">
    HermeticWizard can use WMI to create a new process on a remote machine via C:\windows\system32\cmd.exe /c start C:\windows\system32\\regsvr32.exe /s /iC:\windows\&lt;filename&gt;.dll.
   </Example>
   <Example id="S0376" name="HOPLIGHT">
    HOPLIGHT has used WMI to recompile the Managed Object Format (MOF) files in the WMI repository.
   </Example>
   <Example id="S0483" name="IcedID">
    IcedID has used WMI to execute binaries.
   </Example>
   <Example id="S0357" name="Impacket">
    Impacket's wmiexec module can be used to execute commands through WMI.
   </Example>
   <Example id="G0119" name="Indrik Spider">
    Indrik Spider has used WMIC to execute commands on remote computers.
   </Example>
   <Example id="S0283" name="jRAT">
    jRAT uses WMIC to identify anti-virus products installed on the victim’s machine and to obtain firewall details.
   </Example>
   <Example id="S0265" name="Kazuar">
    Kazuar obtains a list of running processes through WMI querying.
   </Example>
   <Example id="S0250" name="Koadic">
    Koadic can use WMI to execute commands.
   </Example>
   <Example id="S0156" name="KOMPROGO">
    KOMPROGO is capable of running WMI queries.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used WMIC for discovery as well as to execute payloads for persistence and lateral movement.
   </Example>
   <Example id="G0065" name="Leviathan">
    Leviathan has used WMI for execution.
   </Example>
   <Example id="S0532" name="Lucifer">
    Lucifer can use WMI to log into remote machines for propagation.
   </Example>
   <Example id="G0059" name="Magic Hound">
    Magic Hound has used a tool to run cmd /c wmic computersystem get domain for discovery.
   </Example>
   <Example id="S0449" name="Maze">
    Maze has used WMI to attempt to delete the shadow volumes on a machine, and to connect a virtual machine to the network domain of the victim organization's network.
   </Example>
   <Example id="G0045" name="menuPass">
    menuPass has used a modified version of pentesting script wmiexec.vbs, which logs into a remote machine using WMI.
   </Example>
   <Example id="S0688" name="Meteor">
    Meteor can use wmic.exe as part of its effort to delete shadow copies.
   </Example>
   <Example id="S0339" name="Micropsia">
    Micropsia searches for anti-virus software and firewall products installed on the victim’s machine using WMI.
   </Example>
   <Example id="S0553" name="MoleNet">
    MoleNet can perform WMI commands on the system.
   </Example>
   <Example id="S0256" name="Mosquito">
    Mosquito's installer uses WMI to search for antivirus display names.
   </Example>
   <Example id="G0069" name="MuddyWater">
    MuddyWater has used malware that leveraged WMI for execution and querying host information.
   </Example>
   <Example id="G0129" name="Mustang Panda">
    Mustang Panda has executed PowerShell scripts via WMI.
   </Example>
   <Example id="G0019" name="Naikon">
    Naikon has used WMIC.exe for lateral movement.
   </Example>
   <Example id="S0457" name="Netwalker">
    Netwalker can use WMI to delete Shadow Volumes.
   </Example>
   <Example id="S0368" name="NotPetya">
    NotPetya can use wmic to help propagate itself across a network.
   </Example>
   <Example id="S0340" name="Octopus">
    Octopus has used wmic.exe for local discovery information.
   </Example>
   <Example id="G0049" name="OilRig">
    OilRig has used WMI for execution.
   </Example>
   <Example id="S0365" name="Olympic Destroyer">
    Olympic Destroyer uses WMI to help propagate itself across a network.
   </Example>
   <Example id="S0264" name="OopsIE">
    OopsIE uses WMI to perform discovery techniques.
   </Example>
   <Example id="C0014" name="Operation Wocao">
    During Operation Wocao, threat actors has used WMI to execute commands.
   </Example>
   <Example id="S0378" name="PoshC2">
    PoshC2 has a number of modules that use WMI to execute tasks.
   </Example>
   <Example id="S0194" name="PowerSploit">
    PowerSploit's Invoke-WmiCommand CodeExecution module uses WMI to execute and retrieve the output from a PowerShell payload.
   </Example>
   <Example id="S0223" name="POWERSTATS">
    POWERSTATS can use WMI queries to retrieve data from compromised hosts.
   </Example>
   <Example id="S0184" name="POWRUNER">
    POWRUNER may use WMI when collecting information about a victim.
   </Example>
   <Example id="S0654" name="ProLock">
    ProLock can use WMIC to execute scripts on targeted hosts.
   </Example>
   <Example id="S1032" name="PyDCrypt">
    PyDCrypt has attempted to execute with WMIC.
   </Example>
   <Example id="S0650" name="QakBot">
    QakBot can execute WMI queries to gather information.
   </Example>
   <Example id="S0241" name="RATANKBA">
    RATANKBA uses WMI to perform process monitoring.
   </Example>
   <Example id="S0375" name="Remexi">
    Remexi executes received commands with wmic.exe (for WMI commands).
   </Example>
   <Example id="S0496" name="REvil">
    REvil can use WMI to monitor for and kill specific processes listed in its configuration file.
   </Example>
   <Example id="S0270" name="RogueRobin">
    RogueRobin uses various WMI queries to check if the sample is running in a sandbox.
   </Example>
   <Example id="G0034" name="Sandworm Team">
    Sandworm Team has used VBScript to run WMI queries.
   </Example>
   <Example id="S0546" name="SharpStage">
    SharpStage can use WMI for execution.
   </Example>
   <Example id="S0589" name="Sibot">
    Sibot has used WMI to discover network connections and configurations. Sibot has also used the Win32_Process class to execute a malicious DLL.
   </Example>
   <Example id="S0692" name="SILENTTRINITY">
    SILENTTRINITY can use WMI for lateral movement.
   </Example>
   <Example id="G0038" name="Stealth Falcon">
    Stealth Falcon malware gathers system information via Windows Management Instrumentation (WMI).
   </Example>
   <Example id="S0380" name="StoneDrill">
    StoneDrill has used the WMI command-line (WMIC) utility to run tasks.
   </Example>
   <Example id="S0603" name="Stuxnet">
    Stuxnet used WMI with an explorer.exe token to execute on a remote share.
   </Example>
   <Example id="S0559" name="SUNBURST">
    SUNBURST used the WMI query Select * From Win32_SystemDriver to retrieve a driver listing.
   </Example>
   <Example id="S0663" name="SysUpdate">
    SysUpdate can use WMI for execution on a compromised host.
   </Example>
   <Example id="G0027" name="Threat Group-3390">
    A Threat Group-3390 tool can use WMI to execute a binary.
   </Example>
   <Example id="S0386" name="Ursnif">
    Ursnif droppers have used WMI classes to execute PowerShell commands.
   </Example>
   <Example id="S0476" name="Valak">
    Valak can use wmic process call create in a scheduled task to launch plugins and for execution.
   </Example>
   <Example id="S0366" name="WannaCry">
    WannaCry utilizes wmic to delete shadow copies.
   </Example>
   <Example id="G0112" name="Windshift">
    Windshift has used WMI to collect information about target machines.
   </Example>
   <Example id="G0102" name="Wizard Spider">
    Wizard Spider has used WMI and LDAP queries for network discovery and to move laterally.
   </Example>
   <Example id="S0251" name="Zebrocy">
    One variant of Zebrocy uses WMI queries to gather information.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1040" name="Behavior Prevention on Endpoint">
    On Windows 10, enable Attack Surface Reduction (ASR) rules to block processes created by WMI commands from running. Note: many legitimate tools and applications utilize WMI for command execution.
   </Mitigation>
   <Mitigation id="M1038" name="Execution Prevention">
    Use application control configured to block execution of wmic.exe if it is not required for a given system or network to prevent potential misuse by adversaries. For example, in Windows 10 and Windows Server 2016 and above, Windows Defender Application Control (WDAC) policy rules may be applied to block the wmic.exe application and to prevent abuse.
   </Mitigation>
   <Mitigation id="M1026" name="Privileged Account Management">
    Prevent credential overlap across systems of administrator and privileged accounts.
   </Mitigation>
   <Mitigation id="M1018" name="User Account Management">
    By default, only administrators are allowed to connect remotely using WMI. Restrict other users who are allowed to connect, or disallow all users to connect remotely to WMI.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0017" name="Command">
    Command Execution
   </Detection>
   <Detection id="DS0029" name="Network Traffic">
    Network Connection Creation
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
 <Technique id="T1220" name="XSL Script Processing">
  Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages.
  <Tactic>
   Defense Evasion
  </Tactic>
  <Platforms>
   Windows
  </Platforms>
  <System_Requirements>
   Microsoft Core XML Services (MSXML) or access to wmic.exe
  </System_Requirements>
  <Defense_Bypassed>
   Anti-virus, Application Control, Digital Certificate Validation
  </Defense_Bypassed>
  <Examples>
   <Example id="S0373" name="Astaroth">
    Astaroth executes embedded JScript or VBScript in an XSL stylesheet located on a remote domain.
   </Example>
   <Example id="G0080" name="Cobalt Group">
    Cobalt Group used msxsl.exe to bypass AppLocker and to invoke Jscript code from an XSL file.
   </Example>
   <Example id="G0126" name="Higaisa">
    Higaisa used an XSL file to run VBScript code.
   </Example>
   <Example id="G0032" name="Lazarus Group">
    Lazarus Group has used WMIC to execute a remote XSL script to establish persistence.
   </Example>
  </Examples>
  <Mitigations>
   <Mitigation id="M1038" name="Execution Prevention">
    If msxsl.exe is unnecessary, then block its execution to prevent abuse by adversaries.
   </Mitigation>
  </Mitigations>
  <Detections>
   <Detection id="DS0011" name="Module">
    Module Load
   </Detection>
   <Detection id="DS0009" name="Process">
    Process Creation
   </Detection>
  </Detections>
 </Technique>
</Techniques>